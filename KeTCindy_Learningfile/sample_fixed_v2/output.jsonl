{"filename": "bowdotfill_triangle_incircle.md", "question": "三角形とその内接円に加えて、各辺から内接円に接する弓型部分を塗り分けるにはどうすれば良いですか？", "code": "Ketinit();\n\nAddax(0);\n\nListplot(\"1\",[A,B,C,A]);      // 三角形ABCの描画\nCircledata(\"1\",[D,E]);        // 内接円（中心D, 半径DE）\n\n// 各辺に対する弓型Bowdataの設定\nBowdata(\"1\",[B,A],[1,0.5,\"Expr=σ\",\"da\"]);\nBowdata(\"2\",[C,B],[1,0.5,\"Expr=β\",\"da\"]);\nBowdata(\"3\",[A,C],[1,0.5,\"Expr=α\",\"da\"]);\n\nCh=[];\n\n// 条件付きで塗りつぶし\nif(contains(Ch,1),\n  Dotfilldata(\"1\",[\"cr1\"],[\"\"]);\n);\n\nif(contains(Ch,2),\n  Dotfilldata(\"2\",[\"oi\"],[\"cr1\"],[\"sg1\"]);\n);\n\nPointdata(\"1\",D,[\"size=4\"]);  // 内心の表示\nLetter([A,\"sw\",\"A\"],B,\"ne\",\"B\",C,\"se\",\"C\",D,\"se\",\"I\");  // ラベル表示\n\nWindispg();", "explanation": "このコードは、三角形の内接円と、その接点を使って描かれる弓型領域（Bowdata）を利用し、構造的な補助図として視覚的に理解を促す構成です。\n\n* `Bowdata`：辺の上に半円状の構造を作る。内接円との接点と辺の端点を指定\n* `Dotfilldata`：指定された図形領域を条件によって塗りつぶし\n* `contains(Ch,...)` によって表示条件を柔軟に切り替え可能\n* `Expr=α` 等で弧に文字を表示可能（ギリシャ文字も可）\n\nこの手法は、幾何的性質の視覚化、特に接円構造や角の成り立ちの補足に有効です。\n\n**ラベル（タグ）**\n`Listplot`, `Circledata`, `Bowdata`, `Dotfilldata`, `Pointdata`, `Letter`, `incircle`, `triangle`, `arc_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "bowhatch_triangle_incircle.md", "question": "内接円と三角形の間の弓型領域を斜線でハッチングするにはどうすればいいですか？", "code": "Ketinit();\n\nAddax(0);\n\nListplot(\"1\",[A,B,C,A]);       // 三角形の描画\nCircledata(\"1\",[D,E]);         // 内接円の描画\n\n// 弓型の描画（各辺に対応）\nBowdata(\"1\",[B,A],[1,0.5,\"Expr=σ\",\"da\"]);\nBowdata(\"2\",[C,B],[1,0.5,\"Expr=β\",\"da\"]);\nBowdata(\"3\",[A,C],[1,0.5,\"Expr=α\",\"da\"]);\n\nPointdata(\"1\",D,[\"size=4\"]);   // 内心の強調表示\nLetter([A,\"sw\",\"A\"],B,\"ne\",\"B\",C,\"se\",\"C\",D,\"se\",\"I\");  // ラベル\n\nCh=[1];\n\n// 条件付きハッチング（点未選択時）\nif(contains(Ch,1),\n  if(!Ptselected(),\n    Hatchdata(\"1\",[\"cr1\"],[\"dr,0.7\"]);\n  );\n);\n\nif(contains(Ch,2),\n  if(!Ptselected(),\n    Hatchdata(\"2\",[\"oi\"],[\"cr1\",\"sg1\"],[\"dr,0.7\",\"\"]);\n  );\n);\n\nWindispg();", "explanation": "このスクリプトは、三角形とその内接円、および接円との接点に基づく弓型領域を斜線で塗り分ける例です。\n\n* `Bowdata`：三角形の辺上に半弧を描画し、視覚的な補助とします。\n* `Hatchdata`：指定領域（例：`cr1`）を斜線（引数 `\"dr,0.7\"`）でハッチングします。\n* `Ptselected()` により、点選択がなければ自動でハッチングが適用されます。\n* 条件付き表示により、柔軟な視覚制御が可能です。\n\nこの技法は、内接円と接線の関係、三角形内部構造の強調など、幾何教材として非常に有効です。\n\n**ラベル（タグ）**\n`Bowdata`, `Hatchdata`, `Circledata`, `Listplot`, `Pointdata`, `Letter`, `incircle`, `triangle`, `hatching`, `arc_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "cycloid_generation.md", "question": "KeTCindyでサイクロイド曲線を生成するにはどうすればいいですか？", "code": "Ketinit();\n\nPutpoint(\"A\",[0,0],A.xy);\nPutpoint(\"C\",[0,1]);\n\nCircledata(\"1\",[C,C+[1,0]],[\"nodisp\"]);\nPointdata(\"1\",[A],[\"nodisp\"]);\nAddgraph(\"0\",[\"pt1\",\"cr1\"],[\"nodisp\"],[[\"Color=red\",\"Size=3\"],[\"dr,0.5\"]]);\n\nnn=36;\nforall(1..nn,\n  t=2*pi/nn*#;\n  Rotatedataadd(text(#)+\"r\",\"ad0\", -t,[ \"nodisp\", C,\"\"]);\n  Translatedataadd(text(#)+\"t\",\"ad\"+text(#)+\"r\",[t,0],[]);\n);\n\nWindispg();", "explanation": "このコードは、円の回転によって生成される**サイクロイド曲線**を描く一連の処理です。\n\n* `Putpoint`：基準点Aと円の接点Cを設定\n* `Circledata`：回転する円のベース\n* `Addgraph`：接点を赤点で示し、円周上の点追跡を準備\n* `forall(1..nn)`：`nn`等分して、円を回転・平行移動\n* `Rotatedataadd`, `Translatedataadd`：円の回転とx方向への平行移動を繰り返すことで、円の転がり運動を模倣\n\nこれにより、点Cの軌跡として美しいサイクロイドカーブが得られます。\n\n**ラベル（タグ）**\n`Circledata`, `Putpoint`, `Addgraph`, `Rotatedataadd`, `Translatedataadd`, `cycloid`, `curve`, `animation`, `2D`, `geometry`, `rolling_motion`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "epitrochoid_generation.md", "question": "KeTCindyでエピトロコイド曲線を描くにはどうすればいいですか？", "code": "Ketinit();\n\nAddax(0);\n\nPutpoint(\"A\",[0,0],A.xy);\nPutpoint(\"C\",[0,1]);\n\nr=3;\n\n// 円の中心と接点を定義\nPutpoint(\"C\",[0,0]);\nPutpoint(\"B\",[C+[r+1,0]]);\nPutpoint(\"A\",B+[1,0],A.xy);\n\nCircledata(\"O\",[C,r]);          // 大きな円\nCircledata(\"1\",[B,1],[\"nodisp\"]);  // 回転する小円\nPointdata(\"1\",[A],[\"nodisp\"]);\nAddgraph(\"O\",[\"pt1\",\"cr1\"],[\"\"], [[\"Size=5\",\"Color=red\"],[\"dr,0.5\"]]);\n\nnn=36;\nforall(1..nn,\n  t=2*pi/nn*#;\n  tmp=r*#(cos(t),sin(t));  // 小円中心の軌道\n  nst=text(#);\n  Rotatedataadd(nst+\"r\",\"ad0\",radx+t,[B,\"nodisp\"]);\n  Translatedataadd(nst+\"t\",\"ad\"+nst+\"r\",tmp-[rad,0],[\"nodisp\"]);\n  Rotatedataadd(nst,\"ad\"+nst+\"t\",t,[tmp]);\n);\n\nWindispg();", "explanation": "このコードは、\\*\\*エピトロコイド曲線（外円に内接する小円上の点の軌跡）\\*\\*を構築します。\n\n* `Circledata(\"O\",[C,r])`：固定された大円を定義します。\n* `Rotatedataadd`, `Translatedataadd`：回転と並進により、小円の軌道と追跡点を生成\n* `Addgraph`：点Aの軌跡を可視化\n* `forall`ループ：時間的ステップでサンプル点を多数配置\n\nこの処理により、歯車運動や幾何学的アートとして知られるエピトロコイドが描画されます。\n\n**ラベル（タグ）**\n`Circledata`, `Putpoint`, `Rotatedataadd`, `Translatedataadd`, `epitrochoid`, `curve`, `parametric`, `2D`, `geometry`, `motion`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "generate_pdf_triangle_circle.md", "question": "KeTCindyで三点を通る円と三角形を描いて、PDF出力用の図を作りたいのですが、どうすれば良いですか？", "code": "Ketinit();\nSetparent(Cdyname()+\"p\");\n\nAddax(0);  // 座標軸の表示\nListplot(\"1\",[A,B,C,A],[]);  // 三角形の描画\nCircledata(\"2\",[A,B,C]);     // ABCを通る円の描画\nLetter([A,\"sw\",\"A\"],B,\"se\",\"B\",C,\"n2\",\"C\");  // 頂点ラベル\n\nFigpdf();  // PDF出力用の設定\nWindispg();", "explanation": "このコードは、三点 A・B・C を通る円と三角形 ABC を描き、PDFとして正しいサイズで出力できるように設定したものです。\n\n* `Setparent(Cdyname()+\"p\")`：PDFサイズの親ファイルを指定（ボタン「Parent」を押して設定）\n* `Figpdf()`：PDF用描画の開始。`Windispg()`の前に置くことで正確なサイズでのPDF生成を可能にします\n* `Circledata`, `Listplot`：それぞれ円と三角形の描画\n* `Letter`：各点のラベル表示（位置も指定）\n\n**ラベル（タグ）**\n`Setparent`, `Figpdf`, `Addax`, `Listplot`, `Circledata`, `Letter`, `PDF_output`, `geometry`, `triangle`, `circle`, `2D`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "hyperbolahatch.md", "question": "KeTCindyで双曲線を描き、その開いた領域を斜線でハッチングするにはどうすればよいですか？", "code": "Ketinit();\n\nHyperbolaplot(\"1\",[A,B,C],\"[-2,2]\");\n\nCh=[1];\n\nif(contains(Ch,1),\n  Hatchdata(\"1\",[\"ii1\"],[[\"r1hyp1\",\"w\"],[\"r1hyp2\",\"e\"]],[\"Max=100\"]);\n);\n\nif(contains(Ch,2),\n  Hatchdata(\"1\",[\"ii1\"],[[\"r1hyp1\",\"w\"],[\"r1hyp2\",\"e\"]],[\"Max=100\"]);\n);\n\nWindispg();", "explanation": "このコードは、KeTCindyで双曲線の両腕を描き、その間の領域をハッチング（斜線塗り）する例です。\n\n* `Hyperbolaplot`：指定した3点に基づいて双曲線を描画します。\n* `\"[-2,2]\"`：描画するx軸方向の範囲を指定。\n* `Hatchdata`：領域を構成する右腕と左腕（`r1hyp1`, `r1hyp2`）の間を斜線で塗りつぶします。\n* `\"Max=100\"`：ハッチの密度（ライン数）を指定。\n\n`contains(Ch,1)` や `Ptselected()` を使うことで、条件に応じた表示制御も可能です。\n\n**ラベル（タグ）**\n`Hyperbolaplot`, `Hatchdata`, `conic`, `hyperbola`, `hatching`, `region_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "hypotrochoid_generation.md", "question": "KeTCindyで内接円を使ってハイポトロコイド（内トロコイド）曲線を描くにはどうすればよいですか？", "code": "Ketinit();\n\nrad=5;\nPutpoint(\"C\",[0,0]);\nPutpoint(\"B\",C+[rad-1,0]);\nPutpoint(\"A\",B+[1,0],A.xy);\n\nCircledata(\"O\",[C,C+[rad,0]]);\nCircledata(\"1\",[B,B+[1,0]],[\"nodisp\"]);\nPointdata(\"1\",[A]);\nAddgraph(\"O\",[\"pt1\",\"cr1\"],[],[[\"Size=3\",\"Color=red\"],[\"dr,0.5\"]]);\n\nnn=36;\nforall(1..nn,\n  t=2*pi/nn*#;\n  tmp=rad*(cos(t),sin(t));\n  nst=text(#);\n  Rotatedataadd(nst+\"r\",\"ad0\",-rad*t,[B,\"nodisp\"]);\n  Translatedataadd(nst+\"t\",\"ad\"+nst+\"r\",tmp-[rad,0],[\"nodisp\"]);\n  Rotatedataadd(nst,\"ad\"+nst+\"t\",t,[tmp]);\n);\n\nWindispg();", "explanation": "このコードは、円の内接運動によって生まれる**ハイポトロコイド曲線**を描画するものです。\n\n* `Circledata(\"O\",[C,C+[rad,0]])`：外側の固定円（半径 = `rad`）を設定\n* `B` は小円の基準点であり、`A` はその上の軌跡点\n* `Rotatedataadd` と `Translatedataadd` の組み合わせで回転と並進の合成を行い、点Aの軌跡を生成\n* `Addgraph` を用いて、軌跡を赤い点列で可視化\n\nこれにより、スパイログラフのような内円運動から生成される美しい曲線を再現できます。\n\n**ラベル（タグ）**\n`Circledata`, `Putpoint`, `Rotatedataadd`, `Translatedataadd`, `hypotrochoid`, `curve`, `rolling`, `2D`, `geometry`, `motion`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "multiple_listplot_labeling.md", "question": "KeTCindyで複数の線分を描いて、点や線分に複数のラベルをつける方法を教えてください。", "code": "Ketinit();\nSetketcindyjs([\"Label=[]\",\"Color=offwhite\"]);  // デフォルト設定の初期化\n\nAddax(0);  // 座標軸表示\n\nListplot(\"1\",[A,B,C,A]);  // 三角形ABC\nListplot(\"2\",[C,D]);      // 辺CD\nListplot(\"3\",[A,E]);      // 辺AE\n\nLetter([F,\"n-3w5\",\"G\"]);  // G点に文字Gを少しずらして表示\nLetter([A,\"sw\",\"A\"],B,\"se\",\"B\",C,\"n2\",\"C\");  // ABCのラベル\nLetter([D,\"s\",\"M\"],E,\"ne\",\"N\");              // D→M, E→Nのラベル\nWindispg();", "explanation": "このコードは、三角形と補助線を複数描き、それぞれの点に位置調整されたラベルを付けた図形を表示します。\n\n* `Setketcindyjs([\"Label=[]\",\"Color=offwhite\"])`：KeTCindyJS向けの描画オプション（ラベルと背景色）を初期化\n* `Listplot(\"1\",[A,B,C,A])`：三角形ABCの描画\n* `Listplot(\"2\",[C,D])`, `Listplot(\"3\",[A,E])`：補助線の追加\n* `Letter([...])`：点に対してラベルを個別に付与。例えば `\"n2\"` は上側、`\"sw\"` は左下などの位置指定\n\nこれにより、補助点を含めた複雑な図形を視覚的に整理できます。\n\n**ラベル（タグ）**\n`Setketcindyjs`, `Addax`, `Listplot`, `Letter`, `multi_segment`, `labeling`, `geometry`, `2D`, `triangle`, `auxiliary_lines`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "polygonplot_hexagon.md", "question": "KeTCindyで、任意の点から始まる正多角形を描くにはどうすればよいですか？", "code": "Ketinit();\n//Setketcindyjs([\"Color=0.9*[1,1,1]\",\"Label=[]\"]);\n\nAddax(0);  // 座標軸の表示\nPolygonplot(\"1\",[A,B],6);  // 点A・Bをもとに6角形を描画（正六角形）\nWindispg();", "explanation": "このコードは、指定した2点 `[A,B]` を起点として、正六角形を描画する例です。\n`Polygonplot(\"1\",[A,B],6)` の3番目の引数で多角形の辺の数を指定します。\n\n* `A` は多角形の中心\n* `B` は頂点の一つとして使われ、半径の長さを決定します\n* `\"1\"` は図形の識別子（任意）\n\nこのように、点Aと点Bの位置関係に基づいて、向きや大きさが決まる正多角形を柔軟に作成できます。\n\n**ラベル（タグ）**\n`Polygonplot`, `Addax`, `Windispg`, `regular_polygon`, `hexagon`, `geometry`, `2D`, `constructive_geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "shade_triangle_incircle.md", "question": "KeTCindyで三角形とその内接円を色分けして塗るにはどうしたらよいですか？", "code": "Ketinit();\n\nAddax(0);\n\nListplot(\"1\",[A,B,C,A]);  // 三角形ABC\nCircledata(\"1\",[D,E]);    // 内接円（中心D、半径DE）\n\nShade([\"sg1\"],[\"Color=green\"]);              // 三角形を緑で塗る\nShade([\"cr1\"],[\"Color=0.4*[1,1,0]\"]);         // 円を紫寄りの色で塗る\n\nPointdata(\"1\",D,[\"Size=4\"]);                 // 中心点Dの強調表示\nLetter([A,\"sw\",\"A\"],B,\"ne\",\"B\",C,\"se\",\"C\",D,\"se\",\"I\");  // 点のラベル\nWindispg();", "explanation": "このコードでは、三角形と内接円を別々の色で塗り分け、構造を視覚的に強調しています。\n\n* `Shade([\"sg1\"],[\"Color=green\"])`：三角形（Listplotの図形名）を緑に塗りつぶす\n* `Shade([\"cr1\"],[\"Color=0.4*[1,1,0]\"])`：内接円（Circledataの図形名）を半透明の紫で塗る（黄色×0.4）\n* `Pointdata(\"1\",D,[\"Size=4\"])`：円の中心Dを強調表示\n* `Letter([...])`：各頂点や中心にラベルを表示\n\n色や透明度の調整によって、重なった図形も見やすく表現できます。\n\n**ラベル（タグ）**\n`Shade`, `Circledata`, `Listplot`, `Pointdata`, `Letter`, `incircle`, `triangle`, `fill_color`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "shade_venn_diagram.md", "question": "KeTCindyで2つの円の重なり部分だけを塗りつぶしたベン図のような図を描くにはどうすればいいですか？", "code": "Ketinit();\n//import(\"enclosing.txt\");\n\nAddax(0);\n\n// 円のデータ\nCircledata(\"1\",[A,3]);\nCircledata(\"2\",[B,3]);\n\n// 円弧の取得（見た目には表示しない）\nPutoncurve(\"C\",\"cr1\");\nPutoncurve(\"D\",\"cr2\");\nCircledata(\"1c\",[C,0.3],[\"nodisp\"]);\nCircledata(\"2d\",[D,0.3],[\"nodisp\"]);\n\n// 装飾とラベル\nShade([\"cr1c\"],[\"Color=white\"]);\nShade([\"cr2d\"],[\"Color=white\"]);\nLetter([C,\"c\",\"1\",\"D\",\"c\",\"2\"]);\n\n// 重なり部分の生成と塗りつぶし\nEnclosing(\"1\",[\"cr2\",\"cr1\"],[[1,2],\"nodisp\"]);\nShade([\"en1\"],[\"Color=0.6*[1,1,1]\"]);\n\nFramedata();  // 枠線の生成\nWindispg();", "explanation": "このコードは、2つの円の重なり部分（ベン図の交差領域）を視覚的に強調するためのものです。\n\n* `Putoncurve`：交点候補となる円周上の点を取得\n* `Enclosing`：複数の円弧で囲まれた領域（重なり）を定義\n* `Shade([\"en1\"])`：その囲まれた部分をグレーで塗りつぶす\n* `Framedata()`：全体を囲む枠を追加して見やすく調整\n\n交差の強調表示や領域分割教材などに応用できます。\n\n**ラベル（タグ）**\n`Circledata`, `Putoncurve`, `Enclosing`, `Shade`, `Framedata`, `venn`, `intersection`, `region`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "vector_addition_diagram.md", "question": "KeTCindyでベクトルの加法（a + b）を図示したいです。どのように表現すればよいですか？", "code": "Ketinit();\n\nAddax(0);\n\nArrowdata(\"1\",[A,B]);  // ベクトル a\nArrowdata(\"2\",[A,C]);  // ベクトル b\nArrowdata(\"3\",[A,D]);  // 合成ベクトル a + b\n\nListplot(\"1\",[C,D,B],[\"da\"]);  // 補助線（平行四辺形）\n\nExpr([(A+B)/2,\"se\",\"\\\\vec{a}\",(A+C)/2,\"nw\",\"\\\\vec{b}\"]);\nExpr([(A+D)/2,\"se\",\"\\\\vec{a}+\\\\vec{b}\"]);\n\nWindispg();", "explanation": "このコードは、ベクトルの加法を視覚的に示すためのものです。\n\n* `Arrowdata`：ベクトルの描画。始点と終点を指定\n* `Expr`：ベクトルラベルを任意の位置にTeX形式で表示\n* `Listplot(\"1\",[C,D,B],[\"da\"])`：補助的に平行四辺形を描画し、ベクトルの加法の幾何的意味を補完\n\nベクトルの始点を共通にした場合や、平行四辺形法則での説明に適した図になります。\n\n**ラベル（タグ）**\n`Arrowdata`, `Expr`, `Listplot`, `vector`, `addition`, `parallelogram`, `2D`, `geometry`, `visualization`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "conic_selection_plot.md", "question": "KeTCindyで放物線・楕円・双曲線の描画を選択式で切り替え表示したいのですが、どうすればいいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\n// Put A,B,C on the screen\nCh=[chno];\n\nif(contains(Ch,1),\n  Setparent(Cdyname()+\"fig1\");\n  Parabolaplot(\"1\",[A,B,C],[\"-5,10\"]);\n);\n\nif(contains(Ch,2),\n  Setparent(Cdyname()+\"fig2\");\n  Ellipseplot(\"1\",[A,B,C],[\"0,2*pi\"]);\n);\n\nif(contains(Ch,3),\n  Setparent(Cdyname()+\"fig3\");\n  Hyperbolaplot(\"1\",[A,B,C],[\"Asy=da\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードでは、変数 `chno` の値に応じて次の3つの円錐曲線のいずれかを描画します：\n\n* `Parabolaplot`：放物線（例：$y = ax^2$）\n* `Ellipseplot`：楕円（例：$x^2/a^2 + y^2/b^2 = 1$）\n* `Hyperbolaplot`：双曲線（例：$x^2/a^2 - y^2/b^2 = 1$）\n\nそれぞれ `Setparent` によりPDF出力用ファイル名も分岐し、自動保存対応となっています。点 A, B, C は各曲線を定義する3点です。\n\n**ラベル（タグ）**\n`Parabolaplot`, `Ellipseplot`, `Hyperbolaplot`, `Setparent`, `conic`, `plot_switch`, `interactive`, `geometry`, `2D`, `curve`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "def_exp_function.md", "question": "KeTCindyで \\( y = a^x \\) 型の指数関数を描いて、その点における接線を表示するにはどうすればいいですか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\nSlider(\"C\",[-1,5.5],[5,5.5]);\n\nfunstr=Assign(\"a^x\",[\"a\",Sprintf(C.x,3)]);\nPlotdata(\"1\",funstr,\"x=[-5,5]\");\n\nPutpoint(\"D\",[0,1]);\n\ncoeff=Derivative(funstr,\"x\",D.x);\nLineplot(\"1\",[D,[D.x+1,D.y+coeff]]);\nLineplot(\"2\",[D,[D.x+1,D.y+1]],[\"da\"]);\n\nExpr([F,\"w\",\"y=x+1\",E,\"e\",\"y=\"+funstr]);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、一般的な指数関数 $y = a^x$ を描き、点 $D(0,1)$ における接線と比較線 $y = x + 1$ を表示します。\n\n* `Slider(\"C\",...)`：底 $a$ を動かすスライダーで指数関数の形を変化\n* `Assign` と `Sprintf`：関数式にスライダーの値を反映し文字列で代入\n* `Derivative(...)`：点Dにおける接線の傾きを取得\n* `Lineplot`：実際の接線と比較線を描画\n* `Expr`：式を図上に表記\n\nこれにより、さまざまな指数関数の形とその微分の視覚的理解が可能になります。\n\n**ラベル（タグ）**\n`Slider`, `Plotdata`, `Lineplot`, `Derivative`, `Assign`, `Expr`, `exponential_function`, `differentiation`, `tangent`, `interactive`, `2D`, `graph`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "diff_eq_vectorfield.md", "question": "KeTCindyで微分方程式の解曲線を描くにはどうすればよいですか？ベクトル場や注釈も表示できますか？", "code": "Ketinit();\nSetketcindyjs([\"Color=white\",\"Nolabel=all\"]);\n\nCh=[3];\n\nif(contains(Ch,1),\n  Setparent(Cdyname()+\"fig1\");\n  Deqplot(\"1\",\"y=y\",\"x\",0,1);\n);\n\nif(contains(Ch,2),\n  Setparent(Cdyname()+\"fig2\");\n  Deqplot(\"2\",\"y=-4*y\",\"x\",0,[1,0],[\"Num=200\"]);\n);\n\nif(contains(Ch,3),\n  Setparent(Cdyname()+\"fig3\");\n  Putpoint(\"A\",[0.5,0.5],A.xy);\n  Deqplot(\"3\",\"[x,y]=[x*(1-y),0.3*y*(x-1)]\",\"t=[0,20]\",0,A,[\"Num=200\"]);\n  Expr([[0,4],\"w\",\"(x, y)=(x(1-y), 0.3 y(x-1))\"],[\"size->20\"]);\n  Expr([[0,3],\"w\",\"(x, y)=\\\\mathrm{A} \\\\; (t=0)\"],[\"size->20\"]);\n  Pointdata(\"1\",A,[\"Size=3\"]);\n  Letter([A,\"se\",\"A\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、微分方程式（常微分方程式・ベクトル場）に基づく解曲線の描画を行います。\n\n* `Deqplot(...)`：常微分方程式の数値解を描く関数\n* `\"t=[0,20]\"`：解を描く時間範囲を指定（tがパラメータ）\n* `Putpoint(\"A\",...)`：初期条件の点Aを定義\n* `Expr(...)`：ベクトル場や初期条件に関する式を注釈として図中に表示\n* `Ch=[3]`：描画モード（1：恒等式, 2：減衰, 3：2変数ベクトル）\n\n動的な挙動の可視化に適しており、複雑な微分方程式モデルにも拡張できます。\n\n**ラベル（タグ）**\n`Deqplot`, `Putpoint`, `Expr`, `Pointdata`, `differential_equation`, `vectorfield`, `solution_curve`, `2D`, `geometry`, `visualization`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "envelope_lines.md", "question": "KeTCindyで複数の直線を使ってエンベロープ（包絡線）を表現するにはどうすればいいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nSlider(\"C\",[-5,-6],[5,-6]);\n\nn=50;\nforall((-n)..n,\n  t=XMIN+#/n*(XMAX-XMIN);\n  if(t<C.x,\n    tmp=Assign(\"-t*x+t^2\",\"t\",t);\n    Plotdata(text(# + n), tmp, \"x\", [\"Num=1\"]);\n  );\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、たくさんの直線（または放物線状関数）を描いて、エンベロープ（包絡線）構造を視覚的に浮かび上がらせるものです。\n\n* `Slider(\"C\",...)`：描画範囲の可変条件を導入\n* `forall((-n)..n)`：点列を走査して関数群を生成\n* `Assign(\"-t*x+t^2\",\"t\",t)`：動的に変化するパラメータ t を代入し、各関数式を生成\n* `Plotdata(...)`：1本ずつ直線（または曲線）を描画\n\nこの手法は、数学における包絡線や変化するパラメトリック関数の構造を捉える教材として適しています。\n\n**ラベル（タグ）**\n`Plotdata`, `Assign`, `forall`, `Slider`, `envelope`, `parametric`, `curve_family`, `geometry`, `2D`, `visualization`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "graph_sin_function.md", "question": "KeTCindyで \\( y = \\sin x \\) のグラフを描くにはどうすればよいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nSetax([\"l\",\"x\",\"e\",\"y\",\"n\",\"O\",\"se\"]);\n//Setunitlen(\"4mm\");\n\nPlotdata(\"1\",\"sin(x)\",\"x\");\n\nPutpoint(\"D\",[0,2],D.xy);\nLetter([D,\"s\",\"Graph of $y=\\\\sin x$\"]);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、KeTCindyで基本的な正弦関数 $y = \\sin x$ を描く方法です。\n\n* `Setparent(Cdyname()+\"fig\")`：PDF出力用の親ファイル指定\n* `Setax([...])`：座標軸の表示設定（方向と原点の位置を含む）\n* `Plotdata(\"1\",\"sin(x)\",\"x\")`：関数 $y = \\sin x$ を描画\n* `Putpoint`, `Letter`：注釈用の点を配置し、式の説明を加える\n* `Figpdf()`, `Windispg()`：描画と出力処理\n\nシンプルな関数の視覚化に最適なテンプレートです。\n\n**ラベル（タグ）**\n`Plotdata`, `Setax`, `Letter`, `Figpdf`, `trig_function`, `sin`, `graph`, `2D`, `function_plot`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "graph_sin_phase_amp_slider.md", "question": "KeTCindyで sin関数のグラフをスライダーで位相と振幅を調整するにはどうすればいいですか？", "code": "Ketinit();\n\nSetparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\nSetax([7,\"se\"]);\n\nSlider(\"C\",[-6,-3],[6,-3]);     // 位相調整スライダー\nSlider(\"F\",[-8,-3],[8,-3]);     // 振幅調整スライダー\n\nPutpoint(\"G\",[0,2]);            // 説明ラベル用のポイント\nO.xy=[0,2];\n\nCh=[1,2]; // block(s) to be executed\n\nif(contains(Ch,1),\n  Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"do\"]);\n);\n\nif(contains(Ch,2),\n  Plotdata(\"2\",\"sin(x-C.x)+F.y\",\"x\",[\"Num=200\"]);\n);\n\nLetter([G,\"s\",\"Graph of $y=\\\\sin x$\"]);\n\nWindispg();", "explanation": "このコードは、基本の $y = \\sin x$ に対して以下の操作をスライダーで動的に行う実例です：\n\n* `Slider(\"C\",...)`：グラフの**位相**（左右移動）を制御\n* `Slider(\"F\",...)`：グラフの**振幅**（上下伸縮）を制御\n* `sin(x-C.x) + F.y`：C.xでシフト、F.yで高さを調整\n* `Plotdata` によりリアルタイムで再描画され、変化を可視化可能\n\n関数の構造理解を深めるインタラクティブな教材として適しています。\n\n**ラベル（タグ）**\n`Slider`, `Plotdata`, `Setax`, `Letter`, `sin`, `amplitude`, `phase_shift`, `interactive`, `function_plot`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "graph_sin_slider.md", "question": "KeTCindyで sin関数のグラフにスライダーをつけて、位相（横のずれ）を操作するにはどうすればよいですか？", "code": "Ketinit();\nSetparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=offwhite\"]);\nKetcindyjsmain(\"<pf1o/fp>..Graph of $y=\\\\sin x$\",[]);\n\nSetax([7,\"se\"]);\nSlider(\"C\",[-6,-3],[6,-3]);\n\nCh=[1,2];  // 実行するブロックを指定\n\nif(contains(Ch,1),\n  Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"do\"]);\n);\n\nif(contains(Ch,2),\n  Plotdata(\"2\",\"sin(x-C.x)\",\"x\",[\"Num=200\"]);\n);\n\nPutpoint(\"D\",[1,2],D.xy);\nLetter([D,\"s\",\"Graph of $y=\\\\sin x$\"]);\n\nFigpdf();\nWindispg();", "explanation": "このコードでは、sin関数の基本グラフに加え、スライダー操作で位相（グラフの左右シフト）を変更できる機能を追加しています。\n\n* `Slider(\"C\", [...])`：点Cが左右に動くスライダーとして振る舞う\n* `sin(x - C.x)`：Cのx座標に応じて位相が変化\n* `Ch=[1,2]`：表示制御用のフラグ（固定グラフと可変グラフ両方を描画）\n\nこの仕組みは、位相シフトの視覚化や関数変化の学習教材として有効です。\n\n**ラベル（タグ）**\n`Plotdata`, `Slider`, `Setax`, `Ketcindyjsmain`, `sin`, `graph`, `phase_shift`, `interactive`, `function_plot`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "implicit_hatch_translation.md", "question": "KeTCindyで暗黙的に定義された曲線の領域に斜線（ハッチ）を付けて、さらにそれを任意の点に移動するにはどうすればいいですか？", "code": "Ketinit();\nSetketcindyjs([\"Nolabel=all\"]);\n\nfun=\"x^2+2*x*y+2*y^2=1\";\nCh=[3];\n\nif(contains(Ch,1),\n  Implicitplot(\"1\",fun,\"x=[-3,3]\",\"y=[-3,3]\");\n  Hatchdata(\"1\",[\"i1\"],[\"imp1\"]);\n);\n\nif(contains(Ch,3),\n  Putpoint(\"A\",[0,0],A.xy);\n\n  Implicitplot(\"0\",fun,\"x=[-3,3]\",\"y=[-3,3]\");  // for Ketjs off\n  Hatchdata(\"0\",[\"i1\"],[\"imp0\"]);\n\n  Ketcindyjsdata([\"imp0\",imp0,\"hao\",hao]);     // no ketjs off\n\n  // translated hatch\n  Translatedata(\"1\",[\"imp0\",\"hao\"],A.xy);\n);\n\nWindispg();", "explanation": "このコードでは、暗黙的な方程式で定義される曲線領域を以下のように処理しています：\n\n* `Implicitplot`：例として、楕円型の関係式 $x^2 + 2xy + 2y^2 = 1$ の領域を描画\n* `Hatchdata`：その内部領域に斜線（ハッチ）を適用\n* `Putpoint(\"A\",...)`：平行移動の目的地を指定\n* `Translatedata`：元の図形とそのハッチを、点Aへと移動\n\nまた、`Ketcindyjsdata` によりKeTCindyJS用データを手動でセット可能。\n\n**ラベル（タグ）**\n`Implicitplot`, `Hatchdata`, `Translatedata`, `Putpoint`, `Ketcindyjsdata`, `implicit_curve`, `region_fill`, `translation`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "implicit_plot_rotation.md", "question": "KeTCindyで暗黙的関数 \\( f(x, y) = 0 \\) の曲線を描き、スライダーでその曲線を回転させるにはどうすればよいですか？", "code": "Ketinit();\nSetketcindyjs([\"Nolabel=all\"]);\n\nSlider(\"T\",[0,-6],[2*pi,-6]);\n\nImplicitplot(\"1\",\"x^2+xy+2*y^2=4\",\"x=[-3,3]\",\"y=[-3,3]\");\n\n// 以下の行は回転後の代替式の例（使用しない場合はコメントのままで可）\n// Implicitplot(\"2\",(x-A.x)^2+2*(x-A.x)*(y-A.y)+2*(y-A.y)^2=1\",x=[-3,3],y=[-3,3]);\n\nRotatedata(\"1\",\"imp1\",T.x);\n\n// Hatchdata で塗りつぶし等も可能\n// Hatchdata(\"1\",[\"imp1\"],[[\"re\"]]);\n\nWindispg();", "explanation": "このコードでは、暗黙的に定義された2変数関数（例：$x^2 + xy + 2y^2 = 4$）の曲線を描画し、スライダー `T` によってその全体を回転させる操作を実現しています。\n\n* `Implicitplot(...)`：明示的に解けない関係式から曲線を描画\n* `Slider(\"T\",...)`：回転角度をユーザーが操作可能にする\n* `Rotatedata(...)`：指定された角度だけ、オブジェクトを回転\n* コメントの `Hatchdata` を使えば塗り潰し表現も追加可能\n\nこのような設定は、回転対称性の確認や軌道の操作の可視化など、応用範囲の広い構成です。\n\n**ラベル（タグ）**\n`Implicitplot`, `Slider`, `Rotatedata`, `transformation`, `algebraic_curve`, `rotation`, `interactive`, `geometry`, `2D`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "input_value_check_plot.md", "question": "KeTCindyで生徒が入力した座標が関数グラフ上にあるかを自動で判定し、正解なら点を表示したいです。どうすればできますか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nSetketcindyjs([\"Grid=0.5\",\"Nolabel=all\",\"Color=offwhite\"]);\nSeteditable(\"0\",[\"x=\",\"Size=18\",\"Width=100\"]);\nSeteditable(\"1\",[\"y=\",\"Size=18\",\"Width=100\"]);\n\nSetwindow([-4.5,4.5],[-0.5,10.5]);\nDrawgrid([-4,4],[0,10]);\n\nExpr([[1,YMAX],\"ne\",\"y=x^2\",[\"size->20\"]]);\n\nif(drawgraph,\n  Plotdata(\"qg\",\"x^2\",\"x\",[\"Color=blue\"]);\n);\n\nstr1=\"x=2\";  // 入力例\nstr2=\"y=4\";\n\ntmp1=Strsplit(str1,\"=\");\ntmp2=Strsplit(str2,\"=\");\n\nif((length(tmp1)>1)&&(length(tmp2)>1),\n  tmp1=Tocindyform(tmp1_2);\n  tmp2=Tocindyform(tmp2_2);\n  x=parse(tmp1);\n  y=parse(tmp2);\n\n  if(y==x^2,\n    Expr([[6,0.5],\"e\",\"Good!\",[\"Size=1.5\",\"Color=red\"]]);\n    plotL=append(plotL,[x,y]);\n  ,\n    Expr([[6,0.5],\"e\",\"Tray again.\",[\"Size=1.5\",\"Color=red\"]]);\n  );\n);\n\nif(length(plotL)>0,\n  Pointdata(\"1\",plotL,[\"Size=3\",\"Color=red\",\"Msg=\"]);\n);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、関数 $y = x^2$ に対して、ユーザーが手入力した $(x, y)$ 座標がグラフ上にあるかどうかをチェックし、正解なら赤い点でプロットします。\n\n* `Seteditable(...)`：入力ボックスを表示\n* `Strsplit` → `Tocindyform` → `parse`：文字列として入力された座標を式として処理\n* `if(y==x^2)`：入力値が関数を満たしているかどうかを判定\n* `Expr(...)`：\"Good!\" や \"Try again.\" の表示でフィードバック\n* `Pointdata`：正解座標はリストに蓄積して表示\n\n生徒のインタラクティブな入力確認や反復練習などに応用可能です。\n\n**ラベル（タグ）**\n`Seteditable`, `Expr`, `parse`, `Pointdata`, `Plotdata`, `input_check`, `function_graph`, `math_quiz`, `interactive`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "intersection_hatch_fill.md", "question": "KeTCindyで \\( \\sin x \\) と \\( \\cos x \\) の交差部分を斜線で塗りつぶすにはどうすればよいですか？", "code": "Ketinit();\nSetparent(Cdyname()+\"fig\");\n\nSetax([7,\"se\"]);\n\nPlotdata(\"1\",\"sin(x)\",\"x\");\nPlotdata(\"2\",\"cos(x)\",\"x\");\n\ntmp1=Intersectcurves(\"gr1\",\"gr2\");\nprintLn(tmp1);\npt1=tmp1_2;\npt2=tmp1_3;\n\nCh=[1];\n\nif(contains(Ch,1),\n  Partcrv(\"1\",pt1,pt2,\"gr1\");\n  Partcrv(\"2\",pt1,pt2,\"gr2\");\n  Joincrvs(\"1\",[\"part1\",\"part2\"],[\"nodisp\"]);\n  Hatchdata(\"1\",[\"j1\"],[\"File=y\"]);\n);\n\nif(contains(Ch,2),\n  Enclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[pt1,\"nodisp\"]);\n  Hatchdata(\"1\",[\"en1\"],[\"File=y\"]);\n);\n\nif(contains(Ch,3),\n  Setparent(Cdyname()+\"figs\");\n  Enclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[pt1,\"nodisp\"]);\n  Shade(\"1\",[\"en1\"],[\"Color=[0,0.3,0.4]\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、2つの関数（ここでは $\\sin x$ と $\\cos x$）の交点間の領域を検出し、ハッチングまたは塗りつぶしで視覚的に強調する例です。\n\n* `Intersectcurves`：交点を検出し、その座標を `pt1`, `pt2` に保存\n* `Partcrv`：指定関数の一部分を抽出\n* `Joincrvs`：2つの部分曲線を結合し、閉じた領域を形成\n* `Hatchdata`：閉じた領域に斜線（ハッチ）を適用\n* `Enclosing` + `Shade`：より高度な領域指定とカラー塗りつぶしも可能\n\n複数手法が選択可能な構成になっており、視覚化用途に応じて柔軟に応用できます。\n\n**ラベル（タグ）**\n`Plotdata`, `Intersectcurves`, `Partcrv`, `Joincrvs`, `Enclosing`, `Hatchdata`, `Shade`, `sin`, `cos`, `intersection`, `region_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "second_order_diff_eq_slider.md", "question": "KeTCindyで \\( \\frac{d^2y}{dx^2} + a \\frac{dy}{dx} + by = 0 \\) のような2階線形微分方程式の係数をスライダーで操作しながら解の形を確認するにはどうすればいいですか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\nSlider(\"C\",[0,YMAX],[0,YMIN]);\nSlider(\"G\",[0,YMIN-1],[XMAX,YMIN-1]);\nSlider(\"L\",[0,YMIN-2],[XMAX,YMIN-2]);\n\n// 解のグラフ描画\n// Deqplot(\"1\",\"y=y\",\"x\",0,1);\nDeqplot(\"2\",\"y''=-L.x*y'-G.x*y\",\"x=[0,XMAX]\",0,[C.y,0],[\"Num=200\"]);\n// 初期値ベクトルの可視化\n// Deqplot(\"3\",\"[x,y]=[x*(1-y),0.3*y*(x-1)]\",\"t=[0,20]\",0,A,[\"Num=200\"]);\n\n// 数式の表示\nExpr(M,\"e\",\"\\\\displaystyle\\\\frac{d^2 y}{dx^2}+\"+L.x+\"\\\\frac{dy}{dx}+\"+G.x+\"y=0\");\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、2階線形常微分方程式\n\n$$\n\\frac{d^2y}{dx^2} + a \\frac{dy}{dx} + b y = 0\n$$\n\nの解曲線をスライダーでパラメータ $a$, $b$ を変更しながら可視化するものです。\n\n* `Slider(\"L\",...)`：係数 $a$ を制御（1階微分項の係数）\n* `Slider(\"G\",...)`：係数 $b$ を制御（定数項の係数）\n* `Deqplot(\"2\",...)`：数値的に解を描画\n* `Expr(...)`：現在の係数値に基づいた方程式を数式表示\n\n減衰振動・振動解・発散の様子を視覚的に観察でき、教育用や解析の初学に適したモデルです。\n\n**ラベル（タグ）**\n`Slider`, `Deqplot`, `Expr`, `differential_equation`, `second_order`, `visualization`, `interactive`, `2D`, `graph`, `math_education`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "squarecurve_approximation.md", "question": "KeTCindyで \\( y = x^2 \\) 上に点をプロットして、点列をなめらかに補間したり、近似精度を計算することはできますか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nSetketcindyjs([\"Grid=0.5\",\"Nolabel=all\",\"Color=offwhite\"]);\nSetwindow([-4.5,4.5],[-0.5,10.5]);\nDrawgrid([-4,4],[0,10]);\n\nExpr([[1,YMAX],\"ne\",\"y=x^2\",[\"size->20\"]]);\n\nif(prepreactr,\n  cptL=Preparectpt(ctrlL);\n  prepreactr=false;\n);\n\nif(resetctr,\n  Resetctrpt(cptL);\n  resetctr=false;\n);\n\nif(length(ptL)>0,\n  Pointdata(\"0\",ptL,[\"Size=3\",\"Color=blue\",\"Msg=n\"]);\n);\n\nif(movectr,\n  if(setctr,\n    kcl=Setbezier(sort(ptL));\n    setctr=false;\n  );\n  Movectr(kcl_2);\n  Bezier(\"1\",kcl_1,kcl_2,[\"Num=20\",\"Msg=n\"]);\n\n  tmp=apply(bzl,abs(#_2-(#_1)^2));\n  if(length(tmp)>0,\n    mean=sum(tmp)/length(bzl);\n    tmp=\"D=\"+Sprintf(mean*1000,2);  // 誤差スコア表示\n    Expr([[5,4],\"e\",tmp,[\"notex\",\"Size=1.5\"]]);\n  );\n);\n\nif(drawgraph,\n  Plotdata(\"qg\",\"x^2\",\"x\",[\"Color=blue\"]);\n);\n\n//Figpdf();\nWindispg();", "explanation": "このスクリプトは、次のような教育的・視覚的目的で構成されています：\n\n* $y = x^2$ 上に **複数の点**をクリック等でプロット (`ptL`)\n* `Bezier` 補間を用いて、点をなめらかに曲線で接続\n* `apply(... abs(...))` により各点の誤差を計算\n* `Expr` を使って平均誤差（1000倍スケーリング）の数値を表示\n* `Drawgrid`, `Setwindow` により、視覚的に整ったグラフ表示領域\n\n関数曲線の近似、点の補間、近似評価などを体験的に学ぶのに適しています。\n\n**ラベル（タグ）**\n`Pointdata`, `Bezier`, `apply`, `Expr`, `approximation`, `curve_fit`, `graph`, `parabola`, `education`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "dense_grid_with_labels.md", "question": "KeTCindyで、1.5単位ごとに区切られた高密度な方眼紙を作成し、列番号・行番号を自動で表示する方法を教えてください。", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nxLst=apply(1..50,2);  // 幅50マス\nyLst=apply(1..50,2);  // 高さ50マス\nrmvL=[];\n\nTabledata(xLst,yLst,rmvL,[10,\"dr_0.5\"]);\n\n// 基準線\nTlistplot([\"r1\",\"c0r0\",\"c50r0\",\"c50r50\",\"c0r50\",\"c0r0\"]);\n\nct=r5;\nsen=5;\nforall(1..5,\n  tmp1=\"c0r\"+sen;\n  tmp2=\"c50r\"+sen;\n  Tlistplot(text(ct),[tmp1,tmp2],[\"dr_0.5\"]);\n  ct=ct+1;\n  tmp1=\"c\"+sen+\"r0\";\n  tmp2=\"c\"+sen+\"r50\";\n  Tlistplot(text(ct),[tmp1,tmp2],[\"dr_0.5\"]);\n  ct=ct+1;\n  sen=sen+10;\n);", "explanation": "このスクリプトは、KeTCindyで高密度な方眼紙を作成する構成例です。特徴は以下の通りです：\n\n* `xLst=apply(1..50,2)`：2単位ごと（1.5単位幅ベース）で区切られた水平線\n* `Tlistplot(...)`：特定のラインや外枠、メモリ線を明示的に強調\n* `text(ct)`：ラベル番号をテキストとして利用する準備（必要に応じて数値記載可）\n\n用途：\n\n* 高解像度のグリッドで正確な描画支援が必要な場合\n* グラフ用紙や幾何学の作図下地として有用\n\n**ラベル（タグ）**\n`Tabledata`, `Tlistplot`, `grid`, `dense_grid`, `labeling`, `geometry`, `2D`, `graphpaper`, `plot_background`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "dynamic_gridpaper_ticks.md", "question": "KeTCindyで方眼紙のようなグリッドを描きたいのですが、メモリ付きで2, 5, 10マスごとに線を太くしたり、数値を表示する方法はありますか？", "code": "Ketinit();\nSetparent(Cdyname()+\"fig\");\n\n// 太線の区切りを調整\nthick0=[0,\"dr\",\"Move=SW_xy\"];\nthick5=[0,\"dr_0.3\",\"Move=SW_xy\"];\n\nif(tick==1,\n  vtick=[];\n  forall((round(SW.x))..(round(NE.x)),\n    tick=concat(tick,[#,SW.y,\"s\",text(#)]);\n  );\n);\n\nif(tick==2,\n  htick=[];\n  forall((round(SW.y))..(round(NE.y)),\n    tick=concat(tick,[SW.x,#,\"s\",text(#)]);\n  );\n);\n\nExpr(concat(htick,vtick),[]);\n\n// グリッドの基本表\nw=round(NE.x-SW.x);\nh=round(NE.y-SW.y);\nxL0=apply(1..w,10);\nyL0=apply(1..h,10);\ntb1=Tabledata(xL0,yL0,[],thick);\nxThick=apply(tb1_1,#1);\nyThick=apply(tb1_2,#2);\n\n// メモリ線の間隔に応じて、太さ・ラベル設定\nif(w>0,\n  ndx=round(10/w/vd);\n  xL=apply(1..ndx,vd);\n  ndy=round(10/h/vd);\n  yL=apply(1..ndy,vd);\n  tb2=Tabledata(xL,yL,[],thin);\n\n  cL=select(1..length(tb2_1),contains(xThick,tb2_1_#1));\n  rL=select(1..length(tb2_2),contains(yThick,tb2_2_#1));\n  cL=apply(cL,\"c\"+text(#)+\"/0c\"+text(length(tb2_2)));\n  rL=apply(rL,\"r\"+text(#)+\"/0r\"+text(length(tb2_1)-1));\n  Changetablestyle(concat(cL,rL),[\"nodisp\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードでは、KeTCindyを使って以下のような「方眼紙」を作成します：\n\n* `Tabledata(...)`：方眼のマス目を構成\n* `xThick`, `yThick`：X軸・Y軸方向に太線を入れる箇所の記録\n* `Expr(...)`：目盛りのラベル（数値）を表示\n* `vd`（メモリ幅）を2, 5, 10などに変えることで、グリッド感を調整\n* `Changetablestyle(...,\"nodisp\")`：不要な補助線を非表示にして明瞭化\n\nこのような仕組みは、座標学習や図解補助教材として応用できます。\n\n**ラベル（タグ）**\n`Tabledata`, `Expr`, `Changetablestyle`, `grid`, `graphpaper`, `tickmark`, `dynamic_display`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "function_plot_with_tenkey_input.md", "question": "KeTCindyでテンキーのようなUIから関数式を入力し、その関数をプロットしたいです。どうすればできますか？", "code": "Ketinit();\nSetparent(Cdyname()+\"fig\");\n\naPLB=[7,0];\nPLB=Tenkeybrd(aPLB,[\"ShadeY\"]);\n\nPlotdata(\"1\",\"x^2\",\"x\",[\"Color=blue\"]);\nLineplot(\"1\",[[0,1],[1,2]],[\"dr,0.5\"]);\n\nif(textKey!=1,\n  End=IsKeyaction(key);\n  drawtext(PLB,[0.8,0.8],Tenkeys,size->16);\n  textKey=1;\n);\n\nif(End!=1,\n  a=parse(Tenkeys);\n  fun=Assign(\"x^\"+a,[\"a\"]);\n  Plotdata(\"2\",fun,\"x\",[\"Colored\"]);\n  Tenkeys=\"\";\n  End=[s:0];\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、KeTCindyで**テンキーUIを用いて関数の式を入力**し、その入力値に基づいたグラフを描画する機構を示しています。\n\n* `Tenkeybrd(...)`：テンキーの作成（文字入力UI）\n* `textKey`/`End`：入力の確定と判定の制御\n* `parse(...)`：文字列としての入力を `Assign()` により関数に変換\n* `Plotdata(...)`：入力関数を動的に描画\n\nこのように、KeTCindyをインタラクティブな**計算・描画ツール**として活用できます。\n\n**ラベル（タグ）**\n`Tenkeybrd`, `Plotdata`, `Assign`, `parse`, `dynamic_input`, `interactive_plot`, `calculator`, `function_input`, `2D`, `geometry`, `UI`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "graphin_table_logarithmic_decay.md", "question": "KeTCindyで、表の一部にグラフを埋め込みたいです。また、対数減衰に関連した式や記号、定数 \\( e \\) や \\( \\sqrt{e} \\) などを含めて表現したいです。", "code": "Ketinit();\n//Setfiles(\"\");\n\nCh=[2];\n\nif(contains(Ch,1),\n  Setfiles(\"graph\");\n  Setwindow([-0.5,7.5],[0,2.4]);\n  Plotdata(\"1\",\"10*log(10/x)\",\"x=[0,XMAX]\",[\"Exe=0\",\"Num=100\"]);\n);\n\nif(contains(Ch,2),\n  xLst=[15,15,15,15,15,15,15];\n  yLst=[10,10,10,10,40];\n  rmvL=[\"r1c1r2\",\"c3r4r5\",\"c4r5\",\"c5r4r5\",\"c6r4r5\"];\n  Tabledata(xLst,yLst,rmvL);\n\n  Tlistplot([\"r1\",\"c1r0r4\"]);\n  Tlistplot([\"c2r1\",\"c2r2r5\"]);\n  Tlistplot([\"c1r2\",\"c1r3\"]);\n  Tlistplot([\"r3\",\"c2r3r4\"]);\n  Tlistplot([\"c3r2\",\"c3r3\"]);\n  Tlistplot([\"c4r2\",\"c4r3\"]);\n  Tlistplot([\"c5r2\",\"c5r3\"]);\n  Tlistplot([\"c6r2\",\"c6r3\"]);\n\n  Putrowexpr(1,\"c\",[\"x\",\"0\",\"%cdots\",\"%sqrt{e}\",\"%cdots\"]);\n  Putrowexpr(2,\"c\",[\"y\",\"\",\"+\",\"0\",\"=\",\"\"]);\n  Putrowexpr(3,\"c\",[\"y\",\"\",\"-\",\"\"]);\n  Putrowexpr(4,\"c\",[\"y\",\"=\",\"%nearrow\",\"%dfrac{10}{e}\",\"%searrow\",\"%dfrac{15}{e^{\\sqrt{e}}}\",\"%searrow\"]);\n  Putcell(\"c0r4\",\"r5r5\",\"0\",\"\\\\input{graph}\");\n);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、KeTCindyで次のような複合的な構成を可能にします：\n\n* `Plotdata`：10倍対数の減衰グラフを生成（例：$y = 10 \\log(10/x)$）\n* `Tabledata`：表の構造を構成。複数の `rmvL` 指定で一部のセルを消去\n* `Putrowexpr`：指数関数・記号・分数を含む表記を1行に自動配置\n* `\\input{graph}`：表の下部セルにグラフを挿入（TikZ的構成に適用）\n\nこの構成は、関数と表を同時に視覚的に表したい教材に非常に有効です。\n\n**ラベル（タグ）**\n`Tabledata`, `Plotdata`, `Putrowexpr`, `Putcell`, `input_graph`, `log_decay`, `math_table`, `e`, `sqrt`, `2D`, `geometry`, `plot_in_table`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "logarithmic_gridpaper.md", "question": "KeTCindyで縦軸または横軸を対数目盛にした方眼紙（ロググラフ）を描くにはどうすればいいですか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\nSetketcindyjs([\"color=lightgray\"]);\n\nAddax();\n\nthick0=[0,\"dr\",\"Move=SW_xy\"];\nthick1=[0,\"dr_0.3\",\"Move=SW_xy\"];\n\nif(n>0,\n  w=round(NE.x-SW.x);\n  h=round(NE.y-SW.y);\n\n  xL=apply(1..10,h/10);\n  yL=apply(1..10,w/10);\n  tb1=Tabledata(xL,yL,[],thick);\n  xThick=apply(tb1_1,#1);\n  yThick=apply(tb1_2,#2);\n\n  // 対数スケールの目盛計算\n  nn=round(10*log10(w/5));\n  ndx=round(10*w/5);\n  xL=apply(1..ndx,.5);\n  yL=exp(h/nn);\n  yL=apply(1..10,log(1+#)/log(10));\n  yL=apply(yL,#*h/10);\n  yL=reverse(yL);\n  yAL=[];\n  forall(1..nn,\n    yAL=concat(yAL,yL);\n  );\n\n  tb2=Tabledata(xL,yAL,[],thin);\n\n  // 不要線の除去と強調ラベル\n  cL=select(1..length(tb2_1),contains(xThick,tb2_2_#1));\n  cL=apply(cL,\"c\"+text(#)+\"/r\"+text(length(tb2_2)));\n  rL=select(1..length(tb2_2),contains(yThick,tb2_2_#2));\n  rL=apply(rL,\"r\"+text(#)+\"/c\"+text(length(tb2_1)));\n  Changetablestyle(concat(cL,rL),[\"nodisp\"]);\n);\n\n// 目盛ラベル表示（オプション）\nif(tick0,\n  htick=[];\n  forall((round(SW.x))..(round(NE.x)),\n    htick=concat(htick,[[#,SW.y,\"s\",text(#)]]);\n  );\n);\nif(tick1,\n  vtick=[];\n  forall(0..nn,\n    y=tick=concat(tick,[[SW.x,yAL_#,\"s\",text(10^#)]]);\n  );\n);\nExpr(concat(htick,vtick),[]);", "explanation": "このコードは、KeTCindyで対数グラフのような方眼紙を生成するための構成例です：\n\n* `exp(...)`・`log(...)` を使って対数目盛を作成\n* `Tabledata(...,[],thin)`：縦方向に対数目盛グリッドを描画\n* `yAL`：logスケールの補助値配列を繰り返して対数目盛を模倣\n* `Expr(...)`：数値ラベル（例：1, 10, 100, ...）を表示\n\n**ラベル（タグ）**\n`Tabledata`, `Expr`, `log_scale`, `logarithmic`, `grid`, `graphpaper`, `tickmark`, `axis_label`, `2D`, `plot_base`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "loglog_gridpaper.md", "question": "KeTCindyで、X軸もY軸も両方対数スケールにしたログ・ロググラフ用の方眼紙を作成したいです。どうすればできますか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\nSetketcindyjs([\"color=lightgray\"]);\n\nAddax(0);\n\nif(nmx>0 && nmy>0,\n  thick0=[0,\"dr\",\"Move=SW_xy\"];\n  thick1=[0,\"dr_0.3\",\"Move=SW_xy\"];\n\n  w=round(NE.x-SW.x);\n  h=round(NE.y-SW.y);\n  xL=apply(1..10,h/10);\n  yL=apply(1..10,w/10);\n  tb1=Tabledata(xL,yL,[],thick);\n  xthick=apply(tb1_1,#1);\n  ythick=apply(tb1_2,#2);\n\n  // X軸の対数目盛配列\n  xall=[];\n  forall(1..nmx,\n    x0=apply(1..10,log(1+#)/log(10));\n    xL=apply(x0,#*h/10);\n    xall=concat(xall,xL);\n  );\n\n  // Y軸の対数目盛配列\n  yall=[];\n  forall(1..nmy,\n    y0=apply(1..10,log(1+#)/log(10));\n    yL=apply(y0,#*w/10);\n    yL=reverse(yL);\n    yall=concat(yall,yL);\n  );\n\n  tb2=Tabledata(xall,yall,[],thin);\n\n  // 不要な外枠を消す\n  cL=select(1..length(tb2_1),contains(xthick,tb2_2_#1));\n  cL=apply(cL,\"c\"+text(#)+\"/r\"+text(length(tb2_2)-1));\n  rL=select(1..length(tb2_2),contains(ythick,tb2_2_#2));\n  rL=apply(rL,\"r\"+text(#)+\"/c\"+text(length(tb2_1)-1));\n  Changetablestyle(concat(cL,rL),[\"nodisp\"]);\n);\n\n// ラベル追加オプション\nif(tick0>0,\n  htick=[];\n  forall(0..nmx,\n    htick=concat(htick,[[SW.x+xthick_#,\"s\",text(10^#)]]);\n  );\n  Expr(concat(htick,[]),[]);\n);\n\nif(tick1>0,\n  vtick=[];\n  forall(0..nmy,\n    vtick=concat(vtick,[[SW.y+ythick_#,\"s\",text(10^#)]]);\n  );\n  Expr(concat([],vtick),[]);\n);\n\n//Figpdf([10,10,5,5]);\nWindispg();", "explanation": "このスクリプトでは、KeTCindyを使って **X軸・Y軸ともに対数スケール** に設定した方眼紙（log-logグラフ用）を描画します。\n\n* `apply(1..10, log(1+#)/log(10))`：1〜10の対数を等間隔に計算\n* `concat(xall,xL)`：各スケール分のログ目盛を結合\n* `Tabledata(xall, yall, [], thin)`：細線グリッドを生成\n* `Changetablestyle`：不要な罫線を削除して外枠を整える\n\nこの形式は、**指数関数・べき乗関数・スケーリング現象の可視化**などで活躍します。\n\n**ラベル（タグ）**\n`Tabledata`, `Expr`, `log_scale`, `loglog`, `graphpaper`, `tickmark`, `plot_base`, `grid`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "matrix_table_plot.md", "question": "KeTCindyで表（マトリクス）を描画し、数式や記号を含んだ行列演算の図を作るにはどうすればいいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nxLst=[10,10,12,10,12,10];\nyLst=[10,10,10,10,10];\nrmvL=[];\nrmvL=[\"r2c1c2\"];\n\nTabledata(xLst,yLst,rmvL);\n\nCh=[1,2];\n\nif(contains(Ch,1),\n  Tlistplot([\"c1r1\",\"c2r3\"]);\n  Tlistplot([\"c1r3\",\"c2r1\"]);\n);\n\nif(contains(Ch,2),\n  Putrowexpr(1,\"c\",[\"x\",\"0\",\"%cdots\",\"1\",\"%cdots\",\"2\"]);\n  Putrowexpr(2,\"c\",[\"x\",\"=\",\"+\",\"0\",\"=\",\"\"]);\n  Putrowexpr(3,\"c\",[\"y\",\"=\",\"%nearrow\",\"\",\"%searrow\",\"\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、行列・表形式の構造をKeTCindy上に可視的に表現する方法を示しています。\n\n* `Tabledata(xLst,yLst,rmvL)`：各セルサイズを定義し、任意のセルを非表示（rmv）に設定\n* `Tlistplot`：セルの間に線を描画する（矢印や強調線など）\n* `Putrowexpr`：行に数式や記号を挿入（LaTeXスタイル記法をサポート）\n\n記号の例：\n\n* `%cdots`：中央のドット「⋯」\n* `%nearrow`：↗\n* `%searrow`：↘\n\nこのようにして、行列の演算過程や変形の可視化が可能になります。\n\n**ラベル（タグ）**\n`Tabledata`, `Putrowexpr`, `Tlistplot`, `matrix`, `grid`, `math_table`, `expression_input`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "multitable_side_by_side.md", "question": "KeTCindyで、2つの表を横に並べて描きたいです。また、一部の枠線だけを表示・非表示にして、比較しやすくしたいのですが、どうすれば良いですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nPutpoint(\"C\",[4,0],[C.x,0]);  // 右側表の基準点\n\nxLst=[10,10,10];\nyLst=[10,10];\n\nTabledatalight(xLst,yLst,[],[\"Setwindow=sn\"]);\nPutrowexpr(1,\"c\",[\"x\",\"20\",\"30\"]);\nPutrowexpr(2,\"c\",[\"y\",\"60\",\"40\"]);\n\nTabledatalight(xLst,yLst,[],[\"Move=C.xy\"]);\nPutrowexpr(1,\"c\",[\"x\",\"30\",\"20\"]);\nPutrowexpr(2,\"c\",[\"y\",\"60\",\"50\"]);\n\nChangetablestyle([\"r1c0c3\",\"r2c0c3\"],[\"da\"]);  // 枠線非表示設定\n\nFigpdf();\nWindispg();", "explanation": "このコードでは、KeTCindyで以下の構成を実現しています：\n\n* `Tabledatalight(...)`：余計な外枠のないテーブルを描画\n* `Putrowexpr(...)`：行ごとにテキストや数値を配置\n* `Putpoint(\"C\",...)`：第2表の位置基準点を明示的に設定\n* `Changetablestyle(...,[\"da\"])`：r1〜r2行・c0〜c3列の枠線を非表示に\n\nこのようにして、**2つの表の数値比較やスタイルの比較**が可能になります。\n\n**ラベル（タグ）**\n`Tabledatalight`, `Putrowexpr`, `Putpoint`, `Changetablestyle`, `multiple_tables`, `side_by_side`, `table_comparison`, `styling`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "nested_tables_and_cell_merge.md", "question": "KeTCindyで、表の中に別の表を埋め込むような入れ子構造を作りたいです。また、特定のセルを結合したり、枠線を消す方法はありますか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nxLst=[10,10,10];\nyLst=[10,10,10];\n\nTabledatalight(xLst,yLst,[]);  // 外枠表\nPutrowexpr(0,\"c\",[\"A\",\"B\",\"C\"]);\nPutrowexpr(1,\"c\",[\"D\",\"X\",\"F\"]);\nPutrowexpr(2,\"c\",[\"G\",\"H\",\"I\"]);\n\ntmp=[5,5];  // 内側テーブルのセルサイズ\nTabledatalight(tmp,tmp,[],[\"Move=\"+text(tmp),\"Setwindow=1\"]);\nPutrowexpr(0,\"c\",[\"x\",\"y\"]);\nPutrowexpr(1,\"c\",[\"z\",\"w\"]);\n\nChangetablestyle([\"c0r0r2\",\"c2r0r2\",\"r0c0c2\"],[\"nodisp\"]);  // 外枠削除", "explanation": "このコードは、KeTCindyで\\*\\*入れ子構造の表（Nested Tables）\\*\\*を作成するための構成例です。\n\n* `Tabledatalight(...)` を2回使用して、外側と内側の表を作成\n* `Putrowexpr(...)` でそれぞれのセル内容を行ごとに配置\n* `[\"Move=\"+text(tmp)]` によって内側テーブルの表示位置を調整\n* `Changetablestyle(...)` で外側表の一部セル枠を非表示に（結合風の見た目に）\n\nこのような表は、**変数の階層構造や局所的な対比**に便利です。\n\n**ラベル（タグ）**\n`Tabledatalight`, `Putrowexpr`, `Changetablestyle`, `nested_table`, `merged_cells`, `multi_layer`, `table_structure`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "table_custom_cellstyle.md", "question": "KeTCindyで特定のセルの境界線やスタイルをカスタマイズした表を作成するにはどうすればよいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nxLst=[16,16,16,16,16,16];\nyLst=[10,10];\nrmvL=[\"c1r2\",\"c2r1r2\",\"c3r1r2\",\"c4r1r2\",\"c5r1r2\"];\n\nTabledata(xLst,yLst,rmvL);\n\n// セルへの文字列挿入\nPutcell(\"<c0r0\",\"c6r1\",\"lt\",\"Ans\");\nPutcell(\"<c0r0\",\"c6r1\",\"rb2\",\"cm\");\n\n// 特定セルの罫線スタイル変更（点線で表示）\nChangeTablestyle([\"r1c0c6\"],[\"da\"]);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、以下のような目的で表をカスタム描画する方法を示しています：\n\n* `Tabledata(xLst,yLst,rmvL)`：セルサイズと非表示マスを設定\n* `Putcell(...,\"lt\",...)`：左上揃えで文字列「Ans」を挿入\n* `Putcell(...,\"rb2\",...)`：右下揃えで文字列「cm」を挿入\n* `ChangeTablestyle(...)`：特定のセルの罫線（ここでは破線 `\"da\"`）に変更\n\nこれにより、表内のレイアウトや強調、罫線構成が柔軟に制御できます。\n\n**ラベル（タグ）**\n`Tabledata`, `Putcell`, `ChangeTablestyle`, `table`, `grid`, `labeling`, `style`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "table_doubleline_adjust.md", "question": "KeTCindyで表の一部に二重線を引いたり、行列の線や構造を細かく位置調整したいのですが、どうすれば可能ですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nxLst=[16,16,16,16,16,16];\nyLst=[10,10];\nrmvL=[\"c1r2\",\"c2r1r2\",\"c3r1r2\",\"c4r1r2\",\"c5r1r2\"];\n\nTabledata(xLst,yLst,rmvL);\n\n// 二重線を模した線の調整と描画\nTranslatedata(\"1\",\"tblr1c0c6\",[0,0.1]);  // 基本線を少し上に\nChangetablestyle(\"c2r0r1\",[\"nodisp\"]);  // 中央の線を消す\nTranslatedata(\"2a\",\"tblc2r0r1\",[0.05,0]);  // 右側線をずらす\nTranslatedata(\"2b\",\"tblc2r0r1\",[-0.05,0]); // 左側線をずらす", "explanation": "このコードは、KeTCindyで表構成をより詳細にカスタマイズするための方法を示しています。\n\n* `rmvL`：削除するセルを指定してレイアウト調整\n* `Translatedata(...)`：任意の罫線を座標単位でずらすことで「二重線」や「強調線」を表現\n* `Changetablestyle(...,[\"nodisp\"])`：一部の線を非表示にして、重ねて表示される線の効果を演出\n\n視覚的なアクセントや意味づけとして、表の特定部位を強調するのに非常に有効です。\n\n**ラベル（タグ）**\n`Tabledata`, `Translatedata`, `Changetablestyle`, `table`, `grid`, `doubleline`, `adjustment`, `layout`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "bezier_curve_with_control_points.md", "question": "KeTCindyでベジェ曲線を描くにはどうすればいいですか？制御点やその軌跡も表示したいです。", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nBezier(\"1\",[A,B,C,D],[E,F,G,H,K,L]);\n\nMkbezierptcrv([M,N,O,P]);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、**KeTCindyでベジェ曲線（Bezier曲線）を制御点から描く**ための最小構成例です。\n\n* `Bezier(...)`：第1引数がID、第2引数が制御点（曲線を決める）、第3引数が補助点（表示）\n* `Mkbezierptcrv(...)`：ベジェ曲線の構成点を `ap1`, `ap2`, `ap3` のように補助的に描画\n\n**この構成の応用で、スプラインや補間曲線の可視化**にも展開できます。\n\n**ラベル（タグ）**\n`Bezier`, `Mkbezierptcrv`, `control_points`, `curve`, `geometry`, `2D`, `visualization`, `bezier`, `construction`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "splinecrspline_comparison.md", "question": "CRスプラインと通常のスプライン補間を用いて、円を近似的に描く方法とその違いを知りたいです。", "code": "Ketinit();\n\n// 制御点設定\np1=[-3,0];\np2=[-3,-1];\np3=[-2,-2];\np4=[-1,-3];\np5=[0,-3];\np6=[1,-3];\np7=[2,-2];\np8=[3,-1];\np9=[3,0];\np10=[3,1];\np11=[2,2];\np12=[1,3];\np13=[0,3];\np14=[-1,3];\np15=[-2,2];\np16=[-3,1];\n\nq1=p1; q2=p2; q3=p3; q4=p4;\nq5=p5; q6=p6; q7=p7; q8=p8;\nq9=p9; q10=p10; q11=p11; q12=p12;\nq13=p13; q14=p14; q15=p15; q16=p16;\n\n// 円の参照\nCircledata(\"1\",[q0,p1]);\n\n// 制御点表示\nPointdata(\"1\",[p1,p2,p3,p4],[\"Size=3\"]);\nPointdata(\"2\",[q1,q2,q3,q4],[\"Size=3\"]);\n\n// 補間曲線表示\nCh=[1];\nif(contains(Ch,1),\n  Ospline(\"1\",[p1,p2,p3,p4,p1],[\"Colored\"]);\n  CRspline(\"1\",[q1,q2,q3,q4,q1],[\"Colored\"]);\n  Letter([q0+[-0.3,1],\"n\",\"Ospline\",q0+[0.3,1],\"n\",\"CRspline\"]);\n);\n\nWindispg();", "explanation": "このスクリプトは、**CRスプライン**と**通常のスプライン**の補間特性の違いを視覚的に比較するためのものです。両者とも同じ制御点で円に近い閉曲線を構成しますが、その滑らかさや接続の性質が異なります。\n\n* `Ospline(...)`：通常の補間スプライン。点を通りやすいが接線の連続性は低め。\n* `CRspline(...)`：CRスプライン。連続性（接線の滑らかさ）を重視して補間される。\n* `Circledata(...)`：円との比較用。近似精度の参考として表示。\n* `Pointdata(...)`：制御点の視認性向上。\n\nこれにより、曲線補間の選択が図形描画やデータ可視化においてどのような影響を及ぼすかを理解できます。\n\n**ラベル（タグ）**\n`CRspline`, `Ospline`, `Circledata`, `Pointdata`, `spline comparison`, `interpolation`, `geometry`, `closed curve`, `2D`", "tags": ["KeTCindy"]}
{"filename": "spline_curve_and_derivative.md", "question": "KeTCindyでスプライン補間曲線を描き、その導関数を表示したいです。どうすればいいですか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nQspline(\"1\",[A,B,C,D]);  // スプライン補間曲線\nPutoncurve(\"P\",\"bz01\");  // 曲線上に点Pを置く\nDerivative(\"bz01\",\"*P.x\");  // bz01の導関数を定義\n\nLineplot(\"1\",[P,[1,1]],[]);  // P点から導関数の接線（方向）を描く\n\nPlotdata(\"1\",\"*m*x^n\",\"x\",[Num=1]);  // 近似式の描画\n//Plotdata(\"1\",\"fun\",\"x\",[Num=1]);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、**点列からスプライン補間曲線を作成し、さらにその導関数を視覚化**する例です。\n\n* `Qspline(...)`：与えられた点列を滑らかにつなぐスプライン曲線を生成（ベジェ曲線ベース）\n* `Putoncurve(...)`：指定した曲線上に動点Pを配置し、微分可能な対象にする\n* `Derivative(...)`：曲線に沿って変化する点Pの導関数（接線方向）を取得\n* `Lineplot(...)`：導関数方向ベクトルを補助的に可視化\n* `Plotdata(...)`：導関数や補間式のプロット\n\n**ラベル（タグ）**\n`Qspline`, `Putoncurve`, `Derivative`, `Lineplot`, `Plotdata`, `curve`, `spline`, `tangent`, `2D`, `visualization`, `differentiation`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "plane_projection_edge3d.md", "question": "3次元空間上に平面を定義し、特定の点や線分を平面上に投影する方法を教えてください。", "code": "poy=4.5;\ndrwt(line,str):=(\n  drawtext([−5,poy],text(line)+\" \"+str,size->15);\n  poy=poy−0.8;\n);\n\nStart3d([]);\n\nPointdata3d(\"O\",[0,0,0]);\nXyzax3data(\"\",\"x=[−5,5]\",\"y=[−5,5]\",\"z=[−5,5]\");\nPointdata3d(\"A\",[2,2,3]);\nSpaceline(\"1\",[O3d,A3d]);\n\ntmp2=Perplane(\"B~C\",\"A\",A3d-O3d,[\"Size=0.1\",\"Color=white\"]);\ntmp=A3d+2*(B3d-A3d)+2*(C3d-A3d);\nPointdata3d(\"D\",tmp,[\"Size=1\"]);\ntmp=A3d+2*(B3d-A3d)-2*(C3d-A3d);\nPointdata3d(\"E\",tmp,[\"Size=1\"]);\n\nSpaceline(\"2\",[O3d,A3d]);\n\nS3dall=[\"s3d1\"];\nobjd=[[D3d,E3d,F3d,G3d],[1,2,3,4]];\nVertexEdgeFace(\"1\",objd);\n\nCh=[1];\nif(contains(Ch,1),\n  Nohiddenbyfaces(\"1\",\n    [\"ax3d\",\"s3d1all\",\"phe3d1\",\"phf3d1\"]\n  );\n);\n\n// 骨組み表示は任意で有効化可能\n// if(contains(Ch,2),\n//   Skeletonparadata(\"1\",[],[1.5]);\n// );\n\nWindispg();", "explanation": "このコードは、**任意の点とベクトルを基に3次元空間上の平面を定義し、そこに図形（四角形）を形成する一連の操作**を示しています。\n\n* `Start3d()`：3次元描画を初期化\n* `Pointdata3d(...)`：点の定義（O, A など）\n* `Perplane(...)`：A−O方向に垂直な平面を構成し、平面上のBとCを自動配置\n* `Spaceline(...)`：空間ベクトルを描画（A→B、A→C等）\n* `VertexEdgeFace(...)`：点集合に基づいてポリゴン面を描画\n* `Nohiddenbyfaces(...)`：隠面消去によって可視部分のみを描写\n\n**応用例：**\n\n* 平面ベクトルの直交性の可視化\n* 3次元空間内の四角形投影と面の可視化\n* 座標から定義される空間平面の構築練習", "tags": ["Start3d"]}
{"filename": "concat_cube.md", "question": "KeTCindyで複数の立方体を連結して表示し、構造の可視化と隠面処理を施すにはどうすれば良いですか？", "code": "Start3d();\n//Putaxes3d(5);\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n\nvertex=[[2,2,-2],[-2,-2,-2],[-2,2,-2],[2,-2,-2],\n        [2,2,2],[-2,-2,2],[-2,2,2],[2,-2,2]];\nedge=[[1,2],[1,5],[1,4],[1,3],[4,3,2],\n      [6,5],[6,2],[6,7],[8,5,4]];\ncubic=[vertex,edge];\n\nVertexEdgeFace(\"1\",cubic);\n\nif(nohidflg!=1,\n  printIn(15);\n  Nohiddenbyfaces(\"1\",[\"ax3d\",\"phe3d1\"],[\"phf3d1\"]);\n);\n\nif(skeleflg!=1,\n  Skeletonparadata(\"1\",[1.5]);\n);\n\nWindispg();", "explanation": "このスクリプトは、**3D空間上に2つの立方体を結合した構造体を可視化し、隠面処理と骨組み表示を併用**する例です。\n\n* `vertex=...` と `edge=...`：2つの立方体の頂点と辺を定義\n* `VertexEdgeFace(...)`：頂点と辺・面の情報から立体を構築\n* `Nohiddenbyfaces(...)`：隠面消去処理（正面の視界を強調）\n* `Skeletonparadata(...)`：骨組みのみを描画するオプション（スライダ切替対応）\n\n**活用例：**\n\n* 複合立体の表現（直方体や連結構造）\n* 可視性の改善（隠面表示切替による学習補助）\n* 数学・工学・建築分野の立体構成モデリング", "tags": ["3D"]}
{"filename": "cone_section_maxima.md", "question": "Maximaで円錐と平面の交線を解析し、KeTCindyで可視化するにはどうすれば良いですか？", "code": "Start3d([A,B,C,D]);\n\nPutaxes3d(5.5);\n//Xyzax3data(\"\",\"x=[-4,4]\",\"y=[-4,4]\",\"z=[-2,6]\");\n\nListplot(\"sa\",[[-6,6],[-6,0]],[\"color->[0,0,1]\"]);\nPutonseg(\"A\",\"sgsa\");\nPutonseg(\"B\",\"sgsa\");\nC.xy=[-10,0];\n\nListplot([C,D],[\"color->[0,0,1]\"]);\nangle=re(arctan2(D-C));\ndrawtext(D+[0,0.2],text(angle*180/pi),align->\"left\");\n\nptA=[0,0,A.y];\nptB=[|D-C|*cos(angle),|D-C|*sin(angle),B.y];\n\nfd=[\n\"z=2.5*(2-R))\",\n\"x=R*cos(T)\",\"y=R*sin(T)\",\n\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"\n];\n\ncmdL=[\n \"n:[n1,n2,n3]\",[],\n \"b:[-n[2],n[1],0]\",[],\n \"c1:n[2]*b[3]-n[3]*b[2]\",[],\n \"c2:n[3]*b[1]-n[1]*b[3]\",[],\n \"c3:n[1]*b[2]-n[2]*b[1]\",[],\n \"c:[c1,c2,c3]\",[],\n \"nb:sqrt(b.b)\",[],\n \"nc:sqrt(expand(c.c))\",[],\n \"p:[0,0,zA]+r*cos(T)*b/nb+r*sin(T)*c/nc\",[],\n \"eq:x^2+y^2-(k-z/hgt)^2\",[],\n \"eq2:ev(eq,[x=p[1],y=p[2],z=p[3]])\",[],\n \"sol:solve(eq2=0,r)\",[],\n \"p1:ev(p,sol[1])\",[],\n \"p2:ev(p,sol[2])\",[],\n \"nv:[diff(eq,x),diff(eq,y),diff(eq,z)]\",[],\n \"p1::p2::nv::eq2\",[]\n];\nCalcbyM(\"base\",cmdL,[\"\"]);\nnv=ptB-ptA;\nSpaceline(\"AB\",[ptA,ptB],[\"color->[1,0,0]\"]);\nArrowhead(Parapt(ptB),Parapt(ptB)-Parapt(ptA),\n    [\"color->[1,0,0]\"]);\ncrv=Assign(base_1,\n    [\"zA\",ptA_3,\"k\",2,\"hgt\",2.5,\"n1\",nv_1,\"n2\",nv_2,\"n3\",nv_3]);\nclr=[1,0,0];\nclrc=Colorrgb2cmyk(clr);\n//  Setcolor(clrc);\nSpacecurve(\"1\",crv,\"T=[0,2*pi]\",[\"nodisp\",\"color->\"+clr]);\n//  Setcolor(black);\n  Fontsize(\"s\");\n  Expr([-2,5.3],\"c\",nv_1+\"x+\"+nv_2+\"y+\"+nv_3+\"(z-2)=0\");\n  Expr(Parapt([0,0,5]),\"ne\",\"5\");\n  Expr(Parapt([2,0,0]),\"w\",\"2\");\n  Fontsize(\"n\");\n\nCh=[1,2];\nif(contains(Ch,1),\n nvec=Assign(base_3,[\"zA\",ptA_3,\"k\",2,\"hgt\",2.5]);\n tmp=Sileq(nvec);\n cmdL=[\n  \"x:R*c\",[],\n  \"y:R*s\",[],\n  \"z:2.5*(2-R)\",[],\n  \"eq:\"+tmp,[],\n  \"eq:expand(eq)\",[],\n  \"eq:expand(eq/r)\",[],\n  \"sol:solve([eq=0,s^2+c^2=1],[s,c])\",[],\n  \"ans1:ev([x,y,z],sol[1])\",[],\n  \"ans2:ev([x,y,z],sol[2])\",[],\n  \"ans1::ans2\",[]\n ];\n CalcbyM(\"ans\",cmdL,[\"\"]);\n\n pvec=[sin(THETA)*cos(PHI),sin(THETA)*sin(PHI),cos(THETA)];\n tmp=Assign(ans_1,[\"p1\",pvec_1,\"p2\",pvec_2,\"p3\",pvec_3]);\n Spacecurve(\"s1\",tmp,\"R=[0,2]\");\n tmp=Assign(ans_2,[\"p1\",pvec_1,\"p2\",pvec_2,\"p3\",pvec_3]);\n Spacecurve(\"s2\",tmp,\"R=[0,2]\");\n);\nif(contains(Ch,2),\n Spacecurve(\"cr\",\"2*[cos(T),sin(T),0]\",\"T=[0,2*pi]\",\n   [\"Num=100\"]);\n Divnohidhid(\"1\",\"sc3dcr\",nvec);\n tmp2=select(sc3d1,#_3>=0 & #_3<=5);\n tmp1=select(1..(length(tmp2)-1),\n norm(tmp2_(#+1)-tmp2_#)>1);\n if(length(tmp1)==0,\n   Spaceline(\"1n1\",tmp2);\n   Divnohidhid(\"1n1\",\"sl3d1n1\",nvec);\n ,\n   tmp3=[tmp2_(1..tmp1_1)];\n   n1=tmp1_1+1;\n   forall(2..(length(tmp1)),\n     n2=#;\n     tmp3=append(tmp3,tmp2_(n1..n2));\n     n1=n2;\n   );\n   tmp3=append(tmp3,tmp2_(n1..(length(tmp2))));\n   forall(1..length(tmp3),\n     Spaceline(\"1n\"+text(#),tmp3_#);\n     Divnohidhid(\"1n\"+text(#),\"sl3d1n\"+text(#),nvec);\n   );\n  );\n //Crvsfparadata(\"1\",\"ax3d\",\"sfbd3d1\",fd,[\"r\"],[\"do\"]);\n);\nif(contains(Ch,3),\n  Sf3data(\"1\",fd);\n);\n\nWindispg();\n\n//Help(\"Divno\");", "explanation": "このスクリプトは、**Maximaと連携して3次元空間における円錐と平面の交線を求め、KeTCindyで可視化する**例です。\n\n* `Start3d()`：3D空間の初期化\n* `Xyzax3data(...)`：空間の軸範囲を定義\n* `Putonseg3d(...)`：点やベクトルの定義（図形の構成要素）\n* `Spacecurve(...)`：Maximaから得た交線の式を描画\n* `Divnohidden(...)`：交線の可視性処理\n* `Assign`, `clacbyM`, `Parapt`, `Arrowhead`：KeTCindyとMaximaを連携させるための関数群\n\nこのような処理は、**立体図形の交差問題・ベクトル解析・関数空間の可視化**に有効です。", "tags": ["Start3d"]}
{"filename": "cubic_cut.md", "question": "KeTCindyで2つの立方体の交差部分を表現し、その立体構造を視覚化するにはどうすればよいですか？", "code": "Start3d();\nPutaxes3d(5);\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n\npA3d=[-3.5,0.0,0];\npB3d=[3.5,0.0,0];\npC3d=[0.0,-3.5,0];\npD3d=[0.0,3.5,0];\n\nPointdata3d(\"1\",[pA3d,pB3d,pC3d],[\"Color=blue\"]);\npD3d_1=[pB3d_1,pB3d_2,0];\npD3d_2=[0,pC3d_2,pC3d_3];\n\nPointdata3d(\"2\",[pD3d_1,pB3d_2,pC3d_3],[\"Color=yellow\"]);\n\n// 点の位置設定\nPutonseg3d(\"H\",[pA3d,pE3d]);\nPutonseg3d(\"K\",[pC3d,pE3d]);\nPutonseg3d(\"L\",[pC3d,pF3d]);\n\n// 交差の計算\nIntersectspGL(\"pM\",\"pG~pD\",\"H~K~L\",[\"ie\"]);\nIntersectspGL(\"pN\",\"pF~pB\",\"H~K~L\",[\"ie\"]);\n\ntmp1=[[pH,pM3d,pN3d,L],[1,2,3,4,5],[4,5,6]];\ntmp2=[[pA3d,pD3d,pM3d],[1,2,3,4]];\ntmp3=[[pM3d,pD3d,pB3d,pN3d],[1,2,3,4]];\ntmp4=[[pC3d,L,pN3d,pB3d,K,pA3d],[1,2,3,4,5],[1,2,6,7,8]];\n\ndtp=concatobj([tmp1,tmp2,tmp3,tmp4]);\n\nVertexEdgeFace(\"1\",dtp);\n\nCh=[Z];\nif(contains(Ch,1),\n  Nohiddenbyfaces(\"1\",[\"phe3d1\"],[\"phf3d1\"]);\n);\nif(contains(Ch,2),\n  Skeletonparadata(\"1\",[\"phe3d1\"],[1.5]);\n);\n\nWindispg();", "explanation": "このコードは、**空間中の2つの立方体を交差・切断し、その交差領域を明示的に可視化する**例です。\n\n* `Pointdata3d(...)`：基本点の配置\n* `Putonseg3d(...)`：ベクトル上の点の導出（中点や交点）\n* `IntersectspGL(...)`：空間内の線分・平面交差計算\n* `concatobj(...)`：構成面を結合し立体化\n* `VertexEdgeFace(...)`：立体データとして描画\n* `Nohiddenbyfaces(...)`, `Skeletonparadata(...)`：隠面処理と骨組み切替\n\n**活用例：**\n\n* 幾何の空間交差・切断演習\n* 多面体と空間構成の視覚教材\n* 工学設計図のモデリング・可視化補助", "tags": ["3D"]}
{"filename": "cubic_cut2.md", "question": "KeTCindyで立方体の断面と構成線を表示し、任意の線分を交差させた切断立体を描画するにはどうすれば良いですか？", "code": "Start3d();\n//Xyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n\nPutonseg3d(\"A\",[0,0,2]);\nPutonseg3d(\"B\",[0,0,-2]);\nPutonseg3d(\"C\",[0,2,0]);\nPutonseg3d(\"D\",[0,-2,0]);\nPutonseg3d(\"E\",[A3d_1,B3d_2,0],[\"fix\"]);\nPutonseg3d(\"F\",[0,B3d_2,C3d_3],[\"fix\"]);\nPutonseg3d(\"G\",[A3d_1,B3d_2,C3d_3],[\"fix\"]);\n\nPutonseg3d(\"P\",[0,A3d_1,B3d_2,0]);\nPutonseg3d(\"Q\",[0,B3d_2,C3d_3],[\"fix\"]);\n\nSpaceline(\"1\",[0,A]);\nSpaceline(\"2\",[0,B]);\nSpaceline(\"3\",[0,C]);\nSpaceline(\"4\",[0,D]);\nSpaceline(\"5\",[0,E]);\nSpaceline(\"6\",[0,F]);\nSpaceline(\"7\",[0,A]);\nSpaceline(\"8\",[B,F]);\n\nalledg=apply([1..8],\"s3d\"+text(#));\n\nPutonseg3d(\"H\",[E,C]);\nPutonseg3d(\"K\",[C,F]);\nPutonseg3d(\"L\",[E,A]);\n\nIntersectspGL(\"M\",\"F~B\",\"H~K~L\",\"put\");\n\nSpaceline(\"9\",[H,L,M,K]);\n\n// チェックと切断処理\nif(contains(Ch,1),\n  changestyle3d(alledg,[\"do\"]);\n);\nif(contains(Ch,2),\n  tmp1=[0,A,D,B];\n  tmp2=[B,D,N,M];\n  tmp3=[B,O,C,N];\n  tmp4=[O,K,N,C];\n  tmp5=[A,L,H,K];\n  tmp6=[L,H,M,K];\n  tmp7=[C,H,K];\n\n  dtp=concatobj([tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7]);\n  VertexEdgeFace(\"1\",dtp);\n);\n\nif(contains(Ch,3),\n  Nohiddenbyfaces(\"1\",[\"phe3d1\"],[\"phf3d1\"]);\n);\nif(contains(Ch,4),\n  Skeletonparadata(\"1\");\n);\n\nWindispg();", "explanation": "このコードは、**立方体の構造の中に任意の点と線を通して切断・構成要素を表示する**高度な図形生成例です。\n\n* `Putonseg3d(...)`：辺や対角上に点を定義（交点など）\n* `IntersectspGL(...)`：点群と線分・平面交点計算\n* `Spaceline(...)`：直線の描画\n* `concatobj(...)`：切断された面群の定義\n* `VertexEdgeFace(...)`：立体の面・辺・頂点の構築\n\n**活用例：**\n\n* 立方体切断の空間把握\n* 空間ベクトルと立体構造の練習\n* 工業設計・モデリングの補助教材", "tags": ["3D"]}
{"filename": "embed_circle_on_plane.md", "question": "3次元空間において、任意の平面上に円を描きたいのですが、どのようにEmbedを用いればよいですか？", "code": "Start3d();\nPutaxes3d(5);\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n\n// 平面と基準点の指定\nPointdata3d(\"O\",[0,0,0],[\"notex\"]);\nPointdata3d(\"A\",[2,1,2],[\"Size=4\",\"notex\"]);\nPerplane(\"B~C\",\"A\",A3d-O3d,[\"L=1,red\",\"Size=3\",\"Color=red\",\"notex\"]);\n\n// 平面上のベクトル（AB, AC）による基底とEmbedの準備\nAB3d=B3d-A3d;\nAC3d=C3d-A3d;\npD3d=A3d+2*(AB3d-AC3d);\npE3d=A3d+2*(AB3d+AC3d);\npF3d=A3d+2*(-AB3d+AC3d);\npG3d=A3d+2*(-AB3d-AC3d);\nSpaceline(\"1\",[D3d,E3d,F3d,G3d,D3d]);\n\n// 円の描画（Embedで平面に変換）\nCircledata(\"1\",[[0,0],[1,0]],[\"nodisp\"]);\nEmbed(\"1\",[\"cr1\"],A3d+x*(B3d-A3d)+y*(C3d-A3d),[\"x,y\"]);\n\nif(nohidflg!=1,\n  Nohiddenbyfaces(\"\",\"[ax3d]\",\"[face3d]\");\n);\n\nWindispg();", "explanation": "このコードは、**3次元空間において、平面上に円を描くためのEmbed操作の具体例**です。\n\n* `Perplane(...)`：指定した法線ベクトルから平面を生成\n* `Embed(...)`：2次元座標系（x, y）で定義した円を3次元空間上の平面に写像\n* `Circledata(...)`：円の元データ（平面上での円）を指定\n* `Spaceline(...)`：Embedされた領域の確認や骨組み表示などの補助的描画\n\nこの手法は、**平面内の2次元図形を3次元空間へ自然に拡張するための基本的な方法**です。", "tags": ["3D"]}
{"filename": "embed_hatch_on_plane.md", "question": "3次元空間で任意の平面上に円を描き、その内部をハッチング（斜線）で塗りつぶしたいのですが、どうすれば良いですか？", "code": "Start3d();\nPutaxes3d(5);\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n\n// 平面の定義と基準ベクトル\nPerplane(\"B~C\",\"A\",A3d-O3d,[\"notex\"]);\nAB3d=B3d-A3d;\nAC3d=C3d-A3d;\npt1=A3d+2*(AB3d-AC3d);\npt2=A3d+2*(AB3d+AC3d);\npt3=A3d+2*(-AB3d+AC3d);\npt4=A3d+2*(-AB3d-AC3d);\n\n// 平面上の枠・円・ハッチング\nSpaceline(\"1\",[pt1,pt2,pt3,pt4,pt1]);\nCircledata(\"1\",[[0,0],[1,0]],[\"nodisp\"]);\nEmbed(\"1\",[\"cr1\"],A3d+x*(B3d-A3d)+y*(C3d-A3d),[\"x,y\"]);\nHatchdata(\"1\",[\"i\",\"cr1\"],[\"nodisp\"]);\nEmbed(\"2\",\"hai\",A3d+x*(B3d-A3d)+y*(C3d-A3d),[\"x,y\"]);\n\n// 骨組み構造（スケルトン）表示\nif(skeleflg!=1,\n  tmp1=[\"ax3d\"];\n  tmp2=[\"sl3d1\",\"em3d1\",\"em3d2\"];\n  Skeletonparadata(\"1\",tmp1,tmp2,[]);\n);\n\nWindispg();", "explanation": "このスクリプトは、**Embed関数を用いて3D平面上に円を描き、さらにその領域をハッチング処理する**実例です。\n\n* `Circledata(...)`：円の元データ（2D）\n* `Embed(...)`：任意の平面上に写像\n* `Hatchdata(...)`：円内部の斜線処理（描画指定により非表示にも対応）\n* `Spaceline(...)`：四角形の骨組み\n* `Skeletonparadata(...)`：対象領域の補助表示（骨構造）\n\nこの技法は、**投影平面内の面構造や断面の可視化**に有効であり、教材開発や幾何解析に応用できます。", "tags": ["3D"]}
{"filename": "polyhedron_structure.md", "question": "KeTCindyで三次元空間に多面体を描画し、辺・面の構造や骨組み表示を行う方法を教えてください。", "code": "Start3d();\n//Setparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Color=white\"]);\n//Putaxes3d(5);\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n\npolytd=[[ [1,2,4,7,2,4,7,0],[-2.47,2.47,0],[-2.47,-2.47,0],\n          [0,0,3.5],[0,0,-3.5] ],\n        [[1,2,5],[1,5,4],[1,4,6],[1,6,3],[3,4,5],[3,6,4]]];\n\nVertexedgeface(\"1\",polytd,[ \"Obj=jY\"]);\n\nif(nohidflg!=1,\n  tmp1=[\"ax3d\",\"phe3d1\"];\n  tmp2=[\"phf3d1\"];\n  Nohiddenbyfaces(\"1\",tmp1,tmp2,[],[\"do\"]);\n);\n\nif(skeleflg!=1,\n  tmp1=[\"ax3d\",\"phe3d1\"];\n  Skeletonparadata(\"1\",tmp1,tmp1,[1.5]);\n);\n\nWindispg();", "explanation": "このスクリプトは、**3次元空間上に任意の多面体（polyhedron）を定義し、それを可視化・解析する**ための基本例です。\n\n* `polytd=...`：頂点座標および面構成をリストで定義\n* `Vertexedgeface(...)`：指定した頂点と面から多面体を構築\n* `Nohiddenbyfaces(...)`：隠面消去による輪郭強調（表示ON/OFF対応）\n* `Skeletonparadata(...)`：骨組み表示。立体構造の強調と理解支援\n\n**活用例：**\n\n* 正多面体や任意多面体の構造解析\n* 教育用に面・辺・頂点の関係性を可視化\n* 数学オリンピック・STEAM教材向けコンテンツ生成", "tags": ["3D"]}
{"filename": "solid_import_obj.md", "question": "KeTCindyで `.obj` 形式の3Dモデルを読み込んで表示するにはどうすれば良いですか？", "code": "Start3d();\nSetketcindyjs([\"Label=[]\"]);\n\n// ユーザディレクトリ内の obj ファイルを読み込む\n// 例: http://mitani.cs.tsukuba.ac.jp/polyhedron/index.html\nSetdirectory(\"cmetohm(\\\"~/polyhedrons_obj\\\")\");\npolyS=Readobj(\"r04.obj\",[\"Size=3.5\"]);\nSetdirectory(\"cmywork\");\n\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\nVertexedgeface(\"1\",polyS,[\"Obj=y\"]);\n\n// 表示制御（非表示処理・骨組み表示）\nif(nohidflg!=1,\n  tmp1=[\"ax3d\",\"phf3d1\"];\n  tmp2=[\"phf3d1\"];\n  Nohiddenbyfaces(\"1\",tmp1,tmp2);\n);\nif(skeleflg!=1,\n  tmp=[\"ax3d\",\"phf3d1\"];\n  Skeletonparadata(\"1\",tmp,tmp,[1.5]);\n);\n\nWindispg();", "explanation": "このコードは、**KeTCindyで3Dモデル（.obj形式）を読み込み、表示・非表示・骨組みを制御する一連の処理**を示しています。\n\n* `Readobj(...)`：外部の`.obj`形式のファイルを3Dオブジェクトとして読み込み\n* `Vertexedgeface(...)`：読み込んだポリゴンオブジェクトをKeTCindy上に描画\n* `Setdirectory(...)`：ファイル読み込み用のパスを設定\n* `Nohiddenbyfaces(...)`：隠面消去処理を実行\n* `Skeletonparadata(...)`：骨組み構造をオーバーレイ表示\n\n**応用例：**\n\n* 外部で作成した多面体・CADオブジェクトの教育教材化\n* オブジェクト構造の視認性強化（骨組み表示）\n* WebGLとの連携を見据えた3D処理の可視化演習", "tags": ["Start3d"]}
