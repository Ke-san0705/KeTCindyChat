{"filename": "bezier_curve_with_control_points.md", "question": "KeTCindyでベジェ曲線を描くにはどうすればいいですか？制御点やその軌跡も表示したいです。", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nBezier(\"1\",[A,B,C,D],[E,F,G,H,K,L]);\n\nMkbezierptcrv([M,N,O,P]);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、**KeTCindyでベジェ曲線（Bezier曲線）を制御点から描く**ための最小構成例です。\n\n* `Bezier(...)`：第1引数がID、第2引数が制御点（曲線を決める）、第3引数が補助点（表示）\n* `Mkbezierptcrv(...)`：ベジェ曲線の構成点を `ap1`, `ap2`, `ap3` のように補助的に描画\n\n**この構成の応用で、スプラインや補間曲線の可視化**にも展開できます。\n\n**ラベル（タグ）**\n`Bezier`, `Mkbezierptcrv`, `control_points`, `curve`, `geometry`, `2D`, `visualization`, `bezier`, `construction`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "dogwalk_bezier_path.md", "question": "地図画像上にBezier曲線を重ねて、距離や面積を可視化する方法を教えてください。", "code": "Ketinit();\nAddax(0);\n\n// 地図画像の読み込み（dogwalk.png）\ndrawimage([0,0],\"dogwalk.png\",scale->2,alpha->0.5);\n\n// Bezierパスの描画（制御点 A〜H）\nMkbezierptcrv([A,B,C,D,E,F,G,H,A]);\n\n// 曲線長と囲まれた面積を計算\ntmp=Findlength(\"bza\")*200/(L.x-ℓ.x);\nExpr([−4,0],\"L=\"+Sprint(tmp,2),[\"Size=1.6\"]);\nExpr([−4,3],\"S=\"+Sprint(tmp^2,2),[\"Size=1.6\"]);\n\nWindispg();", "explanation": "このコードは、**地図画像上にBezier曲線で道順をなぞり、その長さと面積を計測する**応用例です。以下のような機能があります：\n\n* `drawimage(...)`：背景に地図画像（`dogwalk.png`）を読み込む\n* `Mkbezierptcrv(...)`：地点 A〜H を通る閉じたBezier曲線の生成\n* `Findlength(...)`：曲線長を計算し、地図スケールに基づいて距離換算\n* `Expr(...)`：テキスト表示として距離 L と面積 S を描画\n\n**応用例：**\n\n* ウォーキングコースや通学路の距離測定\n* 公園・施設の占有エリアの計測\n* 地図上のパス可視化・ベクトル図形練習", "tags": ["Bezier"]}
{"filename": "heart_bezier_overlay.md", "question": "画像に合わせてBezier曲線を使って図形（ハート）を描くにはどうすればいいですか？", "code": "Ketinit();\n\n// 背景画像の読み込みと表示\ndrawimage([0,0],\"heart.png\",scale->2,alpha->0.5);\n\n// Bezier曲線の制御点を指定して描画\nMkbezierptcrv([A,B,C,D,A],[\"dr,2\",\"Color=[0,0.5,0]\"]);\n\n// 塗りつぶしのオプション（必要に応じて）\nif(Shader==1,\n  Shade([\"bza1\",[\"Color=[0,0.5,0]\"]]);\n);\n\nWindispg();", "explanation": "このコードは、**画像上にBezier曲線を重ねることで輪郭をトレース**する応用例です。視覚的な補助線として透明度付きの背景画像（`heart.png`）を読み込み、その上に曲線を引くことで、図形の形を手動で調整できます。\n\n* `drawimage(...)`：画像を背景として表示し、透明度（`alpha`）やスケールを調整可能\n* `Mkbezierptcrv(...)`：複数制御点を指定し閉曲線を作成\n* `Shade(...)`：条件付きで塗りつぶしを追加（図形の視認性を向上）\n\n**活用例：**\nロゴトレース、図形模写、曲線モデリングの初学者練習などに最適です。", "tags": ["Bezier"]}
{"filename": "splinecrspline_comparison.md", "question": "CRスプラインと通常のスプライン補間を用いて、円を近似的に描く方法とその違いを知りたいです。", "code": "Ketinit();\n\n// 制御点設定\np1=[-3,0];\np2=[-3,-1];\np3=[-2,-2];\np4=[-1,-3];\np5=[0,-3];\np6=[1,-3];\np7=[2,-2];\np8=[3,-1];\np9=[3,0];\np10=[3,1];\np11=[2,2];\np12=[1,3];\np13=[0,3];\np14=[-1,3];\np15=[-2,2];\np16=[-3,1];\n\nq1=p1; q2=p2; q3=p3; q4=p4;\nq5=p5; q6=p6; q7=p7; q8=p8;\nq9=p9; q10=p10; q11=p11; q12=p12;\nq13=p13; q14=p14; q15=p15; q16=p16;\n\n// 円の参照\nCircledata(\"1\",[q0,p1]);\n\n// 制御点表示\nPointdata(\"1\",[p1,p2,p3,p4],[\"Size=3\"]);\nPointdata(\"2\",[q1,q2,q3,q4],[\"Size=3\"]);\n\n// 補間曲線表示\nCh=[1];\nif(contains(Ch,1),\n  Ospline(\"1\",[p1,p2,p3,p4,p1],[\"Colored\"]);\n  CRspline(\"1\",[q1,q2,q3,q4,q1],[\"Colored\"]);\n  Letter([q0+[-0.3,1],\"n\",\"Ospline\",q0+[0.3,1],\"n\",\"CRspline\"]);\n);\n\nWindispg();", "explanation": "このスクリプトは、**CRスプライン**と**通常のスプライン**の補間特性の違いを視覚的に比較するためのものです。両者とも同じ制御点で円に近い閉曲線を構成しますが、その滑らかさや接続の性質が異なります。\n\n* `Ospline(...)`：通常の補間スプライン。点を通りやすいが接線の連続性は低め。\n* `CRspline(...)`：CRスプライン。連続性（接線の滑らかさ）を重視して補間される。\n* `Circledata(...)`：円との比較用。近似精度の参考として表示。\n* `Pointdata(...)`：制御点の視認性向上。\n\nこれにより、曲線補間の選択が図形描画やデータ可視化においてどのような影響を及ぼすかを理解できます。\n\n**ラベル（タグ）**\n`CRspline`, `Ospline`, `Circledata`, `Pointdata`, `spline comparison`, `interpolation`, `geometry`, `closed curve`, `2D`", "tags": ["KeTCindy"]}
{"filename": "spline_curve_and_derivative.md", "question": "KeTCindyでスプライン補間曲線を描き、その導関数を表示したいです。どうすればいいですか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nQspline(\"1\",[A,B,C,D]);  // スプライン補間曲線\nPutoncurve(\"P\",\"bz01\");  // 曲線上に点Pを置く\nDerivative(\"bz01\",\"*P.x\");  // bz01の導関数を定義\n\nLineplot(\"1\",[P,[1,1]],[]);  // P点から導関数の接線（方向）を描く\n\nPlotdata(\"1\",\"*m*x^n\",\"x\",[Num=1]);  // 近似式の描画\n//Plotdata(\"1\",\"fun\",\"x\",[Num=1]);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、**点列からスプライン補間曲線を作成し、さらにその導関数を視覚化**する例です。\n\n* `Qspline(...)`：与えられた点列を滑らかにつなぐスプライン曲線を生成（ベジェ曲線ベース）\n* `Putoncurve(...)`：指定した曲線上に動点Pを配置し、微分可能な対象にする\n* `Derivative(...)`：曲線に沿って変化する点Pの導関数（接線方向）を取得\n* `Lineplot(...)`：導関数方向ベクトルを補助的に可視化\n* `Plotdata(...)`：導関数や補間式のプロット\n\n**ラベル（タグ）**\n`Qspline`, `Putoncurve`, `Derivative`, `Lineplot`, `Plotdata`, `curve`, `spline`, `tangent`, `2D`, `visualization`, `differentiation`\n\n```\n```", "tags": ["KeTCindy"]}
