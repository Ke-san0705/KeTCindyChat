{"filename": "bowdotfill_triangle_incircle.md", "question": "三角形とその内接円に加えて、各辺から内接円に接する弓型部分を塗り分けるにはどうすれば良いですか？", "code": "Ketinit();\n\nAddax(0);\n\nListplot(\"1\",[A,B,C,A]);      // 三角形ABCの描画\nCircledata(\"1\",[D,E]);        // 内接円（中心D, 半径DE）\n\n// 各辺に対する弓型Bowdataの設定\nBowdata(\"1\",[B,A],[1,0.5,\"Expr=σ\",\"da\"]);\nBowdata(\"2\",[C,B],[1,0.5,\"Expr=β\",\"da\"]);\nBowdata(\"3\",[A,C],[1,0.5,\"Expr=α\",\"da\"]);\n\nCh=[];\n\n// 条件付きで塗りつぶし\nif(contains(Ch,1),\n  Dotfilldata(\"1\",[\"cr1\"],[\"\"]);\n);\n\nif(contains(Ch,2),\n  Dotfilldata(\"2\",[\"oi\"],[\"cr1\"],[\"sg1\"]);\n);\n\nPointdata(\"1\",D,[\"size=4\"]);  // 内心の表示\nLetter([A,\"sw\",\"A\"],B,\"ne\",\"B\",C,\"se\",\"C\",D,\"se\",\"I\");  // ラベル表示\n\nWindispg();", "explanation": "このコードは、三角形の内接円と、その接点を使って描かれる弓型領域（Bowdata）を利用し、構造的な補助図として視覚的に理解を促す構成です。\n\n* `Bowdata`：辺の上に半円状の構造を作る。内接円との接点と辺の端点を指定\n* `Dotfilldata`：指定された図形領域を条件によって塗りつぶし\n* `contains(Ch,...)` によって表示条件を柔軟に切り替え可能\n* `Expr=α` 等で弧に文字を表示可能（ギリシャ文字も可）\n\nこの手法は、幾何的性質の視覚化、特に接円構造や角の成り立ちの補足に有効です。\n\n**ラベル（タグ）**\n`Listplot`, `Circledata`, `Bowdata`, `Dotfilldata`, `Pointdata`, `Letter`, `incircle`, `triangle`, `arc_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "bowhatch_triangle_incircle.md", "question": "内接円と三角形の間の弓型領域を斜線でハッチングするにはどうすればいいですか？", "code": "Ketinit();\n\nAddax(0);\n\nListplot(\"1\",[A,B,C,A]);       // 三角形の描画\nCircledata(\"1\",[D,E]);         // 内接円の描画\n\n// 弓型の描画（各辺に対応）\nBowdata(\"1\",[B,A],[1,0.5,\"Expr=σ\",\"da\"]);\nBowdata(\"2\",[C,B],[1,0.5,\"Expr=β\",\"da\"]);\nBowdata(\"3\",[A,C],[1,0.5,\"Expr=α\",\"da\"]);\n\nPointdata(\"1\",D,[\"size=4\"]);   // 内心の強調表示\nLetter([A,\"sw\",\"A\"],B,\"ne\",\"B\",C,\"se\",\"C\",D,\"se\",\"I\");  // ラベル\n\nCh=[1];\n\n// 条件付きハッチング（点未選択時）\nif(contains(Ch,1),\n  if(!Ptselected(),\n    Hatchdata(\"1\",[\"cr1\"],[\"dr,0.7\"]);\n  );\n);\n\nif(contains(Ch,2),\n  if(!Ptselected(),\n    Hatchdata(\"2\",[\"oi\"],[\"cr1\",\"sg1\"],[\"dr,0.7\",\"\"]);\n  );\n);\n\nWindispg();", "explanation": "このスクリプトは、三角形とその内接円、および接円との接点に基づく弓型領域を斜線で塗り分ける例です。\n\n* `Bowdata`：三角形の辺上に半弧を描画し、視覚的な補助とします。\n* `Hatchdata`：指定領域（例：`cr1`）を斜線（引数 `\"dr,0.7\"`）でハッチングします。\n* `Ptselected()` により、点選択がなければ自動でハッチングが適用されます。\n* 条件付き表示により、柔軟な視覚制御が可能です。\n\nこの技法は、内接円と接線の関係、三角形内部構造の強調など、幾何教材として非常に有効です。\n\n**ラベル（タグ）**\n`Bowdata`, `Hatchdata`, `Circledata`, `Listplot`, `Pointdata`, `Letter`, `incircle`, `triangle`, `hatching`, `arc_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "cycloid_generation.md", "question": "KeTCindyでサイクロイド曲線を生成するにはどうすればいいですか？", "code": "Ketinit();\n\nPutpoint(\"A\",[0,0],A.xy);\nPutpoint(\"C\",[0,1]);\n\nCircledata(\"1\",[C,C+[1,0]],[\"nodisp\"]);\nPointdata(\"1\",[A],[\"nodisp\"]);\nAddgraph(\"0\",[\"pt1\",\"cr1\"],[\"nodisp\"],[[\"Color=red\",\"Size=3\"],[\"dr,0.5\"]]);\n\nnn=36;\nforall(1..nn,\n  t=2*pi/nn*#;\n  Rotatedataadd(text(#)+\"r\",\"ad0\", -t,[ \"nodisp\", C,\"\"]);\n  Translatedataadd(text(#)+\"t\",\"ad\"+text(#)+\"r\",[t,0],[]);\n);\n\nWindispg();", "explanation": "このコードは、円の回転によって生成される**サイクロイド曲線**を描く一連の処理です。\n\n* `Putpoint`：基準点Aと円の接点Cを設定\n* `Circledata`：回転する円のベース\n* `Addgraph`：接点を赤点で示し、円周上の点追跡を準備\n* `forall(1..nn)`：`nn`等分して、円を回転・平行移動\n* `Rotatedataadd`, `Translatedataadd`：円の回転とx方向への平行移動を繰り返すことで、円の転がり運動を模倣\n\nこれにより、点Cの軌跡として美しいサイクロイドカーブが得られます。\n\n**ラベル（タグ）**\n`Circledata`, `Putpoint`, `Addgraph`, `Rotatedataadd`, `Translatedataadd`, `cycloid`, `curve`, `animation`, `2D`, `geometry`, `rolling_motion`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "epitrochoid_generation.md", "question": "KeTCindyでエピトロコイド曲線を描くにはどうすればいいですか？", "code": "Ketinit();\n\nAddax(0);\n\nPutpoint(\"A\",[0,0],A.xy);\nPutpoint(\"C\",[0,1]);\n\nr=3;\n\n// 円の中心と接点を定義\nPutpoint(\"C\",[0,0]);\nPutpoint(\"B\",[C+[r+1,0]]);\nPutpoint(\"A\",B+[1,0],A.xy);\n\nCircledata(\"O\",[C,r]);          // 大きな円\nCircledata(\"1\",[B,1],[\"nodisp\"]);  // 回転する小円\nPointdata(\"1\",[A],[\"nodisp\"]);\nAddgraph(\"O\",[\"pt1\",\"cr1\"],[\"\"], [[\"Size=5\",\"Color=red\"],[\"dr,0.5\"]]);\n\nnn=36;\nforall(1..nn,\n  t=2*pi/nn*#;\n  tmp=r*#(cos(t),sin(t));  // 小円中心の軌道\n  nst=text(#);\n  Rotatedataadd(nst+\"r\",\"ad0\",radx+t,[B,\"nodisp\"]);\n  Translatedataadd(nst+\"t\",\"ad\"+nst+\"r\",tmp-[rad,0],[\"nodisp\"]);\n  Rotatedataadd(nst,\"ad\"+nst+\"t\",t,[tmp]);\n);\n\nWindispg();", "explanation": "このコードは、\\*\\*エピトロコイド曲線（外円に内接する小円上の点の軌跡）\\*\\*を構築します。\n\n* `Circledata(\"O\",[C,r])`：固定された大円を定義します。\n* `Rotatedataadd`, `Translatedataadd`：回転と並進により、小円の軌道と追跡点を生成\n* `Addgraph`：点Aの軌跡を可視化\n* `forall`ループ：時間的ステップでサンプル点を多数配置\n\nこの処理により、歯車運動や幾何学的アートとして知られるエピトロコイドが描画されます。\n\n**ラベル（タグ）**\n`Circledata`, `Putpoint`, `Rotatedataadd`, `Translatedataadd`, `epitrochoid`, `curve`, `parametric`, `2D`, `geometry`, `motion`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "generate_pdf_triangle_circle.md", "question": "KeTCindyで三点を通る円と三角形を描いて、PDF出力用の図を作りたいのですが、どうすれば良いですか？", "code": "Ketinit();\nSetparent(Cdyname()+\"p\");\n\nAddax(0);  // 座標軸の表示\nListplot(\"1\",[A,B,C,A],[]);  // 三角形の描画\nCircledata(\"2\",[A,B,C]);     // ABCを通る円の描画\nLetter([A,\"sw\",\"A\"],B,\"se\",\"B\",C,\"n2\",\"C\");  // 頂点ラベル\n\nFigpdf();  // PDF出力用の設定\nWindispg();", "explanation": "このコードは、三点 A・B・C を通る円と三角形 ABC を描き、PDFとして正しいサイズで出力できるように設定したものです。\n\n* `Setparent(Cdyname()+\"p\")`：PDFサイズの親ファイルを指定（ボタン「Parent」を押して設定）\n* `Figpdf()`：PDF用描画の開始。`Windispg()`の前に置くことで正確なサイズでのPDF生成を可能にします\n* `Circledata`, `Listplot`：それぞれ円と三角形の描画\n* `Letter`：各点のラベル表示（位置も指定）\n\n**ラベル（タグ）**\n`Setparent`, `Figpdf`, `Addax`, `Listplot`, `Circledata`, `Letter`, `PDF_output`, `geometry`, `triangle`, `circle`, `2D`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "generate_triangle_circle.md", "question": "三点を通る円を描くKeTCindyのコード例を教えて", "code": "Ketinit();\n//Setfiles(\"\");\n\nAddax(0);  // 座標軸の表示\nListplot(\"1\",[A,B,C,A],[]);  // 三角形ABC\nCircledata(\"1\",[A,B,C]);    // ABCを通る円\nLetter([A,\"sw\",\"A\"],B,\"se\",\"B\",C,\"n2\",\"C\");\n\nWindispg();", "explanation": "このコードは、KeTCindyを使って特定の幾何・グラフを描画するものです。", "tags": ["Addax"]}
{"filename": "hyperbolahatch.md", "question": "KeTCindyで双曲線を描き、その開いた領域を斜線でハッチングするにはどうすればよいですか？", "code": "Ketinit();\n\nHyperbolaplot(\"1\",[A,B,C],\"[-2,2]\");\n\nCh=[1];\n\nif(contains(Ch,1),\n  Hatchdata(\"1\",[\"ii1\"],[[\"r1hyp1\",\"w\"],[\"r1hyp2\",\"e\"]],[\"Max=100\"]);\n);\n\nif(contains(Ch,2),\n  Hatchdata(\"1\",[\"ii1\"],[[\"r1hyp1\",\"w\"],[\"r1hyp2\",\"e\"]],[\"Max=100\"]);\n);\n\nWindispg();", "explanation": "このコードは、KeTCindyで双曲線の両腕を描き、その間の領域をハッチング（斜線塗り）する例です。\n\n* `Hyperbolaplot`：指定した3点に基づいて双曲線を描画します。\n* `\"[-2,2]\"`：描画するx軸方向の範囲を指定。\n* `Hatchdata`：領域を構成する右腕と左腕（`r1hyp1`, `r1hyp2`）の間を斜線で塗りつぶします。\n* `\"Max=100\"`：ハッチの密度（ライン数）を指定。\n\n`contains(Ch,1)` や `Ptselected()` を使うことで、条件に応じた表示制御も可能です。\n\n**ラベル（タグ）**\n`Hyperbolaplot`, `Hatchdata`, `conic`, `hyperbola`, `hatching`, `region_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "hypotrochoid_generation.md", "question": "KeTCindyで内接円を使ってハイポトロコイド（内トロコイド）曲線を描くにはどうすればよいですか？", "code": "Ketinit();\n\nrad=5;\nPutpoint(\"C\",[0,0]);\nPutpoint(\"B\",C+[rad-1,0]);\nPutpoint(\"A\",B+[1,0],A.xy);\n\nCircledata(\"O\",[C,C+[rad,0]]);\nCircledata(\"1\",[B,B+[1,0]],[\"nodisp\"]);\nPointdata(\"1\",[A]);\nAddgraph(\"O\",[\"pt1\",\"cr1\"],[],[[\"Size=3\",\"Color=red\"],[\"dr,0.5\"]]);\n\nnn=36;\nforall(1..nn,\n  t=2*pi/nn*#;\n  tmp=rad*(cos(t),sin(t));\n  nst=text(#);\n  Rotatedataadd(nst+\"r\",\"ad0\",-rad*t,[B,\"nodisp\"]);\n  Translatedataadd(nst+\"t\",\"ad\"+nst+\"r\",tmp-[rad,0],[\"nodisp\"]);\n  Rotatedataadd(nst,\"ad\"+nst+\"t\",t,[tmp]);\n);\n\nWindispg();", "explanation": "このコードは、円の内接運動によって生まれる**ハイポトロコイド曲線**を描画するものです。\n\n* `Circledata(\"O\",[C,C+[rad,0]])`：外側の固定円（半径 = `rad`）を設定\n* `B` は小円の基準点であり、`A` はその上の軌跡点\n* `Rotatedataadd` と `Translatedataadd` の組み合わせで回転と並進の合成を行い、点Aの軌跡を生成\n* `Addgraph` を用いて、軌跡を赤い点列で可視化\n\nこれにより、スパイログラフのような内円運動から生成される美しい曲線を再現できます。\n\n**ラベル（タグ）**\n`Circledata`, `Putpoint`, `Rotatedataadd`, `Translatedataadd`, `hypotrochoid`, `curve`, `rolling`, `2D`, `geometry`, `motion`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "multiple_listplot_labeling.md", "question": "KeTCindyで複数の線分を描いて、点や線分に複数のラベルをつける方法を教えてください。", "code": "Ketinit();\nSetketcindyjs([\"Label=[]\",\"Color=offwhite\"]);  // デフォルト設定の初期化\n\nAddax(0);  // 座標軸表示\n\nListplot(\"1\",[A,B,C,A]);  // 三角形ABC\nListplot(\"2\",[C,D]);      // 辺CD\nListplot(\"3\",[A,E]);      // 辺AE\n\nLetter([F,\"n-3w5\",\"G\"]);  // G点に文字Gを少しずらして表示\nLetter([A,\"sw\",\"A\"],B,\"se\",\"B\",C,\"n2\",\"C\");  // ABCのラベル\nLetter([D,\"s\",\"M\"],E,\"ne\",\"N\");              // D→M, E→Nのラベル\nWindispg();", "explanation": "このコードは、三角形と補助線を複数描き、それぞれの点に位置調整されたラベルを付けた図形を表示します。\n\n* `Setketcindyjs([\"Label=[]\",\"Color=offwhite\"])`：KeTCindyJS向けの描画オプション（ラベルと背景色）を初期化\n* `Listplot(\"1\",[A,B,C,A])`：三角形ABCの描画\n* `Listplot(\"2\",[C,D])`, `Listplot(\"3\",[A,E])`：補助線の追加\n* `Letter([...])`：点に対してラベルを個別に付与。例えば `\"n2\"` は上側、`\"sw\"` は左下などの位置指定\n\nこれにより、補助点を含めた複雑な図形を視覚的に整理できます。\n\n**ラベル（タグ）**\n`Setketcindyjs`, `Addax`, `Listplot`, `Letter`, `multi_segment`, `labeling`, `geometry`, `2D`, `triangle`, `auxiliary_lines`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "polygonplot_hexagon.md", "question": "KeTCindyで、任意の点から始まる正多角形を描くにはどうすればよいですか？", "code": "Ketinit();\n//Setketcindyjs([\"Color=0.9*[1,1,1]\",\"Label=[]\"]);\n\nAddax(0);  // 座標軸の表示\nPolygonplot(\"1\",[A,B],6);  // 点A・Bをもとに6角形を描画（正六角形）\nWindispg();", "explanation": "このコードは、指定した2点 `[A,B]` を起点として、正六角形を描画する例です。\n`Polygonplot(\"1\",[A,B],6)` の3番目の引数で多角形の辺の数を指定します。\n\n* `A` は多角形の中心\n* `B` は頂点の一つとして使われ、半径の長さを決定します\n* `\"1\"` は図形の識別子（任意）\n\nこのように、点Aと点Bの位置関係に基づいて、向きや大きさが決まる正多角形を柔軟に作成できます。\n\n**ラベル（タグ）**\n`Polygonplot`, `Addax`, `Windispg`, `regular_polygon`, `hexagon`, `geometry`, `2D`, `constructive_geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "shade_triangle_incircle.md", "question": "KeTCindyで三角形とその内接円を色分けして塗るにはどうしたらよいですか？", "code": "Ketinit();\n\nAddax(0);\n\nListplot(\"1\",[A,B,C,A]);  // 三角形ABC\nCircledata(\"1\",[D,E]);    // 内接円（中心D、半径DE）\n\nShade([\"sg1\"],[\"Color=green\"]);              // 三角形を緑で塗る\nShade([\"cr1\"],[\"Color=0.4*[1,1,0]\"]);         // 円を紫寄りの色で塗る\n\nPointdata(\"1\",D,[\"Size=4\"]);                 // 中心点Dの強調表示\nLetter([A,\"sw\",\"A\"],B,\"ne\",\"B\",C,\"se\",\"C\",D,\"se\",\"I\");  // 点のラベル\nWindispg();", "explanation": "このコードでは、三角形と内接円を別々の色で塗り分け、構造を視覚的に強調しています。\n\n* `Shade([\"sg1\"],[\"Color=green\"])`：三角形（Listplotの図形名）を緑に塗りつぶす\n* `Shade([\"cr1\"],[\"Color=0.4*[1,1,0]\"])`：内接円（Circledataの図形名）を半透明の紫で塗る（黄色×0.4）\n* `Pointdata(\"1\",D,[\"Size=4\"])`：円の中心Dを強調表示\n* `Letter([...])`：各頂点や中心にラベルを表示\n\n色や透明度の調整によって、重なった図形も見やすく表現できます。\n\n**ラベル（タグ）**\n`Shade`, `Circledata`, `Listplot`, `Pointdata`, `Letter`, `incircle`, `triangle`, `fill_color`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "shade_venn_diagram.md", "question": "KeTCindyで2つの円の重なり部分だけを塗りつぶしたベン図のような図を描くにはどうすればいいですか？", "code": "Ketinit();\n//import(\"enclosing.txt\");\n\nAddax(0);\n\n// 円のデータ\nCircledata(\"1\",[A,3]);\nCircledata(\"2\",[B,3]);\n\n// 円弧の取得（見た目には表示しない）\nPutoncurve(\"C\",\"cr1\");\nPutoncurve(\"D\",\"cr2\");\nCircledata(\"1c\",[C,0.3],[\"nodisp\"]);\nCircledata(\"2d\",[D,0.3],[\"nodisp\"]);\n\n// 装飾とラベル\nShade([\"cr1c\"],[\"Color=white\"]);\nShade([\"cr2d\"],[\"Color=white\"]);\nLetter([C,\"c\",\"1\",\"D\",\"c\",\"2\"]);\n\n// 重なり部分の生成と塗りつぶし\nEnclosing(\"1\",[\"cr2\",\"cr1\"],[[1,2],\"nodisp\"]);\nShade([\"en1\"],[\"Color=0.6*[1,1,1]\"]);\n\nFramedata();  // 枠線の生成\nWindispg();", "explanation": "このコードは、2つの円の重なり部分（ベン図の交差領域）を視覚的に強調するためのものです。\n\n* `Putoncurve`：交点候補となる円周上の点を取得\n* `Enclosing`：複数の円弧で囲まれた領域（重なり）を定義\n* `Shade([\"en1\"])`：その囲まれた部分をグレーで塗りつぶす\n* `Framedata()`：全体を囲む枠を追加して見やすく調整\n\n交差の強調表示や領域分割教材などに応用できます。\n\n**ラベル（タグ）**\n`Circledata`, `Putoncurve`, `Enclosing`, `Shade`, `Framedata`, `venn`, `intersection`, `region`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "vector_addition_diagram.md", "question": "KeTCindyでベクトルの加法（a + b）を図示したいです。どのように表現すればよいですか？", "code": "Ketinit();\n\nAddax(0);\n\nArrowdata(\"1\",[A,B]);  // ベクトル a\nArrowdata(\"2\",[A,C]);  // ベクトル b\nArrowdata(\"3\",[A,D]);  // 合成ベクトル a + b\n\nListplot(\"1\",[C,D,B],[\"da\"]);  // 補助線（平行四辺形）\n\nExpr([(A+B)/2,\"se\",\"\\\\vec{a}\",(A+C)/2,\"nw\",\"\\\\vec{b}\"]);\nExpr([(A+D)/2,\"se\",\"\\\\vec{a}+\\\\vec{b}\"]);\n\nWindispg();", "explanation": "このコードは、ベクトルの加法を視覚的に示すためのものです。\n\n* `Arrowdata`：ベクトルの描画。始点と終点を指定\n* `Expr`：ベクトルラベルを任意の位置にTeX形式で表示\n* `Listplot(\"1\",[C,D,B],[\"da\"])`：補助的に平行四辺形を描画し、ベクトルの加法の幾何的意味を補完\n\nベクトルの始点を共通にした場合や、平行四辺形法則での説明に適した図になります。\n\n**ラベル（タグ）**\n`Arrowdata`, `Expr`, `Listplot`, `vector`, `addition`, `parallelogram`, `2D`, `geometry`, `visualization`\n\n```\n```", "tags": ["KeTCindy"]}
