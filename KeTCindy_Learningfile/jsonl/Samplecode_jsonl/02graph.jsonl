{"filename": "conic_selection_plot.md", "question": "KeTCindyで放物線・楕円・双曲線の描画を選択式で切り替え表示したいのですが、どうすればいいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\n// Put A,B,C on the screen\nCh=[chno];\n\nif(contains(Ch,1),\n  Setparent(Cdyname()+\"fig1\");\n  Parabolaplot(\"1\",[A,B,C],[\"-5,10\"]);\n);\n\nif(contains(Ch,2),\n  Setparent(Cdyname()+\"fig2\");\n  Ellipseplot(\"1\",[A,B,C],[\"0,2*pi\"]);\n);\n\nif(contains(Ch,3),\n  Setparent(Cdyname()+\"fig3\");\n  Hyperbolaplot(\"1\",[A,B,C],[\"Asy=da\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードでは、変数 `chno` の値に応じて次の3つの円錐曲線のいずれかを描画します：\n\n* `Parabolaplot`：放物線（例：$y = ax^2$）\n* `Ellipseplot`：楕円（例：$x^2/a^2 + y^2/b^2 = 1$）\n* `Hyperbolaplot`：双曲線（例：$x^2/a^2 - y^2/b^2 = 1$）\n\nそれぞれ `Setparent` によりPDF出力用ファイル名も分岐し、自動保存対応となっています。点 A, B, C は各曲線を定義する3点です。\n\n**ラベル（タグ）**\n`Parabolaplot`, `Ellipseplot`, `Hyperbolaplot`, `Setparent`, `conic`, `plot_switch`, `interactive`, `geometry`, `2D`, `curve`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "def_exp_function.md", "question": "KeTCindyで \\( y = a^x \\) 型の指数関数を描いて、その点における接線を表示するにはどうすればいいですか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\nSlider(\"C\",[-1,5.5],[5,5.5]);\n\nfunstr=Assign(\"a^x\",[\"a\",Sprintf(C.x,3)]);\nPlotdata(\"1\",funstr,\"x=[-5,5]\");\n\nPutpoint(\"D\",[0,1]);\n\ncoeff=Derivative(funstr,\"x\",D.x);\nLineplot(\"1\",[D,[D.x+1,D.y+coeff]]);\nLineplot(\"2\",[D,[D.x+1,D.y+1]],[\"da\"]);\n\nExpr([F,\"w\",\"y=x+1\",E,\"e\",\"y=\"+funstr]);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、一般的な指数関数 $y = a^x$ を描き、点 $D(0,1)$ における接線と比較線 $y = x + 1$ を表示します。\n\n* `Slider(\"C\",...)`：底 $a$ を動かすスライダーで指数関数の形を変化\n* `Assign` と `Sprintf`：関数式にスライダーの値を反映し文字列で代入\n* `Derivative(...)`：点Dにおける接線の傾きを取得\n* `Lineplot`：実際の接線と比較線を描画\n* `Expr`：式を図上に表記\n\nこれにより、さまざまな指数関数の形とその微分の視覚的理解が可能になります。\n\n**ラベル（タグ）**\n`Slider`, `Plotdata`, `Lineplot`, `Derivative`, `Assign`, `Expr`, `exponential_function`, `differentiation`, `tangent`, `interactive`, `2D`, `graph`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "diff_eq_vectorfield.md", "question": "KeTCindyで微分方程式の解曲線を描くにはどうすればよいですか？ベクトル場や注釈も表示できますか？", "code": "Ketinit();\nSetketcindyjs([\"Color=white\",\"Nolabel=all\"]);\n\nCh=[3];\n\nif(contains(Ch,1),\n  Setparent(Cdyname()+\"fig1\");\n  Deqplot(\"1\",\"y=y\",\"x\",0,1);\n);\n\nif(contains(Ch,2),\n  Setparent(Cdyname()+\"fig2\");\n  Deqplot(\"2\",\"y=-4*y\",\"x\",0,[1,0],[\"Num=200\"]);\n);\n\nif(contains(Ch,3),\n  Setparent(Cdyname()+\"fig3\");\n  Putpoint(\"A\",[0.5,0.5],A.xy);\n  Deqplot(\"3\",\"[x,y]=[x*(1-y),0.3*y*(x-1)]\",\"t=[0,20]\",0,A,[\"Num=200\"]);\n  Expr([[0,4],\"w\",\"(x, y)=(x(1-y), 0.3 y(x-1))\"],[\"size->20\"]);\n  Expr([[0,3],\"w\",\"(x, y)=\\\\mathrm{A} \\\\; (t=0)\"],[\"size->20\"]);\n  Pointdata(\"1\",A,[\"Size=3\"]);\n  Letter([A,\"se\",\"A\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、微分方程式（常微分方程式・ベクトル場）に基づく解曲線の描画を行います。\n\n* `Deqplot(...)`：常微分方程式の数値解を描く関数\n* `\"t=[0,20]\"`：解を描く時間範囲を指定（tがパラメータ）\n* `Putpoint(\"A\",...)`：初期条件の点Aを定義\n* `Expr(...)`：ベクトル場や初期条件に関する式を注釈として図中に表示\n* `Ch=[3]`：描画モード（1：恒等式, 2：減衰, 3：2変数ベクトル）\n\n動的な挙動の可視化に適しており、複雑な微分方程式モデルにも拡張できます。\n\n**ラベル（タグ）**\n`Deqplot`, `Putpoint`, `Expr`, `Pointdata`, `differential_equation`, `vectorfield`, `solution_curve`, `2D`, `geometry`, `visualization`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "envelope_lines.md", "question": "KeTCindyで複数の直線を使ってエンベロープ（包絡線）を表現するにはどうすればいいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nSlider(\"C\",[-5,-6],[5,-6]);\n\nn=50;\nforall((-n)..n,\n  t=XMIN+#/n*(XMAX-XMIN);\n  if(t<C.x,\n    tmp=Assign(\"-t*x+t^2\",\"t\",t);\n    Plotdata(text(# + n), tmp, \"x\", [\"Num=1\"]);\n  );\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、たくさんの直線（または放物線状関数）を描いて、エンベロープ（包絡線）構造を視覚的に浮かび上がらせるものです。\n\n* `Slider(\"C\",...)`：描画範囲の可変条件を導入\n* `forall((-n)..n)`：点列を走査して関数群を生成\n* `Assign(\"-t*x+t^2\",\"t\",t)`：動的に変化するパラメータ t を代入し、各関数式を生成\n* `Plotdata(...)`：1本ずつ直線（または曲線）を描画\n\nこの手法は、数学における包絡線や変化するパラメトリック関数の構造を捉える教材として適しています。\n\n**ラベル（タグ）**\n`Plotdata`, `Assign`, `forall`, `Slider`, `envelope`, `parametric`, `curve_family`, `geometry`, `2D`, `visualization`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "graph_sin_function.md", "question": "KeTCindyで \\( y = \\sin x \\) のグラフを描くにはどうすればよいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\n\nSetax([\"l\",\"x\",\"e\",\"y\",\"n\",\"O\",\"se\"]);\n//Setunitlen(\"4mm\");\n\nPlotdata(\"1\",\"sin(x)\",\"x\");\n\nPutpoint(\"D\",[0,2],D.xy);\nLetter([D,\"s\",\"Graph of $y=\\\\sin x$\"]);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、KeTCindyで基本的な正弦関数 $y = \\sin x$ を描く方法です。\n\n* `Setparent(Cdyname()+\"fig\")`：PDF出力用の親ファイル指定\n* `Setax([...])`：座標軸の表示設定（方向と原点の位置を含む）\n* `Plotdata(\"1\",\"sin(x)\",\"x\")`：関数 $y = \\sin x$ を描画\n* `Putpoint`, `Letter`：注釈用の点を配置し、式の説明を加える\n* `Figpdf()`, `Windispg()`：描画と出力処理\n\nシンプルな関数の視覚化に最適なテンプレートです。\n\n**ラベル（タグ）**\n`Plotdata`, `Setax`, `Letter`, `Figpdf`, `trig_function`, `sin`, `graph`, `2D`, `function_plot`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "graph_sin_phase_amp_slider.md", "question": "KeTCindyで sin関数のグラフをスライダーで位相と振幅を調整するにはどうすればいいですか？", "code": "Ketinit();\n\nSetparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\nSetax([7,\"se\"]);\n\nSlider(\"C\",[-6,-3],[6,-3]);     // 位相調整スライダー\nSlider(\"F\",[-8,-3],[8,-3]);     // 振幅調整スライダー\n\nPutpoint(\"G\",[0,2]);            // 説明ラベル用のポイント\nO.xy=[0,2];\n\nCh=[1,2]; // block(s) to be executed\n\nif(contains(Ch,1),\n  Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"do\"]);\n);\n\nif(contains(Ch,2),\n  Plotdata(\"2\",\"sin(x-C.x)+F.y\",\"x\",[\"Num=200\"]);\n);\n\nLetter([G,\"s\",\"Graph of $y=\\\\sin x$\"]);\n\nWindispg();", "explanation": "このコードは、基本の $y = \\sin x$ に対して以下の操作をスライダーで動的に行う実例です：\n\n* `Slider(\"C\",...)`：グラフの**位相**（左右移動）を制御\n* `Slider(\"F\",...)`：グラフの**振幅**（上下伸縮）を制御\n* `sin(x-C.x) + F.y`：C.xでシフト、F.yで高さを調整\n* `Plotdata` によりリアルタイムで再描画され、変化を可視化可能\n\n関数の構造理解を深めるインタラクティブな教材として適しています。\n\n**ラベル（タグ）**\n`Slider`, `Plotdata`, `Setax`, `Letter`, `sin`, `amplitude`, `phase_shift`, `interactive`, `function_plot`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "graph_sin_slider.md", "question": "KeTCindyで sin関数のグラフにスライダーをつけて、位相（横のずれ）を操作するにはどうすればよいですか？", "code": "Ketinit();\nSetparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=offwhite\"]);\nKetcindyjsmain(\"<pf1o/fp>..Graph of $y=\\\\sin x$\",[]);\n\nSetax([7,\"se\"]);\nSlider(\"C\",[-6,-3],[6,-3]);\n\nCh=[1,2];  // 実行するブロックを指定\n\nif(contains(Ch,1),\n  Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"do\"]);\n);\n\nif(contains(Ch,2),\n  Plotdata(\"2\",\"sin(x-C.x)\",\"x\",[\"Num=200\"]);\n);\n\nPutpoint(\"D\",[1,2],D.xy);\nLetter([D,\"s\",\"Graph of $y=\\\\sin x$\"]);\n\nFigpdf();\nWindispg();", "explanation": "このコードでは、sin関数の基本グラフに加え、スライダー操作で位相（グラフの左右シフト）を変更できる機能を追加しています。\n\n* `Slider(\"C\", [...])`：点Cが左右に動くスライダーとして振る舞う\n* `sin(x - C.x)`：Cのx座標に応じて位相が変化\n* `Ch=[1,2]`：表示制御用のフラグ（固定グラフと可変グラフ両方を描画）\n\nこの仕組みは、位相シフトの視覚化や関数変化の学習教材として有効です。\n\n**ラベル（タグ）**\n`Plotdata`, `Slider`, `Setax`, `Ketcindyjsmain`, `sin`, `graph`, `phase_shift`, `interactive`, `function_plot`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "implicit_hatch_translation.md", "question": "KeTCindyで暗黙的に定義された曲線の領域に斜線（ハッチ）を付けて、さらにそれを任意の点に移動するにはどうすればいいですか？", "code": "Ketinit();\nSetketcindyjs([\"Nolabel=all\"]);\n\nfun=\"x^2+2*x*y+2*y^2=1\";\nCh=[3];\n\nif(contains(Ch,1),\n  Implicitplot(\"1\",fun,\"x=[-3,3]\",\"y=[-3,3]\");\n  Hatchdata(\"1\",[\"i1\"],[\"imp1\"]);\n);\n\nif(contains(Ch,3),\n  Putpoint(\"A\",[0,0],A.xy);\n\n  Implicitplot(\"0\",fun,\"x=[-3,3]\",\"y=[-3,3]\");  // for Ketjs off\n  Hatchdata(\"0\",[\"i1\"],[\"imp0\"]);\n\n  Ketcindyjsdata([\"imp0\",imp0,\"hao\",hao]);     // no ketjs off\n\n  // translated hatch\n  Translatedata(\"1\",[\"imp0\",\"hao\"],A.xy);\n);\n\nWindispg();", "explanation": "このコードでは、暗黙的な方程式で定義される曲線領域を以下のように処理しています：\n\n* `Implicitplot`：例として、楕円型の関係式 $x^2 + 2xy + 2y^2 = 1$ の領域を描画\n* `Hatchdata`：その内部領域に斜線（ハッチ）を適用\n* `Putpoint(\"A\",...)`：平行移動の目的地を指定\n* `Translatedata`：元の図形とそのハッチを、点Aへと移動\n\nまた、`Ketcindyjsdata` によりKeTCindyJS用データを手動でセット可能。\n\n**ラベル（タグ）**\n`Implicitplot`, `Hatchdata`, `Translatedata`, `Putpoint`, `Ketcindyjsdata`, `implicit_curve`, `region_fill`, `translation`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "implicit_plot_rotation.md", "question": "KeTCindyで暗黙的関数 \\( f(x, y) = 0 \\) の曲線を描き、スライダーでその曲線を回転させるにはどうすればよいですか？", "code": "Ketinit();\nSetketcindyjs([\"Nolabel=all\"]);\n\nSlider(\"T\",[0,-6],[2*pi,-6]);\n\nImplicitplot(\"1\",\"x^2+xy+2*y^2=4\",\"x=[-3,3]\",\"y=[-3,3]\");\n\n// 以下の行は回転後の代替式の例（使用しない場合はコメントのままで可）\n// Implicitplot(\"2\",(x-A.x)^2+2*(x-A.x)*(y-A.y)+2*(y-A.y)^2=1\",x=[-3,3],y=[-3,3]);\n\nRotatedata(\"1\",\"imp1\",T.x);\n\n// Hatchdata で塗りつぶし等も可能\n// Hatchdata(\"1\",[\"imp1\"],[[\"re\"]]);\n\nWindispg();", "explanation": "このコードでは、暗黙的に定義された2変数関数（例：$x^2 + xy + 2y^2 = 4$）の曲線を描画し、スライダー `T` によってその全体を回転させる操作を実現しています。\n\n* `Implicitplot(...)`：明示的に解けない関係式から曲線を描画\n* `Slider(\"T\",...)`：回転角度をユーザーが操作可能にする\n* `Rotatedata(...)`：指定された角度だけ、オブジェクトを回転\n* コメントの `Hatchdata` を使えば塗り潰し表現も追加可能\n\nこのような設定は、回転対称性の確認や軌道の操作の可視化など、応用範囲の広い構成です。\n\n**ラベル（タグ）**\n`Implicitplot`, `Slider`, `Rotatedata`, `transformation`, `algebraic_curve`, `rotation`, `interactive`, `geometry`, `2D`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "input_value_check_plot.md", "question": "KeTCindyで生徒が入力した座標が関数グラフ上にあるかを自動で判定し、正解なら点を表示したいです。どうすればできますか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nSetketcindyjs([\"Grid=0.5\",\"Nolabel=all\",\"Color=offwhite\"]);\nSeteditable(\"0\",[\"x=\",\"Size=18\",\"Width=100\"]);\nSeteditable(\"1\",[\"y=\",\"Size=18\",\"Width=100\"]);\n\nSetwindow([-4.5,4.5],[-0.5,10.5]);\nDrawgrid([-4,4],[0,10]);\n\nExpr([[1,YMAX],\"ne\",\"y=x^2\",[\"size->20\"]]);\n\nif(drawgraph,\n  Plotdata(\"qg\",\"x^2\",\"x\",[\"Color=blue\"]);\n);\n\nstr1=\"x=2\";  // 入力例\nstr2=\"y=4\";\n\ntmp1=Strsplit(str1,\"=\");\ntmp2=Strsplit(str2,\"=\");\n\nif((length(tmp1)>1)&&(length(tmp2)>1),\n  tmp1=Tocindyform(tmp1_2);\n  tmp2=Tocindyform(tmp2_2);\n  x=parse(tmp1);\n  y=parse(tmp2);\n\n  if(y==x^2,\n    Expr([[6,0.5],\"e\",\"Good!\",[\"Size=1.5\",\"Color=red\"]]);\n    plotL=append(plotL,[x,y]);\n  ,\n    Expr([[6,0.5],\"e\",\"Tray again.\",[\"Size=1.5\",\"Color=red\"]]);\n  );\n);\n\nif(length(plotL)>0,\n  Pointdata(\"1\",plotL,[\"Size=3\",\"Color=red\",\"Msg=\"]);\n);\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、関数 $y = x^2$ に対して、ユーザーが手入力した $(x, y)$ 座標がグラフ上にあるかどうかをチェックし、正解なら赤い点でプロットします。\n\n* `Seteditable(...)`：入力ボックスを表示\n* `Strsplit` → `Tocindyform` → `parse`：文字列として入力された座標を式として処理\n* `if(y==x^2)`：入力値が関数を満たしているかどうかを判定\n* `Expr(...)`：\"Good!\" や \"Try again.\" の表示でフィードバック\n* `Pointdata`：正解座標はリストに蓄積して表示\n\n生徒のインタラクティブな入力確認や反復練習などに応用可能です。\n\n**ラベル（タグ）**\n`Seteditable`, `Expr`, `parse`, `Pointdata`, `Plotdata`, `input_check`, `function_graph`, `math_quiz`, `interactive`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "intersection_hatch_fill.md", "question": "KeTCindyで \\( \\sin x \\) と \\( \\cos x \\) の交差部分を斜線で塗りつぶすにはどうすればよいですか？", "code": "Ketinit();\nSetparent(Cdyname()+\"fig\");\n\nSetax([7,\"se\"]);\n\nPlotdata(\"1\",\"sin(x)\",\"x\");\nPlotdata(\"2\",\"cos(x)\",\"x\");\n\ntmp1=Intersectcurves(\"gr1\",\"gr2\");\nprintLn(tmp1);\npt1=tmp1_2;\npt2=tmp1_3;\n\nCh=[1];\n\nif(contains(Ch,1),\n  Partcrv(\"1\",pt1,pt2,\"gr1\");\n  Partcrv(\"2\",pt1,pt2,\"gr2\");\n  Joincrvs(\"1\",[\"part1\",\"part2\"],[\"nodisp\"]);\n  Hatchdata(\"1\",[\"j1\"],[\"File=y\"]);\n);\n\nif(contains(Ch,2),\n  Enclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[pt1,\"nodisp\"]);\n  Hatchdata(\"1\",[\"en1\"],[\"File=y\"]);\n);\n\nif(contains(Ch,3),\n  Setparent(Cdyname()+\"figs\");\n  Enclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[pt1,\"nodisp\"]);\n  Shade(\"1\",[\"en1\"],[\"Color=[0,0.3,0.4]\"]);\n);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、2つの関数（ここでは $\\sin x$ と $\\cos x$）の交点間の領域を検出し、ハッチングまたは塗りつぶしで視覚的に強調する例です。\n\n* `Intersectcurves`：交点を検出し、その座標を `pt1`, `pt2` に保存\n* `Partcrv`：指定関数の一部分を抽出\n* `Joincrvs`：2つの部分曲線を結合し、閉じた領域を形成\n* `Hatchdata`：閉じた領域に斜線（ハッチ）を適用\n* `Enclosing` + `Shade`：より高度な領域指定とカラー塗りつぶしも可能\n\n複数手法が選択可能な構成になっており、視覚化用途に応じて柔軟に応用できます。\n\n**ラベル（タグ）**\n`Plotdata`, `Intersectcurves`, `Partcrv`, `Joincrvs`, `Enclosing`, `Hatchdata`, `Shade`, `sin`, `cos`, `intersection`, `region_fill`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "second_order_diff_eq_slider.md", "question": "KeTCindyで \\( \\frac{d^2y}{dx^2} + a \\frac{dy}{dx} + by = 0 \\) のような2階線形微分方程式の係数をスライダーで操作しながら解の形を確認するにはどうすればいいですか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\n\nSlider(\"C\",[0,YMAX],[0,YMIN]);\nSlider(\"G\",[0,YMIN-1],[XMAX,YMIN-1]);\nSlider(\"L\",[0,YMIN-2],[XMAX,YMIN-2]);\n\n// 解のグラフ描画\n// Deqplot(\"1\",\"y=y\",\"x\",0,1);\nDeqplot(\"2\",\"y''=-L.x*y'-G.x*y\",\"x=[0,XMAX]\",0,[C.y,0],[\"Num=200\"]);\n// 初期値ベクトルの可視化\n// Deqplot(\"3\",\"[x,y]=[x*(1-y),0.3*y*(x-1)]\",\"t=[0,20]\",0,A,[\"Num=200\"]);\n\n// 数式の表示\nExpr(M,\"e\",\"\\\\displaystyle\\\\frac{d^2 y}{dx^2}+\"+L.x+\"\\\\frac{dy}{dx}+\"+G.x+\"y=0\");\n\n//Figpdf();\nWindispg();", "explanation": "このコードは、2階線形常微分方程式\n\n$$\n\\frac{d^2y}{dx^2} + a \\frac{dy}{dx} + b y = 0\n$$\n\nの解曲線をスライダーでパラメータ $a$, $b$ を変更しながら可視化するものです。\n\n* `Slider(\"L\",...)`：係数 $a$ を制御（1階微分項の係数）\n* `Slider(\"G\",...)`：係数 $b$ を制御（定数項の係数）\n* `Deqplot(\"2\",...)`：数値的に解を描画\n* `Expr(...)`：現在の係数値に基づいた方程式を数式表示\n\n減衰振動・振動解・発散の様子を視覚的に観察でき、教育用や解析の初学に適したモデルです。\n\n**ラベル（タグ）**\n`Slider`, `Deqplot`, `Expr`, `differential_equation`, `second_order`, `visualization`, `interactive`, `2D`, `graph`, `math_education`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "squarecurve_approximation.md", "question": "KeTCindyで \\( y = x^2 \\) 上に点をプロットして、点列をなめらかに補間したり、近似精度を計算することはできますか？", "code": "Ketinit();\n//Setparent(Cdyname()+\"fig\");\n\nSetketcindyjs([\"Grid=0.5\",\"Nolabel=all\",\"Color=offwhite\"]);\nSetwindow([-4.5,4.5],[-0.5,10.5]);\nDrawgrid([-4,4],[0,10]);\n\nExpr([[1,YMAX],\"ne\",\"y=x^2\",[\"size->20\"]]);\n\nif(prepreactr,\n  cptL=Preparectpt(ctrlL);\n  prepreactr=false;\n);\n\nif(resetctr,\n  Resetctrpt(cptL);\n  resetctr=false;\n);\n\nif(length(ptL)>0,\n  Pointdata(\"0\",ptL,[\"Size=3\",\"Color=blue\",\"Msg=n\"]);\n);\n\nif(movectr,\n  if(setctr,\n    kcl=Setbezier(sort(ptL));\n    setctr=false;\n  );\n  Movectr(kcl_2);\n  Bezier(\"1\",kcl_1,kcl_2,[\"Num=20\",\"Msg=n\"]);\n\n  tmp=apply(bzl,abs(#_2-(#_1)^2));\n  if(length(tmp)>0,\n    mean=sum(tmp)/length(bzl);\n    tmp=\"D=\"+Sprintf(mean*1000,2);  // 誤差スコア表示\n    Expr([[5,4],\"e\",tmp,[\"notex\",\"Size=1.5\"]]);\n  );\n);\n\nif(drawgraph,\n  Plotdata(\"qg\",\"x^2\",\"x\",[\"Color=blue\"]);\n);\n\n//Figpdf();\nWindispg();", "explanation": "このスクリプトは、次のような教育的・視覚的目的で構成されています：\n\n* $y = x^2$ 上に **複数の点**をクリック等でプロット (`ptL`)\n* `Bezier` 補間を用いて、点をなめらかに曲線で接続\n* `apply(... abs(...))` により各点の誤差を計算\n* `Expr` を使って平均誤差（1000倍スケーリング）の数値を表示\n* `Drawgrid`, `Setwindow` により、視覚的に整ったグラフ表示領域\n\n関数曲線の近似、点の補間、近似評価などを体験的に学ぶのに適しています。\n\n**ラベル（タグ）**\n`Pointdata`, `Bezier`, `apply`, `Expr`, `approximation`, `curve_fit`, `graph`, `parabola`, `education`, `2D`, `geometry`\n\n```\n```", "tags": ["KeTCindy"]}
{"filename": "tangent_to_sinx.md", "question": "KeTCindyで \\( y = \\sin x \\) に対する任意点での接線を引くにはどうすればいいですか？", "code": "Ketinit();\n//Setfiles(\"\");\n\nSetparent(Cdyname()+\"fig\");\nSetketcindyjs([\"Nolabel=all\",\"Color=white\"]);\nSetax([7,\"se\"]);\n\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\"]);\nPutoncurve(\"A\",\"gr1\");\n\ncoeff=Derivative(\"sin(x)\",x,A.x);\nfunstr=Assign(\"coeff*(x-A.x)+A.y\",[\"coeff\",coeff]);\nPlotdata(\"2\",funstr,\"x\",[\"Color=red\",\"Num=1\"]);\n\nPointdata(\"1\",A,[\"Size=3\"]);\n\nPutpoint(\"B\",[3,0.5],B.xy);\nPutpoint(\"C\",[-6,2],C.xy);\nLetter([A,\"n2\",\"A\"]);\nExpr([B,\"e\",\"y=\\\\sin x\"]);\nLetter([C,\"e\",\"\\\\Large The graph of $y=\\\\sin x$\"]);\n\nFigpdf();\nWindispg();", "explanation": "このコードは、関数 \\$y = \\sin x\\$ における任意の点Aにおいて接線を描く処理です。\n\n* `Putoncurve(\"A\",\"gr1\")`：点Aを関数グラフ上に置く\n* `Derivative(...)`：A.x における接線の傾きを計算\n* `Assign(...)`：傾きとAの座標から接線の関数式を生成\n* `Plotdata(\"2\",...)`：接線を赤色で1本だけ描画\n\nさらに、ラベルや注釈も追加されており、グラフ全体の理解がしやすくなっています。", "tags": ["Plotdata"]}
