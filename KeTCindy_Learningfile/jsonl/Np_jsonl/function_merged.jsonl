{"prompt": "section_01_`Ketinit(options)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 環境設定\n#### `Ketinit(options)`\n`Ketinit(options)`\nKeTCindyを初期化する。これがないとKeTCindyの関数等を使えないため、**必ず1行目に記述し、普通はオプションは不要**\n【例】\n```\nKetinit();//初期化\nListplot(\"1\",[A,B,C,A],[\"dr,2\"]);\nWindispg();\n```"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 環境設定\n#### `Initglist()`, `Setglist()`, `Addglist()`\n`Initglist()`, `Setglist()`, `Addglist()`\nketlib スロットで作られる描画データを描画リストに追加する。\n`Implicitplot`,`Hatchdata` など実行時間のかかるコマンドを figures スロットにおくと，その都度実行されてしまう。それを避けるため ketlib スロットにおいたときに用いる。\n【例】\nInitializationスロットに以下を追記する\n```\nInitglist(); // 描画データを初期化\nImplicitplot('1',fun,rng);//関数fun範囲rngの陰関数のグラフを描く\nSetglist(); //描画データをセット\n```\n以下はDrawスロットに書く。\n```\nKetinit();\nAddglist();//Initializationスロットでセットした描画データをまとめて追加する\n```"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 環境設定\n#### `Setfiles(filename)`\n`Setfiles(filename)`\n出力するファイル名の設定\n出力する Tex のファイル名を指定する。\n出力するファイル名は 初期設定では，作図している Cinderella のファイル名。\nたとえば，triangle.cdy で作図して出力すると，triangle.tex ができる。\nこれに対し，triangle.cdy で作図しているときに，grav.tex で出力したい場合は\n```\nSetfiles(\"grav\");\n```\nとすると，grav.tex ができる。"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 環境設定\n#### `Setparent(filename)`\n`Setparent(filename)`\nParent ボタンで出力するファイル名の設定\nFigpdf() を使って Parent ボタンで出力する Tex のファイル名を指定する。\nParent ボタンで出力するファイル名は 初期設定がないので，指定する必要がある。\nたとえば，triangle.cdy で作図しているときに，図サイズの grav.pdf を作る場合，\n```\nSetparent(\"grav\");\n```\nとすると，図の TeX ファイル triangle.tex と PDF を作る grav.tex ができ，ここから grav.pdf ができる。"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 環境設定\n#### `Changework(path)`\n`Changework(path)`\n作業ディレクトリを指定（変更）する\n作業ディレクトリは， 初期設定では，現在作図しているファイルのあるフォルダ（ディレクトリ）の fig フォルダである。これを変更する。"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 環境設定\n#### `Addpackage(パッケージ名)`\n`Addpackage(パッケージ名)`\nTeX のパッケージを追加する\nパッケージ名は1つの時文字列で、1つ以上の時リスト形式で記述する。\nなお、これはInitializationスロットに追記する形で記述するため注意すること。\n【例】emathパッケージを追加する。\n```\n//以下のどちらか\nAddpackage(\"emath\");\nAddpackage([\"emath\"]);\n```"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 環境設定\n#### `Usegraphics(\"tpic\"/\"pict2e\"/\"tikz\")`\n`Usegraphics(\"tpic\"/\"pict2e\"/\"tikz\")`\nTeXのグラフィクスパッケージを変更する。\nなお、これはInitializationスロットに追記する形で記述するため注意すること。\n【例】TeX出力時に使うグラフィックスパッケージをtikzに変更する。\n```\nUsegraphics(\"tikz\")\n```\n引数は文字列であるが、許されているのは\"tpic\"/\"pict2e\"/\"tikz\"の3つである。\n### 描画設定・定義"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 描画設定・定義\n#### `Addax(0 or 1)`\n`Addax(0 or 1)`\n座標軸の表示を選択する。\n【例】座標軸を表示する。\n```\nAddax(1);\n```\n【例】座標軸を表示しない。\n```\nAddax(0);\n```\nAddaxを書かなければ、表示はそのままとなる。座標軸のあるなしを明示したいときだけこれを記述する。"}
{"prompt": "section_09_`Setax()`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 描画設定・定義\n#### `Setax()`\n`Setax()`\n座標軸の書式を設定する。\n引数はリストで与え、順番に、\n1.軸の形状(直線は \"l\" ，矢印は \"a\") 初期設定は直線\n矢印の大きさの倍率を指定するときは，\"a0.5\"のようにする。\nまた，矢印のスタイルは Setarrow で指定する。\n2.横軸名 初期設定は \"x\"\n3.横軸名の位置 初期設定は \"e\"\n4.縦軸名 初期設定は \"y\"\n5.縦軸名の位置 初期設定は \"n\"\n6.原点名 初期設定は \"O\"（文字として書かれる）\n7.原点名の位置 初期設定は \"sw\"\n8.線種\n9.線の色\n10.ラベルの色\nそれぞれダブルクォートでくくる。色は，色名が使える。\"red\" など。\n【例】座標軸の先端を矢印にし，原点の北西に O を書く。\n```\nSetax([\"a\",\"\",\"\",\"\",\"\",\"\",\"nw\"]);//第8引数以降は省略\n```\n【例】原点の北西に O を書く。\n```\nSetax([7,\"nw\"]);//第7引数のみ指定\n```\n【例】軸を赤の点線にする。\n```\nSetax([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"do\",\"red\"]);\n```\n【例】先端を矢印にし，横軸を θ，縦軸を x にして矢じりの左側に書く。\n```\nSetax([\"a\",\"\\theta\",\"\",\"x\",\"w\"]);\n```"}
{"prompt": "section_100_`Sqr(実数)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Sqr(実数)`\n`Sqr(実数)`\n平方根を求める。"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `BBdata(ファイル名,option)`\n`BBdata(ファイル名,option)`\nTeX 文書において，inputgraphics コマンドで画像を貼り込むときの BB サイズを求める。TeX 処理系のextractbb を用いて画像ファイルから BB データを作り，テキストファイルとして作業ディレクトリに書き出す。これを読んで，コンソールに ingludegarphics のコマンドを書き出す。これをそのままコピーすればよい。\nなお，bb の値は整数値ではなく，高精細の値を小数点以下 2 桁に四捨五入して示される。画像ファイルは，PDF に限らず，PNG，JPG などでもよい。\noption は，幅または高さの指定。\n”w=40mm” で width=40mm が，”h=40mm”で height=40mm が付加される。"}
{"prompt": "section_102_`Cindyname()`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Cindyname()`\n`Cindyname()`\n作図中のファイル名を取得する。"}
{"prompt": "section_103_`Crossprod(リスト，リスト)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Crossprod(リスト，リスト)`\n`Crossprod(リスト，リスト)`\n2 つのベクトルの外積を求める。"}
{"prompt": "section_104_`Dotprod(リスト，リスト)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Dotprod(リスト，リスト)`\n`Dotprod(リスト，リスト)`\n2 つのベクトルの内積を求める。"}
{"prompt": "section_105_`Findarea(プロットデータ)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Findarea(プロットデータ)`\n`Findarea(プロットデータ)`\nプロットデータで囲まれる部分の面積を求める。"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Findlength(プロットデータ)`\n`Findlength(プロットデータ)`\nプロットデータの曲線の長さを求める。\n## ファイル操作"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "# 平面の図形とグラフ\n## ファイル操作\n### マーキング\n#### `isexists(dir,file)`\n`isexists(dir,file)`\ndir に file が存在するか\n返り値は`<bool>`型。"}
{"prompt": "section_108_`makedir(path,dirname)`  ", "completion": "# 平面の図形とグラフ\n## ファイル操作\n### マーキング\n#### `makedir(path,dirname)`\n`makedir(path,dirname)`\npath に dirname の dir を作成する。"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "# 平面の図形とグラフ\n## ファイル操作\n### マーキング\n#### `Filelist([mainpath,]dirname)`\n`Filelist([mainpath,]dirname)`\n(mainpath にある)dirname のファイルとフォルダの一覧をリストとして返す。\n返り値は`<list>`型。"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 描画設定・定義\n#### `Drwxy(), Drwxy(options)`\n`Drwxy(), Drwxy(options)`\n指定する手順で座標軸を描く\n座標軸は 初期設定では最後に描かれるが，座標軸上に白抜きの点を表示するなど，先に描くことが必要な場合に用いる。描画面には座標軸は表示されない。\noptions は次のオプションが許されている。\n`[\"Origin=\", \"Xrng=\", \"Yrng=\"]`"}
{"prompt": "section_110_`gethome()`  ", "completion": "# 平面の図形とグラフ\n## ファイル操作\n### マーキング\n#### `gethome()`\n`gethome()`\nユーザホームを返す。\n返り値は`<string>`型。"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "# 平面の図形とグラフ\n## ファイル操作\n### マーキング\n#### `ismacosx()`\n`ismacosx()`\nmacOSかどうかを返す\n返り値は`<bool>`型。\n## `iswindows()`\nWindowsかどうかを返す\n返り値は`<bool>`型。\n## `islinux()`\nLinuxかどうかを返す\n返り値は`<bool>`型。\n## その他"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Animationkey([番号リスト, 横位置リスト, 縦位置])`\n`Animationkey([番号リスト, 横位置リスト, 縦位置])`\nアニメーションの PLAY,REV,PAUSE,STOP を作成\nすでにある場合は位置を設定\nオプションのデフォルト値は，[71,72,73,74],[-4,-2,0,2],-6\n【例】\n```\nKetinit();\nSetketcindyjs([\"Label=[]\",\"Color=offwhite\",\"Figure=y\"]);\nAnimationkey();//Animationkeyを作成\nss=Animationparam(0,2,2*pi);//ssをアニメーション用変数として設定。変域は0から2piで速度は2\nPlotdata(\"1\",\"sin(x)\",\"x=[0,\"+text(ss)+\"]\",[\"Num=200\"]);\nWindispg();\n```"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Assign(文字列，文字，文字)`\n`Assign(文字列，文字，文字)`\n文字列の中のある文字を他の文字で置き換える\n第１引数の文字列中の第 2 引数の文字を，第 3 引数の文字で置き換える。\n第 3 引数が数値の場合，文字列に変換される。\n第 2 引数と，第 3 引数をリストにして，複数の置き換えをすることができる。\n【例】a\\*x を 1.3\\*x とした文字列を返す。次のいずれも同じ結果になる。\n```\nAssign(\"x^2+a*x\",\"a\",\"1.3\");//\"x^2+a*x\"の\"a\"を\"1.3\"に置換\nAssign(\"x^2+a*x\",\"a\",1.3);\n```"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Colorcode(種別 1, 種別 2, カラーコード)`\n`Colorcode(種別 1, 種別 2, カラーコード)`\n種別 1 から種別 2 へカラーコードを変換する。戻り値は変換されたコード。\n種別は，\"rgb\",\"cmyk\",\"hsv\"のいずれか。\n【例】変換例\n```\nKetinit();\ncol=Colorcode(\"rgb\",\"cmyk\",[1,0,0]);//RGBをCMYKに変換\nprintln(col);\ncol=Colorcode(\"cmyk\",\"rgb\",[0,1,1,0]);//CMYKをRGBに変換\nprintln(col);\ncol=Colorcode(\"rgb\",\"hsv\",[1,0,0]);//RGBをHSVに変換\nprintln(col);\nWindispg();\n```"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Dqq(文字列)`\n`Dqq(文字列)`\n文字列の前後に\\\"をつける。\nKetinit();\nstr=\"abc\";//strに文字列abcを代入\nstr2=Dqq(str);変数strの文字列の最初と最後に2重引用符(\")を付記してstr2に代入\nWindispg();"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Factorial(n)`\n`Factorial(n)`\nn!を計算する。(nは正の整数)\n```\nKetinit();\nprintln(Factorial(10));//10の階乗を計算して表示する\nWindispg();\n```"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Binomial(n,r)`\n`Binomial(n,r)`\n2 項係数を計算する。\n```\nKetinit();\nprintln(Binomial(15,7));//nCr(15,7)を計算して表示する\nWindispg();\n```"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Gcd(numberlist)`\n`Gcd(numberlist)`\nnumberlist の最大公約数を計算する。\n```\nKetinit();\nprintln(Gcd([24,60]));//24と60の最大公約数を計算して表示する\nWindispg();\n```"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`\n`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`\nベクトル（2 つのベクトルの場合は差の大きさ）の大きさを計算する。\n```\nKetinit();\nprintln(Norm([1,1]));//ベクトル(1,1)の大きさを計算して表示する\nprintln(Norm([1,1],[2,3]));ベクトル(1,1)->(2,3)の大きさを計算して表示する\nWindispg();\n```"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 描画設定・定義\n#### `Definecolor(色名 , 定義のリスト)`\n`Definecolor(色名 , 定義のリスト)`\n色名を定義する\nユーザー命名の色名を定義する。定義リストは RGB または CMYK のリスト\n各色０〜１の範囲で指定する。定義した色名は，`Setcolor(color,options)` で使うことができる。\nなお，KETCindy では，68 色を色名で使うことができる。色の名称はカラーコード一覧参照。\n【例】暗い紫色を darkmaz の名称で定義して使う。\n```\nDefinecolor(\"darkmaz\",[0.8,0,0.8]);//(R,G,B)=(0.8,0,0.8)の色をdarkmazとして定義\nSetcolor(\"darkmaz\");//darkmaz色をsetcolorする\n```"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Figpdf(option)`\n`Figpdf(option)`\n出力枠サイズの PDF を作る。\n```\nKetinit();\nListplot(\"1\",[A,B,C,A],[\"dr,2\"]);\nSetparent(\"test.pdf\");\nFigpdf();\nWindispg();\n```\nここで、Parentボタンを押すと、test.pdfが生成される。"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Indexall(str1,str2)`\n`Indexall(str1,str2)`\n文字列 str1 から str2 を検索しその位置をすべて返す\nCindyscript の indexof() の拡張版。indexof() が最初に見つかった位置を返すのに対し，Indexall() は存在する位置をすべてリストにして返す。\n```\nKetinit();\nprintln(Indexall(\"The quick brown fox jumps over the lazy dog.\",\"o\"));//Indexall関数で文の中のoを探して位置を取得し、それを表示する\nWindispg();\n```"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Bracket(str [,bracketpair])`\n`Bracket(str [,bracketpair])`\n文字列 str から bracketpair を検索しその位置と階層レベルのリストを返す。\nbracketpair のデフォルトは”()”。\n```\nKetinit();\nprintln(Bracket(\"(abc(de)fg)\"));//括弧の位置と深さを取得して表示\nWindispg();\n```"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Getlevel(str [,poslist または sep,key]);`\n`Getlevel(str [,poslist または sep,key]);`\n文字列 str から sep の位置と階層レベルのリストを返す。\nsep, key のデフォルトはコンマと ()。sep を与えたとき，poslist は sep の indexlist になる。"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Reparse(文字列か文字列のリスト)`\n`Reparse(文字列か文字列のリスト)`\n評価してから実部をとる。\n【例】\n```\nKetinit();\nprintln(Reparse(\"1+sqrt(-1)\"));//1+sqrt(-1)を計算して、実部を取る\nWindispg();\n```\nこの出力結果は\n```\n1\n```\nとなる"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Slider(名称，位置 1, 位置 2)`\n`Slider(名称，位置 1, 位置 2)`\nスライダを作成する\n名称は ”A-C-B” の形で，端点を A,B，スライダ点を C としたスライダを作る。\n端点 A,B の位置を，位置 1，位置 2 で指定する。単に”C”としたときは端点をとらない。スライダにより取得\nしたい値は，点 C の座標（たとえば C.x）を利用する。\n点 A,B,C はあらかじめ作図しておく必要はない。既にある場合はその点を使う。\n【例】\n```\nKetinit();\nSlider(\"A-C-B\",[-5,-2],[5,-2]);//A(-5,-2),B(5,2)を端点に、点Cをつまみとしてスライダーを作る\nPlotdata(\"1\",Assign(\"a*x^2\",[\"a\",C.x]),\"x\",[\"dr,2\"]);//C.xの値を元にax^2のグラフを描く。\nWindispg();\n```"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Sprintf(実数, 長さ)`\n`Sprintf(実数, 長さ)`\n小数点以下の長さを固定した文字列に変換\n実数を，小数点 n 位までの数とした文字列に変換する\n【例】\n```\nKetinit();\nprintln(Sprintf(6.2831,2));//6.2831の小数点以下第2位まで取得して表示\nWindispg();\n```\nこの出力結果は\n```\n6.28\n```\nとなる"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Textformat(数，桁数)`\n`Textformat(数，桁数)`\n小数点以下の桁数を指定して数を文字列化する。\n第１引数は数のリストでもよい。数のリストの場合は，戻り値は，対応する数値を指定桁数にした後，リストを文字列化する。Cindyscript の組み込み関数にも，`format()` という同様の関数があるが，`format()` は文字列のリストを返す。\n【例】\n```\nKetinit();\ndt=[1/6,0.5];\nprintln(Textformat(dt,4));// 1/6,0.5を指定桁数にした後，リストを文字列化して表示する\nprintln(format(dt,4));//1/6,0.5を指定桁数にして表示する\nWindispg();\n```\nこの出力結果は\n```\n[0.1667,0.5]\n[0.1667,0.5]\n```\nとなる。(両方同じなのは、printlnは文字列型を示す二重引用符を出力しないため)"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Windispg() または Windisp(データのリスト)`\n`Windispg() または Windisp(データのリスト)`\n定義されているプロットデータを Cinderella 画面に黒線で描く\nWindispg() は，スクリプトの最後に置くことで，出力される部分だけが黒で描かれるので，出力図を確認することができる。ただし，Letter() 関数で表示した点の名称などが Cinderella で作図したラベルと重なって表示されて見にくくなることもある。この関数を実行しなくても出力には影響しない。\nWindisp(データのリスト）は，R から KETCindy 用に出力されたファイルを ReadOutData() 関数で読み込んだときに，必要なプロットデータ列だけを表示するのに用いる。\nReadOutData(”filename.txt”) でデータを読み込むと，そのデータに含まれるプロットデータ列が，コンソールに\n```\nOutdata of filename.txt : [Gfn,Gdfn,Gh]\n```\nのように表示される。\nこのうち，Gfn と Gh だけを表示するのであれば\n```\nWindispg([Gfn,Gh]);\n```\nとする。引数なしで\n```\nWindispg();\n```\nとすればすべてのプロットデータ列が表示される。\nなお，いずれの場合も，作図したプロットデータも同時に表示される。\n作図した図を全てではなく選択して表示する場合は，それらのプロットデータ名をリストにして引数とする。\nたとえば，sg1, gr1, crAB が定義されているとき，\n```\nWindispg([\"sg1\",\"gr1\"]);\n```\nとすれば，sg1,gr1 のみが表示される。\n**Windispg()は普通、最後の行に書けば問題ない**"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Viewtex()`\n`Viewtex()`\nTeXのソースファイルを書き出す。引数なし。\nグローバル変数 Fhead で定義したファイル名に ”main” を付加した TEX のソースファイルとバッチファイル（Mac の場合はシェルファイル）を作成する。"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 描画設定・定義\n#### `Setcolor(color,options)`\n`Setcolor(color,options)`\n描画色の設定\n引数 color はカラーコードまたは色の名称。\nカラーコードは RGB または CMYK をリストで与える。各色０～１。\n色の名称はカラーコード一覧 の 68 色が指定できる。\n```\nKetinit();\nC.xy=|B.xy|/|C.xy|*C.xy;\nListplot([B,A,C]);\nSetcolor(\"red\");//描画色のデフォルトを赤色にする。ここより下ではSetcolorが再度実行されるまで赤色で描画される。\nAnglemark(\"1\",[B,A,C],[3]);\nArrowhead(C,\"ag1\",1);\nSetcolor(\"black\");\nWindispg();\n```\n**座標軸を描く場合は，このあと `Setcolor(\"black\")` で黒に戻しておかないと，座標軸が赤で表示されてしまうので要注意。**"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Workprocess()`\n`Workprocess()`\n作図の経過を取得する\n作図ツールを用いた作図の経過を取得する。\n```\nprintln(Workproccess());\n```\nとすると，コンソールに作図手順が表示される。"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Op(n,list or str)`\n`Op(n,list or str)`\nリストまたは文字列から要素を抜き出す\n第 2 引数のリストまたは文字列の n 番目の要素（文字）を返す。\nCindyscript の アンダーバーの演算子 (list_n , str_n) と同様。"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Strsplit(文字列 , 文字)`\n`Strsplit(文字列 , 文字)`\n文字列を分解する。\n第１引数の文字列を第 2 引数の文字の位置で分解したリストを返す。\n【例】文字 , で区切って分解する。\n```\nKetinit();\na=\"1,2,3,4,5\";\nprintln(Strsplit(a,\",\"));\nWindispg();\n```\nこの出力結果は、リスト型で\n```\n[1,2,3,4,5]\n```\nとなる。\n同様の関数に，Cindyscript の `tokenize(文字列, 文字列)` がある。`tokenize()` の第２引数は文字列や，文字のリ\nストでもよい。"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`\n`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`\n分母リストの 1 つを分母とする近似分数と誤差を返す。\n戻り値は，簡易 TeX-like 書式の文字列，誤差，分子，分母。\n【例】\n```\nKetinit();\nprintln(Fracform(2*pi,1..100););//2piを分母が1から100までの中で最も近い値を取る分数に近似してその簡易 TeX-like 書式の文字列、その分数の分子、分母、誤差を計算し、表示する\nprintln(Fracform(2*pi,300););//2piを分母が1から300までの中で最も近い値を取る分数に近似してその簡易 TeX-like 書式の文字列、その分数の分子、分母、誤差を計算し、表示する\nprintln(Fracform(0.1234,1000););//0.1234を分母が1から1000までの中で最も近い値を取る分数に近似してその簡易 TeX-like 書式の文字列、その分数の分子、分母、誤差を計算し、表示する\nWindispg();\n```"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Tonormalform(簡易 TeX-like 文字列)`\n`Tonormalform(簡易 TeX-like 文字列)`\n\\*を省略した文字列に\\*を補った文字列を返す。\n【例】\n```\nKetinit();\nprintln(Tonormalform(\"ax+b\"));//ax+bに乗算記号を付記して表示する\nWindispg();\n```\nこの出力結果は、\n```\na*x+b\n```\nとなる。"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "# 平面の図形とグラフ\n## その他\n### マーキング\n#### `Sla2fra(文字列)`\n`Sla2fra(文字列)`\n文字列の中の / を簡易 TeX-like 書式の分数に直す。\n【例】\n```\nKetinit();\nprintln(Sla2fra((\"(4+pi)/3\")));//(4+pi)/3を簡易 TeX-like 書式の分数に変換する\nWindispg();\n```\n# KeTCindy3D\n## 概要\nKeTCindy3Dの描画は次のように構成される.\nCinderellaの画面に白の短径で囲んだ領域が2つできる.\nNE, SWを対角とする左側の領域を主画面, 右側の領域を副画面という.\n主画面は平面の場合と同様, $$\\TeX$$に出力される範囲を示し,\nNE, SWの2点をドラッグすることにより変更できる.\n主画面の下方のスライダーで視点が移動でき,\n主画面上では軸が回転する.\n副画面はx, y平面上に視点を置いたものと考えればよい.\n主画面上にCinderellaの作図ツールで点や線分を作図すると,\n副画面に対応する点が作図される.\n主画面上の点をドラッグするとx, y座標を変更でき,\n副画面上の点をドラッグするとz座標を変更できる.\nKeTCindy3Dでは, 線や面についての陰線処理を行う.\n陰線処理はC言語との連携により処理を速めている\n(C言語を使う環境整備が必要であるが, 現在はこれを標準としている).\n## 設定"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "# KeTCindy3D\n## 設定\n### マーキング\n#### `Ketinit3d()`\n`Ketinit3d()`\nKeTCindy3Dの使用宣言.\nCinderellaの画面を3Dモードにする.\nCinderellaの画面に視点移動のための2つのスライドを作る.\nスライダーは初期位置が左端になる.\nスライダーTHで角THETAを, スライダーFIで角PHIを内部変数として定義する.\n引数に0を入れて`Ketinit3d(0)`とすると, 副画面を表示しない.\n**この関数はInitializationスロットに置く.**\n**`Ketinit()`も平面の場合と異なりInitializationスロットに置く.**\nKeTCindy3Dにおける変数の初期化などを行う`Start3d()`はDrawスロットに書く."}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "# KeTCindy3D\n## 設定\n### マーキング\n#### `Setangle(TH, FI)`\n`Setangle(TH, FI)`\n回転角の指定.\nスライダーで設定できる回転角(視点の位置)THとFIを度数法で指定する.\n例えば`Setangle(70, 40)`とするとTH, FIがその位置になる.\nスライダーは固定されるので再度スライダーを有効にしたい場合はコメント化して再実行する.\n初期状態だけを決めたい場合は\n```js\nif(!Ptselected(), Setangle(70, 40));\n```\nまたは\n```js\nif(!Isangle(), Setangle(70, 40));\n```\nとすると, スライダーは有効となりスライダーのいずれかの点を選択した状態であればFigureボタンも有効である.\n画面上の何もないところをクリックして,\n点の選択状態を解除すると元に戻る"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "# KeTCindy3D\n## 設定\n### マーキング\n#### `Start3d(option)`\n`Start3d(option)`\n3Dの画面設定と空間点の認識\n副画面を作り, 幾何点を3Dの点として認識する.\nこの関数は必須で, Drawスロットの先端に書く.\nCinderellaの作図ツールで点・線分を作図すると, 内部関数の`Ptseg3data()`\nによってそれらを空間の点として認識し, 副画面上に対応する点をとる.\n但し, 始めはz座標をを0とする.\n点の名前がAであれば副画面上の点はAzとなる.\n点をポイントとして選択すると副画面の上に座標が表示される.\n作図した点の名称をインスペクタで変更した場合, 新しい名称に対応する点を副画面上に作成するが,\n以前の点は消えないので要注意.\n例えば点Aを作図した後, 主画面上の点Aをインスペクタで点Dに変えた場合,\n副画面上に新たにDzができるが, 以前のAzも残る.\n残ったAzは洗濯しておいて作図ツールの消去ボタンで消すことができる.\n`option`に除外点のリストを与えるとその点は空間点としない(スライダーで視点を移動しても位置は変わらない).\n## `Startsurf(options)`\n曲面描画の初期化と定数の設定.\n`options`で定数を設定する.\n定数としては分割数, Cのサイズ, 誤差の限界を設定する.\n`options`がないときは以下の初期設定を用いる.\n- 分割数: [50, 50]\n- Cのサイズ: [1500, 500, 200]\n- 誤差の限界: [0.01, 0.1]\n設定後に初期値にリセットするときは文字列`reset`を引数に与える.\nこれにより陰線処理を伴う面の描画手順は, 次のようになる.\n1. `Startsurf()`で面描画の宣言をする.\n1. 描画関数でプロットデータを作る.\n1. `ExeccmdC()`でC言語を用いてまとめて描画する."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "# KeTCindy3D\n## `Startsurf(options)`\n### マーキング\n#### `Xyzaz3data(name, range_x, range_y, range_z, options)`\n`Xyzaz3data(name, range_x, range_y, range_z, options)`\n座標軸を描く.\n画面に座標軸を描き, プロットデータ`ax3d`を作成する.\n`name`は空文字列でよい.\n`options`は次の2つ.\n- 矢じり`an`: nは数字で矢じりの大きさ(nはなくてもよい).\n- 原点$$\\mathrm{O}$$`Onesw`: `nesw`は微小位置. 数字も付けられる(`nesw`をつけない場合, 初期値は`sw`).\n【例】初期設定の座標軸.\n```js\nXyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\");\n```\n矢じりをつける.\n```js\nXyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", \"a\");\n```\n矢じりを大きくする.\n```js\nXyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", [\"a2\"]);\n```\n原点$$\\mathrm{O}$$を表示する.\n```js\nXyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", [\"O\"]);\n```\n原点$$\\mathrm{O}$$の位置を調整して右上に表示する. 矢じりもつける.\n```js\nXyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", [\"a\", \"Oe2n2\"]);\n```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "# 平面の図形とグラフ\n## 設定・定義\n### 描画設定・定義\n#### `Deffun(関数名 , 定義のリスト)`\n`Deffun(関数名 , 定義のリスト)`\n関数を定義する\n関数定義は，CindyScript の関数定義 f(x):=式 でもできるが，Deffun() を使うことにより，R でこの関数を利用することができる。目的に応じて使い分けるとよい。\n式のリストには if 文を用いた場合分けの関数式を記述することもできる。\n【例】$$f\\left(x\\right)=\\frac{1}{x^2+1}$$を定義し、グラフを描く。\n```\nKetinit();\nDeffun(\"f(x)\",[\"regional(y)\",\"y=1/(x^2+1)\",\"y\"]);//f(x)=1/(x^2+1)として定義する\nPlotdata(\"1\",\"f(x)\",\"x\");//定義したf(x)のグラフを描く。\nWindispg();\n```\n【例】\n$$\nf\\left(x\\right)= \\begin{cases}\n1 & x\\geq 0 \\\\\n-1 & x< 0\n\\end{cases}\n$$\nを定義し、グラフを描く。\n```\nKetinit();\nDeffun(\"f(x)\",[\"regional(y)\",\"if(x>=0,y=1,y=-1)\",\"y\"]);//if文によって、x>=0のときはy=1,そうでないときはy=-1としている\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Dis=1\",\"Num=1000\"]);//Disオプションで値が1以上ジャンプする点は線を描かない\nWindispg();\n```\nまた以下のように、if 文はネストすることができる。\n```\nDeffun(\"f(x)\",[\"regional y\",\"if(x>1,y=1,if(x>-1,y=x,y=-1))\",\"y\"]);\n```\n## `Defvar(文字列)`\n変数を定義する"}
{"prompt": "section_14_説明  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### 説明\n説明\n変数の定義を R と共有する。\n【例】constを3と定義する\n```\nDefvar(\"const=3\");\n```\n【例】複数の変数を定義するときはリストにする。\n```\nDefvar([\"a\",3,\"b\",1]);\n```"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Fontsize(記号)`\n`Fontsize(記号)`\nフォントサイズを設定する\n次に `Fontsize()` を実行するまで有効\n記号は，`\"t\" , \"ss\" , \"f\", \"s\" , \"n\" , \"la\",\"La\", \"LA\", \"h\" , \"H\"` であり、この順番で大きくなる。\n【例】作図ツールの「点を加える」で，A～G の点をとっておく。小さい方からいくつか表示する。\n```\nFontsize(\"t\"); //一番小さくする。これは次に別の大きさで指定する時まで有効。\n```"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Ptsize(n) , Setpt(n)`\n`Ptsize(n) , Setpt(n)`\n表示する点の大きさを設定する。\n`Ptsize()` と `Setpt()` は同じである。 初期設定は１\n全体の点の大きさを設定する。\n【例】\n```\nPtsize(4);//点のサイズを4に変更。次実行するまで有効\n```\n点の大きさを個々に変えたい場合は，以下のようにsize オプションを用いる。\n【例】１から 4 までの点の大きさ\n```\nPointdata(\"1\",A,[\"Size=1\"]);\nPointdata(\"2\",B,[\"Size=2\"]);\nPointdata(\"3\",C,[\"Size=3\"]);\nPointdata(\"4\",D,[\"Size=4\"]);\n```"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Setmarklen(数)`\n`Setmarklen(数)`\n座標軸の目盛の長さを設定する\n`Htickmark()` , `Vtickmark()` で座標軸に目盛を入れるとき，その長さを設定する。"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Setorigin(座標)`\n`Setorigin(座標)`\n描画する座標軸の原点を設定（移動）する。座標系は変化しない。\n描画する座標軸の原点を引数の座標とする。座標は点の識別名でもよい。\n【例】原点を`(3,2)` として座標軸を描く。\n```\nSetorigin([3,2]);\n```\n【例】原点を点 A の位置にして座標軸を描く。\n```\nSetorigin(A);\n```"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Setpen(数)`\n`Setpen(数)`\n線の太さの初期値を設定する\n`Listplot()`などの描画関数のオプション dr で，個々の太さは指定できる。"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Setscaling(倍率)`\n`Setscaling(倍率)`\n縦方向の倍率を設定する。倍率は実数またはリスト。実数の場合は縦方向，リストの場合は [横方向，縦方向]\nの指定となる。\n2 次関数の応用問題などでは，グラフが縦に大きくなる場合があり，y 軸方向のスケーリングを変えたいこと\nがよくある。次のスクリプトは，f(x) = −x^2 + 10x のグラフを縦軸方向を半分にして描くものである。\n```\nKetinit();\nSetscaling(0.5);//全体の大きさを0.5にする\nA = createpoint(\"A\",[0,25/4]);\nB = createpoint(\"B\",[5/2,25/4]);\nC = createpoint(\"C\",[5/2,0]);\nListplot([A,B],[\"do\"]);\nListplot([C,B],[\"do\"]);\nPlotdata(\"1\",\"-2*x^2+10*x\",\"x\");\nLetter([[5,0],\"s2w\",\"5\",[0,25/2],\"w2\",\n\"$\\frac{25}{2}$\",C,\"s4\",\"$\\frac{5}{2}$\"]);\nWindispg();\n```\nなお、Cinderella で作図した幾何要素に対しては Setscaling は無効である。"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Setunitlen(文字列)`\n`Setunitlen(文字列)`\n単位長を設定する。 初期設定は 1cm。\nこの関数は，スクリプトの初めの方に書くのがよい。\n【例】文字幅を8mmにする\n```\nSetunitlen(\"8mm\")\n```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "# 平面の図形とグラフ\n## `Defvar(文字列)`\n### 描画設定・定義\n#### `Setwindow(x の範囲, y の範囲)`\n`Setwindow(x の範囲, y の範囲)`\n出力する描画領域を設定する。\n出力する描画領域は，通常は 2 点 SW と NE を対角とする矩形領域である。\nこの 2 点をドラッグすることによりビジュアルに描画領域を決められる。\nしかし，これとは別に出力範囲を設定したい場合にこの関数を用いる。\nまた，表を作成したときは，表の範囲が出力範囲として優先される（`Tabledata()` を実行したとき）ので，表外に図を描いた場合は，最後にこの関数で出力範囲を指定して書き出す。\n【例】[-5,5]を[-1,3]頂点に持つ長方形を描画範囲として定める。\n```\nSetwindow([-5,5],[-1,3]);\n```\n## 描画\n### 描画\n描画関数は曲線などを作図する関数である。\n基本的な書式は次の通り。\n```\n関数名 (name , 点リストなど , options);\n```\nname は，プロットデータの名称で，関数ごとに決められた頭部のあとに付けられる。たとえば，線分を描く`Listplot()` でできるプロットデータは，頭部が\"sg\"であり，name を\"1\"とすれば，\"sg1\"という名称のプロットデータができる。name 指定は不要の場合もあり，その場合は KETCindy が自動的に名称を作成する。なお，name に演算記号は使えないので，番号として負の数は使えない。\n点リストなどには，点の座標，点の識別名，複数の点のリスト，複数の点を示す文字列などがあり，関数によって異なる。点は Cinderella で作図した幾何要素の点を利用できる。\n`options` は，線種・表示する文字列・解像度・出力の有無などを指定するオプション群。\n線種はつぎの 4 通り。 初期設定は実線。\n| オプション | |\n|------------|----------------------------------------------------------------------------------------------------------|\n| dr,n | 太さ n の実線で描く。 |\n| da,m,n | 破線を描く。 mは破線の長さ、nは破線の間隔(m,nは省略可) m,nオプションはcinderellaの描画面には反映されない |\n| id,m,n | ギャップからはじまる破線を描く。 |\n| do,m,n | 点線で描く。 mは点の間隔,nは太さ(m,nは省略可) |\n描画色指定は，RGB または CMYK のリストで指定するか，色名を用いる。\n【例】\n```\n\"Color=[0,0.7,0]\"\n```\n出力するかどうかなど\n| オプション | |\n|------------|-------------------------------------|\n| notex | Cinderella 画面上の図形を出力しない |\n| nodisp | Cinderella 画面上にも出力しない |\n\"nodisp\"は画面上にも，Ｒへのデータにも出力されないが，プロットデータは作成されるので，プロットデータだけを利用したい場合に有効である。\n【例】A中心、Bを通る円を描画するがCinderella上には出力しない。\n```\npdata=Circledata([A,B],[\"nodisp\"]);\n```\nとして，後にプロットデータ pdata を利用する。\nその他\n| オプション | |\n|------------|-----------------------------------------------|\n| Size=n | 点の大きさ，線の太さの指定 |\n| Num=n | 曲線の場合の分割数(プロットデータの個数 +1)|\n特に断りがなければ以上のオプションが許されている。\n### 点・線分・直線"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Pointdata(name , 点リスト , options)`\n`Pointdata(name , 点リスト , options)`\n点のデータを作成する。\n与えられた座標の点データを作成する。オプションは\"Size=\",\"Color=\",\"Inside=\"が許されている。\nInside オプションは，点の内部についての指定（n : 内部を塗らない，color:内部色）\n【例】座標指定で 2 つの点データを作る。\n```\nPointdata(\"1\",[[1,2],[-2,3]]);\n```\n【例】\n座標指定で 2 つの点データを作る。\n```\nPointdata(\"1\",[[1,2],[-2,3]]);\n```\n作図した点 A,B について，点データを作る。\n```\nPointdata(\"1\",[A,B]);\n```\nA,B が作図されていない場合は作成されない。\nCinderella の描画面上では既存の点 A,B に黒の点が重なって表示される。\nA の位置に大きさ 4 で点を作る。\n```\nPointdata(\"1\",A,[\"Size=4\"]);\n```\n点データを作り，オプション（内部を塗らない）で描く\n```\nPointdata(\"1\",[A,B],[\"Inside=n\"]);\n```\n点データを作り，オプション（内部を白塗り）で描く\n```\nPointdata(\"1\",[A,B],[\"Inside=white\"]);\n```\n点データを作るが，TeX には出力しない\n```\nPointdata(\"1\",[[3,4],[5,6]],[\"notex\"]);\n```\n点データを作るが，TeX には出力せず画面上にも表示しない。\n```\nPointdata(\"1\",[[3,4],[5,6]],[\"nodisp\"]);\n```\n節点を明示した木を描く\n```\nPtsize(3);\nPointdata(\"1\",[[1,2],[3,4],[5,2]]);\nListplot(\"1\",[[0,0],[1,2],[3,4],[5,2],[4,0]]);\nListplot(\"2\",[[1,2],[2,0]]);\nListplot(\"3\",[[5,2],[6,0]]);\n```"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Putpoint(点名 , 座標1 , 座標 2 )`\n`Putpoint(点名 , 座標1 , 座標 2 )`\n点を動的に作る\n識別名が点名の点を，既存でなければ座標１に作る。既存ならば座標 2 に移動する。Tex には出力されない。\n【例】点 A を作る。\n(1,1) に固定点 A を作る。 この点は動かすことができない。\n```\nPutpoint(\"A\",[1,1]);\n```\n(1,1) に自由点を作るには次のようにする。\n```\nPutpoint(\"A\",[1,1],[A.x,A.y]);\n```\nこの点は座標 2 の効果により，自由点となり，ドラッグして動かすことができる。\n他の関数で点データを扱う場合はこれか作図ツールを用いて点を作図する必要がある。"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Putintersect(点名 , PD1 , PD2 , [No] )`\n`Putintersect(点名 , PD1 , PD2 , [No] )`\n2 曲線の交点を作る\nPD1,PD2 は 2 曲線のプロットデータ名。作成される点は幾何点。\n描画範囲に交点が１つだけのとき，第 4 引数がなくても交点が作られる。\n描画範囲に 2 つ以上の交点がある場合，第 4 引数を省略するとコンソールに交点の座標のリストと，「Choose point number 」というガイドが表示される。そこで，引数の No として，その番号を指定すると，その点が作られる。この関数で作成されるのは幾何点だけなので，TEX の図に点として明示するためには Pointdata() で書き出す。\n注）交点が存在しない場合は，「No intersect point」がコンソールに表示される。\n次の例は，3 次曲線と直線の交点を 3 つとも取ったものである。\n```\nPlotdata(\"1\",\"x^3-4*x\",\"x\",[\"Num=200\"]);//x^3-4*xのグラフを作成し、プロットデータgr1を作成する\nPlotdata(\"2\",\"1/2*x+1\",\"x\");//1/2*x+1のグラフを作成し、プロットデータgr2を作成する\nPutintersect(\"P\",\"gr1\",\"gr2\",1);//gr1とgr2の交点のうち 1番目を点Pとする。作図ツール等であらかじめ点を打つ必要はない\nPutintersect(\"Q\",\"gr1\",\"gr2\",2);//gr1とgr2の交点のうち 2番目を点Qとする。作図ツール等であらかじめ点を打つ必要はない\nPutintersect(\"R\",\"gr1\",\"gr2\",3);//gr1とgr2の交点のうち 3番目を点Rとする。作図ツール等であらかじめ点を打つ必要はない\nPointdata(\"1\",[P,Q,R],[\"size=4\"]);\n```"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Putoncurve(点の名前, プロットデータ, options)`\n`Putoncurve(点の名前, プロットデータ, options)`\n曲線上に点を乗せる。\n点が存在しない場合は新たに作る。すでにその点が存在する場合は，その点の x 座標を使う。初期値の x 座標の 初期設定は 0。\noptions は，x 座標の範囲をリストで与える。\n【例】アステロイド上の動点 P をとる。\n```\nParamplot(\"1\",\"[2*cos(t)^3,2*sin(t)^3]\",\"t=[0,2*pi]\");//アステロイド曲線(媒介変数表示で[2*cos(t)^3,2*sin(t)^3])を描画しプロットデータgp1を作成する\nPutoncurve(\"P\",\"gp1\",[-1,1]);//gp1上の[-1,1]にPを置く\n```\n点 P がアステロイド上にでき，この点はドラッグするとアステロイド上を −1 ≤ x ≤ 1 の範囲で動かすことができる。ただし，-1,1 の付近は y 座標の判断の関係でぴったりはいかない。"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Putonline(点名 , 座標１ , 座標 2 )`\n`Putonline(点名 , 座標１ , 座標 2 )`\n直線上に点を作る\n座標１，座標 2 を通る直線上に点名の点を作る。できた点は直線上しか動かない\n【例】点 A, B を通る直線上に点 P をとる。\n```\nPutonline(\"P\",A,B);\n```"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Putonseg(点名 , 座標１ , 座標 2 )`\n`Putonseg(点名 , 座標１ , 座標 2 )`\n線分上に点を作る 説明\n座標１，座標 2 を端点とする線分上に点名の点を作る。できた点は線分上しか動かない。指定した点がすでに存在する場合は動かさない。\n【例】\n線分 AB 上に点 C をとる。\n```\nPutonseg(\"C\",A,B);\n```\n点 (-1,0),(2,2) を通る線分上に点 C をとる。\n```\nPutonseg(\"C\",[[-1,0],[2,2]]);\n```"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Reflectpoint(点，対称点または対称軸)`\n`Reflectpoint(点，対称点または対称軸)`\n点の鏡映の座標を返す。\n点を指定された点または軸に関して対称移動した点の座標を返す。対称軸は [ 点 1, 点 2 ] で指定\n【例】点 A～F を作図しておき，C～F を A の鏡映の位置に配置する。\nＣは B に関して A と対称な点\nＤは点 (2,3) に関して A と対称な点\nE は点 (1,0) に関して (-1,1) と対称な点\nF は直線 CE に関して A と対称な点\n```\nC.xy=Reflectpoint(A,B);\nD.xy=Reflectpoint(A,[[2,3]]);\nE.xy=Reflectpoint([-1,1],[[1,0]]);\nF.xy=Reflectpoint(A,[C,E]);\n```"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Rotatepoint(点 ,角度 , 中心)`\n`Rotatepoint(点 ,角度 , 中心)`\n点の位置を回転する\n点を，中心で示された点の周りに回転した座標を返す。角度は弧度法で与える\n点 A～E は作図しておき，C～E をそれぞれの位置に配置する。\n点 C は A を，Ｂに関して\\frac{2}{3}\\piだけ回転した点\n点 D は点 (5,2) を，Ｂに関して \\frac{\\pi}{3}だけ回転した点\n点 E は点 (3,0) を A に関して -\\frac{\\pi}{4}だけ回転した点\n```\nC.xy=Rotatepoint(A,2*pi/3,B);\nD.xy=Rotatepoint((5,2),pi/3,B);\nE.xy=Rotatepoint([3,0],-pi/4,A);\n```"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Scalepoint(点，比率ベクトル，中心)`\n`Scalepoint(点，比率ベクトル，中心)`\n点の位置の拡大・縮小を行う\n点を，指定された中心を原点とする座標系で，比率ベクトルの分だけ拡大・縮小した位置の座標を返す。\n【例】点 A～F は作図ツールで適当な位置にとっておく。\n点 D を，点 A を原点を中心に横に 3 倍，縦に 2 倍した位置に置く。\n点 E を，点 A を点 B を中心に横に 3 倍，縦に 2 倍した位置に置く。\n点 F を，点 A を原点を中心にベクトル −−→OC で示された比率の位置に置く。\n```\nD.xy=Scalepoint(A,[3,2],[0,0]);\nE.xy=Scalepoint(A,[3,2],B);\nF.xy=Scalepoint(A,C.xy,[0,0]);\nArrowdata(\"1\",[[0,0],C]);\nPointdata(\"1\",[A,B,C,D,E,F],[\"size=2\"]);\nLetter([A,\"e2\",\"A(\"+A.x+\",\"+A.y+\")\"]);\nLetter([B,\"e2\",\"B(\"+B.x+\",\"+B.y+\")\"]);\nLetter([C,\"e2\",\"C(\"+C.x+\",\"+C.y+\")\"]);\nLetter([D,\"e2\",\"D(\"+D.x+\",\"+D.y+\")\"]);\nLetter([E,\"e2\",\"E(\"+E.x+\",\"+E.y+\")\"]);\nLetter([F,\"e2\",\"F(\"+F.x+\",\"+F.y+\")\"]);\n```\n点 A,B,C をドラッグすると，インタラクティブに D,E,F の位置が変わる。"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Translatepoint(点 , 移動ベクトル)`\n`Translatepoint(点 , 移動ベクトル)`\n点を平行移動する\n点を移動ベクトルで示された分だけ平行移動した点の座標を返す\n【例】点 A～D は作図しておく。\n点 C を点 A を x 軸方向に 2 , y 軸方向に 3 だけ平行移動した点にする。\n点 D を点 A をベクトル OB だけ平行移動した点にする。\n```\nC.xy=Translatepoint(A,[2,3]);\nD.xy=Translatepoint(A,B.xy);\n```"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Setarrow([arrowsize,angle,position,cut])`\n`Setarrow([arrowsize,angle,position,cut])`\nArrowdata,Arrowhead で描く矢印のスタイルを設定する。\narrowsize,angle,position,cut,linestyle は，順に大きさ (1)，開き角 (18)，位置 (1)，切り込み (0.2) である。 （カッコ内はデフォルト値）"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Arrowdata(name,[始点 , 終点] , options)`\n`Arrowdata(name,[始点 , 終点] , options)`\n2 点間を結ぶ矢線を描く。\nname はなくてもよい（自動的に通し番号をつける）。\noptions は矢じりの形状などの指定（リストで与える）。\n数値は， 大きさ, 開き角, 位置, 切り込み\n`\"Line=n(y)\"`（矢印は線だけ），`\"Cutend=\"`（トリミング），`\"Color=\"`\n開き角は 60 分法で与える。2.5 未満の時は 18°の倍数指定とする。\n矢じり位置は，線分の長さを１とした始点からの距離。\n切り込みのデフォルトは 0.2\nトリミング :`\"Cutend=m\"` または `\"Cutend=[m,n]\"` で，右辺が数のときは両端を m だけカットする。リストのときは始点を m, 終点を n だけカットする。m が負のときは延長する。\n【例】オプションの設定とその結果を示す。\n```\nArrowdata(\"1\",[A,B]);//点Aから点Bに矢印を引く\nArrowdata(\"2\",[[1,0],[2,3]],[2]);//(1,0)から(2,3)に大きさ2の矢印を引く\nArrowdata(\"3\",[[2,0],[3,3]],[3,45]);//(2,0)から(3,3)に大きさ3,開き角45の矢印を引く\nArrowdata(\"4\",[[3,0],[4,3]],[3,1,0.5]);//(3,0)から(4,3)に大きさ3,開き角1,位置0.5の矢印を引く\nArrowdata(\"5\",[[4,0],[5,3]],[3,1,1,0]);//(4,0)から(5,3)に大きさ3,開き角1,位置1,切り込み0の矢印を引く\nArrowdata(\"6\",[[5,0],[6,3]],[3,\"Line=y\"]);//(5,0)から(6,3)に大きさ3,線だけの矢印を描画する\nArrowdata(\"7\",[[6,0],[7,3]],[3,\"dr,2\"]);//(6,0)から(7,3)に大きさ3,実践で線の太さ2の矢印を引く\nArrowdata(\"8\",[[7,0],[8,3]],[3,1,1,0.5,\"Color=red\"]);//(7,0)から(8,3)に大きさ3,開き角1,位置1,切り込み0.5,色が赤色の矢印を引く\n```"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Arrowhead(点 , 方向 , options)`\n`Arrowhead(点 , 方向 , options)`\n指定された位置に，指定された方向を向いた矢じりだけを描く。\n点は座標または幾何要素名。方向は原点から見て座標 [a,b] の方向。\noptionsはsetarrowと同じ。\n【例】\n```\nArrowhead(A,[-1,1]);//Aの位置にAからみて(-1,1)の位置に(座標ではない)矢じりだけを描く\nArrowhead([1,1],[-1,1],[2,60]);//(1,1)の位置に(1,1)からみて(-1,1)の位置に(座標ではない)大きさ2,開き角60の矢じりだけを描く。\nArrowhead(A,[-1,1],[2,30,0.5]);//Aの位置にAからみて(-1,1)の位置に(座標ではない)大きさ2,開き角30,位置0.5の矢じりだけを描く。\nArrowhead([1,1],[-1,1],[2,20,0.5,\"Line=y\"]);//(1,1)の位置に(1,1)からみて(-1,1)の位置に(座標ではない)大きさ2,開き角20,位置0.5で線だけの矢じりを描く。\n```"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Arrowhead(点または位置比 , プロットデータ, options)`\n`Arrowhead(点または位置比 , プロットデータ, options)`\nプロットデータ（曲線）を指定したときは，曲線上の点に矢じりをつける。\n曲線には向きがあり，それによって矢じりの向きが決まる。\n\"Invert(曲線名)\" とすると反対向きの矢じりになる。\n曲線の向きとは，曲線を描くときの順序で，プロットデータの順序でもある。\n位置比は曲線上の位置を表す比率（0 から 1）。\n曲線cr1 上の点 A の位置比が 0.6 のとき\n```\nArrowhead(A,\"cr1\");//cr1上の点Aに矢じりを描く\nArrowhead(0.6,\"cr1\",[2,1,0.5,\"Color=red\"]);//cr1上の位置比0.6の点に大きさ2,開き角1,位置0.5に赤色の矢じりを描く\nArrowhead(1,\"cr1\");//cr1上の位置比1の点に矢じりを描く\nArrowhead(1,\"Invert(cr1)\",[\"Line=y\"]);//cr1とは逆向きの曲線上の位置比1のところに線だけの矢じりを描く\n```"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Lineplot（name , 2 点のリスト , options)`\n`Lineplot（name , 2 点のリスト , options)`\n2 点のリストで示された点を結ぶ直線を描く。\n2 点のリストは座標または幾何要素の名前で与える。\noptions は次の通り。\n線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\n\"+\"半直線を描く。\n\"dr\" , \"da\" , \"do\" と \"+\" はリストにして両方指定することができる。\n点のリストが，座標ではなく幾何要素名のリストの場合は，name は省略できる。\nいくつか例を示す。\n【例】(0,0)と(1,2)を結ぶ直線を書く\n```\nLineplot(\"1\",[[0,0],[1,2]])\n```\nCinderella の描画ツールで 2 点 A,B をとっておき，直線 AB を引く\n```\nLineplot([A,B]);\n```\noption の働きの例\n```\nLineplot([A,B],[\"dr,0.5\",\"+\"]); //A を端点とする半直線を引く\nLineplot([C,D],[\"dr,2\"]); //直線 CD を太さ 2 で描く\nLineplot([E,F],[\"da\"]); //直線 EF を破線で描く\nLineplot([G,H],[\"do\"]); //直線 GH を点線で描く\n```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Listplot（name , 点のリスト , options)`\n`Listplot（name , 点のリスト , options)`\n点のリストで示された点を結ぶ。\n点のリストは座標または幾何要素名のリストで与える。点が，座標ではなく幾何要素名の場合は，name は省略可\nプロットデータの名前は，\"sg\" に引数の name を付加したものとなる。\noptions は次の通り。\n線種 \"dr, n\", \"da,m,n\" , \"do,m,n\"\nトリミング :\"Cutend=m\" または \"Cutend=[m,n]\"\n数のときは両端を m だけカットする。リストのときは始点を m, 終点を n だけカットする。m が負のときは延長する。\noptions の使用例\n```\nListplot([A,B]); //線分 AB を描く。太さは 初期設定。\nListplot([C,D],[\"dr,2\"]); //線分 CD を描く。太さ 2\nListplot([E,F],[\"da\"]); //線分 EF を破線で描く\nListplot([G,H],[\"da,3,1\"]); //線分 GH を破線で描く。線を長く\nListplot([K,L],[\"da,1,3\"]); //線分 KL を破線で描く。間隔を空ける\nListplot([M,N],[\"do\"]); //線分 MN を点線で描く。\nListplot([O,P],[\"do,3\"]); //線分 OP を点線で描く。間隔を空ける\nListplot([Q,R],[\"do,3,3\"]); //線分 QR を点線で描く。間隔を空けて太く\n```\n【例】三角形を描く。\nCinderella の作図ツールで三角形 ABC を描いておく。あるいは，単に 3 点 A,B,C をとるだけでもよい。\n```\nAddax(0);\nListplot([A,B,C,A]);\n```\n点の位置は座標で指定してもよい。\nその場合は name が必要。\n```\nListplot(\"1\",[[0,0],[2,0],[1,2],[0,0]]);//(0,0),(2,0),(1,2),(0,0)を結んだ線を描画する。\n```\n【例】有限フーリエ級数展開\n\\frac{\\pi}{2}+\\sum_{n=0}^{30}\\frac{1-\\left(-1\\right)^n}{n} \\sin nx\n次のように Cindyscript で関数を定義し，プロットデータ pd を作って引数に渡す。\n```\nf(x):=(\ns=pi/2;\nrepeat(30,n,s=s+(1-(-1)|^n)/n*sin(n*x));\n);\npd=apply(0..200,t,\nx=-2*pi+t*4*pi/200;\n[x,f(x)];\n);\nListplot(\"1\",pd);//リストであるpdに格納されている点を結ぶ\nExpr([[-2*pi,-0.5],\"s\",\"-2\\pi\",[-pi,-0.5],\"s\",\"-\\pi\",[pi,-0.5],\"s\",\n\"\\pi\",[2*pi,-0.5],\"s\",\"2\\pi\",[0,pi],\"w2\",\"\\pi\"]);\n```\nリストの長さには制限がある。たとえば，タートルグラフィクスを用いたシェルピンスキーのギャスケットで\nは 200 くらいずつのリストに分割する。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Framedata(name , リスト,options)`\n`Framedata(name , リスト,options)`\n矩形を描く\nリストの形は 2 通り。\nその 1：[中心 , 横 , 縦] で，矩形を描く。横，縦は中心からの距離。\nその 2：2 点のリスト。点が座標でなく名称のときは name は省略できる。\n点の座標は点の名前でもよい。点を座標で与える場合は name は省略できない。\nリストを省略した場合は，描画範囲と同一の矩形を描く。\nその 2 のタイプでは，option として，\"center\" または \"corner\" がある。\"center\" のときは，中心と対角点（ 初期設定），\"corner\" のときは 2 点を対角点として解釈する。\n以下にいくつか例を示す\n```\nFramedata(\"1\");//描画範囲 (SW,NE) と同一の矩形を描く\nFramedata(\"2\",[[0,0],2,2]);// 原点を中心とする縦横幅 4 の正方形を描く\nFramedata(\"3\",[A,1.5,1.2]);// 点 A を中心とする横 3，縦 2.4 の矩形を描く。\nFramedata([B,C]);// 点 B を中心, 点 C を頂点とする矩形を描く。\nFramedata([D,E],[\"corner\"]);// 点 D,E を対角点とする矩形を描く。\n```\n矩形の角を丸めたい場合は，`Framedata()` ではなく，`Ovaldata()` を使うとよい。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 点・線分・直線\n#### `Polygonplot(name , 点リスト , 整数,options)`\n`Polygonplot(name , 点リスト , 整数,options)`\n2 点を半径とする円に内接する正多角形を描く。\n点リストを [A,B] とすると，A を中心とする半径 AB の円周上に点をとって正多角形を描く。ただし円は描かない。A,B は座標でもよい。\n点リストが座標ではなく作図してある点の名称のとき，オプションに\"Geo=y\" をつけると，頂点の幾何点を作る。幾何点の名称は B に番号を付けたものとなる。整数でない数を指定した場合は，きちんと閉じない折れ線が描かれる。\n【例】\n```\nAddax(0);\nPolygonplot(\"1\",[[-4,1],[-4,3]],7);//(-4,1)を中心とし、(-4,3)を通る円に内接する7角形を描く\nPolygonplot(\"2\",[A,B],7);//Aを中心とし、Bを通る円に内接する7角形を描く\nPolygonplot(\"3\",[C,D],7,[\"Geo=y\"]);//Cを中心とし、Dを通る円に内接する7角形を描き、Cinderella上に点を作図する\n```\n円に内接する形でなく，与えられた線分 AB を１辺とする正多角形を描くには次のようにする。\n線分 AB は，Cinderella の作図ツールなどで描かれているものとする。ただし，線分でなく，両端の点が与えられているだけでもよい。Cindyscript で点 A,B が複素平面上にあるものとして，多角形の頂点の位置を計算する。\n【例】AB を 1 辺とする正五角形を描く。\n```\nn=5;\npti=[complex(A),complex(B)];\nth=2*pi/n;\nrepeat(n-2,s,\nz1=pti_s;\nz2=pti_(s+1);\nz=z2+(z2-z1)*(cos(th)+i*sin(th));\npti=append(pti,z);\n);\npt=apply(pti,gauss(#));\npt=append(pt,A.xy);\nListplot(\"1\",pt);\n```\npti は，各頂点に対応する複素数のリスト，pt が各頂点の座標のリストである。\n### 曲線"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Bezier(名前，節点リスト，制御点リスト，[オプション] )`\n`Bezier(名前，節点リスト，制御点リスト，[オプション] )`\nベジェ曲線を描く\n制御点は，各区間に対して，3 次の場合 2 個，2 次の場合 1 個のリストで与える。\nオプションは\n\"Num=n\": 節点間の分割数（分点数 −1）を指定できる。 ベジェ曲線とスプライン曲線の関数は節点間が短\nい場合が多いので初期設定は 10 になっている。Plotdata() などと違い，大きい数（200 など）を指定すると，\n全体の分割数が増大して描画時間がかかるようになってしまうので注意。\n```\nKetinit();\n//点ABCを定義\nPutpoint(\"A\",[-5,0],[A.x,A.y]);\nPutpoint(\"B\",[5,0],[B.x,B.y]);\nPutpoint(\"C\",[2,3],[C.x,C.y]);\n//節点がA,Bで制御点がCの2次のベジェ曲線を描画する。分割数は200。\nBezier(\"1\",[A,B],[C],[\"Num=200\"]);\nWindispg();\n```\n【例】3次ベジェ曲線(節点がA,Bで制御点がC,D)\n```\nBezier(\"2\",[A,B],[C,D]);\n```\n【例】節点を増やす。2次と3次。(A-B間はDを制御点とする2次のベジェ曲線,B-C間はE,Fを制御点とする3次のベジェ曲線)\n```\nBezier(\"3\",[A,B,C],[[D],[E,F]]);\n```\n【例】全て同じ次数の場合(全て3次で、A-B間,B-C間,C-D間の制御点はそれぞれEとF,GとH,KとL)\n```\nBezier(\"4\",[A,B,C,D],[E,F,G,H,K,L]);\n```\nオプションの例\n```\nBezier(\"5\",[A,B,C],[[D],[E,F]],[\"Num=3\"]);//分割数を3に指定\nBezier(\"6\",[A,B,C],[[D],[E,F]],[\"Num=40\",\"da\"]);//分割数を40に指定し、破線で描く\nBezier(\"1\",[A,B,C,D],[E,F,G,H,K,L],[\"Num=[2,3,4]\"]);//A-B間の分割数を2に、B-C間の分割数を3に、C-D間の分割数を4にする。\n```"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Beziersmooth(名前，節点リスト，[オプション] )`\n`Beziersmooth(名前，節点リスト，[オプション] )`\n節点間を3次ベジェ曲線でスムーズに結んだ曲線を描く\n節点をはさむ制御点は１直線上にとる（したがって，１つは半自由点で，直線上しか動けない）。制御点は自動的に配置される。その後，節点や制御点を動かして，描きたいものにする。\n```\nKetinit();\nSetketcindyjs([\"Figure=y\"]);\n//点A,B,C,Dをそれぞれ定義\nPutpoint(\"A\",[-5,0],[A.x,A.y]);\nPutpoint(\"B\",[5,0],[B.x,B.y]);\nPutpoint(\"C\",[2,3],[C.x,C.y]);\nPutpoint(\"D\",[2,-2],[D.x,D.y]);\nBeziersmooth(\"1\",[A,B,C,D],[\"num=2000\"]);//A-B,B-C,C-D間を3次ベジェ曲線でスムーズに結んだ曲線を描く(節点を挟む制御点は一直線上)\nPointdata(\"1\",[A,B,C,D],[\"Size=2\"]);\nLetter([A,\"n2\",\"A\",B,\"n2\",\"B\",C,\"n2\",\"C\",D,\"n2\",\"D\"]);\nWindispg();\n```"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Beziersym(名前，節点リスト，[オプション] )`\n`Beziersym(名前，節点リスト，[オプション] )`\n節点間を 3 次ベジェ曲線でスムーズに結んだ曲線を描く\n節点をはさむ制御点は節点に関し対称（片方は表示されず，動かせない）。制御点は自動的に配置される。その後，節点や制御点を動かして描きたいものにする。\n【例】\n```\nKetinit();\nPutpoint(\"A\",[-5,0],[A.x,A.y]);\nPutpoint(\"B\",[5,0],[B.x,B.y]);\nPutpoint(\"C\",[2,3],[C.x,C.y]);\nPutpoint(\"D\",[2,-2],[D.x,D.y]);\nBeziersym(\"1\",[A,B,C,D],[\"num=2000\"]);//A-B,B-C,C-D間を3次ベジェ曲線でスムーズに結んだ曲線を描く(節点を挟む制御点は節点に関し対称)\nPointdata(\"1\",[A,B,C,D],[\"Size=2\"]);\nLetter([A,\"n2\",\"A\",B,\"n2\",\"B\",C,\"n2\",\"C\",D,\"n2\",\"D\"]);\nWindispg();\n```"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`\n`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`\n複数のベジェ曲線を描く\n[節点リスト, 制御点リスト] が１つの場合は，Bezier() と同じ。\n【例】\n```\nKetinit();\naddax(0);\nMkbeziercrv(\"5\",[[[A,B,C],[[D],[E,F]]],[[G,H,K,L],[[M],[N,O],[P]]]],[\"Num=200\"]);//A-B間を点Dで制御、B-C間を点E,Fで制御するベジェ曲線、G-H間を点Mで制御、H-K間を点N,Oで制御、K-L間を点Pで制御するベジェ曲線をそれぞれ描く(PD名は前者がbz51、後者がbz52となる。bz+name+指定した順番となる。)\nLetter([A,\"s2\",\"A\"]);\nLetter([B,\"s2\",\"B\"]);\nLetter([C,\"s2\",\"C\"]);\nLetter([D,\"n2\",\"D\"]);\nLetter([E,\"n2\",\"E\"]);\nLetter([F,\"n2\",\"F\"]);\nLetter([G,\"s2\",\"G\"]);\nLetter([H,\"s2\",\"H\"]);\nLetter([K,\"s2\",\"K\"]);\nLetter([L,\"s2\",\"L\"]);\nLetter([M,\"n2\",\"M\"]);\nLetter([N,\"n2\",\"N\"]);\nLetter([O,\"n2\",\"O\"]);\nLetter([P,\"n2\",\"P\"]);\nPointdata(\"1\",[A,B,C,D,E,F,G,H,K,L,M,N,O,P],[\"Size=2\"]);\nWindispg();\n```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Mkbezierptcrv( ptlist，[オプション] )`\n`Mkbezierptcrv( ptlist，[オプション] )`\nベジェ曲線を描く\n**制御点は，自動的に配置される。**\nptlistには節点を記載する。\n複数の場合は` [ ptlist1, ptlist2.... ]`\n名前は，a から順に自動的につける。 (プロットデータ名はbza,bzb,bzc...となる)\nオプション\n\"Deg=...\" 次数指定ができる。（初期設定は 3 次）\n\"Num=...\" 各区間の区間数（分点数 −1）を指定できる。（初期設定は 10）\n【例】\n```\nKetinit();\nPutpoint(\"A\",[-5,0],[A.x,A.y]);\nPutpoint(\"B\",[5,0],[B.x,B.y]);\nPutpoint(\"C\",[2,3],[C.x,C.y]);\nMkbezierptcrv([A,B,C]);//A-B,B-C間を3次のベジェ曲線で結ぶ。制御点は自動生成。\nWindispg();\n```\nその他の例\n【例】制御点の数を1つにする\n```\nMkbezierptcrv([A,B,C],[\"Deg=2\"]);//A-B,B-C間を2次のベジェ曲線で結ぶ。制御点は自動生成。次元数に応じてDeg=の値を書き換える。3次元なら3でよい。\n```\n【例】節点の数を増やす\n```\nMkbezierptcrv([A,B,C,D,E,F,X]);//点の数に応じてptlistのリストの長さを変化させる。\n```\n【例】複数の場合\n```\nMkbezierptcrv([[A,B,C],[D,E,F,G]]);//A-B,B-C間とD-E,E-F,F-G間をそれぞれ3次のベジェ曲線で結ぶ。\n```"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Bspline(名前，制御点リスト，[オプション] )`\n`Bspline(名前，制御点リスト，[オプション] )`\n2 次 B-spline 曲線を描く\n節点は自動的に計算され，表示されない\n【例】\n```\nBspline(\"1\",[A,B,C,D,E])//A-B,B-C,C-D,D-E間をBsplineで結ぶ。点の数に応じてリストの中身を変更すれば良い。\n```\nこれは， `Bezier(\"1\",[A,(B+C)/2,(C+D)/2,E],[B,C,D])` と同じ。**曲線の名前が `bz1` ではなく `bzb1` となる。**\n通常の B-spline 曲線の端の制御点の代わりに，端点を動かせるようにしている。\n【例】\n```\nBspline(\"1\",[A,B,C,D,A]); //A-B,B-C,C-D,D-A間をBsplineで結ぶ。点の数に応じてリストの中身を変更すれば良い。\n```\nリストの最初と最後が同じ場合は閉曲線になる。\n`Bezier(\"1\",[(D+A)/2,(A+B)/2,(B+C)/2,(C+D)/2,(D+A)/2],[A,B,C,D]);`と同じ。"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `CRspline(名前，節点リスト，[オプション] )`\n`CRspline(名前，節点リスト，[オプション] )`\n単独の Catmull-Rom スプライン曲線を描く\n自由点は，節点のみで，制御点は節点から作られ移動はできない。\nオプションに，通常のオプションのほか，次が使える。\nsize ->n:画面上での線の太さを指定する。\n【例】\n`CRspline(\"1\",[A,B,C,D]);`"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Ospline(名前，制御点リスト，[オプション] )`\n`Ospline(名前，制御点リスト，[オプション] )`\n大島の spline 曲線を描く\n制御点を通るスプライン曲線を描く\nリストの最初と最後が同じ場合は閉曲線になる。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Circledata(name, リスト,options)`\n`Circledata(name, リスト,options)`\n円または多角形を描く。\n中心の点と，円周上の 1 点（か半径），または 3 点をリストで与えて円を描く。\n中心と円周上の点を，座標ではなく幾何要素名で指定する場合は name は省略可。\noptions は以下のものをリストで与える。省略した場合は実線で円が描かれる。\n`\"Rng=[θ1, θ2]\"` 角 θ1 から θ2 の範囲の弧を描く。角は弧度法で与える。\n`\"Num=分割数\"` 円を描くときの分割数。値が小さい場合は多角形になる。\n線種 `\"dr, n\"`, `\"da,m,n\"` , `\"do,m,n\"`\n【例】\n```\nKetinit();\naddax(0);\nCircledata(\"1\",[[0,0],[2,0]],[\"dr,2\"]);//中心が(0,0)で(2,0)を通る円を太さ2の実線で描画する。\nWindispg();\n```\n【例】\n```\nCircledata([A,B]);//A中心、半径ABの円\nCircledata(\"1\",[A,A+[2,0]]);A中心、半径2の円\nCircledata([A,B,C]);//点A,B,Cを通る円。プロットデータ名は\"crABC\"\n```\n`Circledata([A,B,C]);` で，3 点 A,B,C を通る円を描いたとき，できた円の中心は `Pointdata(\"1\",[crABCcenter]);`で作図できる。\n【例】扇型を描く\n```\nKetinit();\naddax(0);\nPutpoint(\"A\",[0,0],[A.x,A.y]);\nPutpoint(\"B\",[3,0],[B.x,B.y]);\nCircledata([A,B],[\"Rng=[0,pi/3]\"]);//A中心、半径ABの円のうち、角度が0からpi/3までの部分だけ描画する。角度を変えたいときは、Rng=のリストの中の値を変更すれば良い。\nPointdata(\"1\",[A,B],[\"Size=2\"]);\nLetter([A,\"s2\",\"A\",B,\"s2\",\"B\"]);\nWindispg();\n```\n【例】円を太く描く\n```\nCircledata([A,B],[\"dr,3\"]);//A中心、半径ABの円を太さ3の実線で描く。\n```\n【例】正六角形を描く。\n```\nCircledata(\"2\",[A,B],[\"Num=6\"]);////A中心、半径ABの円に**内接する**正六角形を描く。頂点の数を変更するならNum=の数字を変えれば良い。正10角形を描くならNum=10とすれば良い。\n```"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Ellipseplot(name, 点リスト , 定義域, options)`\n`Ellipseplot(name, 点リスト , 定義域, options)`\n焦点と通る点を与えて楕円を描く。\n点リストで 2 つの焦点と通る点を与える。点は Cinderella の幾何点が使える。\nまた，通る点のかわりに，焦点からの距離の和を実数で与えることもできる。\n【例】点 A,B を焦点とする楕円を描く。\n```\nKetinit();\naddax(0);\nPutpoint(\"A\",[0,0],[A.x,A.y]);\nPutpoint(\"B\",[3,0],[B.x,B.y]);\nPutpoint(\"C\",[4,2],[C.x,C.y]);\nEllipseplot(\"1\",[A,B,C],[\"do,2,2\"]);// 点 C を通る楕円を描く。(点線)\nEllipseplot(\"2\",[A,B,4],[\"da,2\"]); //焦点からの距離の和が 4 である楕円を描く。\nEllipseplot(\"3\",[A,B,C],\"[0,pi]\",[\"dr,1\"]); //楕円の半分を描く。(角度が0からpiまでを描いている。)\nPointdata(\"1\",[A,B,C],[\"Size=2\"]);\nLetter([A,\"s2\",\"A\",B,\"s2\",\"B\",C,\"s2\",\"C\"]);\nWindispg();\n```"}
{"prompt": "section_51_`Hyperbolaplot(name, 点リスト , 定義域, options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Hyperbolaplot(name, 点リスト , 定義域, options)`\n`Hyperbolaplot(name, 点リスト , 定義域, options)`\n焦点と通る点を与えて双曲線を描く。"}
{"prompt": "section_52_説明  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### 説明\n説明\n点リストで 2 つの焦点と通る点を与える。点は Cinderella の幾何点が使える。\nまた，通る点のかわりに，焦点からの距離の差を実数で与えることもできる。\noption として，`\"Asy=線種\"`を与えると，漸近線を指定した線種で表示する。 初期設定では漸近線は非表示。\n【例】\n```\nKetinit();\nPutpoint(\"A\",[0,0],[A.x,A.y]);\nPutpoint(\"B\",[3,0],[B.x,B.y]);\nPutpoint(\"C\",[4,2],[C.x,C.y]);\nHyperbolaplot(\"1\",[A,B,C]); //点A,Bを焦点とし、Cを通る双曲線を描く。\nPointdata(\"1\",[A,B,C],[\"Size=2\"]);\nLetter([A,\"s2\",\"A\",B,\"s2\",\"B\",C,\"s2\",\"C\"]);\nWindispg();\n```\n【例】\n```\nHyperbolaplot(\"1\",[A,B,2]);//点A,Bを焦点とし、焦点からの距離の差が 2 の双曲線を描く。\n```\n【例】\n```\nHyperbolaplot(\"1\",[A,B,C],[\"Asy=do\"]);//漸近線を点線で描く。\n```"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Parabolaplot(name，点リスト , 定義域, options)`\n`Parabolaplot(name，点リスト , 定義域, options)`\n点リスト [A,B,C] で示された焦点，準線で決まる放物線を描く。\n焦点 A と準線 BC で決定する放物線を描く。\n実際には，2 次関数 y = x^2 のグラフを回転・平行移動して描いており，定義域は，y = x^2 での定義域と考えてよい。定義域は省略することもできる。省略したときの初期値は [-5,5]\n【例】点 A を焦点，直線 BC を準線とする放物線を描く\n```\nKetinit();\nPutpoint(\"A\",[0,0],[A.x,A.y]);\nPutpoint(\"B\",[3,0],[B.x,B.y]);\nPutpoint(\"C\",[4,2],[C.x,C.y]);\nParabolaplot(\"1\",[A,B,C],[\"Num=200\"]);//焦点A,準線が直線BCである放物線を描画する。\nPointdata(\"1\",[A,B,C],[\"Size=2\"]);\nLetter([A,\"e2\",\"A\",B,\"s2\",\"B\",C,\"s2\",\"C\"]);\nWindispg();\n```"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 曲線\n#### `Ovaldata(name, 点リスト,options)`\n`Ovaldata(name, 点リスト,options)`\n角を丸くした矩形を描く\n中心と対角の１点を指定し，角を丸くした矩形を描く\noptions は，角の落とし具合と線種など。 数字が大きいほど丸くなる。数字で与える。\n```\nKetinit();\nPutpoint(\"A\",[-5,0],[A.x,A.y]);\nPutpoint(\"B\",[5,0],[B.x,B.y]);\nPutpoint(\"C\",[2,3],[C.x,C.y]);\nPutpoint(\"D\",[2,-2],[D.x,D.y]);\nPutpoint(\"E\",[-4,0],[E.x,E.y]);\nPutpoint(\"F\",[2,1],[F.x,F.y]);\nPutpoint(\"G\",[3,-3],[G.x,G.y]);\nPutpoint(\"H\",[4,-2],[H.x,H.y]);\nOvaldata(\"1\", [A,B]);//角をちょっと丸めた長方形を描く\nOvaldata(\"2\", [C,D],[0]);//角を丸めない長方形を描く\nOvaldata(\"3\", [E,F],[1,\"dr,3\"]);//角を丸めた長方形を太さ3の実線で描く。\nOvaldata(\"4\", [G,H],[1.5,\"da\"]);//角を丸めた長方形を破線で描く。\nWindispg();\n```\n### 関数のグラフ"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 関数のグラフ\n#### `Plotdata(name , 式 , 変数と定義域 , options)`\n`Plotdata(name , 式 , 変数と定義域 , options)`\n関数のグラフを描く。プロットデータの名前は，grである\n式で表された関数のグラフを，指定された定義域で描く。\n式，定義域は \" \" でくくって文字列とする。定義域は x=に続いてリストで指定。\noptions は次の通り。\n線種 \"dr, n\", \"da,m,n\" , \"do,m,n\"\n\"Num=数値\" 描画時の分割数\n\"Dis=数値\" 値が指定数値以上ジャンプする場合は不連続点とみなす。\n\"Exc=数値リスト リストで示された点は除外する。\n\"Exc=関数\" 関数の零点は除外する。\n\"Color=RGB\" 色指定。RGB は CMYK でもよい。\n【例】3 次関数 f(x) = x^3+2x^2+2x+1 のグラフを定義域指定なしで描く。\n```\nKetinit();\nPlotdata(\"1\",\"x^3+2*x^2+2*x+1\",\"x\",[\"Num=200\"]);//f(x) = x^3+2x^2+2x+1 のグラフを描く。関数を変えたいなら式のところを変えれば良い。掛け算は省略できず、*記号が必要である。\nWindispg();\n```\n【例】三角関数 f(x) = cos x のグラフを定義域 0 < x < 2piで描く。\n```\nKetinit();\nPlotdata(\"3\",\"cos(x)\",\"x=[0,2*pi]\");// f(x) = cos x のグラフを0 < x < 2piで描く。範囲を変えるなら\"x=\"のところのリストを変更すれば良い。0から4なら[0,4]で良い。\nWindispg();\n```\n【例】Disオプションで不連続点を結ばない。\n```\nPlotdata(\"3\",\"sin(x)/sqrt(sin(x)^2)\",\"x\",[\"Dis=1\",\"Num=2000\"]);//sin(x)/sqrt(sin(x)^2)のグラフを描き、値が1以上ジャンプしてたら不連続点とみなし、その点を結ばない。\n```"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 関数のグラフ\n#### `Implicitplot(name, 式,x の定義域,y の定義域, options)`\n`Implicitplot(name, 式,x の定義域,y の定義域, options)`\n陰関数のグラフを描く。\n陰関数の式を与えてグラフを描く。式，定義域とも文字列。\noptions は,\"Wait=n\" が指定できる。Wait の初期値は 10。\n<!-- \"r\",\"m\"に関しては，オプションなしのとき\n1. データファイルがなければ，新しく作る\n1. データファイルが既にあればそれを読み込む\n\"m\"のとき，強制的にデータファイルを作り直す。\n\"r\" のとき，すでにあるデータファイルを読み込む。 -->\n【例】(x^2+y^2)^2-2*2.5^2*(x^2-y^2)-(3^4-2.5^4)=0で表される曲線を描く\n```\nKetinit();\nImplicitplot(\"1\",\"(x^2+y^2)^2-2*2.5^2*(x^2-y^2)-(3^4-2.5^4)=0\",\"x\",\"y\");(x^2+y^2)^2-2*2.5^2*(x^2-y^2)-(3^4-2.5^4)=0で表される曲線を、変数をx,yとして描く。\nWindispg();\n```"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 関数のグラフ\n#### `Paramplot(name , 式 , 変数と定義域,options)`\n`Paramplot(name , 式 , 変数と定義域,options)`\n媒介変数表示の曲線を描く。\n式は\"\"でくくった媒介変数表示のリストで与える。\n定義域も \" \" でくくって文字列とし，`t=`に続いてリストで指定する。\noptions は線種が有効\n【例】リサージュ図形を描く。(リサージュ図形は[cos(a*t),sin(b*t)]で表される。)\n```\nKetinit();\nParamplot(\"1\",\"[cos(5*t),sin(7*t)]\",\"t=[0,2*pi]\",[\"Num=2000\"]);//[cos(a*t),sin(b*t)]で表される媒介変数表示のグラフを0<t<2piの範囲で描く。式を変えるなら2番目の引数(数式が書いてあるリスト)、範囲を変えるなら\"t=\"を変える。媒介変数はtでなくてもいい。そのときは、範囲をその変数で定義すること。(媒介変数がsなら範囲は\"s=[-1,1]\"などとする。)\nWindispg();\n```\n【例】太線にする。\n```\nParamplot(\"2\",\"[2*cos(t),sin(t)]\",\"t=[0,2*pi]\",[\"dr,2\"]);//2*cos(t),sin(t)で表されるグラフを0<t<2piの範囲で太さ2の実線で描く。\n```"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 関数のグラフ\n#### `Polarplot(name , 式 , 変数と定義域,options)`\n`Polarplot(name , 式 , 変数と定義域,options)`\n極座標表示 $$r = f(\\theta)$$ の曲線を描く。\n【例】アルキメデスの螺旋を描く。\n```\nKetinit();\nPolarplot(\"1\",\"t/5\",\"t=[0,6*pi]\",[\"Num=2000\"]);//r=t/5で表される極座標表示の曲線をtが0から6piまで描く。\nWindispg();\n```"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 関数のグラフ\n#### `Periodfun(定義式, 周期,options)`\n`Periodfun(定義式, 周期,options)`\n周期関数のグラフを描く。戻り値は Maxima 形式の式と period のリスト。\n周期関数の式を定義してグラフを描く。定義式は，関数式（文字列），区間，分割数のリスト。\nこの関数固有のオプションは `\"Con=\"` で，不連続点を線で結ぶか否かと，その時の色。初期設定は破線。結ばない場合は `\"Con=n\"`，色指定は線種に続いてコンマで区切って指定する。たとえば，`\"Con=do,Color=red\"`。\n周期（描画回数）は，数またはリストで指定する。周期が m のとき，2m+1 周期分描かれる。\n注意）関数は左右対称な定義域 [-a,a] で定義すること。\n【例】矩形関数のグラフを描く。\n```\nKetinit();\naddax(0);\ndefL=[\"0\",[-1,0],1,\"1\",[0,1],1];\nPeriodfun(defL, 2,[\"Con=dr,3\",\"dr,3\"]);\nrepeat(11,i,start -> -5,\nListplot(text(i+10),[[i,-1],[i,2]],[\"da,2,2\"]);\n);\nWindispg();\n```"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 関数のグラフ\n#### `Tangentplot(name , PD , 位置 , options)`\n`Tangentplot(name , PD , 位置 , options)`\n接線を描く。プロットデータの名前は，`lntn`\n曲線 PD の指定した位置での接線を描く。位置は `\"x=n\"` で指定する。\n【例】y=sin xのx=1での接線を描く。\n```\nKetinit();\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\"]);//y=sin (x) のグラフを描くプロットデータ名はgr1となる。\nTangentplot(\"1\",\"gr1\",\"x=1\");//y=sin xのグラフ(gr1と定義した)のx=1での接線を描く。プロットデータ名はlntn1となる。\nWindispg();\n```\n### 文字"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 文字\n#### `Expr([座標 , 位置 , 文字列],option)`\n`Expr([座標 , 位置 , 文字列],option)`\nTEX 記法の文字列を与えて数式を書く。\nLetter で文字列の前後に$ $をおくのと同じ。\n導関数の記号は，シングルクォートを用いる。\n複数の箇所に文字を書く場合は，Letter() と同様，引数をリストにして与える。\noption は サイズの倍率 (\"Size=\", Cinderra のみ) と色 (\"Color=\")。\n【例】f(x)=\\sin xとその導関数f'(x)=\\cos xのグラフと式を図に描き込む。\n```\nKetinit();\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"dr,2\"]);\nPlotdata(\"2\",\"cos(x)\",\"x\",[\"Num=200\"]);\nExpr([[0.5,1.5],\"e\",\"f(x)=\\sin x\",[3,1],\"e\",\"f'(x)=\\cos x\"]);//点(0.5,1.5)の右側(e)に\"f(x)=\\sin x\"を、点(3,1)の右側に\"f'(x)=\\cos x\"をそれぞれTeX書式で書き込む。\nWindispg();\n```"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 文字\n#### `Exprrot(座標 , 向き , 移動，文字列，option)`\n`Exprrot(座標 , 向き , 移動，文字列，option)`\n\\TeX 記法の文字列を傾けた数式を書く\n「座標」の位置に，指定された向きで数式を書く。\n向きはベクトルで与える。\n移動（オプション）は `t` (接線方向の移動) ， `n` (法線方向の移動) ，反転 (`r`)。\n座標，向きとも，Cinderella で作図した幾何点を用いることができる。\noption は サイズの倍率 (`”Size=”`, Cinderra のみ) と色 (`”Color=”`)。\n【例】\n```\nKetinit();\nExprrot([3,2],[4,1],\"t0n1\",\"\\sum\\limits_{r=0}^{n} {}_{n}C_{r}\");//[3,2]に方向ベクトル[4,1]の向きでtex形式で\\sum\\limits_{r=0}^{n} {}_{n}C_{r}と表される文字列を書く\nWindispg();\n```"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 文字\n#### `Letter([位置, 方向, 文字列],option)`\n`Letter([位置, 方向, 文字列],option)`\n文字列を表示する\n「位置（座標）」と方向で指定された場所に文字を書き込む。\n位置（座標）は点の名前で指定することもできる。\n場所は上下左右を東西南北で表し， `n/s/w/e/c` の方向で表す。`c` は中央。\n指定位置からの距離を，数値で与えることもでき，`e2, e3` は e より少し離して置く。\n複数の文字列をリストの形にして渡すことができる。\n注）導関数の記号 ′ は，数式モード（$ ではさむ）で ′（シングルクォート）を用いる。\noption は サイズの倍率 (`\"Size=\"`, Cinderra のみ) と色 `(\"Color=\")`。\n`文字列が一つのときは，\n`Letter(位置, 方向, 文字列,option) `\nにできる。\n【例】座標 (3,2) の右上(ne)にＰを表示\n```\nLetter([[3,2] ,\"ne\",\"P\"]);\n```\n【例】点Ｃを中央(c)としてＣという文字列を表示\n```\nLetter([C ,\"c\", \"C\"]);\n```\n【例】点Aの上(s)に数式を表示\n```\nLetter([E,\"s\",\"$ f(x)=\\sinh x $\"]);//点Aの上(s)にTeX形式で\"f(x)=\\sinh x \"を表示\n```"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### 文字\n#### `Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`\n`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`\n文字列を回転して表示する\n座標で示された位置に，方向ベクトルで指定された向きに回転して文字を書き込む。\n移動（オプション）は `t` (指定した方向ベクトルと垂直方向に移動) ， `n` (指定した方向ベクトルと同じ向きに移動) ，反転 (`r`)。\noption は サイズの倍率 (`”Size=”`, Cinderra のみ) と色 (`”Color=”`)。\n【例】\n```\nKetinit();\nLetterrot([3,2],[4,1],\"t0n1\",\"Text\");//[3,2]に方向ベクトル[4,1]の向きで指定した方向ベクトルと同じ向きに1動かした場所にTextという文字列を出力する\nWindispg();\n```\n### マーキング"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### マーキング\n#### `Anglemark(name, 点リスト , options)`\n`Anglemark(name, 点リスト , options)`\n点リストで示された角に弧の形状の角の印をつける。\n`Listplot()` などと同様，点リストが点名の場合は name は省略できる。弧を描かず文字だけを入れる場合はoptions に \"nodisp\" を指定する。\noptions は次の通り。\n数値角の印の大きさ。 初期設定は１\n線種`\"dr, n\", \"da,m,n\" , \"do,m,n\" `\n`\"Expr=文字\"` または`\"Letter=文字\"` : 文字を入れる\n`\"Expr=位置 , 文字\"`: 位置を指定して文字を入れる。位置は頂点からの距離。\n【例】\\angle ABC に印をつけて、文字を書き込む\n```\nKetinit();\nAddax(0);\nPutpoint(\"A\",[-2,-1],[A.x,A.y]);\nPutpoint(\"B\",[1,3],[B.x,B.y]);\nPutpoint(\"C\",[2,-1],[C.x,C.y]);\nListplot(\"1\",[A,B,C],[\"dr,2\"]);\nAnglemark([A,B,C],[2,\"dr,2\",\"Expr=1.2,\\theta\"]);\nLetter(A,\"e2\",\"A\");\nLetter(B,\"w2\",\"B\");\nLetter(C,\"n2\",\"C\");\nWindispg();\n```"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### マーキング\n#### `Paramark(name, 点リスト , options)`\n`Paramark(name, 点リスト , options)`\n点リストで示された角に平行四辺形の形状の角の印をつける。\n`Listplot()` などと同様，点リストが点名の場合は name は省略できる。\noptions は次の通り。\n数値角の印の大きさ。 初期設定は 1\n線種`”dr, n”, ”da,m,n” , ”do,m,n”`\n`”Expr=文字”`: 文字を入れる\n`”Expr=位置 , 文字”`: 位置を指定して文字を入れる。位置は頂点からの距離。\n`Anglemark()`とほとんど同じ"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### マーキング\n#### `Bowdata(name, 点リスト , options)`\n`Bowdata(name, 点リスト , options)`\n弓形を描く\n点リストで与えられた 2 点を結ぶ弓形を描く。\n2 点を反時計回りに回る方向に弓形を描く。\noptions は，`[曲がり , 空白サイズ, 文字, 線種]`\n曲がりは弧の曲がり具合の指定。 初期設定は 1\n空白サイズは中央にあける空白の大きさ\n文字は，`\"Expr=文字\"`\nまた，`\"Expr=微小移動 , 文字\"`で位置を指定して文字を入れる。\n微小移動は t,n。移動量は数字をつける（正負が可）。\n```\nKetinit();\naddax(0);\nSetketcindyjs([\"Figure=y\"]);\nPutpoint(\"A\",[-2,-1],[A.x,A.y]);\nPutpoint(\"B\",[1,3],[B.x,B.y]);\nPutpoint(\"C\",[2,-1],[C.x,C.y]);\nListplot(\"1\",[A,B,C,A],[\"dr,2\"]);\nBowdata(\"1\",[B,A],[1,1,\"Expr=C\",\"da\"]);//点Bと点Aを反時計回りに回る方向に弓形を破線で描く（曲がり具合1,中央の空白サイズ1）\nBowdata(\"2\",[C,B],[1,1,\"Expr=A\",\"dr,2\"]);//点Cと点Bを反時計回りに回る方向に弓形を太さ2の実線で描く（曲がり具合1,中央の空白サイズ1）\nBowdata(\"3\",[A,C],[1,0,\"Expr=t0n4,B\",\"dr,2\"]);//点Aと点Cを反時計回りに回る方向に弓形を太さ2の実線で描き、文字の位置を直線ACと平行に0ずらし、直線ACと垂直に4ずらす（曲がり具合1,中央に空白を設けない）\nLetter([A,\"w\",\"A\",B,\"n\",\"B\",C,\"e\",\"C\"]);\nWindispg();\n```\n【例】線分と平行の向きに文字を書き込む\n```\nBowdata([B,A],[1,1,\"Exprrot=a\"]);//exprrotオプションを指定することで指定した文字列を線分と平行の向きに書き込む\n```\n【例】線分と平行の向きに文字を書き込んだうえで文字を直線BAと平行方向にずらす\n```\nBowdata([B,A],[1,1,\"Exprrot=t3n0,a\"]);\n```\n【例】線分と平行の向きに文字を書き込んだうえで文字を直線BAと垂直方向にずらす\n```\nBowdata([B,A],[1,1,\"Exprrot=t0n3,a\"]);\n```"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### マーキング\n#### `Segmark(name, リスト,options)`\n`Segmark(name, リスト,options)`\n線分に印をつける\nリストで与えられた 2 点を端点とする線分に印をつける。\nオプション\nType=印の種類 `\"seg(,n)\",\"cir\",\"poly(,n)\" `\n`Width`：線の幅，`Size`：大きさ\n【例】\n```\nKetinit();\naddax(0);\nPutpoint(\"A\",[-1.5,-0.5],[A.x,A.y]);\nPutpoint(\"B\",[0,2.5],[B.x,B.y]);\nPutpoint(\"C\",[1.5,-0.5],[C.x,C.y]);\nPutpoint(\"D\",[2,0],[D.x,D.y]);\nListplot([A,B,C,D,A]);\nSegmark(\"1\",[A,B],[\"Type=seg,1\"]);//線が1本の印\nSegmark(\"2\",[B,C],[\"Type=seg,2\",\"Width=1.2\"]);//線が2本で太さ1.2の印\nSegmark(\"3\",[C,D],[\"Type=cir\"]);//丸印\nSegmark(\"4\",[D,A],[\"Type=poly,4\",\"Size=1.5\"]);//四角形の印で、大きさが1.5\nWindispg();\n```\n【例】多角形の印の頂点の数を変更する\n```\nSegmark(\"1\",[D,A],[\"Type=poly,6\",\"Size=1.5\"]);//六角形の印を付ける。\nSegmark(\"2\",[A,B],[\"Type=poly,3\",\"Size=1.5\"]);//三角形の印を付ける。\n```"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### マーキング\n#### `Htickmark([横座標 , 方向 , 文字])`\n`Htickmark([横座標 , 方向 , 文字])`\n横軸に目盛と文字を書く。\n引数は位置（横座標），方向，文字。複数点の情報を `[ ]` 内にまとめて記入できる。方向を省略すると `\"s1\"`になる。微調整は描画面には反映されないので，PDF にして確認する。目盛の長さは `Setmarklen()` で設定できる。\n【例】目盛りの位置を変える\n```\nKetinit();\nPlotdata(\"1\",\"x^2-1.2\",\"x\",[\"Num=200\",\"dr,2\"]);\nHtickmark([1,\"n2\",\"1\",2,\"s2\",\"2\",3,\"s2\",\"3\",4,\"s2\",\"4\"]);//x座標が1の目盛りを上に、かつ2ずらして書く。2から4は下に2ずつずらして書く。\nWindispg();\n```\n【例】リスト処理で目盛りを書く\n```\nKetinit();\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"dr,2\"]);\nmemori=apply(-5..5,a,[a*pi/2,\"s4\",\"\\frac{\"+text(a)+\"\\pi}{2}\"]);//-5から5の数字に対して[a*pi/2,\"s4\",\"\\frac{\"+text(a)+\"\\pi}{2}\"]という要素を作成する。\nmemori=flatten(remove(memori,[[0,\"s4\",\"\\frac{\"+text(0)+\"\\pi}{2}\"]]));//0の部分はいらないので削除し、flatten関数により2次元配列を1次元配列に変換する。\nHtickmark(memori);\nWindispg();\n```"}
{"prompt": "section_70_`Vtickmark([横座標 , 方向 , 文字])`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### マーキング\n#### `Vtickmark([横座標 , 方向 , 文字])`\n`Vtickmark([横座標 , 方向 , 文字])`\n`Htickmark`とほとんど同じ。方向の指定を省略すると`w1`が指定される。"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "# 平面の図形とグラフ\n## 描画\n### マーキング\n#### `Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`\n`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`\n目盛を打つ\n始点の位置を縦横の起点として目盛りを打つ。目盛はリストで与える。`[”r”,a,b,c,d]` の形式では，`a` から `b` まで `c` 間隔で，倍率 `d` の目盛を打つ。`[”f”,n1,”str”,n2,”str”,・・]`の形式では，`n` と`”str”`がセットで，`n` の位置に`”str”`を書く。ただし，位置は Cinderella の描画面の原点を 0 とする。\n`Listplot()` とともに用いると，座標軸とは異なる線分に目盛を打つことができる。\n`Framedata()` とともに用いると矩形に目盛を打つことができる。\n【例】\n```\nKetinit();\nListplot(\"1\",[[5,1],[2,1],[2,3]]);\nRulerscale([2,1],[\"r\",2,5,1,10],[\"f\",2,\"a_1\",3,\"a_2\"]);//横軸を2から5まで1間隔で10倍の目盛りを打つ、縦軸を2の位置にa_1を、3の位置にa_2を書く\nWindispg();\n```\n## プロットデータの操作"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Changestyle(PD リスト, options)`\n`Changestyle(PD リスト, options)`\n描画オプションを変更する\n複数の図形の描画オプションを一括して変更する。\n```\nKetinit();\nopgr=[\"dr,3\"];//変更用にオプションをリストで保存\nPlotdata(\"1\",\"x^3+2*x^2+2*x+1\",\"x\",[\"Num=200\"]);\nChangestyle([\"gr1\"],opgr);//オプションを保存したリストをoptionsに渡してgr1に反映させる\nWindispg();\n```"}
{"prompt": "section_73_`Invert(PD)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Invert(PD)`\n`Invert(PD)`\nプロットデータを逆順にする"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Joincrvs(name, プロットデータのリスト, options)`\n`Joincrvs(name, プロットデータのリスト, options)`\n隣接する曲線プロットデータ のリストを繋いで 1 本の曲線を作る。\n曲線のリストは隣接する順番で指定する。\noptions は線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\nプロットデータ名は\"join\"\n【例】\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x=[-1,2]\",[\"Num=200\"]);//y=x^2のグラフを-1<x<2の範囲で描く\nPlotdata(\"2\",\"x+2\",\"x=[-1,2]\",[\"Num=200\"]);//y=x+2のグラフを-1<x<2の範囲で描く\nJoincrvs(\"1\",[\"gr1\",\"gr2\"]);//y=x^2のグラフの-1<x<2の範囲(gr1)とy=x+2のグラフの-1<x<2の範囲(gr2)をつなげて一つの曲線にする。プロットデータ名はjoin1となる\nShade([\"join1\"],[\"Color=red\"]);//join1を赤く塗りつぶす\nWindispg();\n```"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Partcrv(name, A, B, プロットデータ, options)`\n`Partcrv(name, A, B, プロットデータ, options)`\n曲線プロットデータ上の点 A, B の間の部分曲線を描く。\n2 点 A, B の順序は曲線の向きと同一であること。曲線の向きは，y = f(x) のグラフでは x 座標が増加する向き。\noptions は線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"do\"]);\nPartcrv(\"1\", [-1,1], [2,4], \"gr1\",[\"dr,3\"]);//\"gr1\"の[-1,1]から[2,4]までを太線にする\nWindispg();\n```\n【例】`Intersectcrvs`を使って動的に交点を求める\n```\nKetinit();\nSetketcindyjs([\"Figure=y\"]);\nPutpoint(\"A\",[-2,-1],[A.x,A.y]);\nPutpoint(\"B\",[1,3],[B.x,B.y]);\nLineplot(\"1\",[A,B],[\"da\"]);\nCircledata(\"1\",[[0,2],[0,0]],[\"dr\"]);\ntmp=sort(Intersectcrvs(\"ln1\",\"cr1\"));\nprint(tmp);\nIntersects=length(tmp);\nif(Intersects>0,\nif(A.x<B.x,\nPartcrv(\"1\",tmp_1,tmp_2,\"ln1\",[\"dr,2\"]);,\nPartcrv(\"1\",tmp_2,tmp_1,\"ln1\",[\"dr,2\"]);\n);\n);\nWindispg();\n```"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`\n`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`\n複数の曲線から閉曲線を作る。\n開始位置は，最初と最後の曲線の交点が複数あるときに指定する。\n開始点は近くに取ればよい。許容限界は，通常は指定しなくてよい。\nプロットデータ名はen\n【例】 y=x+2 とy=x^2のグラフの内側を塗りつぶす。\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//y=x^2のグラフを描く\nPlotdata(\"2\",\"x+2\",\"x\",[\"Num=200\"]);//y=x+2のグラフを描く\nEnclosing(\"1\",[\"gr1\",\"gr2\"],[\"nodisp\"]);//y=x^2のグラフとy=x+2のグラフから閉曲線を作る\nShade([\"en1\"],[\"Color=red\"]);//en1の内部を赤色(red)で塗る\nWindispg();\n```"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Hatchdata(name , 方向リスト , プロットデータ , options)`\n`Hatchdata(name , 方向リスト , プロットデータ , options)`\n閉曲線の内部に斜線を引く。\n引数は，曲線名，内部外部のパターンを与える\"i\"，\"o\" の文字列，閉曲線を与える曲線と領域の内部を定める\n方向のリストとオプション。\nオプション（カッコ内はデフォルト値）\n角度 (45)，間隔 (1)，\"Max=(20)\" 斜線の最大本数，\n\"No=点リスト\" 点リストの点が選ばれているときは実行しない\n\"File=y/m/n (n)\" データファイルを作るか\n\"Check=点リスト\" 点リストの点が変更されていたら，ファイルを作り直す\n【例】 y=x+2 とy=x^2のグラフの内側をハッチングする。\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);\nPlotdata(\"2\",\"x+2\",\"x\",[\"Num=200\"]);\nEnclosing(\"1\",[\"gr1\",\"gr2\"],[\"nodisp\"]);\nHatchdata(\"1\",[\"i\"],[[\"en1\"]],[-45,1,\"dr,0.5\"]);//en1の内側(i)に対して-45度に傾けた太さ0.5の実線でハッチングする\nWindispg();\n```"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Shade((\"名前\"), プロットデータのリスト , options)`\n`Shade((\"名前\"), プロットデータのリスト , options)`\n閉曲線で囲まれた領域を塗りつぶす。\n第１引数には，閉曲線を与える曲線分のプロットデータ名を並べる。\nデフォルトでは，Joincrvs を使って閉曲線を作っている。ただし，プロットデータのリストに\"Invert()\"が入っていれば，Enclosing を使う。\noption の Color は，Cinderella の画面上での描画色をリストで与える。濃さを指定したい場合は色名や RGBではなく CMYK にする。\noptions には，他に，次のものがある。\n・Enclosing を使うかどうか：\"Enc=y/n\"（初期値は n）\n\"Enc=y\" のとき，複数の Shade を使うときは，名前をつける。\n・Enclosing のときの開始点，描画色\n・描画領域のトリミング：\"Trim=y/n\" （初期値は n ）\n・TeX への書き出しで，先頭に配置するか：\"First=y/n\" （初期値は n ）\n\"First=n\" のときは，使われている Gdata の書き出しの直前におく．\n【例】 y=x+2 とy=x^2のグラフの内側を塗りつぶす。\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//y=x^2のグラフを描く\nPlotdata(\"2\",\"x+2\",\"x\",[\"Num=200\"]);//y=x+2のグラフを描く\nEnclosing(\"1\",[\"gr1\",\"gr2\"],[\"nodisp\"]);//y=x^2のグラフとy=x+2のグラフから閉曲線を作る\nShade([\"en1\"],[\"Color=red\"]);//en1の内部を赤色(red)で塗る\nWindispg();\n```\n【例】描画範囲外は塗りつぶさない\n```\nKetinit();\naddax(0);\nCircledata(\"1\",[[0,0],[2,0]],[\"dr,2\"]);\nShade(\"1\",[\"cr1\"],[\"color=red\",\"Trim=y\"]);//描画範囲以外は塗りつぶさない(\"Trim=y\")\nWindispg();\n```"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Reflectdata(name , プロットデータ , 対称点または対称軸,options)`\n`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`\nプロットデータの鏡映を作成\nプロットデータを指定された点または軸に関して対称移動する。\n対称点は座標または，点の識別名。ただし，対称点を座標で示すときは要素がひとつのリストにする。\n対称軸はリスト `[ 点 1, 点 2 ]` で指定。\n【例】y=x^3と[0,0]-[1,1]間を結ぶ直線に対する鏡映を描く\n```\nKetinit();\nPlotdata(\"1\",\"x^3\",\"x\",[\"Num=200\"]);//y=x^3のグラフを描く。\nReflectdata(\"1\",\"gr1\",[[0,0],[1,1]],[\"dr,2\"]);//gr1を[0,0]-[1,1]間を結ぶ直線で反転させたグラフを描く。\nWindispg();\n```\n【例】y=x^2とそれを点対称移動させたグラフを描く\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//y=x^2のグラフを描く。\nReflectdata(\"1\",\"gr1\",[[0,0]],[\"dr,2\"]);//gr1を点(0,0)に関して点対称移動させた図形を描く。\nWindispg();\n```"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Rotatedata(name , プロットデータ ，角度 , [中心 , options])`\n`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`\nプロットデータの位置を回転する\n図形を，中心で示された点の周りに回転する。角度は弧度法で与える\n中心と options はまとめてリストで与える。\n【例】y=sin x のグラフを 90度回転する\n```\nKetinit();\nPlotdata(\"1\",\"sin (x)\",\"x\",[\"Num=200\",\"nodisp\"]);//y=sin xのグラフを描く。\"nodisp\"オプションによってCinderellaの画面上には出力しない\nRotatedata(\"1\",\"gr1\",pi/2,[[0,0]]);//gr1を点(0,0)に対してpi/2(90度)回転させる\nWindispg();\n```"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`\n`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`\n図形の位置を拡大・縮小する\n図形の位置をプロットデータを用いて指定された比率で拡大・縮小する\n比率は `[x 方向比率 , y 方向比率]` のリストで与えてもよい。\n中心と options はまとめてリストで与える。options は線種\n【例】y=sin x のグラフを x軸方向に0.5倍にする。\n```\nKetinit();\nPlotdata(\"1\",\"sin (x)\",\"x\",[\"Num=200\"]);//y=sin xのグラフを描く。\nScaledata(\"1\",\"gr1\",0.5,1,[[0,0],\"da\"]);//gr1をx軸方向に0.5倍、y軸方向に1倍にしたグラフを破線で描く。\nWindispg();\n```"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Translatedata(name , プロットデータ , 移動ベクトル , options)`\n`Translatedata(name , プロットデータ , 移動ベクトル , options)`\nプロットデータを平行移動する\nプロットデータを移動ベクトルで示された分だけ平行移動する。\n【例】y=x^2とそれをx軸方向に2,y軸方向に3移動させたものを描く。\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);//y=x^2のグラフを描く。\nTranslatedata(\"1\",\"gr1\",[2,3],[\"da\"]);//gr1をx軸方向に2,y軸方向に3ずらす\nWindispg();\n```"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Intersectcrvs(プロットデータ 1, プロットデータ 2)`\n`Intersectcrvs(プロットデータ 1, プロットデータ 2)`\n2 曲線の交点リストを取得する。\nオプションとして，共有点があるかどうかを判断するための限界値があるが，通常は使わない。\n【例】\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);//y=x^2のグラフを描く\nPlotdata(\"2\",\"x+2\",\"x\",[\"Num=200\",\"dr\"]);//y=x+2のグラフを描く\nintscs = Intersectcrvs(\"gr1\", \"gr2\");//gr1とgr2の交点をすべて求め、リストで格納\nPointdata(\"1\",intscs_1,[\"Size=4\"]);//gr1とgr2の交点のうち1番目を大きさ4でプロット\nPointdata(\"2\",intscs_2,[\"Size=4\"]);//gr1とgr2の交点のうち2番目を大きさ4でプロット\nWindispg();\n```"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Intersectcrvspp(プロットデータ 1, プロットデータ 2)`\n`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`\n2 曲線の交点のパラメータリストを取得する。\n2 曲線の交点の座標とパラメータのリストを返す。\nIntersectcrvs() との違いは，パラメータがあるかどうかである。\n`Intersectcrvs`の例を`Intersectcrvspp`に変更し、リストをコンソールに表示すると、\n```\n[[[-1,1],9,8],[[2,4],15,14]]\n```\nと表示される。\nこのパラメータは曲線を分割した家の何番目に位置するかという意味である。\n[[-1,1],9,8]なら、(-1,1)で交わっていて、1つ目の曲線の9番目と、2つ目の曲線の8番目で交わっているという意味である。小数なら中間の場所である。"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Intersectcurves,Intersectcurvespp`\n`Intersectcurves,Intersectcurvespp`\n2 曲線の交点リストを取得する。接点があるとき，時間はかかるがより精密な値を返す。\n引数は`Intersectcrvs,Intersectctvspp`と同じ。ppあり、なりに関しても同じ。"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Nearestptcrv(座標, プロットデータ)`\n`Nearestptcrv(座標, プロットデータ)`\n点に最も近いプロットデータの点を求める\n第1引数の座標に最も近い曲線プロットデータ上の点の座標を返す。\n【例】\n```\nKetinit();\nSetketcindyjs([\"Figure=y\"]);\nPutpoint(\"A\",[1,1],[A.x,A.y]);\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);//y=x^2のグラフを描く\nnrst=Nearestptcrv(A,\"gr1\");//点Aとgr1の距離が最も近いgr1上の点の座標を取得する\nPointdata(\"1\",nrst,[\"Size=4\"]);nrstの座標に点を打つ\nListplot(\"1\",[A,nrst],[\"da\"]);点A-nrst間に線を引く\nWindispg();\n```"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Paramoncrv(点の座標, 曲線の名前)`\n`Paramoncrv(点の座標, 曲線の名前)`\n曲線上の点のパラメータ値を返す。\n曲線は折れ線として描かれ，曲線上の各点はこの折れ線の節点を基準としたパラメータ値を持つ。パラメータ値は整数部分が節点の番号，小数部分が節間の位置を表す。\n【例】\n```\nKetinit();\nSetketcindyjs([\"Figure=y\"]);//html出力を描画範囲内に限る\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);\nPutoncurve(\"P\",\"gr1\",[0,0]);曲線gr1上に点Pを置く(動かせる)\nprm = Paramoncrv(P, \"gr1\");点Pがgr1上のどこにあるかのパラメータ値をprmに格納\nExpr([[1,-1],\"e\",text(prm)]);//点(1,-1)の右側に文字列化したprmをtex形式で表示\nWindispg();\n```"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Pointoncrv(点のパラメータ値, PD)`\n`Pointoncrv(点のパラメータ値, PD)`\n曲線上のパラメータ値を持つ点の座標を返す。\n曲線（折れ線）上の節点を基準としたパラメータ値により点の位置が定まる。"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Ptcrv(n, プロットデータ)`\n`Ptcrv(n, プロットデータ)`\n曲線プロットデータの n 番目の節点を返す\nCindyscript の `PD_n` と同じ\n【例】六角形の一部の辺だけ太くする\n```\nKetinit();\naddax(0);\nCircledata(\"1\",[[0,0],[2,0]],[\"Num=6\",\"dr,1\"]);//正六角形を太さ1の実線で描く\na=Ptcrv(2,cr1);//aをcr1の2番目の節点の座標とする\nb=Ptcrv(4,cr1);//bをcr1の4番目の節点の座標とする\nPartcrv(\"1\",a,b,\"cr1\",[\"dr,3\"]);//cr1のa-b間を太さ3の実線で描く。\nWindispg();\n```"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Ptstart(プロットデータ) , Ptend(プロットデータ)`\n`Ptstart(プロットデータ) , Ptend(プロットデータ)`\nプロットデータの最初の点，最後の点を取得する。\nプロットデータの最初の点，最後の点の座標を返す。"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Readcsv(path,filename,option)`\n`Readcsv(path,filename,option)`\ncsv ファイルを読む。\n【例】以下のファイルを読み込む\n```csv\n1,2,3,4\n5,6,7,8\n```\n```\nKetinit();\na=Readcsv(\"path/to/your/file\",\"example.csv\");//第1引数のディレクトリにある第2引数のcsvファイルを読み込んで変数aに格納。(2次元配列)\nprintln(a);//変数aを表示\nWindispg();\n```\nこの出力結果は以下のようになる\n```txt\n[[1,2,3,4],[5,6,7,8]]\n```"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Readlines(path,filename,option)`\n`Readlines(path,filename,option)`\nテキストファイルを 1 行ずつ読む。\n【例】以下のファイルを読み込む\n```txt\nabcde\nfghij\n```\n```\nKetinit();\na=Readlines(\"path/to/your/file\",\"example.txt\");//第1引数のディレクトリにある第2引数のファイルを読み込んで変数aに格納。(配列)\nprintln(a);\nWindispg();\n```\nこの出力結果は以下のようになる\n```txt\n[abcde,fghij]\n```"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `WriteOutData(ファイル名,PD リスト)`\n`WriteOutData(ファイル名,PD リスト)`\n外部データに書き出す\n【例】x^2のプロットデータを外部ファイルに書き込む\n```\nKetinit();\nPlotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//x^2のグラフをプロットデータを作成する。\nWriteOutData(\"gr1.txt\",[\"gr1\"]);//gr1をgr1.txtに書き込む\nWindispg();\n```"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "# 平面の図形とグラフ\n## プロットデータの操作\n### マーキング\n#### `Extractdata(データ名, 属性)`\n`Extractdata(データ名, 属性)`\n`ReadOutData()` で読み込んだデータに属性をつける。\n【例】`WriteOutData`の説明で書き出したファイルを読み込んで`dr,2`属性をつける\n```\nKetinit();\nReadOutData(\"gr1.txt\");\nExtractdata(\"gr1\",[\"dr,2\"]);\nWindispg();\n```\n## 計算"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Derivative(関数式 , 変数 , 値)`\n`Derivative(関数式 , 変数 , 値)`\n関数の微分係数を求める\n関数式で与えられた関数の，「変数＝値」における微分係数を求める。\n値は，点の座標を用いることができる。点 A の $$x$$ 座標であれば， `A.x` とする。\n【例】$$y=\\sin x$$の接線を描く\n```\nKetinit();\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\"]);//y=sin xのグラフを描く\nPutoncurve(\"P\",\"gr1\",[0,0]);//gr1上に点Pを置く\nD = Derivative(\"sin(x)\",\"x\" , P.x);//xがPのx座標におけるsin xの微分係数を求める\nPlotdata(\"2\",Assign(\"D*(x-P)+sin(P)\",[\"D\",D,\"P\",P.x]),\"x\",[\"Num=200\"]);//xがPのx座標におけるsin xの微分係数をもちいて接線を描く\nWindispg();\n```"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`\n`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`\n関数式またはプロットデータで与えられた関数（データ）の数値積分の値を求める。\noptions は次の通り。\n”Rule=s”：シンプソン法による。 初期設定は大島ベジェ公式。\n”Num=数値”：分割数の指定。初期値は 100"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Inversefun(関数 , 範囲 , 値)`\n`Inversefun(関数 , 範囲 , 値)`\n関数の逆関数値を求める\n関数は文字列で，関数式もしくは定義された関数名とする。\n指定された範囲の中で逆関数値を求める。存在しない場合は一方の端点を戻り値とし，コンソールに「not found」と表示される。\n数式処理ではなく数値探索のアルゴリズムを使っているので，単調関数でない場合は範囲をできるだけ狭くとるとよい。値が複数ある場合は，小さいほうが返される。"}
{"prompt": "section_98_値の取得と入出力  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### 値の取得と入出力\n値の取得と入出力\n計算値やプロットデータの値を取得したり，R 用とのデータのやりとりをする。"}
{"prompt": "section_99_`Asin(実数),Acos(実数)`  ", "completion": "# 平面の図形とグラフ\n## 計算\n### マーキング\n#### `Asin(実数),Acos(実数)`\n`Asin(実数),Acos(実数)`\n逆三角関数の値を求める。"}
