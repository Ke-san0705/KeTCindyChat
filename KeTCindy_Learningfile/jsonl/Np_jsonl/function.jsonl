{"prompt": "section_01_`Ketinit(options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "## 設定・定義"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "### 環境設定"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "#### `Ketinit(options)`"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "`Ketinit(options)`"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "KeTCindyを初期化する。これがないとKeTCindyの関数等を使えないため、**必ず1行目に記述し、普通はオプションは不要**"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "【例】"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "```"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "Ketinit();//初期化"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "Listplot(\"1\",[A,B,C,A],[\"dr,2\"]);"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "Windispg();"}
{"prompt": "section_01_`Ketinit(options)`  ", "completion": "```"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "## 設定・定義"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "### 環境設定"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "#### `Initglist()`, `Setglist()`, `Addglist()`"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "`Initglist()`, `Setglist()`, `Addglist()`"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "ketlib スロットで作られる描画データを描画リストに追加する。"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "`Implicitplot`,`Hatchdata` など実行時間のかかるコマンドを figures スロットにおくと，その都度実行されてしまう。それを避けるため ketlib スロットにおいたときに用いる。"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "【例】"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "Initializationスロットに以下を追記する"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "```"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "Initglist(); // 描画データを初期化"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "Implicitplot('1',fun,rng);//関数fun範囲rngの陰関数のグラフを描く"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "Setglist(); //描画データをセット"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "```"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "以下はDrawスロットに書く。"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "```"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "Ketinit();"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "Addglist();//Initializationスロットでセットした描画データをまとめて追加する"}
{"prompt": "section_02_`Initglist()`, `Setglist()`, `Addglist()`  ", "completion": "```"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "## 設定・定義"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "### 環境設定"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "#### `Setfiles(filename)`"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "`Setfiles(filename)`"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "出力するファイル名の設定"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "出力する Tex のファイル名を指定する。"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "出力するファイル名は 初期設定では，作図している Cinderella のファイル名。"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "たとえば，triangle.cdy で作図して出力すると，triangle.tex ができる。"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "これに対し，triangle.cdy で作図しているときに，grav.tex で出力したい場合は"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "```"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "Setfiles(\"grav\");"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "```"}
{"prompt": "section_03_`Setfiles(filename)`  ", "completion": "とすると，grav.tex ができる。"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "## 設定・定義"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "### 環境設定"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "#### `Setparent(filename)`"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "`Setparent(filename)`"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "Parent ボタンで出力するファイル名の設定"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "Figpdf() を使って Parent ボタンで出力する Tex のファイル名を指定する。"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "Parent ボタンで出力するファイル名は 初期設定がないので，指定する必要がある。"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "たとえば，triangle.cdy で作図しているときに，図サイズの grav.pdf を作る場合，"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "```"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "Setparent(\"grav\");"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "```"}
{"prompt": "section_04_`Setparent(filename)`  ", "completion": "とすると，図の TeX ファイル triangle.tex と PDF を作る grav.tex ができ，ここから grav.pdf ができる。"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "## 設定・定義"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "### 環境設定"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "#### `Changework(path)`"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "`Changework(path)`"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "作業ディレクトリを指定（変更）する"}
{"prompt": "section_05_`Changework(path)`  ", "completion": "作業ディレクトリは， 初期設定では，現在作図しているファイルのあるフォルダ（ディレクトリ）の fig フォルダである。これを変更する。"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "## 設定・定義"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "### 環境設定"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "#### `Addpackage(パッケージ名)`"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "`Addpackage(パッケージ名)`"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "TeX のパッケージを追加する"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "パッケージ名は1つの時文字列で、1つ以上の時リスト形式で記述する。"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "なお、これはInitializationスロットに追記する形で記述するため注意すること。"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "【例】emathパッケージを追加する。"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "```"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "//以下のどちらか"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "Addpackage(\"emath\");"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "Addpackage([\"emath\"]);"}
{"prompt": "section_06_`Addpackage(パッケージ名)`  ", "completion": "```"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "## 設定・定義"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "### 環境設定"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "#### `Usegraphics(\"tpic\"/\"pict2e\"/\"tikz\")`"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "`Usegraphics(\"tpic\"/\"pict2e\"/\"tikz\")`"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "TeXのグラフィクスパッケージを変更する。"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "なお、これはInitializationスロットに追記する形で記述するため注意すること。"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "【例】TeX出力時に使うグラフィックスパッケージをtikzに変更する。"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "```"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "Usegraphics(\"tikz\")"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "```"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "引数は文字列であるが、許されているのは\"tpic\"/\"pict2e\"/\"tikz\"の3つである。"}
{"prompt": "section_07_`Usegraphics(tpicpict2etikz)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "## 設定・定義"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "#### `Addax(0 or 1)`"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "`Addax(0 or 1)`"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "座標軸の表示を選択する。"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "【例】座標軸を表示する。"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "```"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "Addax(1);"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "```"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "【例】座標軸を表示しない。"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "```"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "Addax(0);"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "```"}
{"prompt": "section_08_`Addax(0 or 1)`  ", "completion": "Addaxを書かなければ、表示はそのままとなる。座標軸のあるなしを明示したいときだけこれを記述する。"}
{"prompt": "section_09_`Setax()`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_09_`Setax()`  ", "completion": "## 設定・定義"}
{"prompt": "section_09_`Setax()`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_09_`Setax()`  ", "completion": "#### `Setax()`"}
{"prompt": "section_09_`Setax()`  ", "completion": "`Setax()`"}
{"prompt": "section_09_`Setax()`  ", "completion": "座標軸の書式を設定する。"}
{"prompt": "section_09_`Setax()`  ", "completion": "引数はリストで与え、順番に、"}
{"prompt": "section_09_`Setax()`  ", "completion": "1.軸の形状(直線は \"l\" ，矢印は \"a\") 初期設定は直線"}
{"prompt": "section_09_`Setax()`  ", "completion": "矢印の大きさの倍率を指定するときは，\"a0.5\"のようにする。"}
{"prompt": "section_09_`Setax()`  ", "completion": "また，矢印のスタイルは Setarrow で指定する。"}
{"prompt": "section_09_`Setax()`  ", "completion": "2.横軸名 初期設定は \"x\""}
{"prompt": "section_09_`Setax()`  ", "completion": "3.横軸名の位置 初期設定は \"e\""}
{"prompt": "section_09_`Setax()`  ", "completion": "4.縦軸名 初期設定は \"y\""}
{"prompt": "section_09_`Setax()`  ", "completion": "5.縦軸名の位置 初期設定は \"n\""}
{"prompt": "section_09_`Setax()`  ", "completion": "6.原点名 初期設定は \"O\"（文字として書かれる）"}
{"prompt": "section_09_`Setax()`  ", "completion": "7.原点名の位置 初期設定は \"sw\""}
{"prompt": "section_09_`Setax()`  ", "completion": "8.線種"}
{"prompt": "section_09_`Setax()`  ", "completion": "9.線の色"}
{"prompt": "section_09_`Setax()`  ", "completion": "10.ラベルの色"}
{"prompt": "section_09_`Setax()`  ", "completion": "それぞれダブルクォートでくくる。色は，色名が使える。\"red\" など。"}
{"prompt": "section_09_`Setax()`  ", "completion": "【例】座標軸の先端を矢印にし，原点の北西に O を書く。"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_09_`Setax()`  ", "completion": "Setax([\"a\",\"\",\"\",\"\",\"\",\"\",\"nw\"]);//第8引数以降は省略"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_09_`Setax()`  ", "completion": "【例】原点の北西に O を書く。"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_09_`Setax()`  ", "completion": "Setax([7,\"nw\"]);//第7引数のみ指定"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_09_`Setax()`  ", "completion": "【例】軸を赤の点線にする。"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_09_`Setax()`  ", "completion": "Setax([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"do\",\"red\"]);"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_09_`Setax()`  ", "completion": "【例】先端を矢印にし，横軸を θ，縦軸を x にして矢じりの左側に書く。"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_09_`Setax()`  ", "completion": "Setax([\"a\",\"\\theta\",\"\",\"x\",\"w\"]);"}
{"prompt": "section_09_`Setax()`  ", "completion": "```"}
{"prompt": "section_100_`Sqr(実数)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_100_`Sqr(実数)`  ", "completion": "## 計算"}
{"prompt": "section_100_`Sqr(実数)`  ", "completion": "### マーキング"}
{"prompt": "section_100_`Sqr(実数)`  ", "completion": "#### `Sqr(実数)`"}
{"prompt": "section_100_`Sqr(実数)`  ", "completion": "`Sqr(実数)`"}
{"prompt": "section_100_`Sqr(実数)`  ", "completion": "平方根を求める。"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "## 計算"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "### マーキング"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "#### `BBdata(ファイル名,option)`"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "`BBdata(ファイル名,option)`"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "TeX 文書において，inputgraphics コマンドで画像を貼り込むときの BB サイズを求める。TeX 処理系のextractbb を用いて画像ファイルから BB データを作り，テキストファイルとして作業ディレクトリに書き出す。これを読んで，コンソールに ingludegarphics のコマンドを書き出す。これをそのままコピーすればよい。"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "なお，bb の値は整数値ではなく，高精細の値を小数点以下 2 桁に四捨五入して示される。画像ファイルは，PDF に限らず，PNG，JPG などでもよい。"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "option は，幅または高さの指定。"}
{"prompt": "section_101_`BBdata(ファイル名,option)`  ", "completion": "”w=40mm” で width=40mm が，”h=40mm”で height=40mm が付加される。"}
{"prompt": "section_102_`Cindyname()`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_102_`Cindyname()`  ", "completion": "## 計算"}
{"prompt": "section_102_`Cindyname()`  ", "completion": "### マーキング"}
{"prompt": "section_102_`Cindyname()`  ", "completion": "#### `Cindyname()`"}
{"prompt": "section_102_`Cindyname()`  ", "completion": "`Cindyname()`"}
{"prompt": "section_102_`Cindyname()`  ", "completion": "作図中のファイル名を取得する。"}
{"prompt": "section_103_`Crossprod(リスト，リスト)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_103_`Crossprod(リスト，リスト)`  ", "completion": "## 計算"}
{"prompt": "section_103_`Crossprod(リスト，リスト)`  ", "completion": "### マーキング"}
{"prompt": "section_103_`Crossprod(リスト，リスト)`  ", "completion": "#### `Crossprod(リスト，リスト)`"}
{"prompt": "section_103_`Crossprod(リスト，リスト)`  ", "completion": "`Crossprod(リスト，リスト)`"}
{"prompt": "section_103_`Crossprod(リスト，リスト)`  ", "completion": "2 つのベクトルの外積を求める。"}
{"prompt": "section_104_`Dotprod(リスト，リスト)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_104_`Dotprod(リスト，リスト)`  ", "completion": "## 計算"}
{"prompt": "section_104_`Dotprod(リスト，リスト)`  ", "completion": "### マーキング"}
{"prompt": "section_104_`Dotprod(リスト，リスト)`  ", "completion": "#### `Dotprod(リスト，リスト)`"}
{"prompt": "section_104_`Dotprod(リスト，リスト)`  ", "completion": "`Dotprod(リスト，リスト)`"}
{"prompt": "section_104_`Dotprod(リスト，リスト)`  ", "completion": "2 つのベクトルの内積を求める。"}
{"prompt": "section_105_`Findarea(プロットデータ)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_105_`Findarea(プロットデータ)`  ", "completion": "## 計算"}
{"prompt": "section_105_`Findarea(プロットデータ)`  ", "completion": "### マーキング"}
{"prompt": "section_105_`Findarea(プロットデータ)`  ", "completion": "#### `Findarea(プロットデータ)`"}
{"prompt": "section_105_`Findarea(プロットデータ)`  ", "completion": "`Findarea(プロットデータ)`"}
{"prompt": "section_105_`Findarea(プロットデータ)`  ", "completion": "プロットデータで囲まれる部分の面積を求める。"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "## 計算"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "### マーキング"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "#### `Findlength(プロットデータ)`"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "`Findlength(プロットデータ)`"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "プロットデータの曲線の長さを求める。"}
{"prompt": "section_106_`Findlength(プロットデータ)`  ", "completion": "## ファイル操作"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "## ファイル操作"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "### マーキング"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "#### `isexists(dir,file)`"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "`isexists(dir,file)`"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "dir に file が存在するか"}
{"prompt": "section_107_`isexists(dir,file)`  ", "completion": "返り値は`<bool>`型。"}
{"prompt": "section_108_`makedir(path,dirname)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_108_`makedir(path,dirname)`  ", "completion": "## ファイル操作"}
{"prompt": "section_108_`makedir(path,dirname)`  ", "completion": "### マーキング"}
{"prompt": "section_108_`makedir(path,dirname)`  ", "completion": "#### `makedir(path,dirname)`"}
{"prompt": "section_108_`makedir(path,dirname)`  ", "completion": "`makedir(path,dirname)`"}
{"prompt": "section_108_`makedir(path,dirname)`  ", "completion": "path に dirname の dir を作成する。"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "## ファイル操作"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "### マーキング"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "#### `Filelist([mainpath,]dirname)`"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "`Filelist([mainpath,]dirname)`"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "(mainpath にある)dirname のファイルとフォルダの一覧をリストとして返す。"}
{"prompt": "section_109_`Filelist([mainpath,]dirname)`  ", "completion": "返り値は`<list>`型。"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "## 設定・定義"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "#### `Drwxy(), Drwxy(options)`"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "`Drwxy(), Drwxy(options)`"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "指定する手順で座標軸を描く"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "座標軸は 初期設定では最後に描かれるが，座標軸上に白抜きの点を表示するなど，先に描くことが必要な場合に用いる。描画面には座標軸は表示されない。"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "options は次のオプションが許されている。"}
{"prompt": "section_10_`Drwxy(), Drwxy(options)`  ", "completion": "`[\"Origin=\", \"Xrng=\", \"Yrng=\"]`"}
{"prompt": "section_110_`gethome()`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_110_`gethome()`  ", "completion": "## ファイル操作"}
{"prompt": "section_110_`gethome()`  ", "completion": "### マーキング"}
{"prompt": "section_110_`gethome()`  ", "completion": "#### `gethome()`"}
{"prompt": "section_110_`gethome()`  ", "completion": "`gethome()`"}
{"prompt": "section_110_`gethome()`  ", "completion": "ユーザホームを返す。"}
{"prompt": "section_110_`gethome()`  ", "completion": "返り値は`<string>`型。"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "## ファイル操作"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "### マーキング"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "#### `ismacosx()`"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "`ismacosx()`"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "macOSかどうかを返す"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "返り値は`<bool>`型。"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "## `iswindows()`"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "Windowsかどうかを返す"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "返り値は`<bool>`型。"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "## `islinux()`"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "Linuxかどうかを返す"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "返り値は`<bool>`型。"}
{"prompt": "section_111_`ismacosx()`  ", "completion": "## その他"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "## その他"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "### マーキング"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "#### `Animationkey([番号リスト, 横位置リスト, 縦位置])`"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "`Animationkey([番号リスト, 横位置リスト, 縦位置])`"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "アニメーションの PLAY,REV,PAUSE,STOP を作成"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "すでにある場合は位置を設定"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "オプションのデフォルト値は，[71,72,73,74],[-4,-2,0,2],-6"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "【例】"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "```"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "Ketinit();"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "Setketcindyjs([\"Label=[]\",\"Color=offwhite\",\"Figure=y\"]);"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "Animationkey();//Animationkeyを作成"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "ss=Animationparam(0,2,2*pi);//ssをアニメーション用変数として設定。変域は0から2piで速度は2"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "Plotdata(\"1\",\"sin(x)\",\"x=[0,\"+text(ss)+\"]\",[\"Num=200\"]);"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "Windispg();"}
{"prompt": "section_112_`Animationkey([番号リスト, 横位置リスト, 縦位置])`  ", "completion": "```"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "## その他"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "### マーキング"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "#### `Assign(文字列，文字，文字)`"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "`Assign(文字列，文字，文字)`"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "文字列の中のある文字を他の文字で置き換える"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "第１引数の文字列中の第 2 引数の文字を，第 3 引数の文字で置き換える。"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "第 3 引数が数値の場合，文字列に変換される。"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "第 2 引数と，第 3 引数をリストにして，複数の置き換えをすることができる。"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "【例】a\\*x を 1.3\\*x とした文字列を返す。次のいずれも同じ結果になる。"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "```"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "Assign(\"x^2+a*x\",\"a\",\"1.3\");//\"x^2+a*x\"の\"a\"を\"1.3\"に置換"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "Assign(\"x^2+a*x\",\"a\",1.3);"}
{"prompt": "section_113_`Assign(文字列，文字，文字)`  ", "completion": "```"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "## その他"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "### マーキング"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "#### `Colorcode(種別 1, 種別 2, カラーコード)`"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "`Colorcode(種別 1, 種別 2, カラーコード)`"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "種別 1 から種別 2 へカラーコードを変換する。戻り値は変換されたコード。"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "種別は，\"rgb\",\"cmyk\",\"hsv\"のいずれか。"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "【例】変換例"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "```"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "Ketinit();"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "col=Colorcode(\"rgb\",\"cmyk\",[1,0,0]);//RGBをCMYKに変換"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "println(col);"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "col=Colorcode(\"cmyk\",\"rgb\",[0,1,1,0]);//CMYKをRGBに変換"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "println(col);"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "col=Colorcode(\"rgb\",\"hsv\",[1,0,0]);//RGBをHSVに変換"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "println(col);"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "Windispg();"}
{"prompt": "section_114_`Colorcode(種別 1, 種別 2, カラーコード)`  ", "completion": "```"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "## その他"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "### マーキング"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "#### `Dqq(文字列)`"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "`Dqq(文字列)`"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "文字列の前後に\\\"をつける。"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "Ketinit();"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "str=\"abc\";//strに文字列abcを代入"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "str2=Dqq(str);変数strの文字列の最初と最後に2重引用符(\")を付記してstr2に代入"}
{"prompt": "section_115_`Dqq(文字列)`  ", "completion": "Windispg();"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "## その他"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "### マーキング"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "#### `Factorial(n)`"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "`Factorial(n)`"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "n!を計算する。(nは正の整数)"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "```"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "Ketinit();"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "println(Factorial(10));//10の階乗を計算して表示する"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "Windispg();"}
{"prompt": "section_116_`Factorial(n)`  ", "completion": "```"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "## その他"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "### マーキング"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "#### `Binomial(n,r)`"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "`Binomial(n,r)`"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "2 項係数を計算する。"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "```"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "Ketinit();"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "println(Binomial(15,7));//nCr(15,7)を計算して表示する"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "Windispg();"}
{"prompt": "section_117_`Binomial(n,r)`  ", "completion": "```"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "## その他"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "### マーキング"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "#### `Gcd(numberlist)`"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "`Gcd(numberlist)`"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "numberlist の最大公約数を計算する。"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "```"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "Ketinit();"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "println(Gcd([24,60]));//24と60の最大公約数を計算して表示する"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "Windispg();"}
{"prompt": "section_118_`Gcd(numberlist)`  ", "completion": "```"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "## その他"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "### マーキング"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "#### `Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "ベクトル（2 つのベクトルの場合は差の大きさ）の大きさを計算する。"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "```"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "Ketinit();"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "println(Norm([1,1]));//ベクトル(1,1)の大きさを計算して表示する"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "println(Norm([1,1],[2,3]));ベクトル(1,1)->(2,3)の大きさを計算して表示する"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "Windispg();"}
{"prompt": "section_119_`Norm(ベクトル), Norm(ベクトル 1, ベクトル 2)`  ", "completion": "```"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "## 設定・定義"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "#### `Definecolor(色名 , 定義のリスト)`"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "`Definecolor(色名 , 定義のリスト)`"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "色名を定義する"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "ユーザー命名の色名を定義する。定義リストは RGB または CMYK のリスト"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "各色０〜１の範囲で指定する。定義した色名は，`Setcolor(color,options)` で使うことができる。"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "なお，KETCindy では，68 色を色名で使うことができる。色の名称はカラーコード一覧参照。"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "【例】暗い紫色を darkmaz の名称で定義して使う。"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "Definecolor(\"darkmaz\",[0.8,0,0.8]);//(R,G,B)=(0.8,0,0.8)の色をdarkmazとして定義"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "Setcolor(\"darkmaz\");//darkmaz色をsetcolorする"}
{"prompt": "section_11_`Definecolor(色名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "## その他"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "### マーキング"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "#### `Figpdf(option)`"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "`Figpdf(option)`"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "出力枠サイズの PDF を作る。"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "```"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "Ketinit();"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "Listplot(\"1\",[A,B,C,A],[\"dr,2\"]);"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "Setparent(\"test.pdf\");"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "Figpdf();"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "Windispg();"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "```"}
{"prompt": "section_120_`Figpdf(option)`  ", "completion": "ここで、Parentボタンを押すと、test.pdfが生成される。"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "## その他"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "### マーキング"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "#### `Indexall(str1,str2)`"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "`Indexall(str1,str2)`"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "文字列 str1 から str2 を検索しその位置をすべて返す"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "Cindyscript の indexof() の拡張版。indexof() が最初に見つかった位置を返すのに対し，Indexall() は存在する位置をすべてリストにして返す。"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "```"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "Ketinit();"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "println(Indexall(\"The quick brown fox jumps over the lazy dog.\",\"o\"));//Indexall関数で文の中のoを探して位置を取得し、それを表示する"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "Windispg();"}
{"prompt": "section_121_`Indexall(str1,str2)`  ", "completion": "```"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "## その他"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "### マーキング"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "#### `Bracket(str [,bracketpair])`"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "`Bracket(str [,bracketpair])`"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "文字列 str から bracketpair を検索しその位置と階層レベルのリストを返す。"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "bracketpair のデフォルトは”()”。"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "```"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "Ketinit();"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "println(Bracket(\"(abc(de)fg)\"));//括弧の位置と深さを取得して表示"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "Windispg();"}
{"prompt": "section_122_`Bracket(str [,bracketpair])`  ", "completion": "```"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "## その他"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "### マーキング"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "#### `Getlevel(str [,poslist または sep,key]);`"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "`Getlevel(str [,poslist または sep,key]);`"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "文字列 str から sep の位置と階層レベルのリストを返す。"}
{"prompt": "section_123_`Getlevel(str [,poslist または sep,key]);`  ", "completion": "sep, key のデフォルトはコンマと ()。sep を与えたとき，poslist は sep の indexlist になる。"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "## その他"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "### マーキング"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "#### `Reparse(文字列か文字列のリスト)`"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "`Reparse(文字列か文字列のリスト)`"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "評価してから実部をとる。"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "【例】"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "```"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "Ketinit();"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "println(Reparse(\"1+sqrt(-1)\"));//1+sqrt(-1)を計算して、実部を取る"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "Windispg();"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "```"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "この出力結果は"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "```"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "1"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "```"}
{"prompt": "section_124_`Reparse(文字列か文字列のリスト)`  ", "completion": "となる"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "## その他"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "### マーキング"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "#### `Slider(名称，位置 1, 位置 2)`"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "`Slider(名称，位置 1, 位置 2)`"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "スライダを作成する"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "名称は ”A-C-B” の形で，端点を A,B，スライダ点を C としたスライダを作る。"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "端点 A,B の位置を，位置 1，位置 2 で指定する。単に”C”としたときは端点をとらない。スライダにより取得"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "したい値は，点 C の座標（たとえば C.x）を利用する。"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "点 A,B,C はあらかじめ作図しておく必要はない。既にある場合はその点を使う。"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "【例】"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "```"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "Ketinit();"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "Slider(\"A-C-B\",[-5,-2],[5,-2]);//A(-5,-2),B(5,2)を端点に、点Cをつまみとしてスライダーを作る"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "Plotdata(\"1\",Assign(\"a*x^2\",[\"a\",C.x]),\"x\",[\"dr,2\"]);//C.xの値を元にax^2のグラフを描く。"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "Windispg();"}
{"prompt": "section_125_`Slider(名称，位置 1, 位置 2)`  ", "completion": "```"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "## その他"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "### マーキング"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "#### `Sprintf(実数, 長さ)`"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "`Sprintf(実数, 長さ)`"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "小数点以下の長さを固定した文字列に変換"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "実数を，小数点 n 位までの数とした文字列に変換する"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "【例】"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "```"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "Ketinit();"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "println(Sprintf(6.2831,2));//6.2831の小数点以下第2位まで取得して表示"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "Windispg();"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "```"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "この出力結果は"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "```"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "6.28"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "```"}
{"prompt": "section_126_`Sprintf(実数, 長さ)`  ", "completion": "となる"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "## その他"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "### マーキング"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "#### `Textformat(数，桁数)`"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "`Textformat(数，桁数)`"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "小数点以下の桁数を指定して数を文字列化する。"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "第１引数は数のリストでもよい。数のリストの場合は，戻り値は，対応する数値を指定桁数にした後，リストを文字列化する。Cindyscript の組み込み関数にも，`format()` という同様の関数があるが，`format()` は文字列のリストを返す。"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "【例】"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "```"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "Ketinit();"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "dt=[1/6,0.5];"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "println(Textformat(dt,4));// 1/6,0.5を指定桁数にした後，リストを文字列化して表示する"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "println(format(dt,4));//1/6,0.5を指定桁数にして表示する"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "Windispg();"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "```"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "この出力結果は"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "```"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "[0.1667,0.5]"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "[0.1667,0.5]"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "```"}
{"prompt": "section_127_`Textformat(数，桁数)`  ", "completion": "となる。(両方同じなのは、printlnは文字列型を示す二重引用符を出力しないため)"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "## その他"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "### マーキング"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "#### `Windispg() または Windisp(データのリスト)`"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "`Windispg() または Windisp(データのリスト)`"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "定義されているプロットデータを Cinderella 画面に黒線で描く"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "Windispg() は，スクリプトの最後に置くことで，出力される部分だけが黒で描かれるので，出力図を確認することができる。ただし，Letter() 関数で表示した点の名称などが Cinderella で作図したラベルと重なって表示されて見にくくなることもある。この関数を実行しなくても出力には影響しない。"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "Windisp(データのリスト）は，R から KETCindy 用に出力されたファイルを ReadOutData() 関数で読み込んだときに，必要なプロットデータ列だけを表示するのに用いる。"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "ReadOutData(”filename.txt”) でデータを読み込むと，そのデータに含まれるプロットデータ列が，コンソールに"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "Outdata of filename.txt : [Gfn,Gdfn,Gh]"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "のように表示される。"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "このうち，Gfn と Gh だけを表示するのであれば"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "Windispg([Gfn,Gh]);"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "とする。引数なしで"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "Windispg();"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "とすればすべてのプロットデータ列が表示される。"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "なお，いずれの場合も，作図したプロットデータも同時に表示される。"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "作図した図を全てではなく選択して表示する場合は，それらのプロットデータ名をリストにして引数とする。"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "たとえば，sg1, gr1, crAB が定義されているとき，"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "Windispg([\"sg1\",\"gr1\"]);"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "```"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "とすれば，sg1,gr1 のみが表示される。"}
{"prompt": "section_128_`Windispg() または Windisp(データのリスト)`  ", "completion": "**Windispg()は普通、最後の行に書けば問題ない**"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "## その他"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "### マーキング"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "#### `Viewtex()`"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "`Viewtex()`"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "TeXのソースファイルを書き出す。引数なし。"}
{"prompt": "section_129_`Viewtex()`  ", "completion": "グローバル変数 Fhead で定義したファイル名に ”main” を付加した TEX のソースファイルとバッチファイル（Mac の場合はシェルファイル）を作成する。"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "## 設定・定義"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "#### `Setcolor(color,options)`"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "`Setcolor(color,options)`"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "描画色の設定"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "引数 color はカラーコードまたは色の名称。"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "カラーコードは RGB または CMYK をリストで与える。各色０～１。"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "色の名称はカラーコード一覧 の 68 色が指定できる。"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "```"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "C.xy=|B.xy|/|C.xy|*C.xy;"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "Listplot([B,A,C]);"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "Setcolor(\"red\");//描画色のデフォルトを赤色にする。ここより下ではSetcolorが再度実行されるまで赤色で描画される。"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "Anglemark(\"1\",[B,A,C],[3]);"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "Arrowhead(C,\"ag1\",1);"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "Setcolor(\"black\");"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "Windispg();"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "```"}
{"prompt": "section_12_`Setcolor(color,options)`  ", "completion": "**座標軸を描く場合は，このあと `Setcolor(\"black\")` で黒に戻しておかないと，座標軸が赤で表示されてしまうので要注意。**"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "## その他"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "### マーキング"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "#### `Workprocess()`"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "`Workprocess()`"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "作図の経過を取得する"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "作図ツールを用いた作図の経過を取得する。"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "```"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "println(Workproccess());"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "```"}
{"prompt": "section_130_`Workprocess()`  ", "completion": "とすると，コンソールに作図手順が表示される。"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "## その他"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "### マーキング"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "#### `Op(n,list or str)`"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "`Op(n,list or str)`"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "リストまたは文字列から要素を抜き出す"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "第 2 引数のリストまたは文字列の n 番目の要素（文字）を返す。"}
{"prompt": "section_131_`Op(n,list or str)`  ", "completion": "Cindyscript の アンダーバーの演算子 (list_n , str_n) と同様。"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "## その他"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "### マーキング"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "#### `Strsplit(文字列 , 文字)`"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "`Strsplit(文字列 , 文字)`"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "文字列を分解する。"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "第１引数の文字列を第 2 引数の文字の位置で分解したリストを返す。"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "【例】文字 , で区切って分解する。"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "```"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "Ketinit();"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "a=\"1,2,3,4,5\";"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "println(Strsplit(a,\",\"));"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "Windispg();"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "```"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "この出力結果は、リスト型で"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "```"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "[1,2,3,4,5]"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "```"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "となる。"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "同様の関数に，Cindyscript の `tokenize(文字列, 文字列)` がある。`tokenize()` の第２引数は文字列や，文字のリ"}
{"prompt": "section_132_`Strsplit(文字列 , 文字)`  ", "completion": "ストでもよい。"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "## その他"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "### マーキング"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "#### `Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "分母リストの 1 つを分母とする近似分数と誤差を返す。"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "戻り値は，簡易 TeX-like 書式の文字列，誤差，分子，分母。"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "【例】"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "```"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "Ketinit();"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "println(Fracform(2*pi,1..100););//2piを分母が1から100までの中で最も近い値を取る分数に近似してその簡易 TeX-like 書式の文字列、その分数の分子、分母、誤差を計算し、表示する"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "println(Fracform(2*pi,300););//2piを分母が1から300までの中で最も近い値を取る分数に近似してその簡易 TeX-like 書式の文字列、その分数の分子、分母、誤差を計算し、表示する"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "println(Fracform(0.1234,1000););//0.1234を分母が1から1000までの中で最も近い値を取る分数に近似してその簡易 TeX-like 書式の文字列、その分数の分子、分母、誤差を計算し、表示する"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "Windispg();"}
{"prompt": "section_133_`Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数 (5)])`  ", "completion": "```"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "## その他"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "### マーキング"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "#### `Tonormalform(簡易 TeX-like 文字列)`"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "`Tonormalform(簡易 TeX-like 文字列)`"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "\\*を省略した文字列に\\*を補った文字列を返す。"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "【例】"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "```"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "Ketinit();"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "println(Tonormalform(\"ax+b\"));//ax+bに乗算記号を付記して表示する"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "Windispg();"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "```"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "この出力結果は、"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "```"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "a*x+b"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "```"}
{"prompt": "section_134_`Tonormalform(簡易 TeX-like 文字列)`  ", "completion": "となる。"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "## その他"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "### マーキング"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "#### `Sla2fra(文字列)`"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "`Sla2fra(文字列)`"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "文字列の中の / を簡易 TeX-like 書式の分数に直す。"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "【例】"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "```"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "Ketinit();"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "println(Sla2fra((\"(4+pi)/3\")));//(4+pi)/3を簡易 TeX-like 書式の分数に変換する"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "Windispg();"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "```"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "# KeTCindy3D"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "## 概要"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "KeTCindy3Dの描画は次のように構成される."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "Cinderellaの画面に白の短径で囲んだ領域が2つできる."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "NE, SWを対角とする左側の領域を主画面, 右側の領域を副画面という."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "主画面は平面の場合と同様, $$\\TeX$$に出力される範囲を示し,"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "NE, SWの2点をドラッグすることにより変更できる."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "主画面の下方のスライダーで視点が移動でき,"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "主画面上では軸が回転する."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "副画面はx, y平面上に視点を置いたものと考えればよい."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "主画面上にCinderellaの作図ツールで点や線分を作図すると,"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "副画面に対応する点が作図される."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "主画面上の点をドラッグするとx, y座標を変更でき,"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "副画面上の点をドラッグするとz座標を変更できる."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "KeTCindy3Dでは, 線や面についての陰線処理を行う."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "陰線処理はC言語との連携により処理を速めている"}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "(C言語を使う環境整備が必要であるが, 現在はこれを標準としている)."}
{"prompt": "section_135_`Sla2fra(文字列)`  ", "completion": "## 設定"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "# KeTCindy3D"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "## 設定"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "### マーキング"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "#### `Ketinit3d()`"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "`Ketinit3d()`"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "KeTCindy3Dの使用宣言."}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "Cinderellaの画面を3Dモードにする."}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "Cinderellaの画面に視点移動のための2つのスライドを作る."}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "スライダーは初期位置が左端になる."}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "スライダーTHで角THETAを, スライダーFIで角PHIを内部変数として定義する."}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "引数に0を入れて`Ketinit3d(0)`とすると, 副画面を表示しない."}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "**この関数はInitializationスロットに置く.**"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "**`Ketinit()`も平面の場合と異なりInitializationスロットに置く.**"}
{"prompt": "section_136_`Ketinit3d()`  ", "completion": "KeTCindy3Dにおける変数の初期化などを行う`Start3d()`はDrawスロットに書く."}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "# KeTCindy3D"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "## 設定"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "### マーキング"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "#### `Setangle(TH, FI)`"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "`Setangle(TH, FI)`"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "回転角の指定."}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "スライダーで設定できる回転角(視点の位置)THとFIを度数法で指定する."}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "例えば`Setangle(70, 40)`とするとTH, FIがその位置になる."}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "スライダーは固定されるので再度スライダーを有効にしたい場合はコメント化して再実行する."}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "初期状態だけを決めたい場合は"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "```js"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "if(!Ptselected(), Setangle(70, 40));"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "```"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "または"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "```js"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "if(!Isangle(), Setangle(70, 40));"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "```"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "とすると, スライダーは有効となりスライダーのいずれかの点を選択した状態であればFigureボタンも有効である."}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "画面上の何もないところをクリックして,"}
{"prompt": "section_137_`Setangle(TH, FI)`  ", "completion": "点の選択状態を解除すると元に戻る"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "# KeTCindy3D"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "## 設定"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "### マーキング"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "#### `Start3d(option)`"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "`Start3d(option)`"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "3Dの画面設定と空間点の認識"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "副画面を作り, 幾何点を3Dの点として認識する."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "この関数は必須で, Drawスロットの先端に書く."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "Cinderellaの作図ツールで点・線分を作図すると, 内部関数の`Ptseg3data()`"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "によってそれらを空間の点として認識し, 副画面上に対応する点をとる."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "但し, 始めはz座標をを0とする."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "点の名前がAであれば副画面上の点はAzとなる."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "点をポイントとして選択すると副画面の上に座標が表示される."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "作図した点の名称をインスペクタで変更した場合, 新しい名称に対応する点を副画面上に作成するが,"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "以前の点は消えないので要注意."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "例えば点Aを作図した後, 主画面上の点Aをインスペクタで点Dに変えた場合,"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "副画面上に新たにDzができるが, 以前のAzも残る."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "残ったAzは洗濯しておいて作図ツールの消去ボタンで消すことができる."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "`option`に除外点のリストを与えるとその点は空間点としない(スライダーで視点を移動しても位置は変わらない)."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "## `Startsurf(options)`"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "曲面描画の初期化と定数の設定."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "`options`で定数を設定する."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "定数としては分割数, Cのサイズ, 誤差の限界を設定する."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "`options`がないときは以下の初期設定を用いる."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "- 分割数: [50, 50]"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "- Cのサイズ: [1500, 500, 200]"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "- 誤差の限界: [0.01, 0.1]"}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "設定後に初期値にリセットするときは文字列`reset`を引数に与える."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "これにより陰線処理を伴う面の描画手順は, 次のようになる."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "1. `Startsurf()`で面描画の宣言をする."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "1. 描画関数でプロットデータを作る."}
{"prompt": "section_138_`Start3d(option)`  ", "completion": "1. `ExeccmdC()`でC言語を用いてまとめて描画する."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "# KeTCindy3D"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "## `Startsurf(options)`"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "### マーキング"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "#### `Xyzaz3data(name, range_x, range_y, range_z, options)`"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "`Xyzaz3data(name, range_x, range_y, range_z, options)`"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "座標軸を描く."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "画面に座標軸を描き, プロットデータ`ax3d`を作成する."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "`name`は空文字列でよい."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "`options`は次の2つ."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "- 矢じり`an`: nは数字で矢じりの大きさ(nはなくてもよい)."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "- 原点$$\\mathrm{O}$$`Onesw`: `nesw`は微小位置. 数字も付けられる(`nesw`をつけない場合, 初期値は`sw`)."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "【例】初期設定の座標軸."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```js"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "Xyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\");"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "矢じりをつける."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```js"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "Xyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", \"a\");"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "矢じりを大きくする."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```js"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "Xyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", [\"a2\"]);"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "原点$$\\mathrm{O}$$を表示する."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```js"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "Xyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", [\"O\"]);"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "原点$$\\mathrm{O}$$の位置を調整して右上に表示する. 矢じりもつける."}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```js"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "Xyzax3data(\"\", \"x=[-5, 5]\", \"y=[-5, 5]\", \"z=[-5, 5]\", [\"a\", \"Oe2n2\"]);"}
{"prompt": "section_139_`Xyzaz3data(name, range_x, range_y, range_z, options)`  ", "completion": "```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "## 設定・定義"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "#### `Deffun(関数名 , 定義のリスト)`"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "`Deffun(関数名 , 定義のリスト)`"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "関数を定義する"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "関数定義は，CindyScript の関数定義 f(x):=式 でもできるが，Deffun() を使うことにより，R でこの関数を利用することができる。目的に応じて使い分けるとよい。"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "式のリストには if 文を用いた場合分けの関数式を記述することもできる。"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "【例】$$f\\left(x\\right)=\\frac{1}{x^2+1}$$を定義し、グラフを描く。"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Ketinit();"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Deffun(\"f(x)\",[\"regional(y)\",\"y=1/(x^2+1)\",\"y\"]);//f(x)=1/(x^2+1)として定義する"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Plotdata(\"1\",\"f(x)\",\"x\");//定義したf(x)のグラフを描く。"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Windispg();"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "【例】"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "$$"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "f\\left(x\\right)= \\begin{cases}"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "1 & x\\geq 0 \\\\"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "-1 & x< 0"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "\\end{cases}"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "$$"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "を定義し、グラフを描く。"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Ketinit();"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Deffun(\"f(x)\",[\"regional(y)\",\"if(x>=0,y=1,y=-1)\",\"y\"]);//if文によって、x>=0のときはy=1,そうでないときはy=-1としている"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Plotdata(\"1\",\"f(x)\",\"x\",[\"Dis=1\",\"Num=1000\"]);//Disオプションで値が1以上ジャンプする点は線を描かない"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Windispg();"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "また以下のように、if 文はネストすることができる。"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "Deffun(\"f(x)\",[\"regional y\",\"if(x>1,y=1,if(x>-1,y=x,y=-1))\",\"y\"]);"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "```"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_13_`Deffun(関数名 , 定義のリスト)`  ", "completion": "変数を定義する"}
{"prompt": "section_14_説明  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_14_説明  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_14_説明  ", "completion": "### 描画設定・定義"}
{"prompt": "section_14_説明  ", "completion": "#### 説明"}
{"prompt": "section_14_説明  ", "completion": "説明"}
{"prompt": "section_14_説明  ", "completion": "変数の定義を R と共有する。"}
{"prompt": "section_14_説明  ", "completion": "【例】constを3と定義する"}
{"prompt": "section_14_説明  ", "completion": "```"}
{"prompt": "section_14_説明  ", "completion": "Defvar(\"const=3\");"}
{"prompt": "section_14_説明  ", "completion": "```"}
{"prompt": "section_14_説明  ", "completion": "【例】複数の変数を定義するときはリストにする。"}
{"prompt": "section_14_説明  ", "completion": "```"}
{"prompt": "section_14_説明  ", "completion": "Defvar([\"a\",3,\"b\",1]);"}
{"prompt": "section_14_説明  ", "completion": "```"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "#### `Fontsize(記号)`"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "`Fontsize(記号)`"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "フォントサイズを設定する"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "次に `Fontsize()` を実行するまで有効"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "記号は，`\"t\" , \"ss\" , \"f\", \"s\" , \"n\" , \"la\",\"La\", \"LA\", \"h\" , \"H\"` であり、この順番で大きくなる。"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "【例】作図ツールの「点を加える」で，A～G の点をとっておく。小さい方からいくつか表示する。"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "```"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "Fontsize(\"t\"); //一番小さくする。これは次に別の大きさで指定する時まで有効。"}
{"prompt": "section_15_`Fontsize(記号)`  ", "completion": "```"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "#### `Ptsize(n) , Setpt(n)`"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "`Ptsize(n) , Setpt(n)`"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "表示する点の大きさを設定する。"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "`Ptsize()` と `Setpt()` は同じである。 初期設定は１"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "全体の点の大きさを設定する。"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "【例】"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "```"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "Ptsize(4);//点のサイズを4に変更。次実行するまで有効"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "```"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "点の大きさを個々に変えたい場合は，以下のようにsize オプションを用いる。"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "【例】１から 4 までの点の大きさ"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "```"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "Pointdata(\"1\",A,[\"Size=1\"]);"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "Pointdata(\"2\",B,[\"Size=2\"]);"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "Pointdata(\"3\",C,[\"Size=3\"]);"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "Pointdata(\"4\",D,[\"Size=4\"]);"}
{"prompt": "section_16_`Ptsize(n) , Setpt(n)`  ", "completion": "```"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "#### `Setmarklen(数)`"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "`Setmarklen(数)`"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "座標軸の目盛の長さを設定する"}
{"prompt": "section_17_`Setmarklen(数)`  ", "completion": "`Htickmark()` , `Vtickmark()` で座標軸に目盛を入れるとき，その長さを設定する。"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "#### `Setorigin(座標)`"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "`Setorigin(座標)`"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "描画する座標軸の原点を設定（移動）する。座標系は変化しない。"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "描画する座標軸の原点を引数の座標とする。座標は点の識別名でもよい。"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "【例】原点を`(3,2)` として座標軸を描く。"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "```"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "Setorigin([3,2]);"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "```"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "【例】原点を点 A の位置にして座標軸を描く。"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "```"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "Setorigin(A);"}
{"prompt": "section_18_`Setorigin(座標)`  ", "completion": "```"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "#### `Setpen(数)`"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "`Setpen(数)`"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "線の太さの初期値を設定する"}
{"prompt": "section_19_`Setpen(数)`  ", "completion": "`Listplot()`などの描画関数のオプション dr で，個々の太さは指定できる。"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "#### `Setscaling(倍率)`"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "`Setscaling(倍率)`"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "縦方向の倍率を設定する。倍率は実数またはリスト。実数の場合は縦方向，リストの場合は [横方向，縦方向]"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "の指定となる。"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "2 次関数の応用問題などでは，グラフが縦に大きくなる場合があり，y 軸方向のスケーリングを変えたいこと"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "がよくある。次のスクリプトは，f(x) = −x^2 + 10x のグラフを縦軸方向を半分にして描くものである。"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "```"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "Ketinit();"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "Setscaling(0.5);//全体の大きさを0.5にする"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "A = createpoint(\"A\",[0,25/4]);"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "B = createpoint(\"B\",[5/2,25/4]);"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "C = createpoint(\"C\",[5/2,0]);"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "Listplot([A,B],[\"do\"]);"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "Listplot([C,B],[\"do\"]);"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "Plotdata(\"1\",\"-2*x^2+10*x\",\"x\");"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "Letter([[5,0],\"s2w\",\"5\",[0,25/2],\"w2\","}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "\"$\\frac{25}{2}$\",C,\"s4\",\"$\\frac{5}{2}$\"]);"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "Windispg();"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "```"}
{"prompt": "section_20_`Setscaling(倍率)`  ", "completion": "なお、Cinderella で作図した幾何要素に対しては Setscaling は無効である。"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "#### `Setunitlen(文字列)`"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "`Setunitlen(文字列)`"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "単位長を設定する。 初期設定は 1cm。"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "この関数は，スクリプトの初めの方に書くのがよい。"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "【例】文字幅を8mmにする"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "```"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "Setunitlen(\"8mm\")"}
{"prompt": "section_21_`Setunitlen(文字列)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "## `Defvar(文字列)`"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "### 描画設定・定義"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "#### `Setwindow(x の範囲, y の範囲)`"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "`Setwindow(x の範囲, y の範囲)`"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "出力する描画領域を設定する。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "出力する描画領域は，通常は 2 点 SW と NE を対角とする矩形領域である。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "この 2 点をドラッグすることによりビジュアルに描画領域を決められる。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "しかし，これとは別に出力範囲を設定したい場合にこの関数を用いる。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "また，表を作成したときは，表の範囲が出力範囲として優先される（`Tabledata()` を実行したとき）ので，表外に図を描いた場合は，最後にこの関数で出力範囲を指定して書き出す。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "【例】[-5,5]を[-1,3]頂点に持つ長方形を描画範囲として定める。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "Setwindow([-5,5],[-1,3]);"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "## 描画"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "### 描画"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "描画関数は曲線などを作図する関数である。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "基本的な書式は次の通り。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "関数名 (name , 点リストなど , options);"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "name は，プロットデータの名称で，関数ごとに決められた頭部のあとに付けられる。たとえば，線分を描く`Listplot()` でできるプロットデータは，頭部が\"sg\"であり，name を\"1\"とすれば，\"sg1\"という名称のプロットデータができる。name 指定は不要の場合もあり，その場合は KETCindy が自動的に名称を作成する。なお，name に演算記号は使えないので，番号として負の数は使えない。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "点リストなどには，点の座標，点の識別名，複数の点のリスト，複数の点を示す文字列などがあり，関数によって異なる。点は Cinderella で作図した幾何要素の点を利用できる。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "`options` は，線種・表示する文字列・解像度・出力の有無などを指定するオプション群。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "線種はつぎの 4 通り。 初期設定は実線。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| オプション | |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "|------------|----------------------------------------------------------------------------------------------------------|"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| dr,n | 太さ n の実線で描く。 |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| da,m,n | 破線を描く。 mは破線の長さ、nは破線の間隔(m,nは省略可) m,nオプションはcinderellaの描画面には反映されない |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| id,m,n | ギャップからはじまる破線を描く。 |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| do,m,n | 点線で描く。 mは点の間隔,nは太さ(m,nは省略可) |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "描画色指定は，RGB または CMYK のリストで指定するか，色名を用いる。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "【例】"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "\"Color=[0,0.7,0]\""}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "出力するかどうかなど"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| オプション | |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "|------------|-------------------------------------|"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| notex | Cinderella 画面上の図形を出力しない |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| nodisp | Cinderella 画面上にも出力しない |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "\"nodisp\"は画面上にも，Ｒへのデータにも出力されないが，プロットデータは作成されるので，プロットデータだけを利用したい場合に有効である。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "【例】A中心、Bを通る円を描画するがCinderella上には出力しない。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "pdata=Circledata([A,B],[\"nodisp\"]);"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "```"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "として，後にプロットデータ pdata を利用する。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "その他"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| オプション | |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "|------------|-----------------------------------------------|"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| Size=n | 点の大きさ，線の太さの指定 |"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "| Num=n | 曲線の場合の分割数(プロットデータの個数 +1)|"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "特に断りがなければ以上のオプションが許されている。"}
{"prompt": "section_22_`Setwindow(x の範囲, y の範囲)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "## 描画"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "#### `Pointdata(name , 点リスト , options)`"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "`Pointdata(name , 点リスト , options)`"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "点のデータを作成する。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "与えられた座標の点データを作成する。オプションは\"Size=\",\"Color=\",\"Inside=\"が許されている。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Inside オプションは，点の内部についての指定（n : 内部を塗らない，color:内部色）"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "【例】座標指定で 2 つの点データを作る。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[[1,2],[-2,3]]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "【例】"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "座標指定で 2 つの点データを作る。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[[1,2],[-2,3]]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "作図した点 A,B について，点データを作る。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[A,B]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "A,B が作図されていない場合は作成されない。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Cinderella の描画面上では既存の点 A,B に黒の点が重なって表示される。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "A の位置に大きさ 4 で点を作る。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",A,[\"Size=4\"]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "点データを作り，オプション（内部を塗らない）で描く"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[A,B],[\"Inside=n\"]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "点データを作り，オプション（内部を白塗り）で描く"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[A,B],[\"Inside=white\"]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "点データを作るが，TeX には出力しない"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[[3,4],[5,6]],[\"notex\"]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "点データを作るが，TeX には出力せず画面上にも表示しない。"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[[3,4],[5,6]],[\"nodisp\"]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "節点を明示した木を描く"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Ptsize(3);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Pointdata(\"1\",[[1,2],[3,4],[5,2]]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Listplot(\"1\",[[0,0],[1,2],[3,4],[5,2],[4,0]]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Listplot(\"2\",[[1,2],[2,0]]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "Listplot(\"3\",[[5,2],[6,0]]);"}
{"prompt": "section_23_`Pointdata(name , 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "## 描画"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "#### `Putpoint(点名 , 座標1 , 座標 2 )`"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "`Putpoint(点名 , 座標1 , 座標 2 )`"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "点を動的に作る"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "識別名が点名の点を，既存でなければ座標１に作る。既存ならば座標 2 に移動する。Tex には出力されない。"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "【例】点 A を作る。"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "(1,1) に固定点 A を作る。 この点は動かすことができない。"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "Putpoint(\"A\",[1,1]);"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "(1,1) に自由点を作るには次のようにする。"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "Putpoint(\"A\",[1,1],[A.x,A.y]);"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "この点は座標 2 の効果により，自由点となり，ドラッグして動かすことができる。"}
{"prompt": "section_24_`Putpoint(点名 , 座標1 , 座標 2 )`  ", "completion": "他の関数で点データを扱う場合はこれか作図ツールを用いて点を作図する必要がある。"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "## 描画"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "#### `Putintersect(点名 , PD1 , PD2 , [No] )`"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "`Putintersect(点名 , PD1 , PD2 , [No] )`"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "2 曲線の交点を作る"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "PD1,PD2 は 2 曲線のプロットデータ名。作成される点は幾何点。"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "描画範囲に交点が１つだけのとき，第 4 引数がなくても交点が作られる。"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "描画範囲に 2 つ以上の交点がある場合，第 4 引数を省略するとコンソールに交点の座標のリストと，「Choose point number 」というガイドが表示される。そこで，引数の No として，その番号を指定すると，その点が作られる。この関数で作成されるのは幾何点だけなので，TEX の図に点として明示するためには Pointdata() で書き出す。"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "注）交点が存在しない場合は，「No intersect point」がコンソールに表示される。"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "次の例は，3 次曲線と直線の交点を 3 つとも取ったものである。"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "```"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "Plotdata(\"1\",\"x^3-4*x\",\"x\",[\"Num=200\"]);//x^3-4*xのグラフを作成し、プロットデータgr1を作成する"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "Plotdata(\"2\",\"1/2*x+1\",\"x\");//1/2*x+1のグラフを作成し、プロットデータgr2を作成する"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "Putintersect(\"P\",\"gr1\",\"gr2\",1);//gr1とgr2の交点のうち 1番目を点Pとする。作図ツール等であらかじめ点を打つ必要はない"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "Putintersect(\"Q\",\"gr1\",\"gr2\",2);//gr1とgr2の交点のうち 2番目を点Qとする。作図ツール等であらかじめ点を打つ必要はない"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "Putintersect(\"R\",\"gr1\",\"gr2\",3);//gr1とgr2の交点のうち 3番目を点Rとする。作図ツール等であらかじめ点を打つ必要はない"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "Pointdata(\"1\",[P,Q,R],[\"size=4\"]);"}
{"prompt": "section_25_`Putintersect(点名 , PD1 , PD2 , [No] )`  ", "completion": "```"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "## 描画"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "#### `Putoncurve(点の名前, プロットデータ, options)`"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "`Putoncurve(点の名前, プロットデータ, options)`"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "曲線上に点を乗せる。"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "点が存在しない場合は新たに作る。すでにその点が存在する場合は，その点の x 座標を使う。初期値の x 座標の 初期設定は 0。"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "options は，x 座標の範囲をリストで与える。"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "【例】アステロイド上の動点 P をとる。"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "Paramplot(\"1\",\"[2*cos(t)^3,2*sin(t)^3]\",\"t=[0,2*pi]\");//アステロイド曲線(媒介変数表示で[2*cos(t)^3,2*sin(t)^3])を描画しプロットデータgp1を作成する"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "Putoncurve(\"P\",\"gp1\",[-1,1]);//gp1上の[-1,1]にPを置く"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_26_`Putoncurve(点の名前, プロットデータ, options)`  ", "completion": "点 P がアステロイド上にでき，この点はドラッグするとアステロイド上を −1 ≤ x ≤ 1 の範囲で動かすことができる。ただし，-1,1 の付近は y 座標の判断の関係でぴったりはいかない。"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "## 描画"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "#### `Putonline(点名 , 座標１ , 座標 2 )`"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "`Putonline(点名 , 座標１ , 座標 2 )`"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "直線上に点を作る"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "座標１，座標 2 を通る直線上に点名の点を作る。できた点は直線上しか動かない"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "【例】点 A, B を通る直線上に点 P をとる。"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "Putonline(\"P\",A,B);"}
{"prompt": "section_27_`Putonline(点名 , 座標１ , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "## 描画"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "#### `Putonseg(点名 , 座標１ , 座標 2 )`"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "`Putonseg(点名 , 座標１ , 座標 2 )`"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "線分上に点を作る 説明"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "座標１，座標 2 を端点とする線分上に点名の点を作る。できた点は線分上しか動かない。指定した点がすでに存在する場合は動かさない。"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "【例】"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "線分 AB 上に点 C をとる。"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "Putonseg(\"C\",A,B);"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "点 (-1,0),(2,2) を通る線分上に点 C をとる。"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "Putonseg(\"C\",[[-1,0],[2,2]]);"}
{"prompt": "section_28_`Putonseg(点名 , 座標１ , 座標 2 )`  ", "completion": "```"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "## 描画"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "#### `Reflectpoint(点，対称点または対称軸)`"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "`Reflectpoint(点，対称点または対称軸)`"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "点の鏡映の座標を返す。"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "点を指定された点または軸に関して対称移動した点の座標を返す。対称軸は [ 点 1, 点 2 ] で指定"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "【例】点 A～F を作図しておき，C～F を A の鏡映の位置に配置する。"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "Ｃは B に関して A と対称な点"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "Ｄは点 (2,3) に関して A と対称な点"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "E は点 (1,0) に関して (-1,1) と対称な点"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "F は直線 CE に関して A と対称な点"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "```"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "C.xy=Reflectpoint(A,B);"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "D.xy=Reflectpoint(A,[[2,3]]);"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "E.xy=Reflectpoint([-1,1],[[1,0]]);"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "F.xy=Reflectpoint(A,[C,E]);"}
{"prompt": "section_29_`Reflectpoint(点，対称点または対称軸)`  ", "completion": "```"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "## 描画"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "#### `Rotatepoint(点 ,角度 , 中心)`"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "`Rotatepoint(点 ,角度 , 中心)`"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "点の位置を回転する"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "点を，中心で示された点の周りに回転した座標を返す。角度は弧度法で与える"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "点 A～E は作図しておき，C～E をそれぞれの位置に配置する。"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "点 C は A を，Ｂに関して\\frac{2}{3}\\piだけ回転した点"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "点 D は点 (5,2) を，Ｂに関して \\frac{\\pi}{3}だけ回転した点"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "点 E は点 (3,0) を A に関して -\\frac{\\pi}{4}だけ回転した点"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "```"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "C.xy=Rotatepoint(A,2*pi/3,B);"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "D.xy=Rotatepoint((5,2),pi/3,B);"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "E.xy=Rotatepoint([3,0],-pi/4,A);"}
{"prompt": "section_30_`Rotatepoint(点 ,角度 , 中心)`  ", "completion": "```"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "## 描画"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "#### `Scalepoint(点，比率ベクトル，中心)`"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "`Scalepoint(点，比率ベクトル，中心)`"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "点の位置の拡大・縮小を行う"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "点を，指定された中心を原点とする座標系で，比率ベクトルの分だけ拡大・縮小した位置の座標を返す。"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "【例】点 A～F は作図ツールで適当な位置にとっておく。"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "点 D を，点 A を原点を中心に横に 3 倍，縦に 2 倍した位置に置く。"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "点 E を，点 A を点 B を中心に横に 3 倍，縦に 2 倍した位置に置く。"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "点 F を，点 A を原点を中心にベクトル −−→OC で示された比率の位置に置く。"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "```"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "D.xy=Scalepoint(A,[3,2],[0,0]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "E.xy=Scalepoint(A,[3,2],B);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "F.xy=Scalepoint(A,C.xy,[0,0]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Arrowdata(\"1\",[[0,0],C]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Pointdata(\"1\",[A,B,C,D,E,F],[\"size=2\"]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Letter([A,\"e2\",\"A(\"+A.x+\",\"+A.y+\")\"]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Letter([B,\"e2\",\"B(\"+B.x+\",\"+B.y+\")\"]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Letter([C,\"e2\",\"C(\"+C.x+\",\"+C.y+\")\"]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Letter([D,\"e2\",\"D(\"+D.x+\",\"+D.y+\")\"]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Letter([E,\"e2\",\"E(\"+E.x+\",\"+E.y+\")\"]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "Letter([F,\"e2\",\"F(\"+F.x+\",\"+F.y+\")\"]);"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "```"}
{"prompt": "section_31_`Scalepoint(点，比率ベクトル，中心)`  ", "completion": "点 A,B,C をドラッグすると，インタラクティブに D,E,F の位置が変わる。"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "## 描画"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "#### `Translatepoint(点 , 移動ベクトル)`"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "`Translatepoint(点 , 移動ベクトル)`"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "点を平行移動する"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "点を移動ベクトルで示された分だけ平行移動した点の座標を返す"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "【例】点 A～D は作図しておく。"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "点 C を点 A を x 軸方向に 2 , y 軸方向に 3 だけ平行移動した点にする。"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "点 D を点 A をベクトル OB だけ平行移動した点にする。"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "```"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "C.xy=Translatepoint(A,[2,3]);"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "D.xy=Translatepoint(A,B.xy);"}
{"prompt": "section_32_`Translatepoint(点 , 移動ベクトル)`  ", "completion": "```"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "## 描画"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "#### `Setarrow([arrowsize,angle,position,cut])`"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "`Setarrow([arrowsize,angle,position,cut])`"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "Arrowdata,Arrowhead で描く矢印のスタイルを設定する。"}
{"prompt": "section_33_`Setarrow([arrowsize,angle,position,cut])`  ", "completion": "arrowsize,angle,position,cut,linestyle は，順に大きさ (1)，開き角 (18)，位置 (1)，切り込み (0.2) である。 （カッコ内はデフォルト値）"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "## 描画"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "#### `Arrowdata(name,[始点 , 終点] , options)`"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "`Arrowdata(name,[始点 , 終点] , options)`"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "2 点間を結ぶ矢線を描く。"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "name はなくてもよい（自動的に通し番号をつける）。"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "options は矢じりの形状などの指定（リストで与える）。"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "数値は， 大きさ, 開き角, 位置, 切り込み"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "`\"Line=n(y)\"`（矢印は線だけ），`\"Cutend=\"`（トリミング），`\"Color=\"`"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "開き角は 60 分法で与える。2.5 未満の時は 18°の倍数指定とする。"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "矢じり位置は，線分の長さを１とした始点からの距離。"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "切り込みのデフォルトは 0.2"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "トリミング :`\"Cutend=m\"` または `\"Cutend=[m,n]\"` で，右辺が数のときは両端を m だけカットする。リストのときは始点を m, 終点を n だけカットする。m が負のときは延長する。"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "【例】オプションの設定とその結果を示す。"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "```"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"1\",[A,B]);//点Aから点Bに矢印を引く"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"2\",[[1,0],[2,3]],[2]);//(1,0)から(2,3)に大きさ2の矢印を引く"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"3\",[[2,0],[3,3]],[3,45]);//(2,0)から(3,3)に大きさ3,開き角45の矢印を引く"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"4\",[[3,0],[4,3]],[3,1,0.5]);//(3,0)から(4,3)に大きさ3,開き角1,位置0.5の矢印を引く"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"5\",[[4,0],[5,3]],[3,1,1,0]);//(4,0)から(5,3)に大きさ3,開き角1,位置1,切り込み0の矢印を引く"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"6\",[[5,0],[6,3]],[3,\"Line=y\"]);//(5,0)から(6,3)に大きさ3,線だけの矢印を描画する"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"7\",[[6,0],[7,3]],[3,\"dr,2\"]);//(6,0)から(7,3)に大きさ3,実践で線の太さ2の矢印を引く"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "Arrowdata(\"8\",[[7,0],[8,3]],[3,1,1,0.5,\"Color=red\"]);//(7,0)から(8,3)に大きさ3,開き角1,位置1,切り込み0.5,色が赤色の矢印を引く"}
{"prompt": "section_34_`Arrowdata(name,[始点 , 終点] , options)`  ", "completion": "```"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "## 描画"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "#### `Arrowhead(点 , 方向 , options)`"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "`Arrowhead(点 , 方向 , options)`"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "指定された位置に，指定された方向を向いた矢じりだけを描く。"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "点は座標または幾何要素名。方向は原点から見て座標 [a,b] の方向。"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "optionsはsetarrowと同じ。"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "【例】"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "```"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "Arrowhead(A,[-1,1]);//Aの位置にAからみて(-1,1)の位置に(座標ではない)矢じりだけを描く"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "Arrowhead([1,1],[-1,1],[2,60]);//(1,1)の位置に(1,1)からみて(-1,1)の位置に(座標ではない)大きさ2,開き角60の矢じりだけを描く。"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "Arrowhead(A,[-1,1],[2,30,0.5]);//Aの位置にAからみて(-1,1)の位置に(座標ではない)大きさ2,開き角30,位置0.5の矢じりだけを描く。"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "Arrowhead([1,1],[-1,1],[2,20,0.5,\"Line=y\"]);//(1,1)の位置に(1,1)からみて(-1,1)の位置に(座標ではない)大きさ2,開き角20,位置0.5で線だけの矢じりを描く。"}
{"prompt": "section_35_`Arrowhead(点 , 方向 , options)`  ", "completion": "```"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "## 描画"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "#### `Arrowhead(点または位置比 , プロットデータ, options)`"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "`Arrowhead(点または位置比 , プロットデータ, options)`"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "プロットデータ（曲線）を指定したときは，曲線上の点に矢じりをつける。"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "曲線には向きがあり，それによって矢じりの向きが決まる。"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "\"Invert(曲線名)\" とすると反対向きの矢じりになる。"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "曲線の向きとは，曲線を描くときの順序で，プロットデータの順序でもある。"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "位置比は曲線上の位置を表す比率（0 から 1）。"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "曲線cr1 上の点 A の位置比が 0.6 のとき"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "Arrowhead(A,\"cr1\");//cr1上の点Aに矢じりを描く"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "Arrowhead(0.6,\"cr1\",[2,1,0.5,\"Color=red\"]);//cr1上の位置比0.6の点に大きさ2,開き角1,位置0.5に赤色の矢じりを描く"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "Arrowhead(1,\"cr1\");//cr1上の位置比1の点に矢じりを描く"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "Arrowhead(1,\"Invert(cr1)\",[\"Line=y\"]);//cr1とは逆向きの曲線上の位置比1のところに線だけの矢じりを描く"}
{"prompt": "section_36_`Arrowhead(点または位置比 , プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "## 描画"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "#### `Lineplot（name , 2 点のリスト , options)`"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "`Lineplot（name , 2 点のリスト , options)`"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "2 点のリストで示された点を結ぶ直線を描く。"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "2 点のリストは座標または幾何要素の名前で与える。"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "options は次の通り。"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "線種\"dr, n\", \"da,m,n\" , \"do,m,n\""}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "\"+\"半直線を描く。"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "\"dr\" , \"da\" , \"do\" と \"+\" はリストにして両方指定することができる。"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "点のリストが，座標ではなく幾何要素名のリストの場合は，name は省略できる。"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "いくつか例を示す。"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "【例】(0,0)と(1,2)を結ぶ直線を書く"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "Lineplot(\"1\",[[0,0],[1,2]])"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "Cinderella の描画ツールで 2 点 A,B をとっておき，直線 AB を引く"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "Lineplot([A,B]);"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "option の働きの例"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "Lineplot([A,B],[\"dr,0.5\",\"+\"]); //A を端点とする半直線を引く"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "Lineplot([C,D],[\"dr,2\"]); //直線 CD を太さ 2 で描く"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "Lineplot([E,F],[\"da\"]); //直線 EF を破線で描く"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "Lineplot([G,H],[\"do\"]); //直線 GH を点線で描く"}
{"prompt": "section_37_`Lineplot（name , 2 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "## 描画"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "#### `Listplot（name , 点のリスト , options)`"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "`Listplot（name , 点のリスト , options)`"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "点のリストで示された点を結ぶ。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "点のリストは座標または幾何要素名のリストで与える。点が，座標ではなく幾何要素名の場合は，name は省略可"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "プロットデータの名前は，\"sg\" に引数の name を付加したものとなる。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "options は次の通り。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "線種 \"dr, n\", \"da,m,n\" , \"do,m,n\""}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "トリミング :\"Cutend=m\" または \"Cutend=[m,n]\""}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "数のときは両端を m だけカットする。リストのときは始点を m, 終点を n だけカットする。m が負のときは延長する。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "options の使用例"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([A,B]); //線分 AB を描く。太さは 初期設定。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([C,D],[\"dr,2\"]); //線分 CD を描く。太さ 2"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([E,F],[\"da\"]); //線分 EF を破線で描く"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([G,H],[\"da,3,1\"]); //線分 GH を破線で描く。線を長く"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([K,L],[\"da,1,3\"]); //線分 KL を破線で描く。間隔を空ける"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([M,N],[\"do\"]); //線分 MN を点線で描く。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([O,P],[\"do,3\"]); //線分 OP を点線で描く。間隔を空ける"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([Q,R],[\"do,3,3\"]); //線分 QR を点線で描く。間隔を空けて太く"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "【例】三角形を描く。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Cinderella の作図ツールで三角形 ABC を描いておく。あるいは，単に 3 点 A,B,C をとるだけでもよい。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Addax(0);"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot([A,B,C,A]);"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "点の位置は座標で指定してもよい。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "その場合は name が必要。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot(\"1\",[[0,0],[2,0],[1,2],[0,0]]);//(0,0),(2,0),(1,2),(0,0)を結んだ線を描画する。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "【例】有限フーリエ級数展開"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "\\frac{\\pi}{2}+\\sum_{n=0}^{30}\\frac{1-\\left(-1\\right)^n}{n} \\sin nx"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "次のように Cindyscript で関数を定義し，プロットデータ pd を作って引数に渡す。"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "f(x):=("}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "s=pi/2;"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "repeat(30,n,s=s+(1-(-1)|^n)/n*sin(n*x));"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": ");"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "pd=apply(0..200,t,"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "x=-2*pi+t*4*pi/200;"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "[x,f(x)];"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": ");"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Listplot(\"1\",pd);//リストであるpdに格納されている点を結ぶ"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "Expr([[-2*pi,-0.5],\"s\",\"-2\\pi\",[-pi,-0.5],\"s\",\"-\\pi\",[pi,-0.5],\"s\","}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "\"\\pi\",[2*pi,-0.5],\"s\",\"2\\pi\",[0,pi],\"w2\",\"\\pi\"]);"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "```"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "リストの長さには制限がある。たとえば，タートルグラフィクスを用いたシェルピンスキーのギャスケットで"}
{"prompt": "section_38_`Listplot（name , 点のリスト , options)`  ", "completion": "は 200 くらいずつのリストに分割する。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "## 描画"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "#### `Framedata(name , リスト,options)`"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "`Framedata(name , リスト,options)`"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "矩形を描く"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "リストの形は 2 通り。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "その 1：[中心 , 横 , 縦] で，矩形を描く。横，縦は中心からの距離。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "その 2：2 点のリスト。点が座標でなく名称のときは name は省略できる。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "点の座標は点の名前でもよい。点を座標で与える場合は name は省略できない。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "リストを省略した場合は，描画範囲と同一の矩形を描く。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "その 2 のタイプでは，option として，\"center\" または \"corner\" がある。\"center\" のときは，中心と対角点（ 初期設定），\"corner\" のときは 2 点を対角点として解釈する。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "以下にいくつか例を示す"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "```"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "Framedata(\"1\");//描画範囲 (SW,NE) と同一の矩形を描く"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "Framedata(\"2\",[[0,0],2,2]);// 原点を中心とする縦横幅 4 の正方形を描く"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "Framedata(\"3\",[A,1.5,1.2]);// 点 A を中心とする横 3，縦 2.4 の矩形を描く。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "Framedata([B,C]);// 点 B を中心, 点 C を頂点とする矩形を描く。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "Framedata([D,E],[\"corner\"]);// 点 D,E を対角点とする矩形を描く。"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "```"}
{"prompt": "section_39_`Framedata(name , リスト,options)`  ", "completion": "矩形の角を丸めたい場合は，`Framedata()` ではなく，`Ovaldata()` を使うとよい。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "## 描画"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "### 点・線分・直線"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "#### `Polygonplot(name , 点リスト , 整数,options)`"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "`Polygonplot(name , 点リスト , 整数,options)`"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "2 点を半径とする円に内接する正多角形を描く。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "点リストを [A,B] とすると，A を中心とする半径 AB の円周上に点をとって正多角形を描く。ただし円は描かない。A,B は座標でもよい。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "点リストが座標ではなく作図してある点の名称のとき，オプションに\"Geo=y\" をつけると，頂点の幾何点を作る。幾何点の名称は B に番号を付けたものとなる。整数でない数を指定した場合は，きちんと閉じない折れ線が描かれる。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "【例】"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "```"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "Addax(0);"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "Polygonplot(\"1\",[[-4,1],[-4,3]],7);//(-4,1)を中心とし、(-4,3)を通る円に内接する7角形を描く"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "Polygonplot(\"2\",[A,B],7);//Aを中心とし、Bを通る円に内接する7角形を描く"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "Polygonplot(\"3\",[C,D],7,[\"Geo=y\"]);//Cを中心とし、Dを通る円に内接する7角形を描き、Cinderella上に点を作図する"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "```"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "円に内接する形でなく，与えられた線分 AB を１辺とする正多角形を描くには次のようにする。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "線分 AB は，Cinderella の作図ツールなどで描かれているものとする。ただし，線分でなく，両端の点が与えられているだけでもよい。Cindyscript で点 A,B が複素平面上にあるものとして，多角形の頂点の位置を計算する。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "【例】AB を 1 辺とする正五角形を描く。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "```"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "n=5;"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "pti=[complex(A),complex(B)];"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "th=2*pi/n;"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "repeat(n-2,s,"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "z1=pti_s;"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "z2=pti_(s+1);"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "z=z2+(z2-z1)*(cos(th)+i*sin(th));"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "pti=append(pti,z);"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": ");"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "pt=apply(pti,gauss(#));"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "pt=append(pt,A.xy);"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "Listplot(\"1\",pt);"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "```"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "pti は，各頂点に対応する複素数のリスト，pt が各頂点の座標のリストである。"}
{"prompt": "section_40_`Polygonplot(name , 点リスト , 整数,options)`  ", "completion": "### 曲線"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "## 描画"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "### 曲線"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "#### `Bezier(名前，節点リスト，制御点リスト，[オプション] )`"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "`Bezier(名前，節点リスト，制御点リスト，[オプション] )`"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "ベジェ曲線を描く"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "制御点は，各区間に対して，3 次の場合 2 個，2 次の場合 1 個のリストで与える。"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "オプションは"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "\"Num=n\": 節点間の分割数（分点数 −1）を指定できる。 ベジェ曲線とスプライン曲線の関数は節点間が短"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "い場合が多いので初期設定は 10 になっている。Plotdata() などと違い，大きい数（200 など）を指定すると，"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "全体の分割数が増大して描画時間がかかるようになってしまうので注意。"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Ketinit();"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "//点ABCを定義"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Putpoint(\"A\",[-5,0],[A.x,A.y]);"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Putpoint(\"B\",[5,0],[B.x,B.y]);"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Putpoint(\"C\",[2,3],[C.x,C.y]);"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "//節点がA,Bで制御点がCの2次のベジェ曲線を描画する。分割数は200。"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Bezier(\"1\",[A,B],[C],[\"Num=200\"]);"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Windispg();"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "【例】3次ベジェ曲線(節点がA,Bで制御点がC,D)"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Bezier(\"2\",[A,B],[C,D]);"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "【例】節点を増やす。2次と3次。(A-B間はDを制御点とする2次のベジェ曲線,B-C間はE,Fを制御点とする3次のベジェ曲線)"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Bezier(\"3\",[A,B,C],[[D],[E,F]]);"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "【例】全て同じ次数の場合(全て3次で、A-B間,B-C間,C-D間の制御点はそれぞれEとF,GとH,KとL)"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Bezier(\"4\",[A,B,C,D],[E,F,G,H,K,L]);"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "オプションの例"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Bezier(\"5\",[A,B,C],[[D],[E,F]],[\"Num=3\"]);//分割数を3に指定"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Bezier(\"6\",[A,B,C],[[D],[E,F]],[\"Num=40\",\"da\"]);//分割数を40に指定し、破線で描く"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "Bezier(\"1\",[A,B,C,D],[E,F,G,H,K,L],[\"Num=[2,3,4]\"]);//A-B間の分割数を2に、B-C間の分割数を3に、C-D間の分割数を4にする。"}
{"prompt": "section_41_`Bezier(名前，節点リスト，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "## 描画"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "### 曲線"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "#### `Beziersmooth(名前，節点リスト，[オプション] )`"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "`Beziersmooth(名前，節点リスト，[オプション] )`"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "節点間を3次ベジェ曲線でスムーズに結んだ曲線を描く"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "節点をはさむ制御点は１直線上にとる（したがって，１つは半自由点で，直線上しか動けない）。制御点は自動的に配置される。その後，節点や制御点を動かして，描きたいものにする。"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Ketinit();"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Setketcindyjs([\"Figure=y\"]);"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "//点A,B,C,Dをそれぞれ定義"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"A\",[-5,0],[A.x,A.y]);"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"B\",[5,0],[B.x,B.y]);"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"C\",[2,3],[C.x,C.y]);"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"D\",[2,-2],[D.x,D.y]);"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Beziersmooth(\"1\",[A,B,C,D],[\"num=2000\"]);//A-B,B-C,C-D間を3次ベジェ曲線でスムーズに結んだ曲線を描く(節点を挟む制御点は一直線上)"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Pointdata(\"1\",[A,B,C,D],[\"Size=2\"]);"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Letter([A,\"n2\",\"A\",B,\"n2\",\"B\",C,\"n2\",\"C\",D,\"n2\",\"D\"]);"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "Windispg();"}
{"prompt": "section_42_`Beziersmooth(名前，節点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "## 描画"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "### 曲線"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "#### `Beziersym(名前，節点リスト，[オプション] )`"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "`Beziersym(名前，節点リスト，[オプション] )`"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "節点間を 3 次ベジェ曲線でスムーズに結んだ曲線を描く"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "節点をはさむ制御点は節点に関し対称（片方は表示されず，動かせない）。制御点は自動的に配置される。その後，節点や制御点を動かして描きたいものにする。"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "【例】"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Ketinit();"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"A\",[-5,0],[A.x,A.y]);"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"B\",[5,0],[B.x,B.y]);"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"C\",[2,3],[C.x,C.y]);"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Putpoint(\"D\",[2,-2],[D.x,D.y]);"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Beziersym(\"1\",[A,B,C,D],[\"num=2000\"]);//A-B,B-C,C-D間を3次ベジェ曲線でスムーズに結んだ曲線を描く(節点を挟む制御点は節点に関し対称)"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Pointdata(\"1\",[A,B,C,D],[\"Size=2\"]);"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Letter([A,\"n2\",\"A\",B,\"n2\",\"B\",C,\"n2\",\"C\",D,\"n2\",\"D\"]);"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "Windispg();"}
{"prompt": "section_43_`Beziersym(名前，節点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "## 描画"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "### 曲線"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "#### `Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "複数のベジェ曲線を描く"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "[節点リスト, 制御点リスト] が１つの場合は，Bezier() と同じ。"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "【例】"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "```"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Ketinit();"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "addax(0);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Mkbeziercrv(\"5\",[[[A,B,C],[[D],[E,F]]],[[G,H,K,L],[[M],[N,O],[P]]]],[\"Num=200\"]);//A-B間を点Dで制御、B-C間を点E,Fで制御するベジェ曲線、G-H間を点Mで制御、H-K間を点N,Oで制御、K-L間を点Pで制御するベジェ曲線をそれぞれ描く(PD名は前者がbz51、後者がbz52となる。bz+name+指定した順番となる。)"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([A,\"s2\",\"A\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([B,\"s2\",\"B\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([C,\"s2\",\"C\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([D,\"n2\",\"D\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([E,\"n2\",\"E\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([F,\"n2\",\"F\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([G,\"s2\",\"G\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([H,\"s2\",\"H\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([K,\"s2\",\"K\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([L,\"s2\",\"L\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([M,\"n2\",\"M\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([N,\"n2\",\"N\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([O,\"n2\",\"O\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Letter([P,\"n2\",\"P\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Pointdata(\"1\",[A,B,C,D,E,F,G,H,K,L,M,N,O,P],[\"Size=2\"]);"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "Windispg();"}
{"prompt": "section_44_`Mkbeziercrv(名前, [節点リスト, 制御点リスト] のリスト,options )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "## 描画"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "### 曲線"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "#### `Mkbezierptcrv( ptlist，[オプション] )`"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "`Mkbezierptcrv( ptlist，[オプション] )`"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "ベジェ曲線を描く"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "**制御点は，自動的に配置される。**"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "ptlistには節点を記載する。"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "複数の場合は` [ ptlist1, ptlist2.... ]`"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "名前は，a から順に自動的につける。 (プロットデータ名はbza,bzb,bzc...となる)"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "オプション"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "\"Deg=...\" 次数指定ができる。（初期設定は 3 次）"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "\"Num=...\" 各区間の区間数（分点数 −1）を指定できる。（初期設定は 10）"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "【例】"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Ketinit();"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Putpoint(\"A\",[-5,0],[A.x,A.y]);"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Putpoint(\"B\",[5,0],[B.x,B.y]);"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Putpoint(\"C\",[2,3],[C.x,C.y]);"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Mkbezierptcrv([A,B,C]);//A-B,B-C間を3次のベジェ曲線で結ぶ。制御点は自動生成。"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Windispg();"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "その他の例"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "【例】制御点の数を1つにする"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Mkbezierptcrv([A,B,C],[\"Deg=2\"]);//A-B,B-C間を2次のベジェ曲線で結ぶ。制御点は自動生成。次元数に応じてDeg=の値を書き換える。3次元なら3でよい。"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "【例】節点の数を増やす"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Mkbezierptcrv([A,B,C,D,E,F,X]);//点の数に応じてptlistのリストの長さを変化させる。"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "【例】複数の場合"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "Mkbezierptcrv([[A,B,C],[D,E,F,G]]);//A-B,B-C間とD-E,E-F,F-G間をそれぞれ3次のベジェ曲線で結ぶ。"}
{"prompt": "section_45_`Mkbezierptcrv( ptlist，[オプション] )`  ", "completion": "```"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "## 描画"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "### 曲線"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "#### `Bspline(名前，制御点リスト，[オプション] )`"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "`Bspline(名前，制御点リスト，[オプション] )`"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "2 次 B-spline 曲線を描く"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "節点は自動的に計算され，表示されない"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "【例】"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "Bspline(\"1\",[A,B,C,D,E])//A-B,B-C,C-D,D-E間をBsplineで結ぶ。点の数に応じてリストの中身を変更すれば良い。"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "これは， `Bezier(\"1\",[A,(B+C)/2,(C+D)/2,E],[B,C,D])` と同じ。**曲線の名前が `bz1` ではなく `bzb1` となる。**"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "通常の B-spline 曲線の端の制御点の代わりに，端点を動かせるようにしている。"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "【例】"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "Bspline(\"1\",[A,B,C,D,A]); //A-B,B-C,C-D,D-A間をBsplineで結ぶ。点の数に応じてリストの中身を変更すれば良い。"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "```"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "リストの最初と最後が同じ場合は閉曲線になる。"}
{"prompt": "section_46_`Bspline(名前，制御点リスト，[オプション] )`  ", "completion": "`Bezier(\"1\",[(D+A)/2,(A+B)/2,(B+C)/2,(C+D)/2,(D+A)/2],[A,B,C,D]);`と同じ。"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "## 描画"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "### 曲線"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "#### `CRspline(名前，節点リスト，[オプション] )`"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "`CRspline(名前，節点リスト，[オプション] )`"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "単独の Catmull-Rom スプライン曲線を描く"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "自由点は，節点のみで，制御点は節点から作られ移動はできない。"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "オプションに，通常のオプションのほか，次が使える。"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "size ->n:画面上での線の太さを指定する。"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "【例】"}
{"prompt": "section_47_`CRspline(名前，節点リスト，[オプション] )`  ", "completion": "`CRspline(\"1\",[A,B,C,D]);`"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "## 描画"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "### 曲線"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "#### `Ospline(名前，制御点リスト，[オプション] )`"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "`Ospline(名前，制御点リスト，[オプション] )`"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "大島の spline 曲線を描く"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "制御点を通るスプライン曲線を描く"}
{"prompt": "section_48_`Ospline(名前，制御点リスト，[オプション] )`  ", "completion": "リストの最初と最後が同じ場合は閉曲線になる。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "## 描画"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "### 曲線"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "#### `Circledata(name, リスト,options)`"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "`Circledata(name, リスト,options)`"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "円または多角形を描く。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "中心の点と，円周上の 1 点（か半径），または 3 点をリストで与えて円を描く。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "中心と円周上の点を，座標ではなく幾何要素名で指定する場合は name は省略可。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "options は以下のものをリストで与える。省略した場合は実線で円が描かれる。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "`\"Rng=[θ1, θ2]\"` 角 θ1 から θ2 の範囲の弧を描く。角は弧度法で与える。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "`\"Num=分割数\"` 円を描くときの分割数。値が小さい場合は多角形になる。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "線種 `\"dr, n\"`, `\"da,m,n\"` , `\"do,m,n\"`"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "【例】"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "addax(0);"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Circledata(\"1\",[[0,0],[2,0]],[\"dr,2\"]);//中心が(0,0)で(2,0)を通る円を太さ2の実線で描画する。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Windispg();"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "【例】"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Circledata([A,B]);//A中心、半径ABの円"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Circledata(\"1\",[A,A+[2,0]]);A中心、半径2の円"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Circledata([A,B,C]);//点A,B,Cを通る円。プロットデータ名は\"crABC\""}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "`Circledata([A,B,C]);` で，3 点 A,B,C を通る円を描いたとき，できた円の中心は `Pointdata(\"1\",[crABCcenter]);`で作図できる。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "【例】扇型を描く"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "addax(0);"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Putpoint(\"A\",[0,0],[A.x,A.y]);"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Putpoint(\"B\",[3,0],[B.x,B.y]);"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Circledata([A,B],[\"Rng=[0,pi/3]\"]);//A中心、半径ABの円のうち、角度が0からpi/3までの部分だけ描画する。角度を変えたいときは、Rng=のリストの中の値を変更すれば良い。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Pointdata(\"1\",[A,B],[\"Size=2\"]);"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Letter([A,\"s2\",\"A\",B,\"s2\",\"B\"]);"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Windispg();"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "【例】円を太く描く"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Circledata([A,B],[\"dr,3\"]);//A中心、半径ABの円を太さ3の実線で描く。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "【例】正六角形を描く。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "Circledata(\"2\",[A,B],[\"Num=6\"]);////A中心、半径ABの円に**内接する**正六角形を描く。頂点の数を変更するならNum=の数字を変えれば良い。正10角形を描くならNum=10とすれば良い。"}
{"prompt": "section_49_`Circledata(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "## 描画"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "### 曲線"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "#### `Ellipseplot(name, 点リスト , 定義域, options)`"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "`Ellipseplot(name, 点リスト , 定義域, options)`"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "焦点と通る点を与えて楕円を描く。"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "点リストで 2 つの焦点と通る点を与える。点は Cinderella の幾何点が使える。"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "また，通る点のかわりに，焦点からの距離の和を実数で与えることもできる。"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "【例】点 A,B を焦点とする楕円を描く。"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "```"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Ketinit();"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "addax(0);"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Putpoint(\"A\",[0,0],[A.x,A.y]);"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Putpoint(\"B\",[3,0],[B.x,B.y]);"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Putpoint(\"C\",[4,2],[C.x,C.y]);"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Ellipseplot(\"1\",[A,B,C],[\"do,2,2\"]);// 点 C を通る楕円を描く。(点線)"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Ellipseplot(\"2\",[A,B,4],[\"da,2\"]); //焦点からの距離の和が 4 である楕円を描く。"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Ellipseplot(\"3\",[A,B,C],\"[0,pi]\",[\"dr,1\"]); //楕円の半分を描く。(角度が0からpiまでを描いている。)"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Pointdata(\"1\",[A,B,C],[\"Size=2\"]);"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Letter([A,\"s2\",\"A\",B,\"s2\",\"B\",C,\"s2\",\"C\"]);"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "Windispg();"}
{"prompt": "section_50_`Ellipseplot(name, 点リスト , 定義域, options)`  ", "completion": "```"}
{"prompt": "section_51_`Hyperbolaplot(name, 点リスト , 定義域, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_51_`Hyperbolaplot(name, 点リスト , 定義域, options)`  ", "completion": "## 描画"}
{"prompt": "section_51_`Hyperbolaplot(name, 点リスト , 定義域, options)`  ", "completion": "### 曲線"}
{"prompt": "section_51_`Hyperbolaplot(name, 点リスト , 定義域, options)`  ", "completion": "#### `Hyperbolaplot(name, 点リスト , 定義域, options)`"}
{"prompt": "section_51_`Hyperbolaplot(name, 点リスト , 定義域, options)`  ", "completion": "`Hyperbolaplot(name, 点リスト , 定義域, options)`"}
{"prompt": "section_51_`Hyperbolaplot(name, 点リスト , 定義域, options)`  ", "completion": "焦点と通る点を与えて双曲線を描く。"}
{"prompt": "section_52_説明  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_52_説明  ", "completion": "## 描画"}
{"prompt": "section_52_説明  ", "completion": "### 曲線"}
{"prompt": "section_52_説明  ", "completion": "#### 説明"}
{"prompt": "section_52_説明  ", "completion": "説明"}
{"prompt": "section_52_説明  ", "completion": "点リストで 2 つの焦点と通る点を与える。点は Cinderella の幾何点が使える。"}
{"prompt": "section_52_説明  ", "completion": "また，通る点のかわりに，焦点からの距離の差を実数で与えることもできる。"}
{"prompt": "section_52_説明  ", "completion": "option として，`\"Asy=線種\"`を与えると，漸近線を指定した線種で表示する。 初期設定では漸近線は非表示。"}
{"prompt": "section_52_説明  ", "completion": "【例】"}
{"prompt": "section_52_説明  ", "completion": "```"}
{"prompt": "section_52_説明  ", "completion": "Ketinit();"}
{"prompt": "section_52_説明  ", "completion": "Putpoint(\"A\",[0,0],[A.x,A.y]);"}
{"prompt": "section_52_説明  ", "completion": "Putpoint(\"B\",[3,0],[B.x,B.y]);"}
{"prompt": "section_52_説明  ", "completion": "Putpoint(\"C\",[4,2],[C.x,C.y]);"}
{"prompt": "section_52_説明  ", "completion": "Hyperbolaplot(\"1\",[A,B,C]); //点A,Bを焦点とし、Cを通る双曲線を描く。"}
{"prompt": "section_52_説明  ", "completion": "Pointdata(\"1\",[A,B,C],[\"Size=2\"]);"}
{"prompt": "section_52_説明  ", "completion": "Letter([A,\"s2\",\"A\",B,\"s2\",\"B\",C,\"s2\",\"C\"]);"}
{"prompt": "section_52_説明  ", "completion": "Windispg();"}
{"prompt": "section_52_説明  ", "completion": "```"}
{"prompt": "section_52_説明  ", "completion": "【例】"}
{"prompt": "section_52_説明  ", "completion": "```"}
{"prompt": "section_52_説明  ", "completion": "Hyperbolaplot(\"1\",[A,B,2]);//点A,Bを焦点とし、焦点からの距離の差が 2 の双曲線を描く。"}
{"prompt": "section_52_説明  ", "completion": "```"}
{"prompt": "section_52_説明  ", "completion": "【例】"}
{"prompt": "section_52_説明  ", "completion": "```"}
{"prompt": "section_52_説明  ", "completion": "Hyperbolaplot(\"1\",[A,B,C],[\"Asy=do\"]);//漸近線を点線で描く。"}
{"prompt": "section_52_説明  ", "completion": "```"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "## 描画"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "### 曲線"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "#### `Parabolaplot(name，点リスト , 定義域, options)`"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "`Parabolaplot(name，点リスト , 定義域, options)`"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "点リスト [A,B,C] で示された焦点，準線で決まる放物線を描く。"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "焦点 A と準線 BC で決定する放物線を描く。"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "実際には，2 次関数 y = x^2 のグラフを回転・平行移動して描いており，定義域は，y = x^2 での定義域と考えてよい。定義域は省略することもできる。省略したときの初期値は [-5,5]"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "【例】点 A を焦点，直線 BC を準線とする放物線を描く"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "```"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Ketinit();"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Putpoint(\"A\",[0,0],[A.x,A.y]);"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Putpoint(\"B\",[3,0],[B.x,B.y]);"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Putpoint(\"C\",[4,2],[C.x,C.y]);"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Parabolaplot(\"1\",[A,B,C],[\"Num=200\"]);//焦点A,準線が直線BCである放物線を描画する。"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Pointdata(\"1\",[A,B,C],[\"Size=2\"]);"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Letter([A,\"e2\",\"A\",B,\"s2\",\"B\",C,\"s2\",\"C\"]);"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "Windispg();"}
{"prompt": "section_53_`Parabolaplot(name，点リスト , 定義域, options)`  ", "completion": "```"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "## 描画"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "### 曲線"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "#### `Ovaldata(name, 点リスト,options)`"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "`Ovaldata(name, 点リスト,options)`"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "角を丸くした矩形を描く"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "中心と対角の１点を指定し，角を丸くした矩形を描く"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "options は，角の落とし具合と線種など。 数字が大きいほど丸くなる。数字で与える。"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "```"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"A\",[-5,0],[A.x,A.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"B\",[5,0],[B.x,B.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"C\",[2,3],[C.x,C.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"D\",[2,-2],[D.x,D.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"E\",[-4,0],[E.x,E.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"F\",[2,1],[F.x,F.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"G\",[3,-3],[G.x,G.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Putpoint(\"H\",[4,-2],[H.x,H.y]);"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Ovaldata(\"1\", [A,B]);//角をちょっと丸めた長方形を描く"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Ovaldata(\"2\", [C,D],[0]);//角を丸めない長方形を描く"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Ovaldata(\"3\", [E,F],[1,\"dr,3\"]);//角を丸めた長方形を太さ3の実線で描く。"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Ovaldata(\"4\", [G,H],[1.5,\"da\"]);//角を丸めた長方形を破線で描く。"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "Windispg();"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "```"}
{"prompt": "section_54_`Ovaldata(name, 点リスト,options)`  ", "completion": "### 関数のグラフ"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "## 描画"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "### 関数のグラフ"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "#### `Plotdata(name , 式 , 変数と定義域 , options)`"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "`Plotdata(name , 式 , 変数と定義域 , options)`"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "関数のグラフを描く。プロットデータの名前は，grである"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "式で表された関数のグラフを，指定された定義域で描く。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "式，定義域は \" \" でくくって文字列とする。定義域は x=に続いてリストで指定。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "options は次の通り。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "線種 \"dr, n\", \"da,m,n\" , \"do,m,n\""}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "\"Num=数値\" 描画時の分割数"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "\"Dis=数値\" 値が指定数値以上ジャンプする場合は不連続点とみなす。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "\"Exc=数値リスト リストで示された点は除外する。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "\"Exc=関数\" 関数の零点は除外する。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "\"Color=RGB\" 色指定。RGB は CMYK でもよい。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "【例】3 次関数 f(x) = x^3+2x^2+2x+1 のグラフを定義域指定なしで描く。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "```"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "Plotdata(\"1\",\"x^3+2*x^2+2*x+1\",\"x\",[\"Num=200\"]);//f(x) = x^3+2x^2+2x+1 のグラフを描く。関数を変えたいなら式のところを変えれば良い。掛け算は省略できず、*記号が必要である。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "Windispg();"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "```"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "【例】三角関数 f(x) = cos x のグラフを定義域 0 < x < 2piで描く。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "```"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "Plotdata(\"3\",\"cos(x)\",\"x=[0,2*pi]\");// f(x) = cos x のグラフを0 < x < 2piで描く。範囲を変えるなら\"x=\"のところのリストを変更すれば良い。0から4なら[0,4]で良い。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "Windispg();"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "```"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "【例】Disオプションで不連続点を結ばない。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "```"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "Plotdata(\"3\",\"sin(x)/sqrt(sin(x)^2)\",\"x\",[\"Dis=1\",\"Num=2000\"]);//sin(x)/sqrt(sin(x)^2)のグラフを描き、値が1以上ジャンプしてたら不連続点とみなし、その点を結ばない。"}
{"prompt": "section_55_`Plotdata(name , 式 , 変数と定義域 , options)`  ", "completion": "```"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "## 描画"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "### 関数のグラフ"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "#### `Implicitplot(name, 式,x の定義域,y の定義域, options)`"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "`Implicitplot(name, 式,x の定義域,y の定義域, options)`"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "陰関数のグラフを描く。"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "陰関数の式を与えてグラフを描く。式，定義域とも文字列。"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "options は,\"Wait=n\" が指定できる。Wait の初期値は 10。"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "<!-- \"r\",\"m\"に関しては，オプションなしのとき"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "1. データファイルがなければ，新しく作る"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "1. データファイルが既にあればそれを読み込む"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "\"m\"のとき，強制的にデータファイルを作り直す。"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "\"r\" のとき，すでにあるデータファイルを読み込む。 -->"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "【例】(x^2+y^2)^2-2*2.5^2*(x^2-y^2)-(3^4-2.5^4)=0で表される曲線を描く"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "```"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "Ketinit();"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "Implicitplot(\"1\",\"(x^2+y^2)^2-2*2.5^2*(x^2-y^2)-(3^4-2.5^4)=0\",\"x\",\"y\");(x^2+y^2)^2-2*2.5^2*(x^2-y^2)-(3^4-2.5^4)=0で表される曲線を、変数をx,yとして描く。"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "Windispg();"}
{"prompt": "section_56_`Implicitplot(name, 式,x の定義域,y の定義域, options)`  ", "completion": "```"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "## 描画"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "### 関数のグラフ"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "#### `Paramplot(name , 式 , 変数と定義域,options)`"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "`Paramplot(name , 式 , 変数と定義域,options)`"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "媒介変数表示の曲線を描く。"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "式は\"\"でくくった媒介変数表示のリストで与える。"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "定義域も \" \" でくくって文字列とし，`t=`に続いてリストで指定する。"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "options は線種が有効"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "【例】リサージュ図形を描く。(リサージュ図形は[cos(a*t),sin(b*t)]で表される。)"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "```"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "Paramplot(\"1\",\"[cos(5*t),sin(7*t)]\",\"t=[0,2*pi]\",[\"Num=2000\"]);//[cos(a*t),sin(b*t)]で表される媒介変数表示のグラフを0<t<2piの範囲で描く。式を変えるなら2番目の引数(数式が書いてあるリスト)、範囲を変えるなら\"t=\"を変える。媒介変数はtでなくてもいい。そのときは、範囲をその変数で定義すること。(媒介変数がsなら範囲は\"s=[-1,1]\"などとする。)"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "Windispg();"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "```"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "【例】太線にする。"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "```"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "Paramplot(\"2\",\"[2*cos(t),sin(t)]\",\"t=[0,2*pi]\",[\"dr,2\"]);//2*cos(t),sin(t)で表されるグラフを0<t<2piの範囲で太さ2の実線で描く。"}
{"prompt": "section_57_`Paramplot(name , 式 , 変数と定義域,options)`  ", "completion": "```"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "## 描画"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "### 関数のグラフ"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "#### `Polarplot(name , 式 , 変数と定義域,options)`"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "`Polarplot(name , 式 , 変数と定義域,options)`"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "極座標表示 $$r = f(\\theta)$$ の曲線を描く。"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "【例】アルキメデスの螺旋を描く。"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "```"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "Polarplot(\"1\",\"t/5\",\"t=[0,6*pi]\",[\"Num=2000\"]);//r=t/5で表される極座標表示の曲線をtが0から6piまで描く。"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "Windispg();"}
{"prompt": "section_58_`Polarplot(name , 式 , 変数と定義域,options)`  ", "completion": "```"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "## 描画"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "### 関数のグラフ"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "#### `Periodfun(定義式, 周期,options)`"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "`Periodfun(定義式, 周期,options)`"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "周期関数のグラフを描く。戻り値は Maxima 形式の式と period のリスト。"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "周期関数の式を定義してグラフを描く。定義式は，関数式（文字列），区間，分割数のリスト。"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "この関数固有のオプションは `\"Con=\"` で，不連続点を線で結ぶか否かと，その時の色。初期設定は破線。結ばない場合は `\"Con=n\"`，色指定は線種に続いてコンマで区切って指定する。たとえば，`\"Con=do,Color=red\"`。"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "周期（描画回数）は，数またはリストで指定する。周期が m のとき，2m+1 周期分描かれる。"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "注意）関数は左右対称な定義域 [-a,a] で定義すること。"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "【例】矩形関数のグラフを描く。"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "```"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "addax(0);"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "defL=[\"0\",[-1,0],1,\"1\",[0,1],1];"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "Periodfun(defL, 2,[\"Con=dr,3\",\"dr,3\"]);"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "repeat(11,i,start -> -5,"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "Listplot(text(i+10),[[i,-1],[i,2]],[\"da,2,2\"]);"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": ");"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "Windispg();"}
{"prompt": "section_59_`Periodfun(定義式, 周期,options)`  ", "completion": "```"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "## 描画"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "### 関数のグラフ"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "#### `Tangentplot(name , PD , 位置 , options)`"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "`Tangentplot(name , PD , 位置 , options)`"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "接線を描く。プロットデータの名前は，`lntn`"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "曲線 PD の指定した位置での接線を描く。位置は `\"x=n\"` で指定する。"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "【例】y=sin xのx=1での接線を描く。"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "```"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\"]);//y=sin (x) のグラフを描くプロットデータ名はgr1となる。"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "Tangentplot(\"1\",\"gr1\",\"x=1\");//y=sin xのグラフ(gr1と定義した)のx=1での接線を描く。プロットデータ名はlntn1となる。"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "Windispg();"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "```"}
{"prompt": "section_60_`Tangentplot(name , PD , 位置 , options)`  ", "completion": "### 文字"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "## 描画"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "### 文字"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "#### `Expr([座標 , 位置 , 文字列],option)`"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "`Expr([座標 , 位置 , 文字列],option)`"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "TEX 記法の文字列を与えて数式を書く。"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "Letter で文字列の前後に$ $をおくのと同じ。"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "導関数の記号は，シングルクォートを用いる。"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "複数の箇所に文字を書く場合は，Letter() と同様，引数をリストにして与える。"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "option は サイズの倍率 (\"Size=\", Cinderra のみ) と色 (\"Color=\")。"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "【例】f(x)=\\sin xとその導関数f'(x)=\\cos xのグラフと式を図に描き込む。"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "```"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "Ketinit();"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"dr,2\"]);"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "Plotdata(\"2\",\"cos(x)\",\"x\",[\"Num=200\"]);"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "Expr([[0.5,1.5],\"e\",\"f(x)=\\sin x\",[3,1],\"e\",\"f'(x)=\\cos x\"]);//点(0.5,1.5)の右側(e)に\"f(x)=\\sin x\"を、点(3,1)の右側に\"f'(x)=\\cos x\"をそれぞれTeX書式で書き込む。"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "Windispg();"}
{"prompt": "section_61_`Expr([座標 , 位置 , 文字列],option)`  ", "completion": "```"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "## 描画"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "### 文字"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "#### `Exprrot(座標 , 向き , 移動，文字列，option)`"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "`Exprrot(座標 , 向き , 移動，文字列，option)`"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "\\TeX 記法の文字列を傾けた数式を書く"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "「座標」の位置に，指定された向きで数式を書く。"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "向きはベクトルで与える。"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "移動（オプション）は `t` (接線方向の移動) ， `n` (法線方向の移動) ，反転 (`r`)。"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "座標，向きとも，Cinderella で作図した幾何点を用いることができる。"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "option は サイズの倍率 (`”Size=”`, Cinderra のみ) と色 (`”Color=”`)。"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "【例】"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "```"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "Ketinit();"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "Exprrot([3,2],[4,1],\"t0n1\",\"\\sum\\limits_{r=0}^{n} {}_{n}C_{r}\");//[3,2]に方向ベクトル[4,1]の向きでtex形式で\\sum\\limits_{r=0}^{n} {}_{n}C_{r}と表される文字列を書く"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "Windispg();"}
{"prompt": "section_62_`Exprrot(座標 , 向き , 移動，文字列，option)`  ", "completion": "```"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "## 描画"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "### 文字"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "#### `Letter([位置, 方向, 文字列],option)`"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "`Letter([位置, 方向, 文字列],option)`"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "文字列を表示する"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "「位置（座標）」と方向で指定された場所に文字を書き込む。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "位置（座標）は点の名前で指定することもできる。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "場所は上下左右を東西南北で表し， `n/s/w/e/c` の方向で表す。`c` は中央。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "指定位置からの距離を，数値で与えることもでき，`e2, e3` は e より少し離して置く。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "複数の文字列をリストの形にして渡すことができる。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "注）導関数の記号 ′ は，数式モード（$ ではさむ）で ′（シングルクォート）を用いる。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "option は サイズの倍率 (`\"Size=\"`, Cinderra のみ) と色 `(\"Color=\")`。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "`文字列が一つのときは，"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "`Letter(位置, 方向, 文字列,option) `"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "にできる。"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "【例】座標 (3,2) の右上(ne)にＰを表示"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "```"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "Letter([[3,2] ,\"ne\",\"P\"]);"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "```"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "【例】点Ｃを中央(c)としてＣという文字列を表示"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "```"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "Letter([C ,\"c\", \"C\"]);"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "```"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "【例】点Aの上(s)に数式を表示"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "```"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "Letter([E,\"s\",\"$ f(x)=\\sinh x $\"]);//点Aの上(s)にTeX形式で\"f(x)=\\sinh x \"を表示"}
{"prompt": "section_63_`Letter([位置, 方向, 文字列],option)`  ", "completion": "```"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "## 描画"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "### 文字"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "#### `Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "文字列を回転して表示する"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "座標で示された位置に，方向ベクトルで指定された向きに回転して文字を書き込む。"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "移動（オプション）は `t` (指定した方向ベクトルと垂直方向に移動) ， `n` (指定した方向ベクトルと同じ向きに移動) ，反転 (`r`)。"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "option は サイズの倍率 (`”Size=”`, Cinderra のみ) と色 (`”Color=”`)。"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "【例】"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "```"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "Ketinit();"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "Letterrot([3,2],[4,1],\"t0n1\",\"Text\");//[3,2]に方向ベクトル[4,1]の向きで指定した方向ベクトルと同じ向きに1動かした場所にTextという文字列を出力する"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "Windispg();"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "```"}
{"prompt": "section_64_`Letterrot(座標, 方向ベクトル, 移動, 文字列, option)`  ", "completion": "### マーキング"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "## 描画"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "### マーキング"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "#### `Anglemark(name, 点リスト , options)`"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "`Anglemark(name, 点リスト , options)`"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "点リストで示された角に弧の形状の角の印をつける。"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "`Listplot()` などと同様，点リストが点名の場合は name は省略できる。弧を描かず文字だけを入れる場合はoptions に \"nodisp\" を指定する。"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "options は次の通り。"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "数値角の印の大きさ。 初期設定は１"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "線種`\"dr, n\", \"da,m,n\" , \"do,m,n\" `"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "`\"Expr=文字\"` または`\"Letter=文字\"` : 文字を入れる"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "`\"Expr=位置 , 文字\"`: 位置を指定して文字を入れる。位置は頂点からの距離。"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "【例】\\angle ABC に印をつけて、文字を書き込む"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Addax(0);"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Putpoint(\"A\",[-2,-1],[A.x,A.y]);"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Putpoint(\"B\",[1,3],[B.x,B.y]);"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Putpoint(\"C\",[2,-1],[C.x,C.y]);"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Listplot(\"1\",[A,B,C],[\"dr,2\"]);"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Anglemark([A,B,C],[2,\"dr,2\",\"Expr=1.2,\\theta\"]);"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Letter(A,\"e2\",\"A\");"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Letter(B,\"w2\",\"B\");"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Letter(C,\"n2\",\"C\");"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "Windispg();"}
{"prompt": "section_65_`Anglemark(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "## 描画"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "### マーキング"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "#### `Paramark(name, 点リスト , options)`"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "`Paramark(name, 点リスト , options)`"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "点リストで示された角に平行四辺形の形状の角の印をつける。"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "`Listplot()` などと同様，点リストが点名の場合は name は省略できる。"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "options は次の通り。"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "数値角の印の大きさ。 初期設定は 1"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "線種`”dr, n”, ”da,m,n” , ”do,m,n”`"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "`”Expr=文字”`: 文字を入れる"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "`”Expr=位置 , 文字”`: 位置を指定して文字を入れる。位置は頂点からの距離。"}
{"prompt": "section_66_`Paramark(name, 点リスト , options)`  ", "completion": "`Anglemark()`とほとんど同じ"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "## 描画"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "### マーキング"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "#### `Bowdata(name, 点リスト , options)`"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "`Bowdata(name, 点リスト , options)`"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "弓形を描く"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "点リストで与えられた 2 点を結ぶ弓形を描く。"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "2 点を反時計回りに回る方向に弓形を描く。"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "options は，`[曲がり , 空白サイズ, 文字, 線種]`"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "曲がりは弧の曲がり具合の指定。 初期設定は 1"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "空白サイズは中央にあける空白の大きさ"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "文字は，`\"Expr=文字\"`"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "また，`\"Expr=微小移動 , 文字\"`で位置を指定して文字を入れる。"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "微小移動は t,n。移動量は数字をつける（正負が可）。"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "addax(0);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Setketcindyjs([\"Figure=y\"]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Putpoint(\"A\",[-2,-1],[A.x,A.y]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Putpoint(\"B\",[1,3],[B.x,B.y]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Putpoint(\"C\",[2,-1],[C.x,C.y]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Listplot(\"1\",[A,B,C,A],[\"dr,2\"]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Bowdata(\"1\",[B,A],[1,1,\"Expr=C\",\"da\"]);//点Bと点Aを反時計回りに回る方向に弓形を破線で描く（曲がり具合1,中央の空白サイズ1）"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Bowdata(\"2\",[C,B],[1,1,\"Expr=A\",\"dr,2\"]);//点Cと点Bを反時計回りに回る方向に弓形を太さ2の実線で描く（曲がり具合1,中央の空白サイズ1）"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Bowdata(\"3\",[A,C],[1,0,\"Expr=t0n4,B\",\"dr,2\"]);//点Aと点Cを反時計回りに回る方向に弓形を太さ2の実線で描き、文字の位置を直線ACと平行に0ずらし、直線ACと垂直に4ずらす（曲がり具合1,中央に空白を設けない）"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Letter([A,\"w\",\"A\",B,\"n\",\"B\",C,\"e\",\"C\"]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Windispg();"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "【例】線分と平行の向きに文字を書き込む"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Bowdata([B,A],[1,1,\"Exprrot=a\"]);//exprrotオプションを指定することで指定した文字列を線分と平行の向きに書き込む"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "【例】線分と平行の向きに文字を書き込んだうえで文字を直線BAと平行方向にずらす"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Bowdata([B,A],[1,1,\"Exprrot=t3n0,a\"]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "【例】線分と平行の向きに文字を書き込んだうえで文字を直線BAと垂直方向にずらす"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "Bowdata([B,A],[1,1,\"Exprrot=t0n3,a\"]);"}
{"prompt": "section_67_`Bowdata(name, 点リスト , options)`  ", "completion": "```"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "## 描画"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "### マーキング"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "#### `Segmark(name, リスト,options)`"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "`Segmark(name, リスト,options)`"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "線分に印をつける"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "リストで与えられた 2 点を端点とする線分に印をつける。"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "オプション"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Type=印の種類 `\"seg(,n)\",\"cir\",\"poly(,n)\" `"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "`Width`：線の幅，`Size`：大きさ"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "【例】"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "addax(0);"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Putpoint(\"A\",[-1.5,-0.5],[A.x,A.y]);"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Putpoint(\"B\",[0,2.5],[B.x,B.y]);"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Putpoint(\"C\",[1.5,-0.5],[C.x,C.y]);"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Putpoint(\"D\",[2,0],[D.x,D.y]);"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Listplot([A,B,C,D,A]);"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Segmark(\"1\",[A,B],[\"Type=seg,1\"]);//線が1本の印"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Segmark(\"2\",[B,C],[\"Type=seg,2\",\"Width=1.2\"]);//線が2本で太さ1.2の印"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Segmark(\"3\",[C,D],[\"Type=cir\"]);//丸印"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Segmark(\"4\",[D,A],[\"Type=poly,4\",\"Size=1.5\"]);//四角形の印で、大きさが1.5"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Windispg();"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "【例】多角形の印の頂点の数を変更する"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Segmark(\"1\",[D,A],[\"Type=poly,6\",\"Size=1.5\"]);//六角形の印を付ける。"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "Segmark(\"2\",[A,B],[\"Type=poly,3\",\"Size=1.5\"]);//三角形の印を付ける。"}
{"prompt": "section_68_`Segmark(name, リスト,options)`  ", "completion": "```"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "## 描画"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "### マーキング"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "#### `Htickmark([横座標 , 方向 , 文字])`"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "`Htickmark([横座標 , 方向 , 文字])`"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "横軸に目盛と文字を書く。"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "引数は位置（横座標），方向，文字。複数点の情報を `[ ]` 内にまとめて記入できる。方向を省略すると `\"s1\"`になる。微調整は描画面には反映されないので，PDF にして確認する。目盛の長さは `Setmarklen()` で設定できる。"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "【例】目盛りの位置を変える"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "```"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Ketinit();"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Plotdata(\"1\",\"x^2-1.2\",\"x\",[\"Num=200\",\"dr,2\"]);"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Htickmark([1,\"n2\",\"1\",2,\"s2\",\"2\",3,\"s2\",\"3\",4,\"s2\",\"4\"]);//x座標が1の目盛りを上に、かつ2ずらして書く。2から4は下に2ずつずらして書く。"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Windispg();"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "```"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "【例】リスト処理で目盛りを書く"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "```"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Ketinit();"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\",\"dr,2\"]);"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "memori=apply(-5..5,a,[a*pi/2,\"s4\",\"\\frac{\"+text(a)+\"\\pi}{2}\"]);//-5から5の数字に対して[a*pi/2,\"s4\",\"\\frac{\"+text(a)+\"\\pi}{2}\"]という要素を作成する。"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "memori=flatten(remove(memori,[[0,\"s4\",\"\\frac{\"+text(0)+\"\\pi}{2}\"]]));//0の部分はいらないので削除し、flatten関数により2次元配列を1次元配列に変換する。"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Htickmark(memori);"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "Windispg();"}
{"prompt": "section_69_`Htickmark([横座標 , 方向 , 文字])`  ", "completion": "```"}
{"prompt": "section_70_`Vtickmark([横座標 , 方向 , 文字])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_70_`Vtickmark([横座標 , 方向 , 文字])`  ", "completion": "## 描画"}
{"prompt": "section_70_`Vtickmark([横座標 , 方向 , 文字])`  ", "completion": "### マーキング"}
{"prompt": "section_70_`Vtickmark([横座標 , 方向 , 文字])`  ", "completion": "#### `Vtickmark([横座標 , 方向 , 文字])`"}
{"prompt": "section_70_`Vtickmark([横座標 , 方向 , 文字])`  ", "completion": "`Vtickmark([横座標 , 方向 , 文字])`"}
{"prompt": "section_70_`Vtickmark([横座標 , 方向 , 文字])`  ", "completion": "`Htickmark`とほとんど同じ。方向の指定を省略すると`w1`が指定される。"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "## 描画"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "### マーキング"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "#### `Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "目盛を打つ"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "始点の位置を縦横の起点として目盛りを打つ。目盛はリストで与える。`[”r”,a,b,c,d]` の形式では，`a` から `b` まで `c` 間隔で，倍率 `d` の目盛を打つ。`[”f”,n1,”str”,n2,”str”,・・]`の形式では，`n` と`”str”`がセットで，`n` の位置に`”str”`を書く。ただし，位置は Cinderella の描画面の原点を 0 とする。"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "`Listplot()` とともに用いると，座標軸とは異なる線分に目盛を打つことができる。"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "`Framedata()` とともに用いると矩形に目盛を打つことができる。"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "【例】"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "```"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "Ketinit();"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "Listplot(\"1\",[[5,1],[2,1],[2,3]]);"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "Rulerscale([2,1],[\"r\",2,5,1,10],[\"f\",2,\"a_1\",3,\"a_2\"]);//横軸を2から5まで1間隔で10倍の目盛りを打つ、縦軸を2の位置にa_1を、3の位置にa_2を書く"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "Windispg();"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "```"}
{"prompt": "section_71_`Rulerscale(始点 ，横軸目盛 , 縦軸目盛)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "### マーキング"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "#### `Changestyle(PD リスト, options)`"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "`Changestyle(PD リスト, options)`"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "描画オプションを変更する"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "複数の図形の描画オプションを一括して変更する。"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "```"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "Ketinit();"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "opgr=[\"dr,3\"];//変更用にオプションをリストで保存"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "Plotdata(\"1\",\"x^3+2*x^2+2*x+1\",\"x\",[\"Num=200\"]);"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "Changestyle([\"gr1\"],opgr);//オプションを保存したリストをoptionsに渡してgr1に反映させる"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "Windispg();"}
{"prompt": "section_72_`Changestyle(PD リスト, options)`  ", "completion": "```"}
{"prompt": "section_73_`Invert(PD)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_73_`Invert(PD)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_73_`Invert(PD)`  ", "completion": "### マーキング"}
{"prompt": "section_73_`Invert(PD)`  ", "completion": "#### `Invert(PD)`"}
{"prompt": "section_73_`Invert(PD)`  ", "completion": "`Invert(PD)`"}
{"prompt": "section_73_`Invert(PD)`  ", "completion": "プロットデータを逆順にする"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "### マーキング"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "#### `Joincrvs(name, プロットデータのリスト, options)`"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "`Joincrvs(name, プロットデータのリスト, options)`"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "隣接する曲線プロットデータ のリストを繋いで 1 本の曲線を作る。"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "曲線のリストは隣接する順番で指定する。"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "options は線種\"dr, n\", \"da,m,n\" , \"do,m,n\""}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "プロットデータ名は\"join\""}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "【例】"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "```"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "Ketinit();"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x=[-1,2]\",[\"Num=200\"]);//y=x^2のグラフを-1<x<2の範囲で描く"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "Plotdata(\"2\",\"x+2\",\"x=[-1,2]\",[\"Num=200\"]);//y=x+2のグラフを-1<x<2の範囲で描く"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "Joincrvs(\"1\",[\"gr1\",\"gr2\"]);//y=x^2のグラフの-1<x<2の範囲(gr1)とy=x+2のグラフの-1<x<2の範囲(gr2)をつなげて一つの曲線にする。プロットデータ名はjoin1となる"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "Shade([\"join1\"],[\"Color=red\"]);//join1を赤く塗りつぶす"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "Windispg();"}
{"prompt": "section_74_`Joincrvs(name, プロットデータのリスト, options)`  ", "completion": "```"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "### マーキング"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "#### `Partcrv(name, A, B, プロットデータ, options)`"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "`Partcrv(name, A, B, プロットデータ, options)`"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "曲線プロットデータ上の点 A, B の間の部分曲線を描く。"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "2 点 A, B の順序は曲線の向きと同一であること。曲線の向きは，y = f(x) のグラフでは x 座標が増加する向き。"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "options は線種\"dr, n\", \"da,m,n\" , \"do,m,n\""}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Ketinit();"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"do\"]);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Partcrv(\"1\", [-1,1], [2,4], \"gr1\",[\"dr,3\"]);//\"gr1\"の[-1,1]から[2,4]までを太線にする"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Windispg();"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "【例】`Intersectcrvs`を使って動的に交点を求める"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Ketinit();"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Setketcindyjs([\"Figure=y\"]);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Putpoint(\"A\",[-2,-1],[A.x,A.y]);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Putpoint(\"B\",[1,3],[B.x,B.y]);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Lineplot(\"1\",[A,B],[\"da\"]);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Circledata(\"1\",[[0,2],[0,0]],[\"dr\"]);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "tmp=sort(Intersectcrvs(\"ln1\",\"cr1\"));"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "print(tmp);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Intersects=length(tmp);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "if(Intersects>0,"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "if(A.x<B.x,"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Partcrv(\"1\",tmp_1,tmp_2,\"ln1\",[\"dr,2\"]);,"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Partcrv(\"1\",tmp_2,tmp_1,\"ln1\",[\"dr,2\"]);"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": ");"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": ");"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "Windispg();"}
{"prompt": "section_75_`Partcrv(name, A, B, プロットデータ, options)`  ", "completion": "```"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "### マーキング"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "#### `Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "複数の曲線から閉曲線を作る。"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "開始位置は，最初と最後の曲線の交点が複数あるときに指定する。"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "開始点は近くに取ればよい。許容限界は，通常は指定しなくてよい。"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "プロットデータ名はen"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "【例】 y=x+2 とy=x^2のグラフの内側を塗りつぶす。"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "```"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "Ketinit();"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//y=x^2のグラフを描く"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "Plotdata(\"2\",\"x+2\",\"x\",[\"Num=200\"]);//y=x+2のグラフを描く"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "Enclosing(\"1\",[\"gr1\",\"gr2\"],[\"nodisp\"]);//y=x^2のグラフとy=x+2のグラフから閉曲線を作る"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "Shade([\"en1\"],[\"Color=red\"]);//en1の内部を赤色(red)で塗る"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "Windispg();"}
{"prompt": "section_76_`Enclosing(name , PD リスト , [開始位置, 交点計算の許容限界 1, 2])`  ", "completion": "```"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "### マーキング"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "#### `Hatchdata(name , 方向リスト , プロットデータ , options)`"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "`Hatchdata(name , 方向リスト , プロットデータ , options)`"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "閉曲線の内部に斜線を引く。"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "引数は，曲線名，内部外部のパターンを与える\"i\"，\"o\" の文字列，閉曲線を与える曲線と領域の内部を定める"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "方向のリストとオプション。"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "オプション（カッコ内はデフォルト値）"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "角度 (45)，間隔 (1)，\"Max=(20)\" 斜線の最大本数，"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "\"No=点リスト\" 点リストの点が選ばれているときは実行しない"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "\"File=y/m/n (n)\" データファイルを作るか"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "\"Check=点リスト\" 点リストの点が変更されていたら，ファイルを作り直す"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "【例】 y=x+2 とy=x^2のグラフの内側をハッチングする。"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "```"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "Plotdata(\"2\",\"x+2\",\"x\",[\"Num=200\"]);"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "Enclosing(\"1\",[\"gr1\",\"gr2\"],[\"nodisp\"]);"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "Hatchdata(\"1\",[\"i\"],[[\"en1\"]],[-45,1,\"dr,0.5\"]);//en1の内側(i)に対して-45度に傾けた太さ0.5の実線でハッチングする"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "Windispg();"}
{"prompt": "section_77_`Hatchdata(name , 方向リスト , プロットデータ , options)`  ", "completion": "```"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "### マーキング"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "#### `Shade((\"名前\"), プロットデータのリスト , options)`"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "`Shade((\"名前\"), プロットデータのリスト , options)`"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "閉曲線で囲まれた領域を塗りつぶす。"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "第１引数には，閉曲線を与える曲線分のプロットデータ名を並べる。"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "デフォルトでは，Joincrvs を使って閉曲線を作っている。ただし，プロットデータのリストに\"Invert()\"が入っていれば，Enclosing を使う。"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "option の Color は，Cinderella の画面上での描画色をリストで与える。濃さを指定したい場合は色名や RGBではなく CMYK にする。"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "options には，他に，次のものがある。"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "・Enclosing を使うかどうか：\"Enc=y/n\"（初期値は n）"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "\"Enc=y\" のとき，複数の Shade を使うときは，名前をつける。"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "・Enclosing のときの開始点，描画色"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "・描画領域のトリミング：\"Trim=y/n\" （初期値は n ）"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "・TeX への書き出しで，先頭に配置するか：\"First=y/n\" （初期値は n ）"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "\"First=n\" のときは，使われている Gdata の書き出しの直前におく．"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "【例】 y=x+2 とy=x^2のグラフの内側を塗りつぶす。"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "```"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//y=x^2のグラフを描く"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Plotdata(\"2\",\"x+2\",\"x\",[\"Num=200\"]);//y=x+2のグラフを描く"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Enclosing(\"1\",[\"gr1\",\"gr2\"],[\"nodisp\"]);//y=x^2のグラフとy=x+2のグラフから閉曲線を作る"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Shade([\"en1\"],[\"Color=red\"]);//en1の内部を赤色(red)で塗る"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Windispg();"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "```"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "【例】描画範囲外は塗りつぶさない"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "```"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "addax(0);"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Circledata(\"1\",[[0,0],[2,0]],[\"dr,2\"]);"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Shade(\"1\",[\"cr1\"],[\"color=red\",\"Trim=y\"]);//描画範囲以外は塗りつぶさない(\"Trim=y\")"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "Windispg();"}
{"prompt": "section_78_`Shade((名前), プロットデータのリスト , options)`  ", "completion": "```"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "### マーキング"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "#### `Reflectdata(name , プロットデータ , 対称点または対称軸,options)`"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "プロットデータの鏡映を作成"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "プロットデータを指定された点または軸に関して対称移動する。"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "対称点は座標または，点の識別名。ただし，対称点を座標で示すときは要素がひとつのリストにする。"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "対称軸はリスト `[ 点 1, 点 2 ]` で指定。"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "【例】y=x^3と[0,0]-[1,1]間を結ぶ直線に対する鏡映を描く"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "```"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Plotdata(\"1\",\"x^3\",\"x\",[\"Num=200\"]);//y=x^3のグラフを描く。"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Reflectdata(\"1\",\"gr1\",[[0,0],[1,1]],[\"dr,2\"]);//gr1を[0,0]-[1,1]間を結ぶ直線で反転させたグラフを描く。"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Windispg();"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "```"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "【例】y=x^2とそれを点対称移動させたグラフを描く"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "```"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Ketinit();"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//y=x^2のグラフを描く。"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Reflectdata(\"1\",\"gr1\",[[0,0]],[\"dr,2\"]);//gr1を点(0,0)に関して点対称移動させた図形を描く。"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "Windispg();"}
{"prompt": "section_79_`Reflectdata(name , プロットデータ , 対称点または対称軸,options)`  ", "completion": "```"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "### マーキング"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "#### `Rotatedata(name , プロットデータ ，角度 , [中心 , options])`"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "プロットデータの位置を回転する"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "図形を，中心で示された点の周りに回転する。角度は弧度法で与える"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "中心と options はまとめてリストで与える。"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "【例】y=sin x のグラフを 90度回転する"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "```"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "Ketinit();"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "Plotdata(\"1\",\"sin (x)\",\"x\",[\"Num=200\",\"nodisp\"]);//y=sin xのグラフを描く。\"nodisp\"オプションによってCinderellaの画面上には出力しない"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "Rotatedata(\"1\",\"gr1\",pi/2,[[0,0]]);//gr1を点(0,0)に対してpi/2(90度)回転させる"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "Windispg();"}
{"prompt": "section_80_`Rotatedata(name , プロットデータ ，角度 , [中心 , options])`  ", "completion": "```"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "### マーキング"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "#### `Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "図形の位置を拡大・縮小する"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "図形の位置をプロットデータを用いて指定された比率で拡大・縮小する"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "比率は `[x 方向比率 , y 方向比率]` のリストで与えてもよい。"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "中心と options はまとめてリストで与える。options は線種"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "【例】y=sin x のグラフを x軸方向に0.5倍にする。"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "```"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "Ketinit();"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "Plotdata(\"1\",\"sin (x)\",\"x\",[\"Num=200\"]);//y=sin xのグラフを描く。"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "Scaledata(\"1\",\"gr1\",0.5,1,[[0,0],\"da\"]);//gr1をx軸方向に0.5倍、y軸方向に1倍にしたグラフを破線で描く。"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "Windispg();"}
{"prompt": "section_81_`Scaledata(name , プロットデータ，x 方向比率 , y 方向比率 , [中心 , options])`  ", "completion": "```"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "### マーキング"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "#### `Translatedata(name , プロットデータ , 移動ベクトル , options)`"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "`Translatedata(name , プロットデータ , 移動ベクトル , options)`"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "プロットデータを平行移動する"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "プロットデータを移動ベクトルで示された分だけ平行移動する。"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "【例】y=x^2とそれをx軸方向に2,y軸方向に3移動させたものを描く。"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "```"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "Ketinit();"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);//y=x^2のグラフを描く。"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "Translatedata(\"1\",\"gr1\",[2,3],[\"da\"]);//gr1をx軸方向に2,y軸方向に3ずらす"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "Windispg();"}
{"prompt": "section_82_`Translatedata(name , プロットデータ , 移動ベクトル , options)`  ", "completion": "```"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "### マーキング"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "#### `Intersectcrvs(プロットデータ 1, プロットデータ 2)`"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "`Intersectcrvs(プロットデータ 1, プロットデータ 2)`"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "2 曲線の交点リストを取得する。"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "オプションとして，共有点があるかどうかを判断するための限界値があるが，通常は使わない。"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "【例】"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "```"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "Ketinit();"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);//y=x^2のグラフを描く"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "Plotdata(\"2\",\"x+2\",\"x\",[\"Num=200\",\"dr\"]);//y=x+2のグラフを描く"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "intscs = Intersectcrvs(\"gr1\", \"gr2\");//gr1とgr2の交点をすべて求め、リストで格納"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "Pointdata(\"1\",intscs_1,[\"Size=4\"]);//gr1とgr2の交点のうち1番目を大きさ4でプロット"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "Pointdata(\"2\",intscs_2,[\"Size=4\"]);//gr1とgr2の交点のうち2番目を大きさ4でプロット"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "Windispg();"}
{"prompt": "section_83_`Intersectcrvs(プロットデータ 1, プロットデータ 2)`  ", "completion": "```"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "### マーキング"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "#### `Intersectcrvspp(プロットデータ 1, プロットデータ 2)`"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "2 曲線の交点のパラメータリストを取得する。"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "2 曲線の交点の座標とパラメータのリストを返す。"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "Intersectcrvs() との違いは，パラメータがあるかどうかである。"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "`Intersectcrvs`の例を`Intersectcrvspp`に変更し、リストをコンソールに表示すると、"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "```"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "[[[-1,1],9,8],[[2,4],15,14]]"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "```"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "と表示される。"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "このパラメータは曲線を分割した家の何番目に位置するかという意味である。"}
{"prompt": "section_84_`Intersectcrvspp(プロットデータ 1, プロットデータ 2)`  ", "completion": "[[-1,1],9,8]なら、(-1,1)で交わっていて、1つ目の曲線の9番目と、2つ目の曲線の8番目で交わっているという意味である。小数なら中間の場所である。"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "### マーキング"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "#### `Intersectcurves,Intersectcurvespp`"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "`Intersectcurves,Intersectcurvespp`"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "2 曲線の交点リストを取得する。接点があるとき，時間はかかるがより精密な値を返す。"}
{"prompt": "section_85_`Intersectcurves,Intersectcurvespp`  ", "completion": "引数は`Intersectcrvs,Intersectctvspp`と同じ。ppあり、なりに関しても同じ。"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "### マーキング"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "#### `Nearestptcrv(座標, プロットデータ)`"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "`Nearestptcrv(座標, プロットデータ)`"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "点に最も近いプロットデータの点を求める"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "第1引数の座標に最も近い曲線プロットデータ上の点の座標を返す。"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "【例】"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "```"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "Ketinit();"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "Setketcindyjs([\"Figure=y\"]);"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "Putpoint(\"A\",[1,1],[A.x,A.y]);"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);//y=x^2のグラフを描く"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "nrst=Nearestptcrv(A,\"gr1\");//点Aとgr1の距離が最も近いgr1上の点の座標を取得する"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "Pointdata(\"1\",nrst,[\"Size=4\"]);nrstの座標に点を打つ"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "Listplot(\"1\",[A,nrst],[\"da\"]);点A-nrst間に線を引く"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "Windispg();"}
{"prompt": "section_86_`Nearestptcrv(座標, プロットデータ)`  ", "completion": "```"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "### マーキング"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "#### `Paramoncrv(点の座標, 曲線の名前)`"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "`Paramoncrv(点の座標, 曲線の名前)`"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "曲線上の点のパラメータ値を返す。"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "曲線は折れ線として描かれ，曲線上の各点はこの折れ線の節点を基準としたパラメータ値を持つ。パラメータ値は整数部分が節点の番号，小数部分が節間の位置を表す。"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "【例】"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "```"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "Ketinit();"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "Setketcindyjs([\"Figure=y\"]);//html出力を描画範囲内に限る"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\",\"dr\"]);"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "Putoncurve(\"P\",\"gr1\",[0,0]);曲線gr1上に点Pを置く(動かせる)"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "prm = Paramoncrv(P, \"gr1\");点Pがgr1上のどこにあるかのパラメータ値をprmに格納"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "Expr([[1,-1],\"e\",text(prm)]);//点(1,-1)の右側に文字列化したprmをtex形式で表示"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "Windispg();"}
{"prompt": "section_87_`Paramoncrv(点の座標, 曲線の名前)`  ", "completion": "```"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "### マーキング"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "#### `Pointoncrv(点のパラメータ値, PD)`"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "`Pointoncrv(点のパラメータ値, PD)`"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "曲線上のパラメータ値を持つ点の座標を返す。"}
{"prompt": "section_88_`Pointoncrv(点のパラメータ値, PD)`  ", "completion": "曲線（折れ線）上の節点を基準としたパラメータ値により点の位置が定まる。"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "### マーキング"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "#### `Ptcrv(n, プロットデータ)`"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "`Ptcrv(n, プロットデータ)`"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "曲線プロットデータの n 番目の節点を返す"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "Cindyscript の `PD_n` と同じ"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "【例】六角形の一部の辺だけ太くする"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "```"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "Ketinit();"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "addax(0);"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "Circledata(\"1\",[[0,0],[2,0]],[\"Num=6\",\"dr,1\"]);//正六角形を太さ1の実線で描く"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "a=Ptcrv(2,cr1);//aをcr1の2番目の節点の座標とする"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "b=Ptcrv(4,cr1);//bをcr1の4番目の節点の座標とする"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "Partcrv(\"1\",a,b,\"cr1\",[\"dr,3\"]);//cr1のa-b間を太さ3の実線で描く。"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "Windispg();"}
{"prompt": "section_89_`Ptcrv(n, プロットデータ)`  ", "completion": "```"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "### マーキング"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "#### `Ptstart(プロットデータ) , Ptend(プロットデータ)`"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "`Ptstart(プロットデータ) , Ptend(プロットデータ)`"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "プロットデータの最初の点，最後の点を取得する。"}
{"prompt": "section_90_`Ptstart(プロットデータ) , Ptend(プロットデータ)`  ", "completion": "プロットデータの最初の点，最後の点の座標を返す。"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "### マーキング"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "#### `Readcsv(path,filename,option)`"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "`Readcsv(path,filename,option)`"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "csv ファイルを読む。"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "【例】以下のファイルを読み込む"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "```csv"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "1,2,3,4"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "5,6,7,8"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "Ketinit();"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "a=Readcsv(\"path/to/your/file\",\"example.csv\");//第1引数のディレクトリにある第2引数のcsvファイルを読み込んで変数aに格納。(2次元配列)"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "println(a);//変数aを表示"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "Windispg();"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "この出力結果は以下のようになる"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "```txt"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "[[1,2,3,4],[5,6,7,8]]"}
{"prompt": "section_91_`Readcsv(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "### マーキング"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "#### `Readlines(path,filename,option)`"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "`Readlines(path,filename,option)`"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "テキストファイルを 1 行ずつ読む。"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "【例】以下のファイルを読み込む"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "```txt"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "abcde"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "fghij"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "Ketinit();"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "a=Readlines(\"path/to/your/file\",\"example.txt\");//第1引数のディレクトリにある第2引数のファイルを読み込んで変数aに格納。(配列)"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "println(a);"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "Windispg();"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "この出力結果は以下のようになる"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "```txt"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "[abcde,fghij]"}
{"prompt": "section_92_`Readlines(path,filename,option)`  ", "completion": "```"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "### マーキング"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "#### `WriteOutData(ファイル名,PD リスト)`"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "`WriteOutData(ファイル名,PD リスト)`"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "外部データに書き出す"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "【例】x^2のプロットデータを外部ファイルに書き込む"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "```"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "Ketinit();"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "Plotdata(\"1\",\"x^2\",\"x\",[\"Num=200\"]);//x^2のグラフをプロットデータを作成する。"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "WriteOutData(\"gr1.txt\",[\"gr1\"]);//gr1をgr1.txtに書き込む"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "Windispg();"}
{"prompt": "section_93_`WriteOutData(ファイル名,PD リスト)`  ", "completion": "```"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "## プロットデータの操作"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "### マーキング"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "#### `Extractdata(データ名, 属性)`"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "`Extractdata(データ名, 属性)`"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "`ReadOutData()` で読み込んだデータに属性をつける。"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "【例】`WriteOutData`の説明で書き出したファイルを読み込んで`dr,2`属性をつける"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "```"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "Ketinit();"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "ReadOutData(\"gr1.txt\");"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "Extractdata(\"gr1\",[\"dr,2\"]);"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "Windispg();"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "```"}
{"prompt": "section_94_`Extractdata(データ名, 属性)`  ", "completion": "## 計算"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "## 計算"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "### マーキング"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "#### `Derivative(関数式 , 変数 , 値)`"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "`Derivative(関数式 , 変数 , 値)`"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "関数の微分係数を求める"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "関数式で与えられた関数の，「変数＝値」における微分係数を求める。"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "値は，点の座標を用いることができる。点 A の $$x$$ 座標であれば， `A.x` とする。"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "【例】$$y=\\sin x$$の接線を描く"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "```"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "Ketinit();"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "Plotdata(\"1\",\"sin(x)\",\"x\",[\"Num=200\"]);//y=sin xのグラフを描く"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "Putoncurve(\"P\",\"gr1\",[0,0]);//gr1上に点Pを置く"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "D = Derivative(\"sin(x)\",\"x\" , P.x);//xがPのx座標におけるsin xの微分係数を求める"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "Plotdata(\"2\",Assign(\"D*(x-P)+sin(P)\",[\"D\",D,\"P\",P.x]),\"x\",[\"Num=200\"]);//xがPのx座標におけるsin xの微分係数をもちいて接線を描く"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "Windispg();"}
{"prompt": "section_95_`Derivative(関数式 , 変数 , 値)`  ", "completion": "```"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "## 計算"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "### マーキング"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "#### `integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "関数式またはプロットデータで与えられた関数（データ）の数値積分の値を求める。"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "options は次の通り。"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "”Rule=s”：シンプソン法による。 初期設定は大島ベジェ公式。"}
{"prompt": "section_96_`integrate(関数式 , 変数 = 範囲 , options),integrate(PD , 範囲 , options)`  ", "completion": "”Num=数値”：分割数の指定。初期値は 100"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "## 計算"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "### マーキング"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "#### `Inversefun(関数 , 範囲 , 値)`"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "`Inversefun(関数 , 範囲 , 値)`"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "関数の逆関数値を求める"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "関数は文字列で，関数式もしくは定義された関数名とする。"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "指定された範囲の中で逆関数値を求める。存在しない場合は一方の端点を戻り値とし，コンソールに「not found」と表示される。"}
{"prompt": "section_97_`Inversefun(関数 , 範囲 , 値)`  ", "completion": "数式処理ではなく数値探索のアルゴリズムを使っているので，単調関数でない場合は範囲をできるだけ狭くとるとよい。値が複数ある場合は，小さいほうが返される。"}
{"prompt": "section_98_値の取得と入出力  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_98_値の取得と入出力  ", "completion": "## 計算"}
{"prompt": "section_98_値の取得と入出力  ", "completion": "### マーキング"}
{"prompt": "section_98_値の取得と入出力  ", "completion": "#### 値の取得と入出力"}
{"prompt": "section_98_値の取得と入出力  ", "completion": "値の取得と入出力"}
{"prompt": "section_98_値の取得と入出力  ", "completion": "計算値やプロットデータの値を取得したり，R 用とのデータのやりとりをする。"}
{"prompt": "section_99_`Asin(実数),Acos(実数)`  ", "completion": "# 平面の図形とグラフ"}
{"prompt": "section_99_`Asin(実数),Acos(実数)`  ", "completion": "## 計算"}
{"prompt": "section_99_`Asin(実数),Acos(実数)`  ", "completion": "### マーキング"}
{"prompt": "section_99_`Asin(実数),Acos(実数)`  ", "completion": "#### `Asin(実数),Acos(実数)`"}
{"prompt": "section_99_`Asin(実数),Acos(実数)`  ", "completion": "`Asin(実数),Acos(実数)`"}
{"prompt": "section_99_`Asin(実数),Acos(実数)`  ", "completion": "逆三角関数の値を求める。"}
