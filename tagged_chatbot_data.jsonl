{"title": "Page 1", "content": "10/15体験授業用\n1 基礎\n右クリック\n図 1-1 スクリプトの場所\nCinderellaでは、上の「スクリプト」からプログラムを書くことができます。\nスクリプトを右クリックすると、以下のようなウィンドウが表示されます。\nプログラム入力部\nテキスト表示部\n図 1-2 スクリプト窓", "tags": []}
{"title": "Page 2", "content": "このプログラム入力部のKetinit();とWindispg();の間にプログラムを書いていきます。\n書いたプログラムを適用させたいときは、\n図 1-3 プログラム適用\nこのボタンの中の左の歯車のボタンを押すことで適用できます。\nまた、中央のStopボタンを押すことでプログラムを停止させることができます。", "tags": []}
{"title": "Page 3", "content": "2 Cinderella の四則演算と+α\n足し算：+ 例：2+3= > 2+3\n引き算：- 例：2−3= > 2-3\nかけ算：* 例：2×3= > 2*3\n割り算：/ 例：2÷3= > 2/3\n3\n…①\n注意： 3/2*3 等 割り算の後掛け算を行うとき、この結果は にはなりません！\n2×3\n3\n× 3\n結果は になります！\n2\n式①のような処理をさせたいときは3/(2*3)、3/2/3等と書くことができます。\n階乗 ：^ 例：32=>3^2", "tags": []}
{"title": "Page 4", "content": "3 Print 関数\n構文： Print(表示させたいもの);\n例： Print(“みかん”);\n上記例では「みかん」を1ページ目のテキスト表示部に出力します。\n図 3-1 Print関数ソースと結果\n変数も表示することができます。\n例： a=100;\nPrint(a);\nPrint(“ aは” + a +“です。”);\n図 3-2 Print関数変数表示ソースと結果\nこのように変数とテキストを同時に出力することもできます。\nまた、改行を最後に行うPrintln関数もあります。", "tags": []}
{"title": "Page 5", "content": "4 Plotdata 関数\n構文： Plotdata(グラフの名前(テキスト), 式(テキスト), 変数名(と定義域)(テキスト),[オプション]);\n例： Plotdata(“1”, “2*x”, “x”);\n上記例では 𝑦 =2𝑥 をCinderellaのグラフ上にgr1として表示することができます。\n図 4-1 Plotdata関数ソースと結果\nTips\n𝑦 =2𝑥のグラフを書く際、2*xのように*を忘れないように注意。\nグラフの名前を同じにすると、グラフを書き換えることができます。\n例： Plotdata(“1”, “2*x”, “x”);\nPlotdata(“1”, “-2*x”, “x”); // このグラフが表示される\n図 4-2 Plotdata関数更新ソースと結果\nオプションの欄には[“Dis = 100”,”Num=200”]のように入力することができます。\nオプションの種類\nDis： 不連続点を結ばないようにする。\nNum： 解像度。大きいほどきれいにできるが、動作が重くなる。\nExc： 指定した点を除外する。", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 6", "content": "5 Slider 関数\n構文： Slider(点の名前(テキスト), 一端の座標, もう一端の座標);\n例： Slider(“A”, [-5,-3], [5,-3]);\n上記例では、Aを(-5,5)~(5,-5)の半直線を移動するスライダーとします。\n図 5-1 Slider関数ソースと結果\nTips\n点の名前.xを使うことでスライダ上の点のx座標を取得することができます。\n例： スライダ上のA点が(3,-5)にある場合\nA.x 取得値: 3\n点の名前.yを使うことでスライダ上の点のy座標を取得することができる\n例： スライダ上のA点が(3,-5)にある場合\nA.y 取得値: -5\n点の名前.xyを使うことでスライダ上の点の座標を取得することができる\n例： スライダ上のA点が(3,-5)にある場合\nA.xy 取得値: [3,-5]\n逆にこれらに値を代入することで点の位置を指定することもできる。(点は作成しておく必要あり)\n例： A.xy=[1,1];\n図 5-2 点の場所指定ソースと結果", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 7", "content": "6 Letter 関数\n構文： Letter(表示したい座標（点）, 方角, テキスト);\n例： Letter(A, ”ne”, ”みかん”);\n注： 方角には方位n(北),s(南),w(西),e(東),c(中央)を使います\n上記例では、（作成しておいた）点Aのneの方角に「みかん」を出力します。\n図 6-1 Letter関数ソースと結果\n変数の値も出力することができるため、以下のように変数の値と文字列を点の周りに表示することもできます。\n例： Slider(“A”, [-5,-3], [5,-3]);\nLetter(A, ”ne”, A.x);\n図 6-2Letter関数座標参照ソースと結果", "tags": []}
{"title": "Page 8", "content": "ボタンの作成\nボタンを作成するときは、\n1.ボタンにするテキスト作成\n2.ボタンにする\n3.ボタンを押したときの動作を決める\nの順にボタンを作成します。\n1. テキストを作成\n左クリック\nABCの部分が適用された状態でグラフの部分をクリック\n適当な部分をクリック\nすると、下のようなウィンドウが出てくると思うので、そこに適当な文字を入力し、OKを押します。\nこれでボタン用のテキストが作成できます。", "tags": []}
{"title": "Page 9", "content": "2. ボタンにする\n次に作成したテキストを右クリックしてインスペクタを表示します。\nそして、以下のウィンドウに移動し、ボタンとして使う、クリックボタンにチェックいれます。\nそうすると、ボタンが以下のように変遷します。\nこれでテキストをボタンに変更することができました。", "tags": []}
{"title": "Page 10", "content": "3. ボタンにした時の動作を決める\n2のインスペクタの画面に映ります\nそして下のスクリプトの場所にクリックされたときに実行したいコマンドを入力します。", "tags": []}
{"title": "Page 11", "content": "例： クリックするごとに𝑦=𝑥と𝑦=𝑥2のグラフを交互に表示するプログラム\nif文と初期値の設定について。\nif文： 指定した条件に合うときに中のプログラムを実行させます。Cinderellaでのif文を解説します。\n構文： if(条件式, 実行したい処理, 例外処理);\n初期値：変数の中に初めに入っていてほしい値を初期値と呼び、それを設定することができます。\n初期値は初めに読み込むプログラムの部分で変数に初期値を入れることで設定できます。\nスクリプトエディタのファイルの部分のKETlibの部分を開きます。\nその後プログラム入力部が以下のようなウィンドウに代わるので、そこの最後の行で初期値を設定します。\nこれでflg = 0と初期値を設定することができました。\nでは、今回の例のプログラムについて解説をします。\nflg = 0と初期値が設定されていることを前提とします。\n以下がボタンのスクリプトとプログラムの例です。", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 12", "content": "うまくいくと次のようにグラフが変わっていきます\nクリック クリック", "tags": []}
{"title": "Page 13", "content": "入力窓の作成\n入力窓を作成する際は\n1. Cinderella上で入力窓を用意\n2. KeTCindyで入力窓としての設定を行う\n3. KeTCindyで入力窓から値を受け取る\n1. Cinderella上で入力窓を作成\nモード → 特別 → 文字列入力 の順に選択していきます。\n文字列入力を押すと、任意の場所をクリックすると文字列を作成できるモードになります。\n任意の場所をクリックすると、以下の画面になります。\nこのままokを押します。", "tags": ["KeTCindy", "構文"]}
{"title": "Page 14", "content": "その後、作成されたものを右クリックし、インスペクタを開きます。\nインスペクタで適当に色などを調整します。また、識別番号の確認(設定)も行うので開いたままにしておいて\nください。\n今回は文字を大きくし、白に黒の枠で囲まれた入力窓にしました。\n枠線の調整\n内側の色の調整\n横幅の調整\n文字の大きさ\nこのような入力窓になりました。\nこれでCinderellaの入力窓の作成は完了です。", "tags": []}
{"title": "Page 15", "content": "2. KeTCindyで入力窓としての設定を行う\nKeTCindyで入力窓として読み込むために設定を行います。\n初めに識別番号の確認と設定をします。先ほど開いたインスペクタから確認を行います。\nここでは1が識別番号となっています。\n次にコマンドで入力窓としての設定を行います。\nSeteditableコマンド\nSeteditable(識別番号 ,[ 初期文字列, ”Size = 文字の大きさ” , ”Width = 横幅”]);\nSizeとWidthは入力しなくても大丈夫です。入力しない場合は先ほど設定したCinderella上での設定が参考さ\nれます。初期文字列は空( “” )でもいいので設定してください。\n例：\n今回は「y=」を初期値として設定します。", "tags": ["KeTCindy", "構文"]}
{"title": "Page 16", "content": "3. KeTCindyで入力窓から値を受け取る\n最後に値を受け取ります。\nTexteditコマンド\nTextedit(識別番号 [, 未入力時の値]);\n未入力値の値は文字が入力されていないときもしくは「=」の後に文字がないときに返す値を設定します。\nデフォルト値は空( “” )でもいいので設定してください。\nこの関数の返り値として入力された値を得られます。\n例：\nデフォルト値を「x^2」としてstrに入力された値を与えています。\n最後に応用としてこれまで例として作ったプログラムから、入力された関数を表示するプログラムを作成しま\nす。\n注意： HTMLに書き出さないと入力窓を使えません。\nSeteditableで初期文字列を設定しないとうまく動作しません。\nTexteditでデフォルト値を設定しないとうまく動作しません。\nあくまで「 = 」以下の値を受け取るため、初期値の設定は気を付けてください。", "tags": ["KeTCindy", "構文"]}
{"title": "Page 1", "content": "K TCindy 体験授業\nE\nNIT, Numazu College\nこのガイドの画像は、macOS 13.5 Ventura, Cinderella 3.0beta build2074を使用して作成\nしています。\n1 KETCindy の準備\nKETCindyの作業フォルダを開き、templatesフォルダを開いてください。作業フォルダ\nは既定ではC:\\ketcindyx.x.xx\\doc\\workにあります。\n00start.cdyを複製してファイル名を変更し、このファイルをベースとします。\n複製した00start.cdyを開いてください。\n2 グラフを描く\n図1 CindyScriptの選択メニュー\nメニューからスクリプトを選択し、CindyScriptを選択してください。\n出てきたウィンドウで、CindyScriptやKETCindyを書くことができます。\nグラフを書くには、Plotdata関数を利用します。\n(cid:19) (cid:16)\n関数とは\nプログラムにおける関数とは、毎回与えられたデータをもとに、毎回決まった処理を実行\nするというものです。\n(cid:18) (cid:17)\n1", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 2", "content": "Plotdata関数は、以下のような書き方です。\nPlotdata(グラフのID, \"数式\", \"変数と定義域\", \"グラフの設定\");\n(cid:19) (cid:16)\nPlotdata関数の注意\nグラフのIDを同じにしてPlotdata関数を繰り返して実行することでグラフを書き換え\nることができます。\ny = ax のグラフを書く場合、a∗xのようにして∗を書く必要があります。\n(cid:18) (cid:17)\n実際にy = 3xのグラフを表示してみます。\nCindyScriptの入力画面のKetinit();とWindispg();の間に\nPlotdata(\"1\", \"3*x\",\"x\");\nと入力してください。また、最後のコロン(;)を忘れないようにしてください。\n図2 入力後のプログラム\n歯車マークを押して実行すると、以下のグラフが生成されれば成功です。\n図3 生成されたグラフ\nPlotdata関数の式を変更して、いろいろなグラフを作ってみてください。\n2", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 3", "content": "3 グラフを動かそう\nスライダーを使ってグラフの傾きと切片を変更してみましょう。\n図4 実際に作るスライダー\nスライダーを作るにはSlider関数を利用します。Slider関数は以下のような書き方をします。\nSlider(\"スライダーID\", [x座標1,y座標1], [x座標2,y座標2]);\n実際に傾きを変更してみます。最初に書いたPlotdata関数より上の行に\nSlider(\"K\", [-5, -6], [5, -6]);\nと入力してください。これでスライダーと動かすための点を作成しました。\nまた、スライダーIDを”A”とした時、そのスライダーの点のx座標はA.x, y座標はA.y\nと書くことでプログラム側から取得できます。\n(cid:19) (cid:16)\nTips\n今までPlotdata関数中の関数の切片は固定でしたが、この固定の値ををスライダーの点\nの値にすることができます。\n(cid:18) (cid:17)\nPlotdataのグラフの関数の3をK.xに置き換えてください。\n図5 入力後のプログラム\n歯車マークを押して実行すると、以下のグラフが生成され、スライダーを動かすことでグラ\nフの傾きが変われば成功です。\n3", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 4", "content": "図6 生成されたグラフ\nこのような操作で新しくスライダーを作ることができます。\n先ほどのような操作で新しくスライダーをつくり、切片もスライダーで動かせるグラフを作\nってください。\n4 発展 二次関数のグラフ\nここまで完成した方は数式の中に^2と書くことで２乗を実現できます。\ny = x2 のグラフは、Plotdata(\"1\", \"x^2\",\"x\");となります。\nまずはy = ax2 のaの値をスライダーで変更できるプログラムを書いてみましょう。\n5 発展２ 二次関数を並行移動\n二次関数y = ax2 をx方向にp, y 方向にq 移動した時の式は、y = a(x−p)2+q です。高\n専１年次でこの内容を学習します。例えば、y = 2(x−2)2+3のグラフは図7の緑のグラフの\nようになります。\n図7 y =2x2のグラフ(g)とy =2(x−2)2+3のグラフ(f)\n図7のように、y = a(x−p)2+q のグラフは、y = 2x2 のグラフをx軸方向に2、y 軸方向\nに3移動したグラフになることがわかります。\ny = a(x−p)2 +q のa,p,q をスライダーで変更し、二次間数を並行移動するプログラムを\n書いてみましょう。また、Plotdata関数の数式部分では、括弧もそのまま入力することができ\nます。\n4", "tags": ["LaTeX", "アニメーション", "上級者向け", "中級者向け", "初心者向け", "図形描画", "基本操作", "数式描画", "関数"]}
{"title": "Page 5", "content": "6 発展 二次関数のグラフ 解説\nまずは値を動かせるようにSlider関数を追加します。\nSlider(\"A\",[-5,-6], [5,-6]);\nまた、Plotdata関数はこのようになります。\nPlotdata(\"1\", \"A.x*x^2\",\"x\");\n図8 実行結果\n7 発展２ 二次関数を並行移動 解説\nまずスライダーで動かせるようにする値は3つなので、Slider関数を3つ書きます。また被\nらないように位置やスライダーのIDを割り当てます。\nSlider(\"A\",[-5,-6], [5,-6]);\nSlider(\"P\",[-5,-7], [5,-7]);\nSlider(\"Q\",[-5,-8], [5,-8]);\nここでは、aの値を動かすスライダーを\"A\"、pの値を動かすスライダーを\"P\"、q の値を動\nかすスライダーを\"Q\"としています。\nまた、Plotdata関数はこのようになります。\nPlotdata(\"1\", \"A.x*(x-P.x)^2+Q.x\", \"x\");\n図9 実行結果\n5", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 1", "content": "K TCindy インストール方法\nE\nNIT, Numazu College\n2023 年9月20 日\n1 KeTCindy のインストール\nWindows1164ビット版(ビルド22621.2070)及びMicrosoftEdge(バージョン115.0.1901.188)\nを利用しています。macOS の場合は、https://s-takato.github.io/ketcindyorg/indexj.html を参\n照してください。(インストールするソフトは同じです。)\n1.1 Cinderella のインストール\nhttps://beta.cinderella.de/にアクセスし、Windows 64 Bit Installer をクリックしてダウ\nンロードしてください。\nWindows 64 Bit Installer でインストールできない場合、Windows 32 Bit Installer を\n利用してください。\n図1 https://beta.cinderella.de/のダウンロードページ\nブラウザの環境によって「一般的にダウンロードされていません」のようなエラーが表示される\nことがありますが、エラーの上にカーソルを置き、三点リーダー (···) →詳細表示→保持すると押\nして保存してください。\n1", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "外部連携", "構文", "環境構築"]}
{"title": "Page 2", "content": "ダウンロードが完了したら、クリックして実行してください。\nインストールプログラムが立ち上がったら、右下の次へを何度か押してインストールを進めてく\nださい。\nセットアップ完了となったら終了を押してインストールを終了してください。\nこれでCinderella のインストールは完了です。\n1.2 KeTTeX のインストール\nhttps://github.com/ketpic/kettex/releases にアクセスし、\nKeTTeX-windows-yyyymmdd.zip をダウンロードしてください。(yyyymmdd は日付を\n表し、最新のものをダウンロードしてください）\nダウンロードが終わったら、クリックして開いてください。\n2", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 3", "content": "エクスプローラが開くので、上側のすべて展開を選択してください。\nウィンドウが開いたら展開を押してください。\n新しいエクスプローラが開いたら、画像の場所をクリックし１つ前のフォルダに戻ってください。\nフォルダを一度クリックした後、右クリックしコピーしてください。\n3", "tags": []}
{"title": "Page 4", "content": "左のメニューからPCを選択し、末尾に(C:) のついたドライブを開いてください。\n何もないところで右クリックし、貼り付けてください。貼り付けが完了したら、そのフォルダを\n開いてください。\nkettexinst をダブルクリックして実行してください。\n続行するには何かキーを押してください... が表示されるまで待つ\n(cid:19) (cid:16)\n注意！\n指定されたパスが見つかりませんと表示されるとエラーが発生したと思い終了してしまいた\nくなるかもしれませんが、必ず続行するには何かキーを押してください... が表示されるまで\n待ってください。\n(cid:18) (cid:17)\n続行するには何かキーを押してください... と表示されたら何かキーを押してください。\nこれでKeTTeX のインストールは完了です。\n4", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 5", "content": "1.3 R のインストール\nhttps://cran.r-project.org/にアクセスし、Download R for Windowsをクリックしたあと、\nbase →Download R-x.x.x for Windows をクリックしてダウンロードしてください。\nダウンロードが終わったら、クリックしてインストーラを実行してください。\n言語選択が表示されるのでOK をクリックしてください。\n次へを何度かクリックするとインストールが完了します。\n1.4 SumatraPDF のインストール\nhttps://www.sumatrapdfreader.org/download-free-pdf-viewerにアクセスし、SumatraPDF-\nx.x.x-64-install.exe をダウンロードしてください。\nインストールできない場合はSumatraPDF-x.x.x-install.exeをダウンロードしてください。\nダウンロードが終わったら、ダウンロードされたファイルを右クリックしてファイルを開くを選\n択してください。\nエクスプローラが開いたら、一度クリックで選択した後右クリックして、管理者として実行を選\n択してください。\n5", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 6", "content": "インストーラが開いたら、右下のオプションを選択してください。\nすべてのユーザーに対してインストールにチェックを入れ、右下の SumatraPDF をインス\nトールを選択してください。\nこれでSumatraPDF のインストールは完了です。\n1.5 Maxima のインストール\nhttps://sourceforge.net/projects/maxima/files/Maxima-Windows/にアクセスし、最新版(一\n番上)のフォルダーを開き、maxima-x.xx.x-win64.exe をダウンロードしてください。\nインストールできない場合はmaxima-x.xx.x-win32.exe をダウンロードしてください。\nダウンロードが終わったら、クリックしてインストーラを実行してください。\n次へを何度かクリックすると、インストールが完了します。\nこれでMaxima のインストールは完了です。\n6", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 7", "content": "1.6 GCC(GNU C Compiler) のインストール\nhttps://sourceforge.net/projects/mingw/にアクセスし、緑のDownloadボタンを押してくだ\nさい。ダウンロードが終わったら、そのファイルを開いてください。\nファイルが実行されたら、Install → Continue の順にクリックするとインストールが始まり\nます。\nダウンロードが終わったら、Continue をもう一度クリックしてください。\nMinGW Installation Manager が開いたら、mingw-developer-toolkit, mingw32-base,\nmingw32-gcc-g++, msys-base の4個にチェックを入れてください。\nチェックは、項目左側の四角をクリックし、Mark for Installation をクリックすることで入\nれることができます。\n7", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 8", "content": "すべてのチェックが終わったら、左上の Installation から Apply Changes を選択してくだ\nさい。\n開いたウィンドウで Apply を選択することでパッケージがインストールされます。インストー\nルが終了したらClose を選択してください。\nWindows キーを押し、環境変数と入力し、システム環境変数の編集を選択してください。\n下側のPathを選択し、編集を選択してください。\n新規を選択し、C:￥MinGW￥bin と入力し、Enter を押してください。\nOK を押して閉じてください。\nこれでGCC のインストールは完了です。\n8", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 9", "content": "1.7 KeTCindy のインストール\nhttps://github.com/ketpic/ketcindy/releases にアクセスし、最新版の Source Code (zip)\nを選択し、ダウンロードしてください。\nダウンロードが終わったら、KeTTeX のインストールで行ったのと同じようにファイルを展開\nし、(C:) ドライブに貼り付けてください。\n貼り付けできたら、貼り付けたフォルダを右クリックし、名前を変更を選択してください\nketcindy-x.x.xx のハイフンを消してEnter を押してください。\n変更できたら、そのフォルダ→ doc フォルダの順に開き、ketcindysettings をダブルクリッ\nクしてください。\n左の黒文字で示されている部分が、language=j, tex=platex, graphics=pict2e になって\nいることを確認してください。違う場合は上部の黄色ボタンを押して変更できます。\n黄色のボタンをKettex →Mkinit →Update →Work の順にクリックしてください。\nWork を選択するとコマンドプロンプトが開きます。数分たっても自動で閉じない場合はウィ\nンドウを選択してEnter を押してください。\n(C:)のついたドライブの中にあるketcindyx.x.xxフォルダを開き、doc→work→templates\nの順に開いてください。\n9", "tags": ["KeTCindy", "LaTeX", "インストール", "中級者向け", "初心者向け", "外部連携", "数式描画", "構文", "環境構築"]}
{"title": "Page 10", "content": "その中の 01figure ファイルを開き、画像のような三角形が表示されたら KeTCindy のインス\nトールは成功です。\nこの01figure ファイルをもとにして複製しながらプログラムなどを書いていきます。\n2 追加情報\nKeTCindyのリファレンスはhttps://s-takato.github.io/ketcindyorg/offline/KeTCindyReferenceJ.pdf\nにあります。\n10", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 1", "content": "初等数学\nLAT\nE\nX\nマクロ集\nemath.sty\nver. 1.54\n使用例\ntDB\n2005/10/31\n概 要\n中学・高校で数学のプリントを作る際に必要な記号，環境などを集めたマクロ集です。LATEX2ε\nを前提とします。\nこのマクロ集のマクロについてのご質問，バグ報告，修正・追加の提案等は\nhttp://emath.s40.xrea.com/\nの掲示板へどうぞ。", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 2", "content": "目 次\n1 代数 1\n1.1 等しくない記号 =\\ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n1.2 近似等号 (cid:2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n1\n1.3 分数記号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n2\n3\n9\n1.4 約分記号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n6\n2\n1.5 パーセント記号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n訂正\n1.6 訂正 誤り. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n1.7 整式の除法（縦書割算） (cid:2) x −4 . . . . . . . . . . . . . . . . . . . . . . 6\nx−1 x2−5x+2\n1 1 3 4 −6 −2\n1.8 組み立て除法 1 4 8 2 . . . . . . . . . . . . . . . . . . 7\n1 4 8 2 0\n1 3 −→ 6\n1.9 タスキガケ 2 5 −→ 5 . . . . . . . . . . . . . . . 8\n11\n−2x + 13y = 11\n+) 2x − 3y = − 1\n1.10 加減法 10y = 10 . . . . . . . . . . . . . . . . . . . 9\n√\n1.11 累乗根 32 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n1.12 累乗の累乗 (ap)q . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n−→\n1.13 ベクトル記号 (cid:2)a, AB . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n1.13.1 鏃の形状 AB . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n1.14 絶対値記号 (cid:2)a ， 1+x . . . . . . . . . . . . . . . . . . . . . . . . 14\n1−x\n1.14.1 Y=zettaiti . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n1.14.2 Y=emabs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n1.14.3 Y=vabs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n1.14.4 絶対値記号のネスト . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n1.15 ガウス記号 [x] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n(cid:3) (cid:4)\na b\n1.16 行列 . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\nc d\n1.17 複素数 x+yi . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n1.18 共役複素数 z . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n1.19 極形式 cosθ+isinθ . . . . . . . . . . . . . . . . . . . . . . . . . 20\n2 幾何 21\n2.1 度の記号(小さな丸) 60◦ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n2.2 角, 三角形 ∠A, (cid:4)PQR . . . . . . . . . . . . . . . . . . . . . . . . . 21\ni", "tags": []}
{"title": "Page 3", "content": "2.3 平行とその否定 //, /\\/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n2.4 相似の記号 ∽ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n2.5 円弧を表す記号\n(cid:5)\nAB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n2.6 平行四辺形の記号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n3 解析 23\n(cid:6)n\n3.1 数列記号 {an }, ak . . . . . . . . . . . . . . . . . . . . . . . . . 23\nk=1\n3.2 極限 lim an . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\nn→∞\n3.3 階差数列 1 2 4 7 11 ··· . . . . . . . . . . . . . . . . . . . . 24\n···\n1 2 3 4\n(cid:2)(cid:4) (cid:5)\n3.4 増減・凹凸 (cid:2)(cid:2) (cid:3)(cid:3) (cid:4). . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n(cid:7)\nb\n3.5 積分記号 f(x)dx . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n(cid:8)a (cid:9)\nπ\n3.6 定積分 −cosx . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n0\n3.7 デルタ記号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n4 確率 26\n4.1 集合の記号 {x| 0<x<1} . . . . . . . . . . . . . . . . . . . . . . . 26\n4.1.1 Y=niの否定 (cid:5)/ . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n4.2 階乗記号 n! . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n4.3 順列・組合せの記号 nCr nPr nHr nΠr . . . . . . . . . . . . . . . . . . . . . . 26\n5 数式番号 28\n5.1 丸付き文字 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n5.1.1 丸付き文字\n(cid:6)1 (cid:6)A (cid:6)\nア . . . . . . . . . . . . . . . . . . . . . . . 28\n5.1.2 白黒反転の丸付き文字 1 A ア . . . . . . . . . . . . . . . . . . . . . . . 29\n5.1.3 縦長の丸付き文字 1 A . . . . . . . . . . . . . . . . . . . . . . . . . 30\n5.1.4 横長の丸付き文字 1 A . . . . . . . . . . . . . . . . . . . . . . . . 31\n5.1.5 ○のサイズ変更 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n5.2 数式番号のフォーマット . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n5.3 数式番号のリセット . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n5.4 連立方程式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n5.5 本文中の連立方程式に数式番号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n5.6 ダッシュ付きの数式番号\n(cid:6)1(cid:5)\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n5.7 align*環境で数式番号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n5.8 等号の縦揃え . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n5.9 Y=item直後の縦揃え数式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n5.9.1 aligned環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n5.9.2 Y=itemtopmath . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n5.9.2.1 左インデントの調整 . . . . . . . . . . . . . . . . . . . . . . . . . 41\n5.9.2.2 縦方向の補正 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n5.9.2.3 Y=itemtopmathの書式 . . . . . . . . . . . . . . . . . . . . . . . . 43\nii", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 4", "content": "6 図の取り込み 44\n6.1 図の周りへの回り込み . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n6.1.1 mawarikomi 環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n6.1.2 mawarikomi*環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n6.1.3 mawarikomi環境内にlist環境 . . . . . . . . . . . . . . . . . . . . . . . . . 45\n6.1.4 回り込みの行数指定オプション . . . . . . . . . . . . . . . . . . . . . . . . 46\n6.1.5 テキストと図の横間隔 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n6.1.6 図の位置の微調整 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n6.1.7 段落途中からの回り込み . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n6.1.8 Y=caption の使用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n6.1.9 書式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n6.1.10 図の左配置 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n6.1.11 図幅指定の省略 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n6.1.12 テキスト部が短いとき . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n6.1.13 改ページとの関係(1) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n6.1.14 改ページとの関係(2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n6.2 複数の図の周りへの回り込み. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n6.2.1 図の配置 — zuhaiti環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n6.2.2 枠の設定 — Y=wakudori . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n6.2.3 図の左配置 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n6.2.4 図の位置の微調整 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n6.2.5 行の左右に枠 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n6.2.6 listとの併用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n6.2.7 Y=captionの使用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n6.2.8 テキスト部が複数の段落を持つ場合 . . . . . . . . . . . . . . . . . . . . . . 81\n6.2.9 Y=unitlengthの変更について . . . . . . . . . . . . . . . . . . . . . . . . . 81\n6.3 図番号の書式修正 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n7 enumerate環境の機能拡張 82\n7.1 小問を横に並べる。 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\n7.1.1 横に並べる個数指定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\n7.1.2 ベタ並べ. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n7.1.3 yokoenumerate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n7.2 enumerate 環境の中断・継続 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\n7.3 指定した項目番号に*などを附加 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\n7.4 横幅一定のローマ数字 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n7.5 固定桁数のナンバリング 001, 002, 003, ... . . . . . . . . . . . . . . . . . . . . . . 95\n7.6 番号付けにカタカナ・ひらがなを使う。 . . . . . . . . . . . . . . . . . . . . . . . 96\n7.7 enumerate 環境のオプション文字の追加. . . . . . . . . . . . . . . . . . . . . . . . 96\n7.8 enumerate環境における番号付けの初期値・刻み値変更 . . . . . . . . . . . . . . . 98\n7.9 enumerate環境の前後左右の空き調整 . . . . . . . . . . . . . . . . . . . . . . . . . 100\n7.9.1 左インデント . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n7.9.2 縦間隔 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\niii", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 5", "content": "7.9.3 縦間隔のグルー . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n7.9.4 Y=enumSep . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n7.9.5 Y=enumLmargin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n7.10 edaenumerate環境の前後左右の空き調整 . . . . . . . . . . . . . . . . . . . . . . . 107\n7.10.1 edaenumerate環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n7.10.2 preedasep=..オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\n7.10.3 postedasep=..オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\n7.10.4 edatopsep=..オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n7.11 Y=item直後のedaenumerate環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n7.11.1 問題提示. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n7.11.2 大問の左インデント操作との競合 . . . . . . . . . . . . . . . . . . . . . . . 112\n7.11.3 edaenumerate環境に<edafirstindent=..>オプション . . . . . . . . . . . 113\n7.11.4 emathAeとの併用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n7.11.5 betaenumerate環境では . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n7.11.6 解答部のbetaenumerate . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n7.12 list環境の行間. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n7.12.1 itemize環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n7.12.2 description環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n7.12.3 enumerate環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n7.13 問題番号の参照 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\n8 その他一般 123\n8.1 数式モードの中で英大文字をローマン体にする。 . . . . . . . . . . . . . . . . . . 123\n8.1.1 caprm環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n8.1.2 [o]オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124\n8.1.3 コマンド型 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124\n8.1.4 [l]オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n8.1.5 Y=mathRM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n8.1.6 Y=bekutoru* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n8.1.7 Y=mitSなど . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\n8.2 インデント . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\n8.3 Y=EMparbox. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n8.3.1 Y=parbox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n8.3.2 Y=EMparbox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n8.3.3 Y=EMparboxのベースライン . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n8.4 Y=emovalbox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n8.5 数式の配置 左（右）寄せと中央揃えの切り替え . . . . . . . . . . . . . . . . . . . 133\n8.6 数式番号を左に出力 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\n8.7 行末にマーク . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\n8.8 リーダー罫 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137\n8.9 支柱 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\n8.10 下線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n8.10.1 Y=underline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\niv", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "基本操作", "数式描画", "環境構築"]}
{"title": "Page 6", "content": "8.10.2 波下線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n8.10.2.1 ulem.sty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n8.10.2.2 Y=namikasen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\n8.10.2.3 波二重下線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\n8.10.2.4 太波下線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\n8.10.2.5 Y=namikasenと上下のアキ . . . . . . . . . . . . . . . . . . . . . . 142\n9 メモリ不足への対応 143\n9.1 pool size . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\n9.2 main memory size . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\n9.3 hash size . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\n9.4 save size . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\n9.5 number of strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\n10 謝辞 146\nv", "tags": []}
{"title": "Page 7", "content": "1 代数\n1.1 等しくない記号 = \\\n等しくない記号を表すには Y=ne があります。しかし，日本では否定の斜線を逆向きにする習慣\nのようです。そのためのコマンド Y=neqq を 定義しました。その効用は：\n(cid:2) (cid:3)\nY=neとY=neqqの違い\na(cid:7)=b\n$a Y=ne b$=YY= →\na=\\ b\n$a Y=neqq b$\n(cid:4) (cid:5)\nこの記号は，数式の中で使われる位置によりサイズが自動的に変わります。\n(cid:2) (cid:3)\nY=neqqのサイズ調整 i=\\ j\n(cid:10)\n$i Y=neqq j$=YY=[1ex] → Aij\n$Y=displaystyle=Ysum_{i =Yneqq j}A_{ij}$ i=\\j\n(cid:4) (cid:5)\n1.2 近似等号 (cid:2)\nAMSFontsには，Y=fallingdotseqが用意されています。emathでは，Y=kinziという同義語を\n定義してあります。\nY=kinzi\n$(1+x)^n =Ykinzi 1+nx$ −→ (1+x)n (cid:2)1+nx\n1\n1.3 分数記号\n2\n分数を表すには，Y=frac というコマンドがあります。しかし，分数罫線が短いという憾みがあり\nます。また，分数罫線と分母・分子との縦間隔が空き過ぎである，とのご意見もあります。そこで\nY=bunsuuというコマンドを作りました。次の2つを比較してください。\nY=dfracとY=bunsuuの比較\n1\n$Y=dfrac12$ −→\n2\n$Y=bunsuu12$ −→ 1\n2\n3\n9\n1.4 約分記号\n6\n2\n分数で，分母・分子の数値に斜線を引いて約分後の数値を記述するためのコマンド Y=yakubun で\nす。斜線の引き方に2種類，約分した後の数値を記述する位置に3通りの方法があります。デフォ\nルトは元の数値の上下です。\n1", "tags": ["LaTeX", "アニメーション", "上級者向け", "中級者向け", "数式描画"]}
{"title": "Page 8", "content": "なお，この節のコマンドは，epic.sty の中で定義されているY=drawline を用いています。した\nがって epic.sty, eepic.sty を読み込んでおくことが必要です。斜線の向きは[r]オプションを付け\nると逆向きになります。\nY=yakubun\n8\n$Y=yakubun{16}{6}{8}{3}$ −→ 16\n6\n3\n8\n$Y=yakubun[r]{16}{6}{8}{3}$ −→ 16\n6\n3\n次は，約分した数値を元の数値の右肩に乗せます。\nY=yakubun<r>\n8\n$Y=yakubun<r>{16}{6}{8}{3}$ −→ 16\n3\n6\n8\n$Y=yakubun[r]<r>{16}{6}{8}{3}$ −→ 16\n3\n6\n最後は，約分した数値を元の数値の左肩に乗せます。\nY=yakubun<l>\n$Y=yakubun<l>{16}{6}{8}{3}$ −→\n816\n36\n$Y=yakubun[r]<l>{16}{6}{8}{3}$ −→\n816\n36\nY=yakubun の書式です。\nY=yakubunの書式\nY=yakubun[#1](#2)<#3>#4#5#6#7\n#1: 斜線の引き方を指定するオプション引数で，\ns : 斜線（／） [デフォルト]\nr : 斜線（＼）\n#2: 線の色\n#3: 約分した結果の表示位置を指定するオプション引数で，\nc : 中央上下 [デフォルト]\nl : 左肩\nr : 右肩\n#4: 約分する前の分子\n#5: 約分する前の分母\n#6: 約分した後の分子\n#7: 約分した後の分母\nなお，分母・分子の最大公約数を求め，自動的に既約分数にしてしまうコマンド Y=Yakubun もあ\nります。\n書式は Y=yakubun の書式とほとんど同様で，最後の2つの引数（約分後の分母・分子）が不要に\nなる点だけが異なります。\nただし，このコマンドを使用するときは，emathW.sty を読み込んでおく必要があります。\n2", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 9", "content": "また，いくつかの分数を掛ける式での約分を表現するには，後述の Y=Teisei コマンドが有効\nです。\n1.5 パーセント記号\nLATEXでのパーセント記号は Y=% で出力できますが，その形状に不満がある，という方もあるよ\nうです。pxfontsのそれをY=pxpercentとして用いることもできます。当然，pxfontsがインストー\nルしてあるという前提です。具体的な使用法は sampleFx.texをご覧ください。\n訂正\n1.6 訂正 誤り\n約分後の数値を表示せず，単に斜線だけを引くコマンドが Y=teisei です。数学では，プラスと\nマイナスで相殺されるものに斜線を引く，などといったことができます。\nなお，この節のコマンドは，epic.styの中で定義されているY=drawlineを用いていています。し\nたがって epic.sty, eepic.sty を読み込んでおくことが必要です。\n(cid:2) (cid:3)\nY=teisei\n$Y=left(1-=Yteisei{=Ybunsuu12}=Yright)\n+Y=left(=Yteisei{=Ybunsuu12}-=Yteisei{=Ybunsuu13}=Yright)\n+Y=left(=Yteisei{=Ybunsuu13}-=Yteisei{=Ybunsuu14}=Yright)\n+Y=cdots =Ycdots\n+Y=left(=Yteisei{=Ybunsuu{1}{n}}-=Ybunsuu{1}{n+1}=Yright)\n= 1-Y=bunsuu{1}{n+1}$\n(cid:4) (cid:5)\nをタイプセットすると，\n+と−で相殺されるものに斜線\n(cid:11) (cid:12) (cid:11) (cid:12) (cid:11) (cid:12) (cid:11) (cid:12)\n1− 1 + 1 − 1 + 1 − 1 +······+ 1 − 1\n2 2 3 3 4 n n+1\n=1− 1\nn+1\nY=teisei コマンドは指定した文字列に2種類の斜線を引く他，水平線，二本の水平線などで取\n消し線を引くことができます。その際，必要なら線の色を指定することができます。さらに，訂正\n前の文字列の上方に，訂正後の文字列をおくことができます。\nY=teisei[h]\n$a_n=a_1+=Yretuwa{k=1}\nn−1\n{Y=teisei[h](red){n}[% (cid:6)n\n−→ an =a1+ bk\n{Y=scriptstyle n-1}]} k=1\nb_k$\nY=teiseiの書式です。\n3", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 10", "content": "Y=teiseiの書式\nY=teisei[#1](#2)#3[#4]<#5>\n#1: 線の引き方についてのオプション引数で，\ns : 斜線（／） [デフォルト]\nr : 斜線（＼）\nh : 横線\nd : 横二本線\n#2: 線の色\n#3: 線を引く対象\n#4: 訂正後の文字列\n#5: 斜線の位置を修正するベクトル\nkey=val の形式\ndLT=(dx,dy), dLB=, dRT=, dRB= 右辺値は pt を単位とする数値\n<#5>オプションは，斜線の位置を修正するためのオプションですが，この機能はemathPh.styを\n必要とします。\nまずは基本的な使用法の確認です。\n(cid:2) (cid:3)\nY=teisei\n→ ab\nY=teisei{ab}\n(cid:4) (cid:5)\n打ち消し線を，\n左下(LB)を少し左へ(dLB={(-1,0)})，\n右上(RT)を少し右下へ(dRT={(1,-2)})\n動かしてみます。ここで\nL : left, R : right, T : top, B : bottom\n右辺ベクトル成分は，ptを単位とする無名数です。\n(cid:2) (cid:3)\nY=teisei\n→ ab\nY=teisei{ab}<dLB={(-1,0)},dRT={(1,-2)}>\n(cid:4) (cid:5)\n水平の打ち消し線は，左端をLT, 右端をRTとしてあります。\n(cid:2) (cid:3)\nY=teisei\nab\nY=teisei[h]{ab}=YY= →\nab\nY=teisei[h]{ab}<dLT={(-.5,-1)},dRT={(.5,-1)}>\n(cid:4) (cid:5)\n4", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 11", "content": "水平の二重線は\n上のほうの左端がLT, 右端がRT\n下のほうの左端がLB, 右端がRB\n(cid:2) (cid:3)\nY=teisei\nY=teisei[d]{ab}=YY= ab\n→\nY=teisei[d]{ab}<dLT={(-.5,-1.5)},dRT={(.5,-1.5)},% ab\ndLB={(-.5,-1)},dRB={(.5,-1)}>\n(cid:4) (cid:5)\nY=teisei は，訂正後の文字列を，訂正前の文字列と同じサイズで上方に配置します。\nそれに対して Y=Teisei は，訂正後の文字列を小さ目のサイズ (scriptstyle) で，配置場所をいろ\nいろと指定することができます。使用例を見ていただきましょう。\n(cid:6) (cid:7)\n$Y=bunsuu{5}{=YTeisei{6}{2}}\nY=times=Ybunsuu{=YTeisei{9}{3}}{4}\n=Y=bunsuu{15}{8}$\n(cid:8) (cid:9)\n3\n−→ 5 × 9 = 15\n6 2 4 8\nY=Teiseiはネストすることもできます。\n(cid:6) (cid:7)\n$Y=bunsuu{=YTeisei{6}{=YTeisei[r]{=Yscriptstyle 2}{1}}}{13}\nY=times=Ybunsuu{5}{=YTeisei{33}{11}}\nY=times=Ybunsuu{1}{=YTeisei[r]{2}{1}}==Ybunsuu{5}{143}$\n(cid:8) (cid:9)\n21\n−→ 6 × 5 × 1 = 5\n13 33 11 2 1 143\nY=Teiseiの書式です。\n5", "tags": []}
{"title": "Page 12", "content": "Y=Teiseiの書式\nY=Teisei[#1](#2)#3[#4]#5\n#1: 線の引き方についてのオプション引数で，\ns : 斜線（／） [デフォルト]\nr : 斜線（＼）\nh : 横線\nd : 横二本線\n#2: 線の色\n#3: 線を引く対象\n#4: 訂正後の文字位置\nr = 右上 (=tr=rt)\nl = 左上 (=tl=lt)\nt = 上\nb = 下\nrb=br=右下\nlb=bl=左下\n#5: 訂正後の文字列 (scriptstyle)\n注 Y=teiseiコマンドなどにより描画される斜線はtpic-specialsを用いています。special\nはdvi-wareに依存します。そこで，Y=vruleで描画した線をY=rotateboxで回転して斜線を\n描画する道も用意してあります。もちろんこれもdvi-wareに依存しますから，ケースバイ\nケースで使い分けをする必要がありましょう。\nさて，その実現法は\nY=def=Ysyasen{=Yrotateline}\nを宣言します。\nただし，Y=rotateboxはグラフィックスパッケージを必要としますから，emathでは，emathPh.sty\nを読み込んでおかなければなりません。\nx −4\n1.7 整式の除法（縦書割算） (cid:2)\nx−1 x2−5x+2\n整式の除法を縦書きで記述するためのコマンドがY=zyohouです。\n6", "tags": []}
{"title": "Page 13", "content": "(cid:2) (cid:3)\n縦書割算\n$Y=zyohou{x^2,-5x,+2}% 被除式 (cid:2) x −4\n{x,-1}% 除式\nx−1 x2−5x+2\n{x,-4}% 商\nx2 −x\n−→\n{x^2,-x,% 途中の計算式\n−4x+2\n-4x,+2,% を , で区切って\n−4x+4\n-4x,+4,% 並べる．\n−2\n-2}$\n(cid:4) (cid:5)\n係数に分数が登場するときは，Y=frac をお使いください。\n(cid:2) (cid:3)\n縦書割算\n$Y=zyohou{2x^2,-2x,-1}% (cid:2) x\n−1\n2\n{2x,-1}%\n2x−1 2x2−2x −1\n{x,-=Yfrac12}{%\n2x2 −x\n−→\n2x^2,-x,\n−x −1\n-x,-1,\n−x+ 1\n2\n−3\n-x,+=Yfrac12, 2\n-Y=frac32}$\n(cid:4) (cid:5)\nY=dfrac や Y=bunsuu の場合は，Y=noexpand を併用することになりますが，面倒です。\nなお，係数が整数の範囲内の一変数の場合は emathW.sty で定義されている Y=izyohou が便利\nです。こちらは，被除式，除式の係数だけを与えれば，商はもちろん，途中の計算式もすべてTEX\nが求めてくれますから，\nY=izyohou{1,-5,2}{1,-1}\nと記述するだけです。詳しくは emathW.styの使用例 sampleW.tex をご覧ください。\n1 1 3 4 −6 −2\n1.8 組み立て除法 1 4 8 2\n1 4 8 2 0\n整式を1次式で割ったときの商，余りを求める計算法に‘組み立て除法’があります。\n(cid:2) (cid:3) 2 1 −6 11 −6\n組み立て除法\n−→ 2 −8 6\n$Y=syndiv{1,-6,11,-6}{2}$\n1 −4 3 0\n(cid:4) (cid:5)\nすなわち Y=syndivコマンドの第1引数に，被除式の係数を降べき順にコンマで区切ったものを\n並べ，第2引数に除式のゼロ点を与えます。\n第2引数にコンマ区切りで複数のものを与えれば，商をさらに割っていくことができます。\n7", "tags": []}
{"title": "Page 14", "content": "2 1 −6 11 −6\n(cid:2) (cid:3) 2 −8 6\n多段組み立て除法\n−→ 3 1 −4 3 0\n$Y=syndiv{1,-6,11,-6}{2,3}$\n3 −3\n(cid:4) (cid:5)\n1 −1 0\nY=syndiv は整数係数しか扱うことができませんが，emathB.styには，分数係数を扱うことを可\n能としたY=Fsyndivが用意してあります。例えば\n$Y=Fsyndiv{3,-1,0,4}{-2/3}$\n(cid:11) (cid:12)\nとすることで，f(x)=3x3−x2+4に対してf −2\nを求めることができます。\n3\n1 3 −→ 6\n1.9 タスキガケ 2 5 −→ 5\n11\n二次三項式を因数分解するとき，タスキガケの図を用いることがあります。\n(cid:2)\nタスキ\n(cid:3) 2x2+11x+15=(x+3)(2x+5)\n$2x^2+11x+15=(x+3)(2x+5)$ 1 3 −→ 6\n−→\n2 5 −→ 5\n$Y=tasuki{1}{2}{3}{5}$ 11\n(cid:4) (cid:5)\n横幅を少し狭くしたいときはY=stasukiを用います。\n1 3 −→ 6\n(cid:2) Y=stasuki (cid:3) 2 5 −→ 5\n$Y=tasuki{1}{2}{3}{5}$ 11\n−→\n1 3 −→ 6\n$Y=stasuki{1}{2}{3}{5}$ 2 5 −→ 5\n(cid:4) (cid:5)\n11\n文字式の場合は，タスキ計算もこちらでしておく必要があります。\n(cid:2) (cid:3)\n文字式のタスキ\nY=begin{align*}\n& 2x^2+xy-3y^2+5x+5y+2=YY=\n={}& 2x^2+(y+5)x-(3y^2-5y-2)=YY=\n={}& 2x^2+(y+5)x-(y-2)(3y+1)=YY=\n={}& =Ybm{(x-y+2)(2x+3y+1)}\nY=end{align*}\n$Y=Tasuki{1}{2}{-(y-2)}{3y+1}{-2y+4}{3y+1}{y+5}$\n(cid:4) (cid:5)\n8", "tags": []}
{"title": "Page 15", "content": "2x 2 +xy−3y 2 +5x+5y+2\n=2x 2 +(y+5)x−(3y 2−5y−2)\n=2x 2 +(y+5)x−(y−2)(3y+1)\n−→\n=(x−y+2)(2x+3y+1)\n1 −(y−2) −→ −2y+4\n2 3y+1 −→ 3y+1\ny+5\nタスキの左側だけを表示したいときは，Y=tasukiに[l]オプションをつけます。\n(cid:2) (cid:3)\nY=tasukiの[l]オプション 1 3\n−→\n$Y=tasuki[l]{1}{2}{3}{5}$ 2 5\n(cid:4) (cid:5)\n文字式の場合も左側だけほしいときは Y=Tasuki ではなく，Y=tasukiの[l]オプションを使い\nます。\n(cid:2) (cid:3)\nY=tasukiの[l]オプション\n$Y=tasuki[l]{1}{2}{-(y-2)}{3y+1}$\n(cid:4) (cid:5)\n1 −(y−2)\n−→\n2 3y+1\nなお，たすきがけの図第3行については，次の2種類の変形版があります。\n(cid:2) (cid:3)\nY=tasukikata=1 1 3 −→ 6\nY=def=Ytasukikata{1} −→ 2 5 −→ 5\n$Y=tasuki{1}{2}{3}{5}$ 11\n(cid:4) (cid:5)\n(cid:2) (cid:3)\nY=tasukikata=2 1 3 −→ 6\nY=def=Ytasukikata{2} −→ 2 5 −→ 5\n$Y=tasuki{1}{2}{3}{5}$ 2 15 11\n(cid:4) (cid:5)\nなお，Y=tasukikataのデフォルト値は0です。\n−2x + 13y = 11\n+) 2x − 3y = − 1\n1.10 加減法 10y = 10\n連立方程式を加減法で解くときの計算式を表示するためのマクロです。\n(cid:2) (cid:3) 3x − 6y = 9\n加減法\n−→ +) 2x + 6y = −4\nY=kagenhou{3,-6,9}+{2,6,-4}\n5x = 5\n(cid:4) (cid:5)\n未知数の個数が増えたり，文字がx, yではない場合については，オプション引数で未知数を表\nす文字を指定します。次の例はa, b, c を未知数とする3元の連立です。\n9", "tags": []}
{"title": "Page 16", "content": "(cid:2) (cid:3)\n加減法（3元）\nY=kagenhou[a,b,c]{3,-6,9,3}-{2,-6,-4,8}\n(cid:4) (cid:5)\n3a − 6b + 9c = 3\n−→ −) 2a − 6b − 4c = 8\na + 13c = −5\n問題部分のみを表示させるには，<M>オプションを付加します。\n(cid:2) (cid:3)\nY=kagenhouの<M>オプション\nx + 2y = 3\nY=kagenhou<M>{1,2,3}-{4,2,-1} → −) 4x + 2y = −1\nY=smallskip\n(cid:4) (cid:5)\n縦方向の配置は，array環境に[b]オプションを与えてあります。\n(cid:2) (cid:3)\nY=kagenhouの縦配置\nx + 2y = 3\naY=kagenhou<M>{1,2,3}-{4,2,-1}z → −) 4x + 2y = −1\na z\nY=smallskip\n(cid:4) (cid:5)\nこれを変更するには，<pos=.>オプションを用います。右辺値はt/b/cのいずれかです。また，\nこのオプションを<M> オプションと併用するときは，<kotae=no>の形式で与えます。\n(cid:2) (cid:3)\nY=kagenhouの<pos=t>オプション\na x + 2y = 3 z\naY=kagenhou<pos=t,kotae=no>{1,2,3}-{4,2,-1}z → −) 4x + 2y = −1\nY=smallskip\n(cid:4) (cid:5)\n√\n1.11 累乗根 3 2\n平方根，3乗根などを表記するにはLATEXで Y=sqrt が用意されています。\n(cid:2) (cid:3)\n累乗根\n√\nY=begin{enumerate}[(1)]\n(1) 2\nY=item $=Ysqrt{2}$ −→\n√\nY=item $=Ysqrt[3]{2}$ (2) 32\nY=end{enumerate}\n(cid:4) (cid:5)\nこの記号は，中の数式のサイズにしたがって大きさが変化します。便利な反面，次の(1)では，\n高さが不揃いとなりますので，支柱 Y=mathstrut をいれて高さをそろえるなどの工夫が必要なこ\nとがあります。\n(cid:2) (cid:3)\n高さの調節(1)\n$Y=sqrt{ab}==Ysqrt{a}=Ysqrt{b}$=YY=\n$Y=sqrt{=Ymathstrut ab}\n=Y=sqrt{=Ymathstrut a}=Ysqrt{=Ymathstrut b}$\n(cid:4) (cid:5)\n10", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 17", "content": "√ √ √\nab= a b\n−→ (cid:13) (cid:13) (cid:13)\nab= a b\nY=mathstrutは，‘(’の高さと深さを持つ支柱ですが，深さがある分根号が下の方に伸びてしま\nう，という批判もあります。このときは，支柱を Y=vphantom を用いて\n(cid:2) (cid:3)\n高さの調節(2)\n$Y=sqrt{=Yvphantom{b}ab}\n=Y=sqrt{=Yvphantom{b}a}=Ysqrt{b}$\n(cid:4) (cid:5)\n√ √ √\n−→ ab= a b\nつぎに，二重根号を Y=displaystyleで組むと\n(cid:2) (cid:3) (cid:14)\n二重根号 √\n−→ 2+ 3\nY=[=Ysqrt{2+=Ysqrt3}=Y]\n(cid:4) (cid:5)\n外側の根号が大きくなりすぎて2つの根号の縦間隔が空きすぎる，というご意見があります。対\n策は外側の根号に Y=textstyleをつけることです。emath.styでは，Y=textstyle=Ysqrt の省略形と\nして Y=tsqrt を用意しています。\n(cid:2) (cid:3)\nY=tsqrt (cid:13) √\n−→ 2+ 3\nY=[=Ytsqrt{2+=Ysqrt3}=Y]\n(cid:4) (cid:5)\n1.12 累乗の累乗 (ap)q\n累乗の累乗 (a^p)^q は，{(a^p)}^q と記述すると，(ap) q となり，2種の累乗 p と q のベース\nラインが異なります。高校の教科書などでは，これが揃っているものが多いようです。そのための\nコマンドが Y=dpower です。次の2つを比較してください。\nY=dpowerの効用\n${(a^p)}^q$ −→ (ap) q\n$Y=dpower{a}{p}{q}$ −→ (ap)q\n底 a が複雑になり，カッコを含むときは，外側のカッコの種類をY=dpower のオプション引数で\n指定することができます。\nY=dpowerのオプション引数\n(cid:15)(cid:11) (cid:12) (cid:16)\ny p q\n−→\n$Y=dpower[=Y{]{=Yleft(=Ybunsuu yx=Yright)}{p}{q}$\nx\n(cid:17)(cid:11) (cid:12) (cid:18)\ny p q\n−→\n$Y=dpower[[]{=Yleft(=Ybunsuu yx=Yright)}{p}{q}$\nx\n話が前後しますが，累乗の位置を気にされる方があります。次の3つを比較してください。\n11", "tags": []}
{"title": "Page 18", "content": "(cid:2) (cid:3)\n累乗の位置\n2x\n$2^x$ =YY= x\n2\n→\n$Y=displaystyle 2^x$ =YY= x\n2\n${2=Ymathstrut}^x$\n(cid:4) (cid:5)\n−−→\n(cid:2)\n1.13 ベクトル記号 a, AB\nLATEXで用意されている矢線付きのベクトル記号は Y=vec です。\nしかし，Y=vec{a}, =Yvec{b} などと並べたとき，矢線の高さが不揃いになります。その点を修正\nしたY=bekuを作りました。\n下の例で，矢線の高さにご注目ください。\nY=vecとY=bekuの比較\n$Y=vec{a}$, $=Yvec{b}$ −→(cid:2)a,(cid:2)b\n$Y=beku{a}$, $=Ybeku{b}$ −→(cid:2)a,(cid:2)b\n添字がついた場合です。\n添字付きベクトル(1)\n$Y=beku{a_n}$ −→ a(cid:2) n\n$Y=beku{a}_n$ −→(cid:2)an\n−→\n$Y=overrightarrow{=Ymathstrut a_n}$ −→ an\n上の3つのどれがお好みでしょうか。\n次は始点と終点を並べてその上に矢線を付ける表現です。\nLATEXでは，Y=overrightarrow を使いますが，これは数式モードの中でなければ使えません。\n$Y=overrightarrow{AB}$ とすると，AB が斜体になります。教科書では，点を表す記号は立体と\nなっています。その点を工夫したのがY=bekutoruコマンドです。\nY=bekutoru\n−−→\n$Y=overrightarrow{AB}$ −→ AB\n−→\n$Y=bekutoru{AB}$ −→ AB\n添字がつくと面倒になります。下の二つどちらがお好みでしょうか。\n添字付きベクトル(2)\n−−→\nY=bekutoru{AB$_n$} −→ ABn\n−→\n$Y=bekutoru{AB}_n$ −→ ABn\n矢線の高さを調整するコマンドが Y=bekutorusityuuです。デフォルトは\n12", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 19", "content": "Y=vrule height .9zh width =Yz@\nすなわち.9zhとなっています。\n(cid:2) (cid:3)\nY=bekutorusityuu\n−→\nY=bekutoru{OP}=YY= OP\n→ −→\nY=bekutorusityuu{=Yvphantom{OP}}% OP\nY=bekutoru{OP}\n(cid:4) (cid:5)\nすなわち，自然な高さでは矢印が文字にかかるのを嫌って，高くしています。\nY=beku についても，Y=bekusityuuで高さを変更できます。\n(cid:2) (cid:3)\nY=bekusityuu\nY=beku{a}=YY= (cid:2)a\n→\nY=bekusityuu{=Yvphantom{a}}% (cid:2)a\nY=beku{a}\n(cid:4) (cid:5)\nこちらのデフォルトは，Y=vphantom{b}としてあります。\nY=bekutoruにはアスタリスク付きのコマンドY=bekutoru*があります。これは後で述べるcaprm\n環境下で用いることを想定していますので，§8.1.6 (p.125)で解説します。\n1.13.1 鏃の形状 AB\n鏃の形状にご不満をお持ちの方が多いようです。それを変更する方法もあります。まずは，鏃を\n塗りつぶした三角形にする方法です。\n(cid:2) (cid:3)\n塗りつぶした鏃\nY=bekutoru{AB} −→\nAB\n→\nAB\nY=bekutorukata{fill}\nY=bekutoru{AB}\n(cid:4) (cid:5)\nすなわち，鏃の形状を変更するには，Y=bekutorukataコマンドを用います。ただし，このコマ\nンドはemath.styではなく，emathPh.sty, emathFx.sty で定義されています。\nさらに，塗りつぶした二等辺三角形に窪みをつけたい，というご要望もあります。\n(cid:2) (cid:3)\n窪みも\nY=bekutoru{AB} −→\nAB\n→\nAB\nY=bekutorukata<.25>{fill}\nY=bekutoru{AB}\n(cid:4) (cid:5)\nY=bekutorukataの引数は，上記のfillの他に4種類—cm, eu, tx, xy—あります。ただし，\ntxを使用するには，txfontsが必要です。また，xyを使用するには，Xy-picパッケージが必要です。\nさらに，emathFxをロードしておかねばなりません。具体的な実現方法については，sampleFx.tex\nをご覧ください。\n13", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 20", "content": "(cid:2) 1+x\n1.14 絶対値記号 a ，\n1−x\n1.14.1 Y=zettaiti\nベクトルの大きさを表すのにも使われる絶対値記号です。\nLATEXでは $|=Ybeku{b}|$としますが，矢印が絶対値記号の上に飛び出しています。これを修正\nするコマンド Y=zettaitiを用意しました。上下を比べてみてください。\n|...|とY=zettaitiの比較\n−→\n$|=Ybekutoru{AB}|$ −→ |AB|\n−→\nY=zettaiti{=Ybekutoru{AB}} −→ AB\nこの記号は中の式の高さにより伸縮します。\n絶対値記号の伸縮\n−→\nY=zettaiti{=Ybunsuu{1}{3}=Ybekutoru{AB}} −→ 1 AB\n3\n−→\nY=zettaiti{=Ybunsuu{m=Ybekutoru{OA}}{m+n}} −→ mOA\nm+n\nこのコマンドはベクトルに限らず一般の絶対値記号を表すことができます。\n|1−|x|| では，外側の絶対値記号と内側の絶対値記号が同じとなります。できれば外側の絶対値\n記号を大きくしたいものです。\n絶対値記号の伸縮オプション\n$|1-|x||$ −→ |1−|x||\n(cid:19) (cid:19)\n$Y=bigl|1-|x|=Ybigr|$ −→ (cid:19) 1−|x|(cid:19)\nY=zettaiti[1.5pt]{1-=Yzettaiti{x}} −→ 1− x\n3行目は外側のY=zettaitiコマンドのオプション引数に1.5ptを与えることで実現しています。\nこの数値だけ，標準の高さを上下それぞれ引き伸ばします。これは2行目のものとほぼ同じです。\nなお，Y=zettaiti の別名として，Y=EMabs も用いることができます。\n1.14.2 Y=emabs\nY=zettaitiは絶対値記号を付与する数式の高さ・深さを基準としていますから，上下不均等で\nす。したがって他の括弧記号と併記するとおかしなことになります。\n14", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 21", "content": "(cid:2) (cid:3)\nY=zettaiti\n$Y=zettaiti{%\nY=bunsuu{a_1}{1+=Ybunsuu{1}{n}}}$=YY=\na1\nだけをみているとよいのですが， 1\n1+\nY=[ Y=bunsuu1n=Yleft( n\nY=zettaiti{ だけ⎛をみているとよいのですが， ⎞\n→\nY=bunsuu{a_1}{1+=Ybunsuu{1}{n}}} 1 ⎝ a1 +···+ an ⎠\n+Y=cdots+ n 1+ 1 1+ n\nn n\nY=zettaiti{\nなどと，他の括弧記号と並べると\nY=bunsuu{a_n}{1+=Ybunsuu{n}{n}}}\nY=right) =Y]\nなどと，他の括弧記号と並べると\n(cid:4) (cid:5)\n上下不均等が目立ってしまいます。\nということで，上下均等な絶対値記号を表すコマンドY=emabsを用意しました。\n(cid:2) (cid:3)\nY=emabs\nY=[ Y=bunsuu1n=Yleft(\nY=emabs{ ⎛(cid:19) (cid:19) (cid:19) (cid:19)⎞\n(cid:19) (cid:19) (cid:19) (cid:19)\n+Y=\nY=\nc\nb\nd\nu\no\nn\nt\ns\ns\nu\n+\nu{a_1}{1+=Ybunsuu{1}{n}}}\n→ n\n1 ⎝ (cid:19) (cid:19)\n(cid:19) (cid:19)1+\na1\n1\n(cid:19) (cid:19)\n(cid:19) (cid:19)\n+···+ (cid:19) (cid:19)\n(cid:19) (cid:19)1+\nan\nn\n(cid:19) (cid:19)\n(cid:19) (cid:19)\n⎠\nn n\nY=emabs{\nY=bunsuu{a_n}{1+=Ybunsuu{n}{n}}}\nY=right) =Y]\n(cid:4) (cid:5)\n括弧記号とのバランスはよくなりましたが，絶対値記号の中で天が空きすぎである，というご批\n判があるでしょうね。これは，式表現を工夫して\n(cid:2) (cid:3)\nY=emabs\nY=[ Y=bunsuu1n=Yleft(\nY=emabs{\n(cid:3)(cid:19) (cid:19) (cid:19) (cid:19)(cid:4)\nY=bunsuu{a_1}{1+1/n}}\n→\n1 (cid:19) (cid:19)\n(cid:19)\na1 (cid:19) (cid:19) (cid:19)+···+ (cid:19) (cid:19)\n(cid:19)\nan (cid:19) (cid:19)\n(cid:19)\n+Y=cdots+ n 1+1/n 1+n/n\nY=emabs{\nY=bunsuu{a_n}{1+n/n}}\nY=right) =Y]\n(cid:4) (cid:5)\nなどとするのも一法でしょう。\n1.14.3 Y=vabs\n−→\n次に，ABなどベクトル記号に絶対値を付与することを考えてみます。Y=zettaitiを用いると\n15", "tags": []}
{"title": "Page 22", "content": "(cid:2) (cid:3)\nY=bekutoruにY=zettaiti\n$Y=zettaiti{=Ybekutoru{OP$_1$}}$\n−−→\nだけをみているとよいのですが，\nOP1 だけをみているとよいのです\nY=[ Y=bunsuu1n=Yleft(\nが， (cid:11) −−→ −−→ (cid:12)\nY=zettaiti{=Ybekutoru{OP$_1$}} → 1 OP1 +···+ OPn\n+Y=cdots+ n\nなどと，他の括弧記号と並べると\nY=zettaiti{=Ybekutoru{OP$_n$}}\nY=right) =Y]\nなどと，他の括弧記号と並べると\n(cid:4) (cid:5)\n上下不均等が目立ってしまいます。さりとて，Y=emabsでは\n(cid:2) (cid:3)\nY=bekutoruにY=emabs\nY=[ Y=bunsuu1n=Yleft(\nY=emabs{=Ybekutoru{OP$_1$}} → 1 (cid:11)(cid:19) (cid:19) (cid:19) − O − P → 1 (cid:19) (cid:19) (cid:19)+···+ (cid:19) (cid:19) (cid:19) − O − P → n (cid:19) (cid:19) (cid:19) (cid:12)\n+Y=cdots+ n\nY=emabs{=Ybekutoru{OP$_n$}}\nY=right) =Y]\n(cid:4) (cid:5)\n折衷案で\n(cid:2) (cid:3)\nY=bekutoruにY=absbeku\nY=def=Yabsbeku#1{=Yleft=Ylvert\nY=EMvphantom[.5ex]{#1}%\nY=smash{=Ybekutoru*{#1}}=Yright=Yrvert\nY=vphantom{=Ybekutoru*{#1}}}\n(cid:11)(cid:19)−−→(cid:19) (cid:19)−−→(cid:19)(cid:12)\nY=begin{caprm} → 1 (cid:19) OP1 (cid:19) +···+ (cid:19) OPn (cid:19)\nY=[ Y=bunsuu1n=Yleft( n\nY=absbeku{OP_1}\n+Y=cdots+\nY=absbeku{OP_n}\nY=right) =Y]\nY=end{caprm}\n(cid:4) (cid:5)\nいっそのこと，矢印は無視して\n(cid:2) 単純に‘|’ (cid:3)\nY=[ Y=bunsuu1n=Yleft(\n(cid:11)−−→ −−→(cid:12)\n|Y=bekutoru{OP$_1$}|\n→\n1 |OP1 |+···+|OPn |\n+Y=cdots+ n\n|Y=bekutoru{OP$_n$}|\nY=right) =Y]\n(cid:4) (cid:5)\n16", "tags": []}
{"title": "Page 23", "content": "1.14.4 絶対値記号のネスト\n絶対値記号の中に更に絶対値記号が入る場合，例えば次のような場合，外側の絶対値記号を大き\nくしたいことがあります。\n(cid:2) (cid:3)\n絶対値記号のネスト\n||a|−|b||\nY=[ ||a|-|b|| =Y]\n→ Y=emabsを用いると\nY=cmd{emabs}を用いると\n||a|−|b||\nY=[ Y=emabs{=Yemabs{a}-=Yemabs{b}} =Y]\n(cid:4) (cid:5)\n外側の絶対値記号を大きくするには，Y=emabsに[...]オプションを附加します。数値は適宜で\n(cid:2) (cid:3)\nY=emabsの[...]オプション (cid:19) (cid:19)\n(cid:19)|a|−|b|(cid:19)\n(cid:19) (cid:19)\nY=[ Y=emabs[1pt]{=Yemabs{a}-=Yemabs{b}} =Y] → (cid:19) (cid:19)\n(cid:19)|a|−|b|(cid:19)\nY=[ Y=emabs[2pt]{=Yemabs{a}-=Yemabs{b}} =Y]\n(cid:4) (cid:5)\nなどといった調子です。\nやっていることは，外側の絶対値記号の中身について，実際の高さ・深さそれぞれにオプション\n値を附加した支柱を立てています。\n1.15 ガウス記号 [x]\nxを超えない最大の整数を表すガウス記号を[x]とすると[x]となり，xとその左右の括弧の間\nが詰まりすぎています。それを修正したのがY=gaussです。\nこのコマンドは Y=ensuremath でくるんでありますから，地の文でも数式内でも使用することが\n出来ます。\n(cid:2) (cid:3)\nガウス記号\nY=gauss{x} は $x$ を [x] は x を超えない最大の整数を表します．\n超えない最大の整数を −→ 例えば\n[π]=3\n表します．例えば\nY=[=Ygauss{=Ypi}=3 =Y]\n(cid:4) (cid:5)\n(cid:3) (cid:4)\na b\n1.16 行列\nc d\n高校では，二次の正方行列が登場します。そこで二次の正方行列専用のコマンド Y=gyouretu を\n作りました。\nY=gyouretu\n(cid:3) (cid:4)\na b\nY=gyouretu{a}{b}{c}{d} −→\nc d\n(cid:3) (cid:4)\n1 0\n単位行列 Y=gyouretu1001 −→\n0 1\n17", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 24", "content": "Y=gyouretuでは，各列の要素は中央揃えに配置されます。これを右揃えにするには[r]オプショ\nンを用います。\n(cid:3) (cid:4)\n(cid:2) (cid:3) 12 −3\n配置オプション\n4 5\n(cid:3) (cid:4)\n$Y=gyouretu{12}{-3}{4}{5}$=YY= → 12 −3\n$Y=gyouretu[r]{12}{-3}{4}{5}$ 4 5\n(cid:4) (cid:5)\n2次の列ベクトルも良く登場します。\n正方行列と絡めて，\nY=retube\n(cid:3) (cid:4)\nx\nY=retube{x}{y} −→\ny\n(cid:3) (cid:4)(cid:3) (cid:4)\na b x\n$Y=gyouretu abcd=Y!=Y!=Yretube xy$ −→\nc d y\n今後は三次の正方行列も登場するでしょう。\nY=Gyouretu\n⎛ ⎞\na b c\nY=Gyouretu {a}{b}{c}{d}{e}{f}{g}{h}{i} −→ ⎝ d e f ⎠\ng h i\n⎛ ⎞\n0 0 0\n零行列 Y=Gyouretu000000000 −→ ⎝ 0 0 0 ⎠\n0 0 0\nまた，三次の列ベクトルは Y=Retube です。\n(cid:2) (cid:3)\n三次の列ベクトル\n$Y=Gyouretu001010100=Y!=Y!=YRetube xyz\n=Y=Retube zyx$\n(cid:4) (cid:5)\n⎛ ⎞⎛ ⎞ ⎛ ⎞\n0 0 1 x z\n⎝ ⎠⎝ ⎠ ⎝ ⎠\n−→ 0 1 0 y = y\n1 0 0 z x\n行ベクトルはY=gyoubeです。\n(cid:2) (cid:3)\nY=gyoube\nすべての実数$x$, $y$について\n$Y=gyoube xy=Ygyouretu{a}{5a-2}{2-a}{3a+2}=Yretube xy =Ygeqq 0$\nが成立するような実数$a$の値の範囲を求めよ。\nY=syutten{2004 福島医科大学}\n(cid:4) (cid:5)\n18", "tags": []}
{"title": "Page 25", "content": "(cid:3) (cid:4)(cid:3) (cid:4)\n(cid:5) (cid:2) a 5a−2 x\nすべての実数x, yについて x y (cid:4) 0 が成立するような\n2−a 3a+2 y\n→\n実数aの値の範囲を求めよ。 〔2004 福島医科大学〕\n一般の行列を表すには，Y=pgyouretuを用意してあります。列の区切りを‘,’, 行の区切りを‘;’で\n表します。\n(cid:2) (cid:3)\nY=pgyouretu\n(cid:3) (cid:4)\nY=pgyouretu{% 1 2 3\n→ 4 5 6\n1 , 2 , 3;\n4 , 5 , 6}\n(cid:4) (cid:5)\namsmath.styには，pmatrix環境があります。\n(cid:2) (cid:3)\npmatrix環境\n$\n(cid:3) (cid:4)\nY=begin{pmatrix}\n1 2 3\n1 & 2 & 3 Y=Y= → 4 5 6\n4 & 5 & 6\nY=end{pmatrix}\n$\n(cid:4) (cid:5)\n1.17 複素数 x+yi\n複素数x+yiにおいて，yとiの間を少し空けたい，という場合のためにY=Cnumを用意しました。\n(cid:2) (cid:3)\nY=Cnum\n2−3i, x+yi\n$2-3i$, $x+yi$=YY= → 2−3i, x+yi\n$Y=Cnum{2}-{3}$, $=YCnum{x}+{y}$\n(cid:4) (cid:5)\n1.18 共役複素数 z\n共役複素数を表すY=kyouyakuです。\nY=kyouyaku\nY=kyouyaku{z=Ycdot w}==Ykyouyaku z=Ycdot=Ykyouyaku w−→z·w=z·w\n文字と横棒の間隔はY=mathstrutで支柱を立てています。これを変更するオプションが[..]です。\n(cid:2) (cid:3)\nY=kyouyaku[..]\na\n$Y=kyouyaku{a}$=YY= →\na\n$Y=kyouyaku[=Yvphantom a]{a}$\n(cid:4) (cid:5)\nなお，Y=kyouyakuの別名としてY=conjも使えます。\n19", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 26", "content": "広範囲で支柱の高さを変更するにはY=conjstrutを用いることもできます。\n(cid:2) (cid:3)\nY=conjstrut\nY=conjstrut{=Yvphantom{b}} → b=a\n$Y=conj b==Yconj a$\n(cid:4) (cid:5)\n1.19 極形式 cosθ+isinθ\n複素数の極形式を表現するコマンド Y=kyokukeisiki です。[..]オプションで絶対値を指定す\nることもできます。\nなお，Y=kyokukeisikiと同値なコマンド Y=polar も使用できます。\nY=kyoukukeisiki\n$Y=kyokukeisiki{=Ytheta}$ −→ cosθ+isinθ\n$Y=polar{60=YDeg}$ −→ cos60◦+isin60◦\n$Y=kyokukeisiki[r]{=Ytheta}$ −→ r(cosθ+isinθ)\n$Y=kyokukeisiki[r][=Y{]{(-=Ytheta)}$ −→ r{cos(−θ)+isin(−θ)}\n共役なものをあらわすには，<c>オプションをつけます。\n(cid:2) (cid:3)\nY=polar<c>\nr(cosθ+isinθ)\n$Y=polar[r]{=Ytheta}$=YY= → r(cosθ−isinθ)\n$Y=polar<c>[r]{=Ytheta}$\n(cid:4) (cid:5)\n20", "tags": []}
{"title": "Page 27", "content": "2 幾何\n2.1 度の記号(小さな丸) 60◦\n角度の単位，例えば60度を表すときの記号です。 下の3種類，どれがお好みでしょうか。\nY=Deg =YDEG =Ydegree\n$60=YDeg$ −→ 60◦\n$60=YDEG$ −→ 60o\n$60=Ydegree$ −→ 60˚\n2.2 角, 三角形 ∠A, (cid:4)PQR\n角はY=angle,三角形はY=triangleです。ただし，$Y=triangle{ABC}$などと数式環境で使うと，\nABC が斜体になってしまいます。教科書などでは，点を表す記号は立体という習慣です。そこで\nY=kaku, Y=sankaku\n$Y=kaku{ABC}<90=YDeg$ −→ ∠ABC<90◦\n$Y=sankaku{ABC} =Yequiv =Ysankaku{DEF}$ −→ (cid:4)ABC≡(cid:4)DEF\n2.3 平行とその否定 //, /\\/\nLATEXには平行記号を表すコマンドY=parallelが，またAMSFontsには，その否定を表すコマン\nドY=nparallel があります。しかし，日本で使われている記号とは違っています。そこで Y=heikou\nと Y=nheikou を定めました。\n次の上段と下段を比較してください。\nY=heikouとY=nheikou\n$l Y=parallel m$ −→ l(cid:9)m $l Y=nparallel m$ −→ l∦m\n$l Y=heikou m$ −→ l//m $l Y=nheikou m$ −→ l/\\/m\n2.4 相似の記号 ∽\n相似の記号はLATEXには用意されていません。ここでは全角の記号を使ってしまおうという，無\n精な案です。\nY=souzi\n$Y=sankaku{ABC} =Ysouzi =Ysankaku{PQR}$ −→ (cid:4)ABC∽(cid:4)PQR\nこの記号は，文字サイズの変更に追随するようになっています。Y=Hugeとすると\n(cid:2) (cid:3)\nY=Huge\n(cid:4)ABC∽(cid:4)PQR\nY=Huge$=Ysankaku{ABC} →\nY=souzi =Ysankaku{PQR}$\n(cid:4) (cid:5)\n21", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 28", "content": "2.5 円弧を表す記号\n(cid:5)\nAB\n次は円弧を表すお椀を伏せたような記号です。\nY=ko\n$Y=ko{AB}:=Yko{BC}=3:4$ −→\n(cid:5)\nAB:\n(cid:5)\nBC=3:4\n$Y=ko{APB}$ −→\n(cid:11)\nAPB\nY=ko{APQB} −→\n(cid:3)\nAPQB\nY=ko{A$_1$B$_1$} −→\n(cid:11)\nA1B1\nY=ko{P$_n$P$_{n+1}$} −→\n(cid:3)\nPnPn+1\n最後の\n(cid:3)\nPnPn+1 では，弧の記号が P の添字につられて右に寄ってしまいます。Y=ko のオプショ\nン引数で，弧の記号の位置を調整することができます。次の二つを比べてください。\n位置修正\nY=ko{P$_n$P$_{n+1}$} −→\n(cid:3)\nPnPn+1\nY=ko[.6em]{P$_n$P$_{n+1}$} −→\n(cid:3)\nPnPn+1\nコマンドY=koの引数はテキストモードとしてあります。したがって添え字をつけたいときは\n(cid:2) (cid:3)\nY=ko\n→\nY=ko{A$_1$A$_2$}\n(cid:4) (cid:5)\n(cid:11)\nA1A2\nと，添え字部分を数式モードにする必要があります。数列がらみの問題では，ちょっと煩わしいの\nで，引数が数式モードに入るY=ko*もあります。\n(cid:2) (cid:3)\nY=ko*\nY=begin{caprm}\n→\nY=ko*{A_1A_2}\nY=end{caprm}\n(cid:4) (cid:5)\n(cid:11)\nA1A2\nただし，英大文字をローマン体とするには，caprm環境などを用いる必要があります。\n2.6 平行四辺形の記号\n平行四辺形を表す記号です。picture 環境で表現する方法をトニイさんが FPRINT で発表され\nました。ここで使うことを認めていただきましたので，それをこのマクロ集に入れさせていただき\nました。\n有り難うございます。＞ トニイさん。\nフォントサイズを大き目にします。\nY=shikaku\nABCD\n平行四辺形Y=shikaku{}ABCD −→ 平行四辺形\n22", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 29", "content": "それでも平行四辺形の記号がやや大き目です。小さくできれば良いのですが，LATEXの picture\n環境の制約で不可能です。そこで，epic というパッケージの助けを借りて小さくしたのが，私の修\n正案です。\nY=heikousihenkei\n平行四辺形 Y=heikousihenkei{}ABCD −→ 平行四辺形 ABCD\n3 解析\n(cid:6)n\n3.1 数列記号 {a n }, a k\nk=1\nLATEX では，数列 {an } を書くには，$Y={a_n=Y}$ としますが，わずらわしいので，コマンド\nY=suuretu を作りました。次のように本文の中で使うことが多いでしょう。\nY=suuretu\n等比数列 Y=suuretu{a_n} が・・・ −→ 等比数列 {an } が・・・\n数列の和記号も良く登場します。Y=displaystyle=Ysum のシグマ記号は少し大きいようです。少\nし小さ目にしてみました。\nY=retuwa\n(cid:10)n\n$Y=displaystyle=Ysum_{k=1}^{n}{k(k+1)}$ −→ k(k+1)\nk=1\n(cid:6)n\n$Y=retuwa{k=1}{n}k(k+1)$ −→ k(k+1)\nk=1\n上の話は本文中のことです。別行立ての場合は大きい方がよいでしょう。この場合も小さくする\nには，Y=tretuwaを用います。\n(cid:2) (cid:3)\nY=tretuwa\n(cid:10)n\nY=begin{gather*} k 2\nY=retuwa{k=1}{n}k^2=YY= → k=1\n(cid:6)n\nY=tretuwa{k=1}{n}k^2 k 2\nk=1\nY=end{gather*}\n(cid:4) (cid:5)\n3.2 極限 lima n\nn→∞\nY=displaystyle を毎回書くのは面倒だというだけです。Y=dfrac と同じねらいでしょう。\nY=dlim\n$Y=dlim{x =Yto Y=infty}e^{-x}=0$ −→ lim e−x =0\nx→∞\n23", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 30", "content": "3.3 階差数列 1 2 4 7 11 ···\n1 2 3 4 ···\n階差数列の表現，あるいは数列の上下に，規則性を示すための矢印を配置する機能はemathPh.sty\nに用意されています。sampleP.texをご覧ください。\n(cid:4)(cid:2) (cid:5)\n3.4 増減・凹凸 (cid:2)(cid:2) (cid:3)(cid:3) (cid:4)\n増減表を作るときの矢印は，LATEXに\nY=searrow, =Ynearrow\nが用意されています。\nx −2 ··· −1 ··· 1 ··· 2\ny(cid:5) − 0 + 0 −\ny (cid:10) 極小 (cid:11) 極大 (cid:10)\n凹凸を表す記号は，集合の演算子\nY=cup, =Ycap\nが流用できます。\nx −2 ··· 0 ··· 2\ny(cid:5)(cid:5) + 0 −\ny ∪ 変曲点 ∩\nY=smile, =Yfrown\nの方が良いという方もいらっしゃるかもしれません。\nx −2 ··· 0 ··· 2\ny(cid:5)(cid:5) + 0 −\ny (cid:5) 変曲点 (cid:6)\n増減と凹凸をいっしょにまとめた表を作るときに必要な矢印付きの四分円はLATEX, AMSFontsで\nはみかけません。picture 環境で作ってみました。\nY=?e?arrow\nY=nevarrow −→ (cid:3)(cid:3)\n(cid:2)(cid:4)\nY=necarrow −→\nY=sevarrow −→(cid:2)(cid:2)\n(cid:5)\nY=secarrow −→ (cid:4)\nne(se) と arrow の間の v, c は\nv: convex\nc: concave\nからとりました。\nこれらのコマンドを用いると増減表は下のようになります。\n24", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 31", "content": "Y=?e?arrow\nx −2 ··· −1 ··· 0 ··· 1 ··· 2\ny(cid:5) − 0 + 0 −\ny(cid:5)(cid:5) + 0 −\n(cid:2)(cid:4) (cid:5)\ny (cid:2)(cid:2) 極小 (cid:3)(cid:3) 変曲点 極大 (cid:4)\n増減表で，微分不能のところには斜線を引いたりしたいことがあります。emathT.styでは，hyou\n環境を定義して，それを可能としています。emathP.styの説明書 sampleP.tex をご覧ください。\n(cid:7)\nb\n3.5 積分記号 f(x)dx\na\n積分記号も Y=dfrac と同じ意味合いです。\nY=dint\n(cid:7)\nb\n$Y=dint{a}{b}f(x)=Y,dx$ −→ f(x)dx\na\n(cid:8) (cid:9)\nπ\n3.6 定積分 −cosx\n0\n定積分の計算で登場する大括弧でくくった記号ですが，大括弧を大きくするため，最低でも分数\n式の高さ深さを加味しています。\n(cid:2) (cid:3)\nY=teisekibun (cid:7)\nπ\n$Y=dint{0}{=Ypi}=Ysin x=Y,dx\nsinxdx=[−cosx]π\n0\n(cid:7)0 (cid:8) (cid:9)\n=[-=Ycos x]_0^{=Ypi}$=YY= → π π\nsinxdx= −cosx\n$Y=dint{0}{=Ypi}=Ysin x=Y,dx\n0 0\n=Y=teisekibun{-=Ycos x}{0}{=Ypi}$=YY=\n(cid:4) (cid:5)\n3.7 デルタ記号\n変分を表す記号デルタはイタリック体のギリシャ文字が使用されますが，これをもっと傾けたい\nというための記号です。\n(cid:2) (cid:3)\nY=Deruta\nΔ\n$Y=varDelta$=YY= →\n$Y=Deruta$\n(cid:4) (cid:5)\nただし，この記号はemathPh.styで定義されています。emath.styにもありますが，コーナーが\nぎざぎざになっています。\n25", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 32", "content": "4 確率\n4.1 集合の記号 {x| 0 < x < 1}\n集合を表す記号として，Y=syuugouがあります。\n(cid:2) (cid:3)\nY=syuugou\n{1,2,3}\nY=syuugou{1,2,3}=YY= → {x| 0<x<1}\nY=syuugou[x]{0<x<1}\n(cid:4) (cid:5)\nY=syuugou#1は，#1に要素を列挙します。\nY=syuugou[#1]#2は，#2に条件を記述します。\n4.1.1 Y=niの否定 (cid:5)/\n次の記号は，標準的なLATEXに用意されています。\n(cid:2) (cid:3)\nY=inなど\nY=begin{gather*}\na∈A\na Y=in A=YY=\n→ a∈/ A\na Y=notin A=YY=\nA(cid:5)a\nA Y=ni a\nY=end{gather*}\n(cid:4) (cid:5)\nしかし，Y=niの否定記号がありません。（txfontsには用意されています。）そこで，emathでは\nY=notniを用意しました。\n(cid:2) (cid:3)\nY=notni\n→ A(cid:5)/ a\nY=[ A Y=notni a =Y]\n(cid:4) (cid:5)\n4.2 階乗記号 n!\n階乗を表す記号は‘!’ですが，前後に少し空白を附加したものがY=kaizyouです。比較してみて\nください。\n(cid:2) (cid:3)\nY=kaizyou\n5!=120\n$5!=120$=YY= →\n5! =120\n$5=Ykaizyou=120$\n(cid:4) (cid:5)\n4.3 順列・組合せの記号 n C r n P r n H r n Π r\n組合せの記号は AMS-LATEXで Y=binom などが用意されていますが，列ベクトルのような記号\nです。\n26", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 33", "content": "Y=kumiawase, Y=zyunretu\n(cid:3) (cid:4)\nn\n$Y=displaystyle=Ybinom{n}{2}$ −→\n2\n$Y=kumiawase{n}{2}$ −→ nC2\nY=kumiawase{5}{3} −→ 5C3\n$Y=zyunretu{n}{2}$ −→ nP2\n重複順列，重複組合せはそれぞれY=Zyunretu, Y=Kumiawaseです。\n(cid:2) (cid:3)\n重複順列，重複組合せ\nnΠr\nY=Zyunretu{n}{r}=YY= →\nnHr\nY=Kumiawase{n}{r}\n(cid:4) (cid:5)\n27", "tags": []}
{"title": "Page 34", "content": "5 数式番号\n5.1 丸付き文字\n5.1.1 丸付き文字 (cid:6)1 (cid:6)A (cid:6) ア\n式の番号などに丸付き数字がよく使われます。\nLATEX2e には，Y=textcircledというコマンドがあります。\n(cid:2) (cid:3)\nY=textcircled\n→ (cid:6)1, (cid:6)2 を連立させて\nY=textcircled{1}, =Ytextcircled{2} を連立させて\n(cid:4) (cid:5)\nしかし，丸記号と中の数字とのバランスが悪いですね。そこで emath.sty では，中の数字を\nY=scriptstyleにしたY=maruというコマンドを用意しました。\n(cid:2) (cid:3)\nY=maru\n→\n(cid:6)1, (cid:6)2\nを連立させて\nY=maru{1}, =Ymaru{2} を連立させて\n(cid:4) (cid:5)\n中の数字を小さくしすぎたようですが，数字が2桁になると\n(cid:2) (cid:3)\n2桁の番号\n→\n(cid:6)19, (cid:6)20\nを連立させて\nY=maru{19}, =Ymaru{20} を連立させて\n(cid:4) (cid:5)\n中の数字が外枠にかかってしまいます。さて，どうしましょうか。\n対策その1は，中の数字をY=resizeboxで横幅を1zwに圧縮しよう，というのが Y=zwmaruです。\n(cid:2) (cid:3)\nY=zwmaru\n→\n(cid:6)19, (cid:6)20\nを連立させて\nY=zwmaru{19}, =Yzwmaru{20} を連立させて\n(cid:4) (cid:5)\n対策その2は，逆に外枠の○を大きくしよう，という行きかたです。\nifsymフォントに大き目の○が用意されています。\nただし，このフォントはスタンダードなインストールでは，インストールされていませんから，\nここで使用するのは遠慮しておきます。サンプルは emath のホームページ，目次から\nemath 講座\nリファレンス編\nY=maru\nとたどってください。\n文字サイズはY=normalsizeのままで○を大きくするには，○をpicture環境で描画したY=emPmaru\nがemathPh.styで定義されています。\n(cid:2) (cid:3)\nY=emPmaru\n→ 19, 20 を連立させて\nY=emPmaru{19}, =YemPmaru{20} を連立させて\n(cid:4) (cid:5)\n対策その3は，独自にデザインされたフォントを探してくる方法です。その一つにpifontがあり\nます。下のリストをタイプセットするには，emathFxを[pzd] オプションつきでロードしておく\n必要があります。\n28", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "図形描画", "数式描画", "環境構築", "関数"]}
{"title": "Page 35", "content": "(cid:2) (cid:3)\nY=pzdmaru\n→ ➈ , ➉ を連立させて\nY=pzdmaru{9}, =Ypzdmaru{10} を連立させて\n(cid:4) (cid:5)\nただし，残念ながら10までしか用意されていません。もう少し大きな数値まで用意されている\nものにgoフォントがあります。このフォントは，囲碁の棋譜を表示するために作成されたもので，\n252まで用意されています。\nこのフォントもスタンダードなインストールでは，インストールされていませんから，上記emath\n講座をご参照ください。\n最後に，utfパッケージを用いる方法です。ただし，この方法は dvi-ware & OS に依存します。\nやはり，ここにはサンプルを載せられませんから，上記 emath講座をご参照願います。\n注 ベースライン\nY=maruで囲まれた文字は，その行のベースラインから少し上に上がっています。これを，一\n致させるコマンドがY=bmaruです。次の例では，ベースラインを赤で引いています。\n(cid:2) (cid:3)\nY=bmaru\nY=begin{picture}(0,0)\nY=put(0,0){=Ycolor{red}=Yline(1,0){50}}\nY=end{picture}\nY=maru{1}\n(cid:6)1\n→ (cid:6)1\nY=begin{picture}(0,0)\nY=put(0,0){=Ycolor{red}=Yline(1,0){50}}\nY=end{picture}\nY=bmaru{1}\n(cid:4) (cid:5)\nY=maruに代えて，Y=bmaruを使いたければ\nY=let=Ymaru=Ybmaru\nを宣言します。\n5.1.2 白黒反転の丸付き文字 1 A ア\n白黒反転の丸付き文字はY=kmaruコマンドです。ただし，このコマンドはcolorパッケージを必\n要とします。emathPhなどemathP系のパッケージをロードする場合は自動的にcolorも読み込ま\nれます。\n(cid:2) (cid:3)\nY=kmaru\nY=kmaru{1}\n1\n→ あ\nY=kmaru{あ}\nア\nY=kmaru{=Ytextgt{ア}}\n(cid:4) (cid:5)\n29", "tags": ["アニメーション", "インストール", "上級者向け", "初心者向け", "環境構築"]}
{"title": "Page 36", "content": "番号付けに使ってみましょう。\n(cid:2) (cid:3)\nenumerate 環境に適用\nY=def=Ykanaban#1{=Ykmaru{=Ytextgt{#1}}}\nY=begin{enumerate}[=Yprotect=Yexpandafter=Ykanaban ア]\nY=item あああああ\nY=item いいいいい\nY=item ううううう\nY=end{enumerate}\n(cid:4) (cid:5)\nア あああああ\n→ イ いいいいい\nウ ううううう\n5.1.3 縦長の丸付き文字 1 A\n縦長の○も使用できます。\n(cid:6) (cid:7)\n{Y=ttfamily\nY=vspace*{-.5=Ybaselineskip}\nY=begin{edaenumerate}<5>[=Yprotect=Yexpandafter=Ynagamaru 1]\nY=setcurrentenum{-1}%\nY=item +\nY=item -\nY=item{}*\nY=item /\nY=item =\nY=item{}<>\nY=item >\nY=item{}<\nY=item >=\nY=item{}<=\nY=end{edaenumerate}\n}%\n(cid:8) (cid:9)\n0 + 1 - 2 * 3 / 4 =\n−→\n5 <> 6 > 7 < 8 >= 9 <=\n白黒反転はY=knagamaruです。上の例をY=knagamaruに変更すると：\n30", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 37", "content": "0 + 1 - 2 * 3 / 4 =\n5 <> 6 > 7 < 8 >= 9 <=\n5.1.4 横長の丸付き文字 1 A\n横長の○は，Y=ynagamaruです。\n0 + 1 - 2 * 3 / 4 =\n5 <> 6 > 7 < 8 >= 9 <=\nその白黒反転はY=kynagamaruです。\n0 + 1 - 2 * 3 / 4 =\n5 <> 6 > 7 < 8 >= 9 <=\n5.1.5 ○のサイズ変更\n○の中に桁数の多いものを入れたいときなど，○のサイズを変更するには\nY=nagamaruyokoHankei, Y=nagamarutateHankei\nを用います。\n(cid:6) (cid:7)\n{%\nY=nagamarutateHankei{20ex}\n−→ 234\nY=nagamaruyokoHankei{30ex}\nY=nagamaru{234}\n}%\n(cid:8) (cid:9)\nY=ynagamaruは\nY=nagamarutateHankei{14ex}\nY=nagamaruyokoHankei{21ex}\nとしてあります。Y=ynagamaruについては，この値が固定されています。変更したいときは，\nY=ynagamaruではなく，Y=nagamaru\nを用います。\n31", "tags": []}
{"title": "Page 38", "content": "5.2 数式番号のフォーマット\n複数行の式を並べて式に番号を付ける際，LATEXでは\n(1),(2),(3),...\nのようにカッコ付きの番号が振られます。これに対して，われらの日常環境では丸付きの番号を振\nることが多いようです。\nこの機能は，amsmath パッケージを前提とします。さらにその一部を書き換えていますので，\nパッケージの読み込み順序が問題となります。amsmath を読み込んだ後に emath を読み込んでく\nださい。\n数式番号に丸囲い数字\nY=begin{align}\ny&=x =Ylabel{eq:1}=YY=\ny&=x^2 =Ylabel{eq:2} y =x ···················· (cid:6)1\nY=end{align} −→ y =x 2 ···················· (cid:6)2\nY=eqref{eq:1}を (cid:6)1を (cid:6)2に代入して\nY=eqref{eq:2}に\n代入して\nリーダー罫が長くて数式とダブるときは，Y=preEqlabel{$=Ycdots=Ycdots$} などとして，リー\nダー罫の長さを短くすることができます。\nY=preEqlabel\nY=preEqlabel{$=Ycdots=Ycdots$}%\nY=begin{align}\ny&=x =YY= y =x ······(cid:6)3\n−→\ny&=x^2\ny =x\n2 ······(cid:6)4\nY=end{align}\nまた，fleqn オプションを付けているときは，数式が短いと数式と式番号の間が長くなりますか\nら，jquote環境で右マージンを設定するのも一法です。\n右マージン\nY=begin{jquote}(0zw)(4zw)\nY=begin{align}\ny =x\n······(cid:6)5\ny&=x =YY=\n−→ y =x 2 ······(cid:6)6\ny&=x^2\nY=end{align}\nY=end{jquote}\njquote環境については，126ページをご覧ください。\nあるいは，逆に Y=mathindent で，数式を右に寄せるのもありましょう。\n32", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "外部連携", "数式描画", "環境構築"]}
{"title": "Page 39", "content": "Y=mathindent\nY=mathindent=6zw\nY=begin{align}\ny&=x =YY= −→ y =x\n······(cid:6)7\ny&=x^2 y =x\n2 ······(cid:6)8\nY=end{align}\nY=preEqlabel{} とすれば，リーダー罫をつけないこともできます。\nリーダー罫なし\nY=preEqlabel{}%\nY=begin{align}\ny =x\n(cid:6)9\ny&=x =YY= −→\ny =x\n2 (cid:6)10\ny&=x^2\nY=end{align}\nなお，数式番号をデフォルトの\n(1),(2),(3),....\nに戻したければ，\nY=renewcommand{=Ytagform}[1]{(#1)}%\nY=preEqlabel{}%\nとします。これをまとめて処理するY=resettagformコマンドもあります。\n(cid:2) (cid:3)\n数式番号の形式をデフォルトに戻す。\nY=resettagform\nY=begin{align} y =x (11)\n→\ny&=x =YY= y =x 2 (12)\ny&=x^2\nY=end{align}\n(cid:4) (cid:5)\n5.3 数式番号のリセット\nデフォルトでは，数式番号は1つの文書で通し番号となります。これを変更するにはY=setcounter\nを用いるのが普通です。\n(cid:2) (cid:3)\n数式番号の変更\nY=setcounter{equation}{10}\nY=begin{align} y =x ···················· (cid:6)11\n→\ny&=x =YY= y =x 2 ···················· (cid:6)12\ny&=x^2\nY=end{align}\n(cid:4) (cid:5)\n33", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 40", "content": "Y=setcounterで設定した値（上の例では10）の次の番号から数式に付与されていきます。\n特に数式番号を1から振りなおすにはY=setcounter{equation}{0} とすることになりますが，\nよく使いますのでemathでは，Y=resetcounterというコマンドを作っています。\n(cid:2) (cid:3)\n数式番号の初期化\nY=resetcounter{equation}\nY=begin{align} y =x ···················· (cid:6)1\n→\ny&=x =YY= y =x 2 ···················· (cid:6)2\ny&=x^2\nY=end{align}\n(cid:4) (cid:5)\nこのコマンドは，カウンタの親子関係を作るのが主目的で，数学の問題集を作るときなど，数式\n番号は大問ごとにリセットすることが多いでしょう。\nこのようなときは\n(cid:2) (cid:3)\nカウンタの親子関係\nY=resetcounter{equation}[enumi]\nY=begin{enumerate}[問題1.~]\nY=item ああああああああああああ\n問題1. ああああああああああああ\nY=begin{align}\ny =x\n······(cid:6)1\ny&=x =YY=\ny =x\n2 ······(cid:6)2\ny&=x^2\n→\nY=end{align} 問題2. いいいいいいいいいいいい\nY=item いいいいいいいいいいいい x 2 +y 2 =1 ······(cid:6)1\nY=begin{gather} x+y =1 ······(cid:6)2\nx^2+y^2=1=YY=\nx+y=1\nY=end{gather}\nY=end{enumerate}\n(cid:4) (cid:5)\n冒頭の1行は，enumi カウンタが更新されるたびに，equation カウンタを初期化せよ，という意\n味です。Y=resetcounterの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nカウンタ値のリセット\nY=resetcounter{foo} カウンタ foo の値を初期化します．\nカウンタに親子関係を設定する．\nY=resetcounter{foo}[FOO] FOO の値が更新されると，foo は初期化されます．\n34", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 41", "content": "5.4 連立方程式\nAM (cid:24) S-LATEXで連立方程式を記述するのに，cases 環境を使う方法があります。\na+b=2\n···················· (cid:6)1\na−b=0\nなどという具合です。ただ，残念ながら align 環境の中に記述しても数式番号は，連立方程式全体\nに対して１つだけしか発行されません。連立方程式それぞれに番号が欲しいことがあります。\nそのためには，cases.styで定義されているnumcases環境を用います。\n(cid:2) (cid:3)\nnumcases環境\nY=preEqlabel{=YCdots=YCdots}\nY=begin{numcases}{} (cid:25)\na+b=3 ……\n(cid:6)2\na+b=3 =Ylabel{eq:a}=YY=\n→ a−b=1 …… (cid:6)3\na-b=1 =Ylabel{eq:b}\n(cid:6)2\n+\n(cid:6)3\nから 2a=4 ゆえに a=2\nY=end{numcases}\n$Y=eqref{eq:a}+=Yeqref{eq:b}$\nから $2a=4$ ゆえに $a=2$\n(cid:4) (cid:5)\nnumcases環境の書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=begin{numcases}{括弧の左側に来る数式}\n数式1 & 説明1 Y=Y=\n数式2 & 説明2 Y=Y=\n...\nY=end{numcases}\nこの機能をフルに用いた例です。\n(cid:2) (cid:3)\nnumcases環境\nY=resettagform\n(cid:25)\nY=begin{numcases}{|x|=} x (x(cid:4)0)のとき (4)\n→\n|x|=\nx & $(xY=geqq 0)$のときY=Y= −x (x<0)のとき (5)\n-x & $(x<0)$のとき\nY=end{numcases}\n(cid:4) (cid:5)\n(注 1 ) cases.styとamsmath.styとで衝突する部分がありますから，emath.styよりも後でcases.sty\nを読み込む必要があります。\n(注 2 ) cases.styのバージョンによっては，エラーが発生することがあります。この節での記述は\ncases.sty 2002/05/02 ver 2.5\nを前提としています。\n35", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 42", "content": "(注 3 ) emathには，Y=renrituというコマンドもありますが，numcasesの方が一般的ですから，\nY=renrituはお蔵入りとします。\n5.5 本文中の連立方程式に数式番号\n連立方程式に数式番号を振るY=renrituは，別行立て数式となります。cases環境とY=houteisiki\nを併用して，本文中の連立方程式にも数式番号を振ることができます。\n(cid:2) (cid:3)\n本文中の連立方程式\n連立方程式$Y=begin{cases}\n2x+3y=-1 & =Yhouteisiki{=Ylabel{emcases1}}=YY=\n3x-2y=5 & =Yhouteisiki{=Ylabel{emcases2}}\nY=end{cases}$を解け。\n(cid:4) (cid:5)\n(cid:24)\n2x+3y =−1 ······· (cid:6)1\n−→ 連立方程式 を解け。\n3x−2y =5 ······· (cid:6)2\nこれを見ると，本文中では連立記号というか左括弧が大きく感じられます。それを修正したemcases\n環境を用意しました。\n(cid:2) (cid:3)\nemcases環境\n連立方程式$Y=begin{emcases}\n2x+3y=-1 & =Yhouteisiki{=Ylabel{emcases3}}=YY=\n3x-2y=5 & =Yhouteisiki{=Ylabel{emcases4}}\nY=end{emcases}$を解け。\n(cid:4) (cid:5)\n(cid:24)\n2x+3y =−1 ······· (cid:6)3\n−→ 連立方程式 を解け。\n3x−2y =5 ······· (cid:6)4\nemcases環境には，オプションが2種類あります。\nオプションその1は括弧を右につけるためのもので，次のように使います。\n(cid:2) (cid:3)\nemcases環境\n連立方程式Y=eqref{emcases3}, =Yeqref{emcases4}を解くと，\n$Y=begin{emcases}[r]\nx=1=YY= y=-1\nY=end{emcases}$=Ykotae\n(cid:4) (cid:5)\n(cid:26)\nx=1\n−→ 連立方程式\n(cid:6)3, (cid:6)4を解くと，\n……（答）\ny =−1\n第2のオプションはcases環境に内包されているarray環境の引数を変更します。デフォルトで\nは，@{}l@{=Yquad}l@{}となっており，方程式と数式番号の間に，Y=quadによる空白が入ります。\nこれを取り除いて\n36", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 43", "content": "(cid:2) (cid:3)\narray環境の引数指定\n連立方程式$Y=begin{emcases}[l][@{}l@{}l@{}]\n2x+3y=-1 & =Yhouteisiki{=Ylabel{emcases5}}=YY=\n3x-2y=5 & =Yhouteisiki{=Ylabel{emcases6}}\nY=end{emcases}$を解け。\n(cid:4) (cid:5)\n(cid:24)\n2x+3y =−1 ······· (cid:6)5\n−→ 連立方程式 を解け。\n3x−2y =5 ······· (cid:6)6\nもう一段，括弧記号を小さくするのが Y=baaiwakeコマンドです。\n(cid:2) (cid:3)\nY=baaiwake\n連立方程式\n$Y=baaiwake{2x+3y=-1 & =Yhouteisiki{=Ylabel{emcases7}}=Ycr\n3x-2y=5 & =Yhouteisiki{=Ylabel{emcases8}}=Ycr}$を解け。\n(cid:4) (cid:5)\n(cid:25)\n2x+3y =−1 ······· (cid:6)7\n−→ 連立方程式 を解け。\n3x−2y =5 ······· (cid:6)8\n5.6 ダッシュ付きの数式番号 (cid:6) 1 (cid:5)\n数式番号にダッシュ付きの丸付き数字を使用する方法です。\n(cid:2) (cid:3)\nダッシュ付き数式番号\n{Y=preEqlabel{$=Ycdots$}\nY=renritu{%\n&x+2y=3 =Ylabel{Ed-1}=YY=\n(cid:25)\n& 2x-y=1 =Ylabel{Ed-2}}\nx+2y =3\n···(cid:6)1\nY=eqref{Ed-1}より 2x−y =1 ···(cid:6)2\nY=begin{equation} (cid:6)1より\nx=3-2y =Ymarudashtag{Ed-1} x=3−2y ···(cid:6)1(cid:5)\nY=end{equation} −→ (cid:6)2に代入して\nY=eqref{Ed-2}に代入して 2(3−2y)−y =1\nY=begin{align*}\nすなわち\n&2(3-2y)-y=1=YY=\ny =1\nY=intertext{ すなわち }\n&y=1\n(cid:6)1 (cid:5)\nに代入して x=1\nY=end{align*}\nY=marudashref{Ed-1}\nに代入して $x=1$\n}\n(cid:4) (cid:5)\nのように，ダッシュのつかない式へのラベルを用いて\n37", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 44", "content": "Y=marudashtag でダッシュ付き番号をつけ，\nY=marudashref で参照します。\n本文中の数式に対してダッシュをつけるには Y=houteisiki のオプション引数に Y=marudashtag\nを記述します。\n(cid:2) (cid:3)\n本文中の数式へのダッシュ付き数式番号\nY=houteisiki{x+2y=1=Ylabel{Ed-3}}を\nY=houteisiki[=Ymarudashtag{Ed-3}]{x=1-2y}\nと変形して\n(cid:4) (cid:5)\n−→ x+2y =1 ······· (cid:6)3をx=1−2y ······· (cid:6)3(cid:5) と変形して\n5.7 align*環境で数式番号\nalign*, gather*環境など数式番号を付けない環境において，特定の式だけは数式番号を付与した\nいときのためにY=atagコマンドを用意しました。\n(cid:2) (cid:3)\nY=atag\nY=begin{gather*}\n|z−3i|2 =4|z|2\n|z-3i|^2=4|z|^2=YY= (z−3i)(z+3i)=4zz\n(z-3i)(=Yconj z+3i)=4z=Yconj z=YY= 3(zz−iz+iz−3)=0\n→\n3(z=Yconj z-iz+i=Yconj z-3)=0=YY=\n(z+i)(z−i)=4\n(z+i)(=Yconj z-i)=4=YY=\n∴|z+i|=2\nY=therefore |z+i|=2=Yatag ···················· (cid:6)1\nY=end{gather*}\n(cid:4) (cid:5)\n5.8 等号の縦揃え\n長い式の変形を表すとき，左端に等号を置いて式を並べます。\n(cid:2) (cid:3)\n=による左揃え\nY=begin{align*}\n|x|2\n&|x|^2=YY=\n→\n=|x|2\n&=|x|^2=YY=\n=|x|2\n&=|x|^2\nY=end{align*}\n(cid:4) (cid:5)\nでは，一番上の行の位置に不満があります。Y=phantomを用いて，等号分だけ右にずらします。\n38", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 45", "content": "(cid:2) (cid:3)\nY=phantom=を用いる\nY=begin{align*}\n|x|2\n&Y=phantom{=}|x|^2=YY=\n→\n=|x|2\n&=|x|^2=YY=\n=|x|2\n&=|x|^2\nY=end{align*}\n(cid:4) (cid:5)\n等号の幅分はずれましたが，1行目と2行目の先頭がいぜん不揃いです。=の右に{}を附加します。\n(cid:2) Y=phantom{={}}と修正 (cid:3)\nY=begin{align*}\n|x|2\n&Y=phantom{={}}|x|^2=YY=\n→\n=|x|2\n&=|x|^2=YY=\n=|x|2\n&=|x|^2\nY=end{align*}\n(cid:4) (cid:5)\nまだ少しずれています。透明の等号の属性をY=mathrelと指定すれば\n(cid:2) Y=mathrel{Y=phantom=}と修正 (cid:3)\nY=begin{align*}\n|x|2\n&Y=mathrel{=Yphantom=}|x|^2=YY=\n→\n=|x|2\n&=|x|^2=YY=\n=|x|2\n&=|x|^2\nY=end{align*}\n(cid:4) (cid:5)\n式の先端がきれいに揃います。これはよく使いますから\nY=def=Ydumyeq{=Ymathrel{=Yphantom=}}\nと定義することにしました。\n(cid:2) (cid:3)\nY=dumyeq\nY=begin{align*}\n|x|2\n&Y=dumyeq |x|^2=YY=\n→\n=|x|2\n&=|x|^2=YY=\n=|x|2\n&=|x|^2\nY=end{align*}\n(cid:4) (cid:5)\n別法です。等号の右に&を置くのもあります。ただし，\n(cid:2) (cid:3)\n&の位置\nY=begin{align*}\n|x|2\n&|x|^2=YY=\n→\n=|x|2\n=&|x|^2=YY=\n=|x|2\n=&|x|^2\nY=end{align*}\n(cid:4) (cid:5)\n39", "tags": []}
{"title": "Page 46", "content": "では，等号と右辺との間隔が詰まりすぎです。\n(cid:2) (cid:3)\n&の位置\nY=begin{align*}\n|x|2\n&|x|^2=YY=\n→\n=|x|2\n={}&|x|^2=YY=\n=|x|2\n={}&|x|^2\nY=end{align*}\n(cid:4) (cid:5)\nとすればよいのですが，すべての行に={}とするのは煩雑ですね。\n5.9 Y=item 直後の縦揃え数式\n5.9.1 aligned環境\nY=item直後に別行立て数式を配置すると\n(cid:2) (cid:3)\nY=item直後の別行立て数式\nY=begin{enumerate}[(1)]\nY=item\n(1)\nY=begin{align*} y =(a+b) 2\n→\ny&=(a+b)^2=YY= 2 2\n=a +2ab+b\n&=a^2+2ab+b^2\nY=end{align*}\nY=end{enumerate}\n(cid:4) (cid:5)\nこの結果について次のような不満の声を耳にします。\n項目番号と数式が\n(1) 縦方向にずれている（改行されている）\n(2) 横方向も空きすぎである。\nこれは，不満を述べる方が心得違いをしています。\n(1)に対しては，\n別行立て数式は改行する\n(2)に対しては，\n別行立て数式の横位置は\nセンタリング(fleqn オプションがない場合）\n左寄せ（fleqn オプション付きの場合で，\nインデント量は Y=mathindent）\nという，別行立て数式の仕様に従って配置されているまでです。\n対応策のひとつは別行立てではなく，本文中数式モードで済ませる，というのがあります。（こ\nの節は，井汲 景太 さんからご教示いただきました。）\namsmath.styで定義されているalinged環境を配置オプション[t]を付加して用います。\n40", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 47", "content": "(cid:2) (cid:3)\naligned環境\nY=begin{enumerate}[(1)]\nY=item\n2\n(1) y =(x+1)\n$Y=begin{aligned}[t]\n→ 2\ny&=(x+1)^2=YY= =x +2x+1\n&=x^2+2x+1\nY=end{aligned}$\nY=end{enumerate}\n(cid:4) (cid:5)\nただし，この環境は別行立てではありませんから，数式番号はつきません。\n数式番号など，別行立てにこだわるなら，次節で紹介するY=itemtopmathを用いるのも一法です。\n5.9.2 Y=itemtopmath\n別行立て数式は，説明文があって，それに続くもの，というのが正しい使い方でしょう。\n(cid:2) (cid:3)\n別行立て数式の前には説明文\nY=begin{enumerate}[(1)]\nY=item 説明文の後に別行立て数式\n(1) 説明文の後に別行立て数式\nY=begin{align*} 2\ny =(a+b)\n→\ny&=(a+b)^2=YY= 2 2\n=a +2ab+b\n&=a^2+2ab+b^2\nY=end{align*}\nY=end{enumerate}\n(cid:4) (cid:5)\nにもかかわらず，なんとかならないか，という要望は却下すべきものではありますが，余りに多い\nので，emath パッケージでは，Y=itemtopmath というコマンドを用意してあります。\n(cid:2) (cid:3)\nY=itemtopmath\nY=begin{enumerate}[(1)]\nY=item =Yitemtopmath\n2\n(1) y =(a+b)\nY=begin{align*}\n→ 2 2\ny&=(a+b)^2=YY= =a +2ab+b\n&=a^2+2ab+b^2\nY=end{align*}\nY=end{enumerate}\n(cid:4) (cid:5)\nすなわち，Y=item 直後に\nY=itemtopmath\nというコマンドを発行して，別行立て数式を上方に引っ張り上げます。\n5.9.2.1 左インデントの調整 つぎは，項目番号と数式の横方向の間隔調整です。これは，その\n文書に\n41", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "基本操作", "数式描画", "環境構築"]}
{"title": "Page 48", "content": "fleqn オプション\nがついているか否かで対応が異なります。\nまずは，fleqn オプションがついている場合です。この場合は，数式行の左インデントを\nY=mathindent=0pt\nなどと指定します。（その影響範囲を限定するため，グルーピングをしておくなどの対策が必要\nです。）\n(cid:2) (cid:3)\n左インデント(1)\nY=begin{enumerate}[(1)]\nY=item =Yitemtopmath\nY=mathindent=0pt=Yrelax (1) y =(a+b) 2\nY=begin{align*} → 2 2\n=a +2ab+b\ny&=(a+b)^2=YY=\n&=a^2+2ab+b^2\nY=end{align*}\nY=end{enumerate}\n(cid:4) (cid:5)\nfleqnオプションをつけない文書の場合は，局所的にfleqnオプションがついた状態にします。す\nなわち，align 環境をfleqnon 環境に，左インデントをオプションで与えたものでくるみます：\nY=begin{fleqnon}[0pt]\nY=begin{align}\n......\n......\nY=end{align}\nY=end{fleqnon}\nという具合です。\n(cid:2) (cid:3)\n左インデント(2)\nY=begin{enumerate}[(1)]\nY=item =Yitemtopmath\nY=begin{fleqnon}[0pt]\n2\n(1) F(x)=(x+b)\nY=begin{align*}\n→ 2 2\n=x +2bx+b\nF(x)&=(x+b)^2=YY=\n&=x^2+2bx+b^2\nY=end{align*}\nY=end{fleqnon}\nY=end{enumerate}\n(cid:4) (cid:5)\n42", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 49", "content": "5.9.2.2 縦方向の補正 さて，数式が複雑になると縦方向の補正量が Y=itemtopmath では間に合\nわなくなります。\n(cid:2) (cid:3)\n数式が複雑になると\nY=medskip\nY=begin{enumerate}[(1)]\nY=item =Yitemtopmath (cid:7)\n(1) 2\nY=mathindent=0pt=Yrelax y = (ax+b) dx\n→\nY=begin{align*} 1 3\n= (ax+b) +C\ny&==Ydint{}{}(ax+b)^2dx=YY= 3a\n&==Ybunsuu{1}{3a}(ax+b)^3+C\nY=end{align*}\nY=end{enumerate}\n(cid:4) (cid:5)\nこの場合は，1行目の数式で一番背の高いもの—この場合は積分記号Y=int—をY=itemtopmath\nの [...] オプションに与えます。\n(cid:2) (cid:3)\nY=itemtopmathの[...]オプション\nY=medskip\nY=begin{enumerate}[(1)]\n(cid:7)\nY=item =Yitemtopmath[=Yint]=Yrelax\n2\n(1) y = (ax+b) dx\nY=mathindent=0pt=Yrelax\n→\nY=begin{align*} 1 3\n= (ax+b) +C\n3a\ny&==Yint (ax+b)^2dx=YY=\n&==Ybunsuu{1}{3a}(ax+b)^3+C\nY=end{align*}\nY=end{enumerate}\n(cid:4) (cid:5)\n縦方向の位置を，更に細かく調整するには\nY=itemtopmath の <...> オプションを\nを利用します。\n5.9.2.3 Y=itemtopmathの書式 最後に，Y=itemtopmathの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=itemtopmath<#1>[#2]\n#1 : 微調整量（単位つき）+で上に，-で下に移動\n#2 : 1行目の高さが高いとき，その部分を与える\n( Y=emtokena に保存される)\n43", "tags": ["LaTeX", "中級者向け", "外部連携", "数式描画"]}
{"title": "Page 50", "content": "6 図の取り込み\nこの節のコマンド類は，emath.sty ではなく，emathMw.sty に含まれています。使用する際は\nY=usepackage{emathMw}\nとしておかねばなりません。\n6.1 図の周りへの回り込み\n6.1.1 mawarikomi 環境\n図のまわりにテキストを回り込ませる環境に，wrapfigure があります。しかし，この環境は\nenumerate環境など list環境下では使用できません。\nそこで，list環境と併用するために mawarikomi環境を作ってみました。\nその使用例を見ていただきましょう。\n(cid:2) (cid:3)\nmawarikomi環境\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}{30pt}{%\nY=begin{picture}(30,30)\nY=put(0,0){% 1. あああああああああああ\n図\nY=framebox(30,30){図}} あああああああああああ\nY=end{picture}} あああああああああああ\nああああああああああああ −→ ああああああああああああああ\nああああああああああああ あああああああああああああ\nああああああああああああ\n2. いいいいいいいいいいいいいい\nああああああああああああ\nいいいいいいいいいい\nああああああああああああ\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n基本的な使用法は\nY=begin{mawarikomi}{図の横幅}{図の記述}\n回り込ませるテキスト部の記述\nY=end{mawarikomi}\nとなっています。細かな調整を行うためのオプション引数については後述します。\n6.1.2 mawarikomi*環境\n図が大きくて複数の問題で回り込みを行わせるには，\n44", "tags": ["インストール", "初心者向け", "基本操作", "環境構築"]}
{"title": "Page 51", "content": "(cid:2) (cid:3)\n複数の問題で回り込み\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}{30pt}{%\nY=begin{picture}(30,100)\nY=put(0,0){%\nY=framebox(30,100){図}}\nY=end{picture}} 1. あああああああああああ\nあああああああああ ああああああ\nああああああああ\n2. いいいいいいいいいいい\nY=end{mawarikomi}\n図\nいいいいいいいいいいい\nY=item\nY=begin{mawarikomi*} −→ 3. ううううううううううう\nいいいいいいいいいいい ううううううううううう\nいいいいいいいいいいい ううううううううううう\nY=end{mawarikomi*} ううううううううううう\nY=item うううううううううううううう\nY=begin{mawarikomi*} うううううううううううううう\nううううううううううううう うううううう\nううううううううううううう\nううううううううううううう\nううううううううううううう\nううううううううううううう\nううううううううううううう\nY=end{mawarikomi*}\nY=end{enumerate}\n(cid:4) (cid:5)\nこの場合，回り込みを行うタイミングがずれてきています。回り込みの行数は，図のサイズから\n計算で求めていますが，この場合は，enumerate環境において，Y=item間の縦間隔が大きめにとら\nれる関係で計算値とずれてきました。この修正法は後述します。(p.46, §6.1.4)\n6.1.3 mawarikomi環境内にlist環境\nmawarikomi環境内にlist環境を入れることができます。\n45", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 52", "content": "(cid:2) (cid:3)\nmawarikomi内にlist\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}{30pt}{%\nY=begin{picture}(30,100)\nY=put(0,0){%\nY=framebox(30,100){図}}\n1. 次の問いに答えよ。\nY=end{picture}}\n次の問いに答えよ。 (1) アアアアアアアアア\nY=begin{enumerate}[(1)] アアアアアアアアア\n図\nY=item アアアアアアア アアアアアアアアア\nアアアアアアアアア アアアアアアア\nアアアアアアアアア −→ (2) イイイイイイイイイ\nアアアアアアアアア\nイイイイイイイイイ\nY=item イイイイイイイ\nイイイイイイイイイ\nイイイイイイイイイ\nイイイイイイイイイイイイイ\nイイイイイイイイイ\nイイイイイイイイイイイイ\nイイイイイイイイイ\nイイイイイイイイイ 2. いいいいいいいいいいいいいい\nイイイイイイイイイ いいいいいいいい\nY=end{enumerate}\nY=end{mawarikomi}\nY=item\nいいいいいいいいいいい\nいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n6.1.4 回り込みの行数指定オプション\n回り込みを行う行数は，図の高さから計算で求めています。しかし，テキスト部分の状態によっ\nては不適切な場合もでてきます。そこでmawarikomi環境に [...] オプションで行数の指定ができ\nるようにしてあります。45ページの例では，計算では8行となっていますが，テキスト部分の状\n況から7行とした方が良いようです。\n下の例では，\nY=begin{mawarikomi}[7]{30pt}{図}\nとしています。\nなお，この指定法は相対指定も可能で，数値に ‘+’ ‘−’ を付けることにより計算で得られた行数\nを増減させます。下の例を\nY=begin{mawarikomi}[-1]{30pt}{図}\n46", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 53", "content": "としても同じ結果が得られます。\n(cid:2) (cid:3)\n回り込み行数の調整\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}[7]{30pt}{%\nY=begin{picture}(30,100)\nY=put(0,0){%\nY=framebox(30,100){図}}\nY=end{picture}} 1. あああああああああああ\nあああああああああ ああああああ\nああああああああ\n2. いいいいいいいいいいい\nY=end{mawarikomi}\n図\nいいいいいいいいいいい\nY=item\nY=begin{mawarikomi*} −→ 3. ううううううううううう\nいいいいいいいいいいい ううううううううううう\nいいいいいいいいいいい ううううううううううう\nY=end{mawarikomi*} うううううううううううううう\nY=item うううううううううううううう\nY=begin{mawarikomi*} うううううううううううううう\nううううううううううううう ううう\nううううううううううううう\nううううううううううううう\nううううううううううううう\nううううううううううううう\nううううううううううううう\nY=end{mawarikomi*}\nY=end{enumerate}\n(cid:4) (cid:5)\n6.1.5 テキストと図の横間隔\nテキスト部分と図の部分との横間隔はデフォルトで\nY=newlength{=Ymawarikomisep}%\nY=setlength{=Ymawarikomisep}{2pt}%\nとしてあり，その2倍4ptが空くようにしてあります。\n次の例では，\nY=setlength{=Ymawarikomisep}{1zw}%\nとして，その2倍2zwの空きを作ってみました。\n47", "tags": []}
{"title": "Page 54", "content": "(cid:2) (cid:3)\nテキストと図の横間隔\nY=begin{enumerate}\nY=item\nY=setlength{=Ymawarikomisep}{%\n1zw}%\nY=begin{mawarikomi}{30pt}{%\n1. あああああああああ\nY=begin{picture}(30,30) 図\nあああああああああ\nY=put(0,0){%\nあああああああああ\nY=framebox(30,30){図}}\n−→ ああああああああああああああ\nY=end{picture}}\nあああああああ\nああああああああああああ\nああああああああああああ 2. いいいいいいいいいいいいいい\nああああああああああああ いいいいいいいいいい\nああああああああああああ\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n6.1.6 図の位置の微調整\n図の位置を細かく調整したいことがあります。そのためにmawarikomi環境に(x,y)オプション\nを用意しました。一例です。\n(cid:2) (cid:3)\n図の位置（調整前）\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}{40pt}{%\nY=begin{picture}(30,30)\n1. ああああああああああ\nY=put(0,0){% 図\nああああああああああ\nY=framebox(30,30){図}}\nああああああああああ\nY=end{picture}}\n−→ ああああああああああああああ\nああああああああああああ\nああああ\nああああああああああああ\nああああああああああああ 2. いいいいいいいいいいいいいい\nああああああああああああ いいいいいいいいいい\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n図をもう少し右上に動かしたいですね。mawarikomi環境に(5pt,2pt) オプションを付加してみ\nました。\n48", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 55", "content": "(cid:2) (cid:3)\n図の位置（調整後）\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}%\n(5pt,2pt){40pt}{%\nY=begin{picture}(30,30) 1. ああああああああああ\n図\nY=put(0,0){% ああああああああああ\nY=framebox(30,30){図}} ああああああああああ\nY=end{picture}} −→ ああああああああああああああ\nああああああああああああ ああああ\nああああああああああああ\n2. いいいいいいいいいいいいいい\nああああああああああああ\nいいいいいいいいいい\nああああああああああああ\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n6.1.7 段落途中からの回り込み\n<n> オプションで段落の始めからn行は回り込みをしないように指定することができます。下の\n例は<1>としたものです。\n(cid:2) (cid:3)\n<n>オプション\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}<1>{30pt}{%\nY=begin{picture}(30,30)\nY=put(0,0){% 1. ああああああああああああああ\nY=framebox(30,30){図}} あああああああああああ\n図\nY=end{picture}} あああああああああああ\nああああああああああああ あああああああああああ\nああああああああああああ −→ ああああああああああああああ\nああああああああああああ ああああああああああああああ\nああああああああああああ あああああああああ\nああああああああああああ\n2. いいいいいいいいいいいいいい\nああああああああああああ\nいいいいいいいいいい\nああああああああああああ\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n49", "tags": []}
{"title": "Page 56", "content": "ただしテキスト部に数式があるなど行ピッチが変わると，図の位置の調整が必要になります。下\nの例では，2行目の数式を回り込みの対象外にするため，<2>オプションをつけました。テキスト\n部はお望み通り3行目から回り込みが始まっていますが，図の位置が不適切です。\n(cid:2) (cid:3)\n図位置の調整が必要\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}<2>{30pt}{%\nY=begin{picture}(30,30)\nY=put(0,0){% 1. ああああああああああああああ\n1\nY=framebox(30,30){図}} あああああああ あ\n1\n1+\nY=end{picture}} 1\n1+\nああああああああああああ x図\nあああああああああああ\nあああああああああ\n−→\nあああああああああああ\n$Y=bunsuu{1}{1+=Ybunsuu{1}{%\nあああああああああああ\n1+=Ybunsuu{1}{x}}}$\nああああああああああああああ\nああああああああああああ\nああああああああああああ 2. いいいいいいいいいいいいいい\nああああああああああああ いいいいいいいいいい\nああああああああああああ\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\nでは，(0,-24pt)オプションで図を下に動かしてみます。\n50", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 57", "content": "(cid:2) (cid:3)\n図位置の調整後\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}<2>%\n(0,-24pt){30pt}{%\nY=begin{picture}(30,30)\n1. ああああああああああああああ\nY=put(0,0){%\n1\nあああああああ あ\nY=framebox(30,30){図}}\n1+\n1\n1\nY=end{picture}} 1+\nx\nああああああああああああ あああああああああああ\nあああああああああ −→ あああああああああああ 図\n$Y=bunsuu{1}{1+=Ybunsuu{1}{% あああああああああああ\n1+=Ybunsuu{1}{x}}}$ ああああああああああああああ\nああああああああああああ\n2. いいいいいいいいいいいいいい\nああああああああああああ\nいいいいいいいいいい\nああああああああああああ\nああああああああああああ\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n6.1.8 Y=caption の使用\nmawarikomi環境内では，Y=captionを使用できません。そこで，\nFmawarikomi環境：図番号を使用\nTmawarikomi環境：表番号を使用\nなる2つの環境を用意してあります。\n下の例では，Tmawarikomi環境，Fmawarikomi環境内でY=captionを使用しています。\n51", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 58", "content": "(cid:2) (cid:3)\nFmawarikomi, Tmawarikomi 環境\nY=begin{enumerate}\nY=item =Ybegin{Tmawarikomi}(0,5pt){9zw}{%\nY=caption{表の例}Y=label{T1}=Yhfil\nY=begin{tabular}{|c|c|c|}=Yhline\naaa & bbb & ccc =YY=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nY=end{tabular}}\n第1問 右の表Y=ref{T1}において\nああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああ\nああああああああああああああああ\nY=end{Tmawarikomi}\nY=item =Ybegin{Fmawarikomi}{60pt}{%\nY=unitlength1pt%\nY=begin{picture}(60,30)%\nY=put(0,0){=Yline(2,1){60}}%\nY=end{picture}%\nY=caption{図の例}Y=label{Fig1}}\n第2問 右の図Y=ref{Fig1}において，\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nY=end{Fmawarikomi}\nY=end{enumerate}\n(cid:4) (cid:5)\n1. 第1問 右の表1においてあああああああああああああ\n表 1: 表の例\nああああああああああああああああああああああああ\naaa bbb ccc\nああああああああああああああああああああああああ\n1 2 3\nああああああああああああああああああああああああ\nあああああああああああああああああああああああああああああああああ\n−→ 2. 第2問 右の図1において，いいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいい 図 1: 図の例\nいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいい\n52", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 59", "content": "なお別法として，mawarikomi環境において，\nY=fgcaption\nY=tbcaption\nコマンドでY=captionの代行をさせることも可能です。ただし，これらのコマンドはemathCap.sty\nで定義されていますから、使用する際は\nY=usepackage{emathCap}\nとしておく必要があります。\n6.1.9 書式\nmawarikomi環境の書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=begin{mawarikomi}<#1>[#2](#3,#4)#5#6\n#1 : 段落当初の回り込みをしない行数\n#2 : 回り込み行数（相対指定可）\n先頭に‘l’を付けたときは図を左に配置\n(#3,#4) : 図の位置修正ベクトル\n#3 : (>0) 右，(<0) 左\n#4 : (>0) 上，(<0) 下\n#3,#4 共に単位必須（0のみは単位不要）\n#5 : 図の横幅（単位必須）\n#6 : 図，表など\n関連パラメータ\nY=mawarikomisep テキストと図の間隔（デフォルト値 2pt)\nこの2倍の空きができます。\n6.1.10 図の左配置\n行数指定オプション[#2]で，引数の先頭に‘l’ (left)をつけると図などが左に配置されます。\n53", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 60", "content": "(cid:2) (cid:3)\n図の左配置\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}[l]{30pt}{%\nY=begin{picture}(30,30)\n1. あああああああああああ\nY=put(0,0){% 図\nあああああああああああ\nY=framebox(30,30){図}}\nあああああああああああ\nY=end{picture}}\n−→ ああああああああああああああ\nああああああああああああ\nあ\nああああああああああああ\nああああああああああああ 2. いいいいいいいいいいいいいい\nああああああああああああ いいいいいいいいいい\nY=end{mawarikomi}\nY=item いいいいいいいいいいい\nいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n6.1.11 図幅指定の省略\n図幅を指定する引数を空にすると，TEXが認識する図幅で代行されます。\nただし，図の部分が複数の段落を持つときは省略できません。したがって，図（表）番号を付与\nするときはこの機能は使えません。\n(cid:2) (cid:3)\n図幅省略\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}{}{% 1. あああああああああ\n図\nY=begin{picture}(30,30) あああああああああ\nY=put(0,0){% あああああああああ\nY=framebox(30,30){図}} ああああああああああああああ\nY=end{picture}} −→ ああああああああああああああ\nあああああああああああああああああああ ああ\nあああああああああああああああああああ\n2. いいいいいいいいいいいいいい\nあああああああああああああああああああ\nいいいいいいいいいいいいいい\nY=end{mawarikomi}\nいいいいいい\nY=item いいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\nこの場合，図とテキスト部の間隔は16ptとしてあります。増減したいときは，増減する数値を\n図幅指定の引数に，‘+’あるいは‘−’ の符号付で与えます。極端な例です。\n54", "tags": []}
{"title": "Page 61", "content": "(cid:2) (cid:3)\n図幅省略時の本文と図の間隔\nY=begin{enumerate}\nY=item\nY=begin{mawarikomi}{-16pt}{%\n1. あああああああああああ\nY=begin{picture}(30,30) 図\nあああああああああああ\nY=put(0,0){%\nあああああああああああ\nY=framebox(30,30){図}}\nああああああああああああああ\nY=end{picture}} −→\nああああああああああ\nあああああああああああああああああああ\nあああああああああああああああああああ 2. いいいいいいいいいいいいいい\nあああああああああああああああああああ いいいいいいいいいいいいいい\nY=end{mawarikomi} いいいいいい\nY=item いいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n文書全体でこの間隔を変更したいときは，Y=mawarikomikankakuの値を変更します。デフォル\nトは\nY=mawrikomikankaku=8pt\nとなっており，その2倍の16ptが空きます。\n文書全体でこの間隔を変更したければ，プリアンブルで\nY=mawrikomikankaku=10pt\nなどと，右辺値を変更します。（この変更で2倍の20ptが空くことになります。）\n6.1.12 テキスト部が短いとき\n図に比して，テキスト部が短く，回り込みが始まる前にテキスト部が終わってしまうときの処理\nです。まずは，具合の悪い例をご覧ください。\n(cid:2) (cid:3)\nテキストが短いとき\nY=begin{enumerate}[(1)]\nY=item =Ybegin{mawarikomi}{}{%\nY=begin{zahyou*}[ul=5mm]% (1) あああああああ\n(0,4)(0,6) あああああああ\nY=framebox(4,6){図} あ\nY=end{zahyou*}} → 図\n(2) いいいいいいいいいいいいいいい\nあああああああああああああああ\nいいいいいいいいいいいいいいい\nY=end{mawarikomi}\nいいいい\nY=item いいいいいいいいいい\nいいいいいいいいいいいい\nいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n55", "tags": []}
{"title": "Page 62", "content": "この場合第1問の本文が短いので，第2問が図にかかってしまいました。第2問も引き続きまわ\nりこみをさせる mawarikomi*環境については§6.1.2 (p.45) で述べました。ここでは，第2問を図\nが終わった後に記述する方法について述べます。\n(cid:2) (cid:3)\nY=mawarikomiowari\nY=begin{enumerate}[(1)]\n(1) あああああああ\nY=item =Ybegin{mawarikomi}{}{%\nあああああああ\nY=begin{zahyou*}[ul=5mm]%\nあ\n(0,4)(0,6)\n図\nY=framebox(4,6){図}\nY=end{zahyou*}}\n→\nあああああああああああああああ\nY=end{mawarikomi}\nY=mawarikomiowari (2) いいいいいいいいいいいいいいい\nY=item いいいいいいいいいい いいいいいいいいいいいいいいい\nいいいいいいいいいいいい いいいい\nいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\nすなわち，mawarikomi環境が終わったとき，Y=mawarikomiowari と記述します。\n（注） このような場合，nidan環境も使えますが，mawarikomi環境の方が多機能となりましたの\nで，nidan環境は発展的解消とします。\nnidan環境はemathOld.styに保存されていますから、\nY=usepackage{emathOld}\nとしておけば，使用可能です。\n56", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 63", "content": "6.1.13 改ページとの関係(1)\nmawarikomi環境の図が，ページの境界にさしかかると，おかしなことがおきる可能性がありま\nす。完全に解決することはできませんが，いくつかの例を見ていただきましょう。\nまず，p.58〜p.59（この部分，背景色をivoryとしています）では，問題なしですが，\n57", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 64", "content": "あああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nあああああああああああああああああ\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n図\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n58", "tags": []}
{"title": "Page 65", "content": "ずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n59", "tags": []}
{"title": "Page 66", "content": "mawarikomi環境より前の部分が延びてくると，図は次ページに送られ，p.61の下部には大きな\n空白ができます。（背景色はlavender）\n60", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 67", "content": "あああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nあああああああああああああああああ\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいい\n61", "tags": []}
{"title": "Page 68", "content": "ずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n図\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n62", "tags": []}
{"title": "Page 69", "content": "図が次ページに送られるのは仕方がないとして，テキスト部は一部を繰り上げて，空白ができな\nいようにしたければ\nY=begin{mawarikomi}<0>{}{%\nと，mawarikomi環境に<0>オプションをつけます（背景色はskyblue）。その効用は：\n63", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 70", "content": "あああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nあああああああああああああああああ\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいい\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n64", "tags": []}
{"title": "Page 71", "content": "ずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n図\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n65", "tags": []}
{"title": "Page 72", "content": "6.1.14 改ページとの関係(2)\nmawarikomi環境部がページの境目に差し掛かると，いろいろ厄介な現象が生じます。\nその一事例です。\nこの文書の67〜69ページを見てください（この部分は黄色の背景色がついています）。p.68は，\nたった2行で改ページされています。p.69に配置されているmawarikomi環境は，p.68の続きに配\n置できそうなのに，なぜか改ページされています。\nその理由の説明と，この現象を回避する一手段を見ていただきましょう。\nまずは，理由の推測です。\n1) emathMw.styは，図がページの境目にひっかかる場合，次ページに送る仕様となっています。 1\n2) この文書では，p.68の終りで図がページの境目にひっかるので，図の前で改ページされます。\nこの時点では，フロート（脚注）はないものとして判断が行われます。\n3) そのあとで，フロートが入ることにより，p.68の終りの\nY=section{mawarikomiを次ページに送らなくても良いのに}\nY=repeatchar{い}{30}\nの2行が次ページに送られますが，図の前の改ページは取り消されることはありません。\nということで，p.68は，2行だけということとなってしまったのです。\n対症療法です。この文書では，p.69に移されたmawarikomi環境は，ページ境目にきても改ペー\nジをしないようにします。そのための環境が，新設されたPmawarikomi環境です。\np.70〜p.71では（この部分の背景色はシアンです），この新設環境を用いています。\n1emathMw.styを[samepage]オプション付でロードすると，次ページ送りの処理を禁止することもできます。この場\n合，以下の議論は無意味です。\n66", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 73", "content": "やたら改ページのmawarikomi\nあああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\n2\nあああああああああああああああああ\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\n3\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\n2脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注\n3きゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅ\nうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅう\n67", "tags": []}
{"title": "Page 74", "content": "mawarikomiを次ページに送らなくても良いのに\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nきゃくちゅうきゃくちゅう\n68", "tags": []}
{"title": "Page 75", "content": "ずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n図\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n69", "tags": []}
{"title": "Page 76", "content": "Pmawarikomi の効用\nあああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\nああああああああああああああああああああああああああああああああああああああああああああ\n4\nあああああああああああああああああ\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\n5\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\n4脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注脚注\n5きゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅ\nうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅうきゃくちゅう\n70", "tags": []}
{"title": "Page 77", "content": "Pmawarikomiで望みの位置に\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\n図\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずずず\nきゃくちゅうきゃくちゅう\n71", "tags": []}
{"title": "Page 78", "content": "6.2 複数の図の周りへの回り込み\n横幅の異なる複数の図の周りへテキストを回り込ませるのは面倒です。現時点では，自動ではな\nく手動で行う方法しかありません。\n(1) 図を配置する。\n(2) 図の周りに，テキストを回り込ませる。\nという手順で実現することにします。\n6.2.1 図の配置 — zuhaiti環境\nまずは，図の配置です。\n(cid:2) (cid:3)\n図の配置\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}\nY=hline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nx & y & z Y=Y=Y=hline\nああああああああああああああAああBああCあ\nY=end{tabular}}\nああああああああああああああ1ああ2ああ3あ\nY=haiti{%\nああああああああああああああxああyああzあ\nY=begin{picture}(20,80)%\nあああああああああああああああああああ\nY=framebox(20,80){図}\nあああああああああああああああああああ\nY=end{picture}}\n→ あああああああああああああああああああ\n図\nY=end{zuhaiti}%\nあああああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああああ\nあああああああああああああああああ\nああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\n(cid:4) (cid:5)\n段落の先頭でzuhaiti環境を置き，その中でY=haitiコマンドで図表などを配置していきます。\n72", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 79", "content": "6.2.2 枠の設定 — Y=wakudori\nこの時点では，文字が図にかぶっています。この文字を図の周りに回りこませます。\nそのためには，図の横幅を知らねばなりません。この場合は，zahyou環境のY=unitlengthとx\nの範囲から計算で求められますが，TEXが認識している図の横幅がタイプセットした際にできる\nログファイルに記録されています：\n図幅=57.8056pt\n図幅=20.0pt\n図と文字部分との間隔を10ptとして，\n初めの4行は 67.8pt,\n次の5行は，30pt 行の長さを短くしてみます。\n(cid:2) (cid:3)\n枠の設定\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}=Yhline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nx & y & z Y=Y=Y=hline ああああああああああああ A B C\nY=end{tabular}} ああああああああああああ 1 2 3\nY=haiti{% ああああああああああああ x y z\nY=begin{picture}(20,80)% ああああああああああああ\nY=framebox(20,80){図} ああああああああああああああああ\nY=end{picture}} → ああああああああああああああああ\n図\nY=end{zuhaiti}% ああああああああああああああああ\nY=wakudori{4*67.8pt;5*30pt} ああああああああああああああああ\nあああああああああああああああああ ああああああああああああああああ\nあああああああああああああああああ あああああああああああああああああああ\nあああああああああああああああああ ああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\n(cid:4) (cid:5)\n新設コマンド\nY=wakudori{4*67.8pt;5*30pt}\nで，4行分右に67.8ptの空きを作り，引き続いて5行分30ptの空きを作ります。すなわちY=wakudori\nの引数には\n73", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 80", "content": "行数*横幅\nを‘;’区切りで並べます。なお，このコマンドはzuhaiti環境の外に記述します。\n74", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 81", "content": "6.2.3 図の左配置\n2番目の図を左に配置してみましょう。\n(cid:2) (cid:3)\n図の左配置\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}=Yhline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nx & y & z Y=Y=Y=hline ああああああああああああ A B C\nY=end{tabular}} ああああああああああああ 1 2 3\nY=haiti[l]{% ああああああああああああ x y z\nY=begin{picture}(20,80)% ああああああああああああああああ\nY=framebox(20,80){図} ああああああああああああああああ\nY=end{picture}} → ああああああああああああああああ\n図\nY=end{zuhaiti}% ああああああああああああああああ\nY=wakudori{3*67.8pt;6*(30pt,0pt)} ああああああああああああああああ\nあああああああああああああああああ ああああああああああああああああ\nあああああああああああああああああ あああああああああああああああああああ\nあああああああああああああああああ ああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\n(cid:4) (cid:5)\nすなわち，図を左配置するには，Y=haitiコマンドに[l]オプションをつけます。\nまた，左配置した図を回り込ませるには，Y=wakudori の引数を\n行数*(左空きのサイズ,右空きのサイズ)\nの形で与えます。\n一見良さそうですが，よく見ると4行目が第1の図にかぶっています。この行は2つの図両方に\nかかっているのでした。\nその修正法を2つ紹介します。\n75", "tags": []}
{"title": "Page 82", "content": "6.2.4 図の位置の微調整\n修正法その1は，2番目の図を1行分下に動かし，4行目は第1の図に対して回り込ませます。\n(cid:2) (cid:3)\n図の位置を調整\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}=Yhline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nx & y & z Y=Y=Y=hline\nああああああああああああ A B C\nY=end{tabular}}\nああああああああああああ 1 2 3\nY=haiti[l]%\nああああああああああああ x y z\n(0pt,-=Ybaselineskip){%\nああああああああああああ\nY=begin{picture}(20,80)%\nああああああああああああああああ\nY=framebox(20,80){図}\nああああああああああああああああ\nY=end{picture}} →\nああああああああああああああああ\n図\nY=end{zuhaiti}%\nああああああああああああああああ\nY=wakudori{4*67.8pt;6*(30pt,0pt)}\nああああああああああああああああ\nあああああああああああああああああ\nああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああああ\nあああああああああああああああああ\nあああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\n(cid:4) (cid:5)\nすなわち，図の位置をずらすには，Y=haitiコマンドに(dx,dy)オプションをつけます。dx, dy\nは単位を伴った長さで，\ndx は左右の動きで\ndx>0 のとき右へ，dx<0 のとき左へ動きます。\ndy は上下の動きで\ndy>0 のとき上へ，dy<0 のとき下へ動きます。\nここでは，Y=haiti[l](0pt,-=Ybaselineskip){...により図を1行分下に動かしています。\n76", "tags": []}
{"title": "Page 83", "content": "6.2.5 行の左右に枠\n修正法その2です。2つの図にかかる行の左右双方に枠をあけてしまう，という方法です。\n(cid:2) (cid:3)\n行の左右双方に枠\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}=Yhline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nx & y & z Y=Y=Y=hline\nY=end{tabular}}\nああああああああああああ A B C\nY=haiti[l]{%\nああああああああああああ 1 2 3\nY=begin{picture}(20,80)%\nああああああああああああ x y z\nY=framebox(20,80){図}\nああああああああ\nY=end{picture}}\nああああああああああああああああ\nY=end{zuhaiti}%\n→ ああああああああああああああああ\n図\nY=wakudori{%\nああああああああああああああああ\n3*67.8pt;\nああああああああああああああああ\n1*(30pt,67.8pt);\nああああああああああああああああ\n5*(30pt,0pt)}\nあああああああああああああああああああ\nあああああああああああああああああ\nああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\n(cid:4) (cid:5)\n77", "tags": []}
{"title": "Page 84", "content": "6.2.6 listとの併用\nenumerateなどlist系の環境下で用いるときの注意です。\n(cid:2) (cid:3)\nlistと併用 – 失敗\nY=begin{enumerate}\nY=item\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}=Yhline 1. あああああああああ A B C\nA & B & C Y=Y=Y=hline あああああああああ 1 2 3\n1 & 2 & 3 Y=Y=Y=hline あああああああああ x y z\nx & y & z Y=Y=Y=hline あああああああああ\nY=end{tabular}} あああああああああああああ\nY=haiti[l]% あああああああああああああ\n(0pt,-=Ybaselineskip){% あああああああああああああ\n図\nY=begin{picture}(20,80)% あああああああああああああ\nY=framebox(20,80){図} あああああああああああああ\nY=end{picture}} あああああああああああああ\nY=end{zuhaiti}% ああああああああああああああああ\nY=wakudori{4*67.8pt;6*(30pt,0pt)} ああああああああああああああああ\nあああああああああああああああああ あああああああ\nあああああああああああああああああ\nいいいいいいいいい\n→\nあああああああああああああああああ\nいいいいいいいいい\nあああああああああああああああああ\nいいいいいいいいい\nあああああああああああああああああ\nいいいいいいいいい\nあああああああああああああああああ\nいいいいいいいいいいいいい\nあああああああああああああああああ\nいいいいいいいいいいいいい\nあああああああああああああああああ\nいいいいいい\nあああああああああああああああああ\n2. ううううううううう\nううううううううう\nいいいいいいいいいいいいいいいいい\nううううううううう\nいいいいいいいいいいいいいいいいい\nううううううううう\nいいいいいいいいいいいいいいいいい\nううううううううううううう\nいいいいいいいいいいいいいいいいい\nううううううううううううう\nうううううう\nY=item\nううううううううううううううううう\nううううううううううううううううう\nううううううううううううううううう\nううううううううううううううううう\nY=end{enumerate}\n(cid:4) (cid:5)\nあらま。これでは困ります。Y=wakudoriはTEXのY=parshapeを用いています。普通は段落が変\n78", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 85", "content": "わればY=parshapeは解消してしまいますが，list環境下では，段落が変わってもY=parshapeを使\nい続けることになっています。\n対応法はY=wakudoriで設定した枠どりが終った次の段落の先頭で\nY=wakudori{}\nと枠どりの終了を宣言し，Y=parshapeをlist環境のものに戻しておくことです。\n(cid:2) (cid:3)\nlistと併用 – 成功\nY=begin{enumerate}\nY=item\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}=Yhline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\n1. あああああああああ A B C\nx & y & z Y=Y=Y=hline\nあああああああああ 1 2 3\nY=end{tabular}}\nあああああああああ x y z\nY=haiti[l]%\nあああああああああ\n(0pt,-=Ybaselineskip){%\nあああああああああああああ\nY=begin{picture}(20,80)%\nあああああああああああああ\nY=framebox(20,80){図}\nあああああああああああああ\nY=end{picture}} 図\nあああああああああああああ\nY=end{zuhaiti}%\nあああああああああああああ\nY=wakudori{4*67.8pt;6*(30pt,0pt)} →\nあああああああああああああ\nあああああああああああああああああ\nあああああ\nあああああああああああああああああ\nいいいいいいいいいいいいいいいい\nあああああああああああああああああ\nいいいいいいいいいいいいいいいい\nあああああああああああああああああ\nいい\nあああああああああああああああああ\nあああああああああああああああああ\n2. うううううううううううううううう\nあああああああああああああああああ\nうううううううううううううううう\nうう\nY=wakudori{}%\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nY=item\nううううううううううううううううう\nううううううううううううううううう\nY=end{enumerate}\n(cid:4) (cid:5)\n79", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 86", "content": "6.2.7 Y=captionの使用\nY=captionをつけるときは，Y=fgcaption,Y=tbcaptionを用いますが，Y=haitiの引数はY=hboxに\n入れてサイズを測っていますので，複数の段落を含むものは記述できません。そのためY=caption\nを使用する際は，minipage環境にくるんでおく必要があります。\n(cid:2) (cid:3)\nY=captionの使用\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{minipage}{57.8pt}\nY=tbcaption{表の例}\nY=begin{tabular}{|c|c|c|}=Yhline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nあああああああああ\nx & y & z Y=Y=Y=hline 表 2: 表の例\nあああああああああ\nY=end{tabular} A B C\nあああああああああ\nY=end{minipage}} 1 2 3\nあああああああああ\nY=haiti[l](0pt,-=Ybaselineskip){% x y z\nあああああああああ\nY=begin{minipage}{50pt}\nああああああああああ\nY=begin{picture}(50,80)%\nああああああああああ\nY=framebox(50,80){図}\nああああああああああ\nY=end{picture}\n図 ああああああああああ\nY=fgcaption{ず}\n→ ああああああああああ\nY=end{minipage}\nああああああああああ\n}\nああああああああああ\nY=end{zuhaiti}%\n図 2: ず ああああああああああ\nY=wakudori{5*67.8pt;8*(60pt,0pt)}\nああああああああああああああああ\nあああああああああああああああああ\nああああああああああああああああ\nあああああああああああああああああ\nああああああああああああああああ\nあああああああああああああああああ\nああああああああああああああああ\nあああああああああああああああああ\nああああああああああああああああ\nあああああああああああああああああ\nああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\n(cid:4) (cid:5)\n80", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 87", "content": "6.2.8 テキスト部が複数の段落を持つ場合\n回り込むテキスト部が複数の段落を持つときは，ちと面倒です。Y=parshapeは複数の段落を通\nして与えることができませんから，段落ごとに，その段落の形を Y=wakudoriの引数に与えなけれ\nばなりません。\n(cid:2) (cid:3)\n複数の段落を持つテキスト部\nY=begin{zuhaiti}\nY=haiti{%\nY=begin{tabular}{|c|c|c|}=Yhline\nA & B & C Y=Y=Y=hline\n1 & 2 & 3 Y=Y=Y=hline\nx & y & z Y=Y=Y=hline\nY=end{tabular}}\nY=haiti[l]% ああああああああああああ A B C\n(0pt,-=Ybaselineskip){% あああああああああ 1 2 3\nY=begin{picture}(20,80)% いいいいいいいいいいいい x y z\nY=framebox(20,80){図} いいいいいいいいいいいい\nY=end{picture}} いいいいいいいいいいいいいいいい\nY=end{zuhaiti}% いいいいいいいいいいいいいいいい\nY=wakudori{2*67.8pt} → いいいいいいいいいいいいいいいい\n図\nあああああああああああああああああ いいいいいいいいいいいいいいいい\nああああ いいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいい\nY=wakudori{2*67.8pt;6*(30pt,0pt)} いいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい いいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい いいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\n6.2.9 Y=unitlengthの変更について\nzuhaiti環境は，実質的にはpicture環境です。そこでは，Y=unitlengthを1ptとしています。図を\n配置するコマンドY=haiti内でY=unitlengthを変更するときはグルーピングをしてY=unitlength\nの変更を局部的にしておかないといけません。\n81", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 88", "content": "6.3 図番号の書式修正\nY=captionコマンドによる図番号は\n図1: なんとかの図\nという具合に番号の後ろにコロンがつきます。これが邪魔であるというご意見をよく聞きます。確\nかに，タイトルをつけないで使用する場合にはコロンは不要ですね。そこで Y=EMcaptionを作りま\nした。\n使用例です。\n(cid:2) (cid:3)\nY=EMcaption\nY=begin{enumerate}\nY=item\nY=begin{Fmawarikomi}{30pt}{%\nY=begin{picture}(30,30)\n1. 右の図3においてあああ\nY=put(0,0){% 図\nあああああああああああ\nY=framebox(30,30){図}}\nあああああああああああ\nY=end{picture}\nあああああああああああ 図 3\nY=EMcaption{}\nあああああああああああ\nY=label{Fig13}}\n−→ ああああああああああああああ\n右の図Y=ref{Fig13}において\nああああああああああああああ\nあああああああああああああああああああ\nあ\nあああああああああああああああああああ\nあああああああああああああああああああ 2. いいいいいいいいいいいいいい\nあああああああああああああああああああ いいいいいいいいいいいいいい\nY=end{Fmawarikomi} いいいいいいいい\nY=item いいいいいいいいいいいいいいいい\nい\nいいいいいいいいいいいいいいいいいいい\nY=end{enumerate}\n(cid:4) (cid:5)\n関連して，\nY=fgEMcaption, =YtbEMcaption\nも定義されています。ただし，これらのコマンドはemathCap.styで定義されていますから、使用\nする際は\nY=usepackage{emathCap}\nとしておく必要があります。\n7 enumerate環境の機能拡張\nこの節のコマンド類は，emath.sty ではなく，emathE.sty に含まれています。\n82", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 89", "content": "7.1 小問を横に並べる。\n7.1.1 横に並べる個数指定\n小問を横に並べる環境 edaenumerate です。\nただし，edaenumerate環境はemath.styではなく，emathEy.styで定義されています。使用する\nには\nY=usepackage{emathEy}\nを宣言しておく必要があります。\nA. 一番多いのは，横に2問ずつ並べるタイプでしょうか。\n(cid:2) (cid:3)\nedaenumerate環境\nY=begin{enumerate}\nY=item 次の問に答えよ．\nY=begin{edaenumerate}\nY=item aaa\nY=item bbb\nY=item ccc\nY=item ddd\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n【1】次の問に答えよ．\n−→\n(1) aaa (2) bbb\n(3) ccc (4) ddd\n83", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 90", "content": "B. 横に3問ずつ並べたいときは <..> オプションを使います。\n(cid:2) (cid:3)\nedaenumerate<3>\nY=begin{enumerate}\nY=item 次の問に答えよ．\nY=begin{edaenumerate}<3>\nY=item aaa\nY=item bbb\nY=item ccc\nY=item ddd\nY=item eee\nY=item fff\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n【1】次の問に答えよ．\n−→\n(1) aaa (2) bbb (3) ccc\n(4) ddd (5) eee (6) fff\nなお，LATEX2εで enumerate に [...] オプションを併用する場合は\nY=begin{edaenumerate}<3>[(1)]\nのように，<..> オプションを先に付けてください。\n84", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 91", "content": "C. 小問の一部は2問ずつ，一部は3問ずつ並べたい，という例です。\n(cid:2) (cid:3)\n変則\nY=begin{enumerate}\nY=item 次の問に答えよ．\nY=begin{edaenumerate}\nY=item aaaaa\nY=item bbbbb\nY=item ccccc\nY=item ddddd\nY=item<3> eee\nY=item<3> fff\nY=item<3> ggg\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n【1】次の問に答えよ．\n−→ (1) aaaaa (2) bbbbb\n(3) ccccc (4) ddddd\n(5) eee (6) fff (7) ggg\nD. 小問の位置（左インデント）を変更するには (...) オプションを用います。\n(cid:2) (cid:3)\nedaenumerate(...)\nY=begin{enumerate}\nY=item 次の問に答えよ．\nY=begin{edaenumerate}(2zw)\nY=item aaa\nY=item bbb\nY=item ccc\nY=item ddd\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n【1】次の問に答えよ．\n−→\n(1) aaa (2) bbb\n(3) ccc (4) ddd\n85", "tags": []}
{"title": "Page 92", "content": "E. テスト問題などでは，縦方向に空白を作りたいことがあります。<...> オプションに\ngyoukan=2cm\nなどと行間の長さを指定します。\n(cid:2) (cid:3)\n<gyoukan=..> 1. 次の問いに答えよ。\nY=begin{enumerate}[1.~]\n(1) aaa (2) bbb\nY=item 次の問いに答えよ。\nY=begin{edaenumerate}%\n<gyoukan=2cm>[(1)]\nY=item aaa →\nY=item bbb\n(3) ccc (4) ddd\nY=item ccc\nY=item ddd\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n横に並べる小問数も指定したければ，オプションを\n<retusuu=3,gyoukan=2cm>\nなどと記述します。\n86", "tags": []}
{"title": "Page 93", "content": "均等割りなら，Y=vfill も使えますし，\n<gyoukan==Yvfill>\nと指定するのもありです。\n(cid:2) (cid:3)\nY=vfill で縦方向の空白\nY=begin{enumerate}\nY=item 次の問に答えよ．\nY=begin{edaenumerate}<gyoukan==Yvfill>\nY=item aaa\nY=item bbb\nY=item ccc\nY=item ddd\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\nをタイプセットすると，下のようになります。\n【1】次の問に答えよ．\n(1) aaa (2) bbb\n(3) ccc (4) ddd\n87", "tags": []}
{"title": "Page 94", "content": "また，横に並べた小問の間に縦罫線を入れたいことがあります。解答の余白を縦2cmとして，\n縦罫線を入れる例です。\n(cid:2) (cid:3)\n小問の間に縦罫線\nY=begin{enumerate}\nY=item 次の問に答えよ．\nY=begin{edaenumerate}\nY=item aaa =Yvspace{2cm}% 解答欄の高さ\nY=edasikiri% 縦罫線\nY=item bbb%\nY=item ccc =Yvspace{2cm}%\nY=edasikiri%\nY=item ddd%\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n【1】次の問に答えよ．\n(1) aaa (2) bbb\n−→\n(3) ccc (4) ddd\n88", "tags": []}
{"title": "Page 95", "content": "F. eda... の書式です。\n【1】環境\nedaenumerate<横に並べる小問の個数(デフォルトは2）>\n(小問の左インデント)\n[enumerate のオプションと同じ(LaTeX2eのみ)]\n【2】コマンド\nY=item<横に並べる小問の個数\n（デフォルトは Y=begin{edaenumerate}の指定値）>\n(小問の横幅)\n[Y=item のオプションと同じ]\n89", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 96", "content": "7.1.2 ベタ並べ\nedaenumerate 環境は，横に並べる個数を指定しますが，個数は指定せず，ベタに並べるのが\nbetaenumerate環境です。\n(cid:2) (cid:3)\nbetaenumerate\n下の選択肢から選んで記号で答えよ。\nY=begin{jquote}(3zw)\nY=begin{betaenumerate}[A. ]\nY=item $=Ybunsuu12$\nY=item $=Ybunsuu13$\nY=item $=Ybunsuu14$\nY=item $=Ybunsuu15$\nY=item $=Ybunsuu32$\nY=item $=Ybunsuu43$\nY=item 4\nY=item 2\nY=item 3\nY=item 1\nY=item 5\nY=item $=Ybunsuu{1}{n+1}$\nY=item $=Ybunsuu{n}{n+1}$\nY=item $=Ybunsuu{1}{rn+1}$\nY=item $=Ybunsuu{n}{rn+1}$\nY=item $=Ybunsuu{1}{r(n+1)+1}$\nY=item $=Ybunsuu{n}{n(n+1)+1}$\nY=end{betaenumerate}\nY=end{jquote}\n(cid:4) (cid:5)\n−→\n下の選択肢から選んで記号で答えよ。\n1 1 1 1 3 4\nA. B. C. D. E. F. G. 4 H. 2 I. 3\n2 3 4 5 2 3\n1 n 1 n\nJ. 1 K. 5 L. M. N. O.\nn+1 n+1 rn+1 rn+1\n1 n\nP. Q.\nr(n+1)+1 n(n+1)+1\n余白量はデフォルトで\nY=def=Ybetalabelwidth{3em}\nとしてあります。これを再定義して小さくすれば更に詰め込むことができます。\n90", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 97", "content": "7.1.3 yokoenumerate\nbetaenumerate環境は追い込み式の横並べですが，項目幅は項目ごとに異なります。長さが最大\nの項目幅で横並べするのが yokoenumerate 環境です。\n(cid:2) (cid:3)\nyokoenumerate環境\nY=begin{enumerate}[1.~]\nY=item =Ytextsf{betaenumerate}環境\nY=begin{betaenumerate}\nY=item aaa\nY=item b\nY=item ccccc\nY=item ddddddddddd\nY=item ee\nY=item ffff\nY=item ggggg\nY=item hhhhhh\nY=end{betaenumerate}\nY=item =Ytextsf{yokoenumerate}環境\nY=begin{yokoenumerate}\nY=item aaa\nY=item b\nY=item ccccc\nY=item ddddddddddd\nY=item ee\nY=item ffff\nY=item ggggg\nY=item hhhhhh\nY=end{yokoenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n↓\n1. betaenumerate環境\n(a) aaa (b) b (c) ccccc (d) ddddddddddd (e) ee (f) ffff (g) ggggg\n(h) hhhhhh\n2. yokoenumerate環境\n(a) aaa (b) b (c) ccccc (d) ddddddddddd\n(e) ee (f) ffff (g) ggggg (h) hhhhhh\nこの環境とedaenumerate環境との違いは，edaenumerate環境は横に並べる項目数をこちらが指\n定するのに対して，yokoenumerate環境は項目幅と版面との兼ね合いでTEXが決めてくれるとい\n91", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 98", "content": "う違いです。\n7.2 enumerate 環境の中断・継続\nenumerate 環境をいったん中断して，後刻再開したいことがあります。その際，番号を継続させ\nるための環境\nEnumerate, Enumerate*\nを定義しました。例えば，次のように用います。\n(cid:2) (cid:3)\nenumerate 環境の中断・継続\n次の問いに答えよ．\nY=begin{Enumerate}\nY=item 第1問\nY=item{=Ylabel{val-a}} ．．．を満たすように，定数$a$の値を定めよ．\nY=end{Enumerate}\n以下，$a$ は (Y=ref{val-a})で求めた値とする．\nY=begin{Enumerate*}\nY=item 第3問\nY=item 第4問\nY=end{Enumerate*}\n(cid:4) (cid:5)\n次の問いに答えよ．\n(1) 第1問\n(2) ．．．を満たすように，定数aの値を定めよ．\n−→\n以下，a は (2)で求めた値とする．\n(3) 第3問\n(4) 第4問\nすなわち，Enumerate 環境で始めて，それを Enumerate* 環境で続けることになります。\nEnumerate 環境は，実質 enumerate 環境と同じですが，後で番号を継続させる仕掛けを追加し\nてあります。Enumerate* 環境は直前の Enumerate 環境または Enumerate* 環境の番号を引き継ぎ\nます。\n92", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 99", "content": "7.3 指定した項目番号に * などを附加\n問題集などで，一部の問題に*印などをつけようという話です。\n(cid:2) (cid:3)\nY=item*\nY=begin{enumerate}[1.~]\nY=item 次の問いに答えよ。\nY=begin{edaenumerate}[%\n1. 次の問いに答えよ。\nY=protect=Ypreitem(1)]\nY=item* aaa → *(1) aaa (2) bbb\nY=item bbb\n(3) ccc *(4) ddd\nY=item ccc\nY=item* ddd\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\nすなわち，書式指定にY=preitemを置き，*を付けたい項目をアスタリスク付の Y=item* で記述\nします。\n*を番号の後ろにおきたければ\n(cid:2) (cid:3)\nY=item**\nY=begin{edaenumerate}[(1){%\nY=makebox[0pt][l]=Ypostitem}~] 1. 次の問いに答えよ。\nY=item** aaa\n→ (1)* aaa (2) bbb\nY=item bbb\nY=item ccc (3) ccc (4)* ddd\nY=item** ddd\nY=end{edaenumerate}\n(cid:4) (cid:5)\n書式指定にY=postitemを加え，アスタリスクを2個つけたY=item**を用います。\nまた，後置記号のありなしで番号部分の横幅が揃うように\nY=begin{edaenumerate}[(1){=Ymakebox[0pt][l]=Ypostitem}~]\nと，細工をしています。\n*以外の記号を使いたいときは，Y=item*, Y=item** に[..]オプションをつけます。\n(cid:2) (cid:3)\nY=item*[..]\nY=begin{edaenumerate}[%\nY=protect=Ypreitem(1)] 1. 次の問いに答えよ。\nY=item*[=Ydag] aaa\n→ †(1) aaa (2) bbb\nY=item bbb\n(3) ccc *(4) ddd\nY=item ccc\nY=item* ddd\nY=end{edaenumerate}\n(cid:4) (cid:5)\n後置する場合です。\n93", "tags": []}
{"title": "Page 100", "content": "(cid:2) (cid:3)\nY=item**[..]\nY=begin{edaenumerate}[(1){%\nY=makebox[0pt][l]=Ypostitem}~] 1. 次の問いに答えよ。\nY=item**[=Ydag] aaa\n→ (1)† aaa (2) bbb\nY=item bbb\n(3) ccc (4)* ddd\nY=item ccc\nY=item** ddd\nY=end{edaenumerate}\n(cid:4) (cid:5)\n前と後ろの両方に記号をつけたい，ということは起こりそうもありませんが，可能ではあります。\n(cid:2) (cid:3)\n前後置\nY=begin{edaenumerate}[%\nY=protect=Ypreitem(1){%\n1. 次の問いに答えよ。\nY=makebox[0pt][l]=Ypostitem}~]\nY=item*[*][=Ydag] aaa → *(1)† aaa *(2) bbb\nY=item* bbb (3)† ccc (4)‡ ddd\nY=item**[=Ydag] ccc\nY=item*[][=Yddag] ddd\nY=end{edaenumerate}\n(cid:4) (cid:5)\nと，Y=item*に[前置記号][後置記号]と2つのオプションをつけます。この場合，前置記号が‘*’\nであっても，明示する必要があります。\n以上の例はすべて edaenumerate 環境で示しましたが，一般の enumerate 環境，各種の横並び\nenumerate環境でも有効です。\n7.4 横幅一定のローマ数字\n小問などの番号にローマ数字を用いると\n(cid:2) (cid:3)\n小問番号にローマ数字\nY=begin{enumerate}[(i)] (i) あああ\nY=item あああ\n→ (ii) いいい\nY=item いいい\nY=item ううう (iii) ううう\nY=end{enumerate}\n(cid:4) (cid:5)\nローマ数字が左にせり出す感じになります。その点を配慮して\n94", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 101", "content": "(cid:2) (cid:3)\nY=emroman\nY=begin{enumerate}[(%\n(i) あああ\nY=protect=Yexpandafter=Yemroman i)]\nY=item あああ → (ii) いいい\nY=item いいい\n(iii) ううう\nY=item ううう\nY=end{enumerate}\n(cid:4) (cid:5)\n大文字のローマ数字に対しては\n(cid:2) (cid:3)\nY=emRoman\nY=begin{enumerate}[(%\n( I ) あああ\nY=protect=Yexpandafter=YemRoman I)]\nY=item あああ → (II) いいい\nY=item いいい\n(III) ううう\nY=item ううう\nY=end{enumerate}\n(cid:4) (cid:5)\n7.5 固定桁数のナンバリング 001, 002, 003, ...\n左に0を補って固定桁数で番号付けをするためのコマンドがY=Ofilです。\n(cid:2) (cid:3)\nY=Ofil\nY=begin{edaenumerate}<5>’(=YOfil{2}{=Ygetcurrentenum})’\nY=item aa\nY=item bb\nY=item cc\nY=item dd\nY=item ee\nY=item ff\nY=item gg\nY=item hh\nY=item ii\nY=item jj\nY=end{edaenumerate}\n(cid:4) (cid:5)\n−→ (01) aa (02) bb (03) cc (04) dd (05) ee\n(06) ff (07) gg (08) hh (09) ii (10) jj\nすなわち，Y=Ofilは，桁数と数値の2つの引数をとります。\n95", "tags": []}
{"title": "Page 102", "content": "7.6 番号付けにカタカナ・ひらがなを使う。\nこの節の機能は，Waverさんから使用を認めていただいたマクロを使用させていただいています。\n有り難うございます。＞ Waver さん。\nenumerate 環境での番号付けは通常，\n1, 2, 3, ...\na, b, c, ...\nのように行われますが，これを\nア,イ,ウ,...\nイ,ロ,ハ,...\nのようにする例です。\n{%\nY=renewcommand{=Ylabelenumi}{%\n(Y=カタカナ{enumi})}\n(ア) y =x\nY=begin{enumerate}\nY=item $y=x$ −→ (イ) y =x2\nY=item $y=x^2$\n(ウ) y =x3\nY=item $y=x^3$\nY=end{enumerate}\n}%\nY=カタカナ というコマンドで，\nア,イ,ウ,エ,オ,カ,...\nと，カタカナの五十音順にナンバリングされます。ここを次のように変更することもできます。\nY=イロハ で\nイ,ロ,ハ,ニ,ホ,ヘ,...\nY=ひらがな で\nあ,い,う,え,お,か,...\nY=いろは で\nい,ろ,は,に,ほ,へ,...\n7.7 enumerate 環境のオプション文字の追加\nenumerate パッケージを使用すると，以下のオプション文字を用いて番号付けを制御することが\nできます。\n1 : 1,2,3,4,5,6,7,.....\nI : I,II,III,IV,V,VI,VII,.....\ni : i,ii,iii,iv,v,vi,vii,.....\nA : A,B,C,D,E,F,G,.....\na : a,b,c,d,e,f,g,.....\n96", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 103", "content": "emathE.sty では，オプションに使用できる文字として，下の7個を追加してあります。\nm ：\n(cid:6)1, (cid:6)2, (cid:6)3, (cid:6)4, (cid:6)5, (cid:6)6, (cid:6)7,.....\nn ： 1,2,3,4,5,6,7,.....\nア ： ア,イ,ウ,エ,オ,カ,キ,...\nイ ： イ,ロ,ハ,ニ,ホ,ヘ,ト,...\nあ ： あ,い,う,え,お,か,き,...\nい ： い,ろ,は,に,ほ,へ,と,...\n一 ： 一,二,三,四,五,六,七,...\nただし，最後の「一」は plext パッケージを必要とします。\nその他の文字はそのまま出力されますから\nY=begin{enumerate}[（ア）]\nとすれば，番号付けが\n（ア）,（イ）,（ウ）,（エ）,（オ）,（カ）,（キ）,...\nとなります。\nこのオプション文字の追加は，edaenumerate 環境に対しても有効です。その一例として n オプ\nション — 縦長の丸付き数字 — を用いたものをごらん頂きましょう。\n(cid:2) (cid:3)\nenumerate 環境のオプション文字 m\n右の Y=texttt{BASIC} のプログラム（省略）の Y=framebox{ } に\n次のいずれかを補い，プログラムを完成させよ．\n{Y=ttfamily\nY=begin{edaenumerate}<5>[n]\nY=setcurrentenum{-1}%\nY=item +\nY=item -\nY=item $=Yast$\nY=item /\nY=item =\nY=item{}<>\nY=item >\nY=item{}<\nY=item >=\nY=item{}<=\nY=end{edaenumerate}\n}\n(cid:4) (cid:5)\n97", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 104", "content": "右の BASIC のプログラム（省略）の に次のいずれかを補い，プログラム\nを完成させよ．\n−→\n0 + 1 - 2 ∗ 3 / 4 =\n5 <> 6 > 7 < 8 >= 9 <=\nここで Y=setcurrentenum というコマンドが登場しますが，これは，enumerate 環境の現在の深\nさの番号変数の値を変更するものです。この例では，番号が1からではなく，0から始まっていま\nす。そのため，初期値を変更しておく必要があります。\nY=setcounter{enumi}{-1}\nとするのが普通ですが，ある問題集の中にこの問題を収録したとき，問題集の番号を enumerate\n環境で付けますと，enumerate 環境の深さが変わることにより\nY=setcounter{enumii}{-1}\nと修正を必要とします。ここで用いた\nY=setcurrentenum{-1}\nは，現在のenumerate環境の深さを判断して，その番号を変更する機能を持つコマンドで，emath.sty\nの中で定義されています。\nこれと対をなすコマンドがY=getcurrentenumで，現在の問題番号を取得します。\n7.8 enumerate環境における番号付けの初期値・刻み値変更\nenumerate環境における番号付けで\n初期値を1以外の値にしたい。\n刻み値を1以外に指定したい。\nという要望にこたえるため，enumerate環境の<key=val>オプションのkeyに\nsyokiti, kizamiti\nを新設しました。,\n98", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 105", "content": "(cid:2) (cid:3)\n<kizamiti=10>\nY=begin{reidai}\n刻み値を10に設定する例\nY=begin{jquote}\nY=begin{ttfamily}\nY=begin{enumerate}<syokiti=90,kizamiti=10>[1]\nY=item INPUT \"分数A/B(0<A<B)を入力，A, B =\";A, B\nY=item IF (B MOD A) = O THEN GOTO =Yref{end}\nY=item N = INT(=YHako)+=YHako\nY=item PRINT N;\nY=item A = A*N-B\nY=item B = B*N\nY=item GOTO =YHako\nY=item =Ylabel{end}PRINT =YHako\nY=item END\nY=end{enumerate}\nY=end{ttfamily}\nY=end{jquote}\nY=end{reidai}\n(cid:4) (cid:5)\n例題 1 刻み値を10に設定する例\n100 INPUT \"分数A/B(0<A<B)を入力，A, B =\";A, B\n110 IF (B MOD A) = O THEN GOTO 170\n120 N = INT( ア )+ イ\n130 PRINT N;\n→\n140 A = A*N-B\n150 B = B*N\n160 GOTO ウ\n170 PRINT エ\n180 END\n次は，刻み値を負にする例です。\n99", "tags": []}
{"title": "Page 106", "content": "(cid:2) (cid:3)\n<kizamiti=-1>\nY=begin{reidai}\n初期値を27, 刻み値を$-1$に設定する例\nY=begin{jquote}\nY=begin{enumerate}<syokiti=27,kizamiti=-1>[1.~]\nY=item zzz\nY=item yyy\nY=begin{align}\nx&=1=YY=\ny&=2=Ylabel{yy}=YY=\nz&=3\nY=end{align}\nY=item xxx\nY=item www\nY=end{enumerate}\nY=eqref{yy}において\nY=end{jquote}\nY=end{reidai}\n(cid:4) (cid:5)\n例題 2 初期値を27, 刻み値を−1に設定する例\n26. zzz\n25. yyy\nx=1 ···················· (cid:6)1\n→ y =2 ···················· (cid:6)2\nz =3 ···················· (cid:6)3\n24. xxx\n23. www\n(cid:6)2において\n7.9 enumerate環境の前後左右の空き調整\nenumerate環境の前後左右の空きを調整するには，enumerate環境の<...>オプション\napnenum=....\nを利用します。\nまずは，標準のenumerate環境です。\n100", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 107", "content": "(cid:2) (cid:3)\nenumerate環境\nY=begin{enumerate}[1.~] 1. 次の問いに答えよ。\nY=item 次の問いに答えよ。\n(1) あああああああああああ\nY=begin{enumerate}[(1)]\nあああああああああああ\nY=item あああああああああああああ\n→ ああああああ\nあああああああああああああああ\n(2) いいいいいいいいいいい\nY=item いいいいいいいいいいいいい\nいいいいいいいいいいい\nいいいいいいいいいいいいいいい\nいいいいいい\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n101", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 108", "content": "7.9.1 左インデント\nでは，左インデントの修正です。\n前ページ，標準のenumerate環境では，小問の左インデントは，大問のそれより全角2文字分深\nくなっています。それを同じにしてみましょう。\n(cid:2) (cid:3)\nY=leftmarginの変更\nY=begin{enumerate}[1.~]\n1. 次の問いに答えよ。\nY=item 次の問いに答えよ。\nY=begin{enumerate}% (1) あああああああああああああ\n<apnenum={=Yleftmargin=0zw}>[(1)] あああああああああああああ\nY=item あああああああああああああ → ああ\nあああああああああああああああ (2) いいいいいいいいいいいいい\nY=item いいいいいいいいいいいいい\nいいいいいいいいいいいいい\nいいいいいいいいいいいいいいい\nいい\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n小問番号が左に出すぎていますから，小問の1行目だけ右に押し込みます。Y=itemindentを変\n更します。\n(cid:2) (cid:3)\nY=itemindentの変更\nY=begin{enumerate}[1.~]\nY=item 次の問いに答えよ。\n1. 次の問いに答えよ。\nY=begin{enumerate}%\n<apnenum={=Yleftmargin=0zw% (1) ああああああああああああ\nY=itemindent=1zw% あああああああああああああ\n}>[(1)] → あああ\nY=item あああああああああああああ\n(2) いいいいいいいいいいいい\nあああああああああああああああ\nいいいいいいいいいいいいい\nY=item いいいいいいいいいいいいい\nいいい\nいいいいいいいいいいいいいいい\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n102", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 109", "content": "7.9.2 縦間隔\n次は縦間隔の修正です。\n大問と小問の間を詰めたい，というご意見はよく耳にします。Y=topsep,Y=parskipを変更します。\n(cid:2) (cid:3)\n大問と小問の縦間隔\nY=begin{enumerate}[1.~]\nY=item 次の問いに答えよ。\nY=begin{enumerate}%\n1. 次の問いに答えよ。\n<apnenum={=Yleftmargin=0zw%\n(1) ああああああああああああ\nY=itemindent=1zw%\nあああああああああああああ\nY=topsep=0pt%\nあああ\nY=parskip=0pt% →\n}>[(1)] (2) いいいいいいいいいいいい\nY=item あああああああああああああ いいいいいいいいいいいいい\nあああああああああああああああ いいい\nY=item いいいいいいいいいいいいい\nいいいいいいいいいいいいいいい\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n小問同士の間隔も詰めたい，となると，Y=itemsepを修正します。\n(cid:2) (cid:3)\n小問同士の縦間隔\nY=begin{enumerate}[1.~]\nY=item 次の問いに答えよ。\nY=begin{enumerate}%\n<apnenum={=Yleftmargin=0zw%\n1. 次の問いに答えよ。\nY=itemindent=1zw%\n(1) ああああああああああああ\nY=topsep=0pt%\nあああああああああああああ\nY=parskip=0pt%\n→ あああ\nY=itemsep=0pt%\n(2) いいいいいいいいいいいい\n}>[(1)]\nいいいいいいいいいいいいい\nY=item あああああああああああああ\nいいい\nあああああああああああああああ\nY=item いいいいいいいいいいいいい\nいいいいいいいいいいいいいいい\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n103", "tags": []}
{"title": "Page 110", "content": "7.9.3 縦間隔のグルー\nところで，縦間隔の初期値がどうなっているかを確認しておきます。\ntopsep = 8.0pt plus 2.0pt minus 4.0pt\nparskip = 4.0pt plus 2.0pt minus 1.0pt\nitemsep = 4.0pt plus 2.0pt minus 1.0pt\nある意味で，グルーは TEXの命です。これらを0pt固定にするということは，ページ全体のバ\nランスがとれなくなり，折角の TEXの美しさを損なうこととなりかねません。\nということでグルーを付けておきましょう。\n(cid:2) (cid:3)\nenumerate環境\nY=begin{enumerate}[1.~]\nY=item 次の問いに答えよ。\nY=begin{enumerate}%\n<apnenum={=Yleftmargin=0zw%\n1. 次の問いに答えよ。\nY=itemindent=1zw%\n(1) ああああああああああああ\nY=topsep=0pt plus 6pt%\nあああああああああああああ\nY=parskip=0pt plus 3pt%\n→ あああ\nY=itemsep=0pt plus 3pt%\n(2) いいいいいいいいいいいい\n}>[(1)]\nいいいいいいいいいいいいい\nY=item あああああああああああああ\nいいい\nあああああああああああああああ\nY=item いいいいいいいいいいいいい\nいいいいいいいいいいいいいいい\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n7.9.4 Y=enumSep\n<apnenum=...>オプションは，当該enumerate環境のみに対する局所的な変更です。\n文書全体に対して同様の変更をするためには，\nY=enumSep, =YenumSepi, =YenumSepii, ...\nコマンドが用意されています。\nY=enumSepコマンドの引数にlist環境の第二引数に記述するものを与えます。例えば，\nY=enumSep{=Ytopsep=0pt=Yparskip=0pt%\nY=parsep=0pt=Yitemsep0pt}%\nと記述すると，行間は狭くなります。これはよく使いそうですから，\nY=def=Ynarrowenumsep{=Ytopsep=0pt=Yparskip=0pt=Yparsep=0pt%\nY=itemsep0pt}%\n104", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 111", "content": "と，代名詞 Y=narrowenumsep を定義してあります。\n(cid:2) (cid:3)\nenumerate環境の行間\nY=enumSep{=Ynarrowenumsep}\n次の問いに答えよ． 次の問いに答えよ．\nY=begin{enumerate}[1)] 1) aaa\n−→\nY=item aaa 2) bbb\nY=item bbb 3) ccc\nY=item ccc\nY=end{enumerate}\n(cid:4) (cid:5)\nY=enumSepはenumerate環境4レベルすべてについて共通の設定をしますが，レベル毎に変更し\nたいというときは，Y=enumSepi, Y=enumSepii, Y=enumSepiii, Y=enumSepiv を使用することもでき\nます。\nなお，これらのコマンドと，<apnenum=...>オプションを併用した場合は，当該enumerate環境\nに対しては<apnenum=...>オプションが優先されます。\n7.9.5 Y=enumLmargin\n文書全体で左マージンを変更するコマンドが Y=enumLmargin です。\n例えば次のように用います。\n(cid:2) (cid:3)\nenumerate環境の左マージン\nY=enumLmargin{1zw}%\nY=begin{enumerate}[=YLarge 1.=Y ] 1.\n次の問いに答えよ．おおおお\nY=item 次の問いに答えよ．おおおおおおおおおお\nおおおおおおおおおおおおおお\nおおおおおおおおお\nお\nY=begin{enumerate}[(1)]\n−→\nY=item アアアアアアアアアアアアアアアア (1) アアアアアアアアアアアア\nアアアアアアアアア アアアアアアアアアアアアア\nY=item イイイイイイイイイイイイイイイイ (2) イイイイイイイイイイイイ\nイイイイイイイイイ イイイイイイイイイイイイイ\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n前節の行間を狭くするコマンドと併用すると，\n105", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 112", "content": "(cid:2) (cid:3)\nケチケチ enumerate\nY=enumSep{=Ynarrowenumsep}%\nY=enumLmargin{1zw}%\n1.\nY=begin{enumerate}[=YLarge 1.=Y ] 次の問いに答えよ．おおおお\nY=item 次の問いに答えよ．おおおおおおおおおお おおおおおおおおおおおおおお\nおおおおおおおおお お\nY=begin{enumerate}[(1)] −→ (1) アアアアアアアアアアアア\nY=item アアアアアアアアアアアアアアアア アアアアアアアアアアアアア\nアアアアアアアアア (2) イイイイイイイイイイイイ\nY=item イイイイイイイイイイイイイイイイ イイイイイイイイイイイイイ\nイイイイイイイイイ\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\nY=enumLmarginはenumerate環境4レベルすべてについて左マージンを変更しますが，レベル毎に\n変更したいというときは，Y=enumLmargini,Y=enumLmarginii,Y=enumLmarginiii,Y=enumLmarginiv\nを使用することもできます。\nなお，この目的にもY=apnlistを使用することができます。\nまずはデフォルトの確認です。\n(cid:2) (cid:3)\nenumerate環境\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nY=begin{enumerate}[1.~]\nY=item 次の問いに答えよ。 1. 次の問いに答えよ。おおおおおお\nおおおおおおおおおおおおおおお おおおおおおおおお\nY=begin{enumerate}[(1)]\n(1) あああああああああああああ\nY=item あああああああああああ\nああああああああああ\nああああああああああああ\nY=item いいいいいいいいいいい (2) いいいいいいいいいいいいい\n→\nいいいいいいいいいいいい いいいいいいいいいい\nううううううううううううう\nうううううううううううう ううううううううううう\nうううううううううううう\n2. アアアアアアアアアアアアアアア\nY=end{enumerate}\nアアアアアアアアアア\nY=item アアアアアアアアアアアアア\nアアアアアアアアアアアア いいいいいいいいいいいいいいいいい\nY=end{enumerate} いいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\n左インデントを調整した一例です。\n106", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 113", "content": "(cid:2) (cid:3)\nY=apnlist\nあああああああああああああああああ\nあああああああああああああああああ あああああああああああああああああ\nあああああああああああああああああ\n1. 次の問いに答えよ。おおおおおお\nY=apnlist{=Yitemindent=1zw\nおおおおおおおおお\nY=leftmargin=1zw\n(1) ああああああああああああああ\nY=listparindent=1zw}\nあああああああああ\nY=begin{enumerate}[1.~]\n(2) いいいいいいいいいいいいいい\nY=item 次の問いに答えよ。\n→ いいいいいいいいい\nおおおおおおおおおおおおおおお\nうううううううううううううう\nY=apnlist{=Ynarrowsep\nうううううううううう\nY=itemindent=1zw\nY=topsep=0zw 2. アアアアアアアアアアアアアアア\nY=leftmargin=1zw アアアアアアアアアア\nY=listparindent=1zw}\nいいいいいいいいいいいいいいいいい\nY=begin{enumerate}[(1)]\nいいいいいいいいいいいいいいいいい\n% 以下前の例と同じ\n(cid:4) (cid:5)\n7.10 edaenumerate環境の前後左右の空き調整\nedaenumerate環境における項目周りのアキの調整です。\n7.10.1 edaenumerate環境\nデフォルトのedaenumerate環境を見ておきます。\n(cid:2) (cid:3)\nedaenumerate環境\nY=begin{enumerate}[1.~]\nY=item 次のおおおおおおおおおおおおおおおおおおお\nY=begin{edaenumerate}[(1)]\nY=item\nああああああああああああああああ\nああああああああああああああああ\nY=item\nいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいい\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n↓\n1. 次のおおおおおおおおおおおおおおおおおおお\n(1) あああああああああああああああああ (2) いいいいいいいいいいいいいいいいい\nあああああああああああああああ いいいいいいいいいいいいいいい\n107", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 114", "content": "7.10.2 preedasep=..オプション\n上のデフォルト状態に対して，「小項目の2行目以降を左に突き出したい」という要望がありま\nす。そこで，<preedasep=..>オプションを新設しました。\n（preedasepのデフォルト値は1.75zwです。）\n108", "tags": []}
{"title": "Page 115", "content": "(cid:2) (cid:3)\npreedasep=..オプション\nY=begin{enumerate}[1.~]\nY=item 次のおおおおおおおおおおおおおおおおおおお\nY=begin{edaenumerate}<preedasep=0pt>[(1)]\nY=item\nああああああああああああああああ\nああああああああああああああああ\nY=item\nいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいい\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n↓\n1. 次のおおおおおおおおおおおおおおおおおおお\n(1) ああああああああああああああああああ(あ2) いいいいいいいいいいいいいいいいいいい\nあああああああああああああ いいいいいいいいいいいいい\n2行目以降のみならず，1行目も左に突き出てしまいましたから，<apnenum=..>オプションで1\n行目を修正します。\n(cid:2) (cid:3)\napnenum=..オプション\nY=begin{enumerate}[1.~]\nY=item 次のおおおおおおおおおおおおおおおおおおお\nY=begin{edaenumerate}\n<preedasep=0pt,apnenum={=Yitemindent=1.75zw}>[(1)]\nY=item\nああああああああああああああああ\nああああああああああああああああ\nY=item\nいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいい\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n↓\n1. 次のおおおおおおおおおおおおおおおおおおお\n(1) ああああああああああああああああああ(あ2) いいいいいいいいいいいいいいいいいいい\nあああああああああああああ いいいいいいいいいいいいい\n109", "tags": []}
{"title": "Page 116", "content": "7.10.3 postedasep=..オプション\n小項目間のアキは，<postedasep=..>オプションで調整できます。\n（postedasepのデフォルト値は.75zwです。）\n(cid:2) (cid:3)\npostedasep=..オプション\nY=begin{enumerate}[1.~]\nY=item 次のおおおおおおおおおおおおおおおおおおお\nY=begin{edaenumerate}\n<preedasep=0pt,postedasep=2zw,\napnenum={=Yitemindent=1.75zw}>\n[(1)]\nY=item\nああああああああああああああああ\nああああああああああああああああ\nY=item\nいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいい\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n↓\n1. 次のおおおおおおおおおおおおおおおおおおお\n(1) あああああああああああああああああああ(2) いいいいいいいいいいいいいいいいいいい\nあああああああああああああ いいいいいいいいいいいいい\n110", "tags": []}
{"title": "Page 117", "content": "7.10.4 edatopsep=..オプション\n大問とedaenumerate環境との縦間隔は<edatopsep=..>オプションで調整可能です。\n（edatopsepのデフォルト値は0ptです。）\n(cid:2) (cid:3)\nedatopsep=..オプション\nY=begin{enumerate}[1.~]\nY=item 次のおおおおおおおおおおおおおおおおおおお\nY=begin{edaenumerate}\n<preedasep=0pt,postedasep=2zw,edatopsep=-.8zh,\napnenum={=Yitemindent=1.75zw}>[(1)]\nY=item\nああああああああああああああああ\nああああああああああああああああ\nY=item\nいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいい\nY=item\nうううううううううううううううう\nうううううううううううううううう\nY=item\nええええええええええええええええ\nええええええええええええええええ\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n↓\n1. 次のおおおおおおおおおおおおおおおおおおお\n(1) あああああああああああああああああああ(2) いいいいいいいいいいいいいいいいいいい\nあああああああああああああ いいいいいいいいいいいいい\n(3) ううううううううううううううううううう(4) えええええええええええええええええええ\nううううううううううううう えええええええええええええ\n7.11 Y=item 直後のedaenumerate環境\n7.11.1 問題提示\n大問Y=itemには文章があって，そのあとに小問が続くのが普通ですが，\n111", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 118", "content": "(cid:2) (cid:3)\n普通は\nY=begin{enumerate}[=Yprotect=Yexpandafter=Yfbox 1]\nY=item 次の問いに答えよ。\nY=begin{edaenumerate}[(1)]\nY=item 第1問\nY=item 第2問\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n1 次の問いに答えよ。\n→\n(1) 第1問 (2) 第2問\n大問には文章はなく，いきなり小問をedaenumerate環境で記述するときの話です。\n(cid:2) (cid:3)\n大問直後のedaenumerate環境\nY=begin{enumerate}[=Yprotect=Yexpandafter=Yfbox 1]\nY=item\nY=begin{edaenumerate}[(1)]\nY=item 第1問\nY=item 第2問\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n→ 1 (1) 第1問 (2) 第2問\n特に問題はないようですが，大問の左インデントをいじっていると問題が発生します。\n7.11.2 大問の左インデント操作との競合\n大問の左インデントを変更している場合は問題が発生します。\n(cid:2) (cid:3)\nY=enumLmarginとの併用\nY=enumLmargini{0pt}\nY=begin{enumerate}[=Yprotect=Yexpandafter=Yfbox 1]\nY=item\nY=begin{edaenumerate}[(1)]\nY=item 第1問\nY=item 第2問\nY=item 第3問\nY=item 第4問\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n112", "tags": ["インストール", "初心者向け", "基本操作", "環境構築"]}
{"title": "Page 119", "content": "(11) 第1問 (2) 第2問\n→\n(3) 第3問 (4) 第4問\n極端に\nY=enumLmargini{0pt}\nとして，大問の左マージンをなくしてしまうと，大問番号と小問番号が重なります。\n＃ こんな馬鹿な使い方はしないほうがよろしいかと思いますが，\n＃ 小問番号を横に並べる\n＃ enumerate の2行目以降を左に突き出す\n＃ などという発想の先にこのような事態もおこってくるということでしょうか。\n＃ どこまで続くぬかるみぞ，といいたくなりますが．．．．．\n7.11.3 edaenumerate環境に<edafirstindent=..>オプション\nedaenumerate環境に <edafirstindent=..>オプションを付加する解決法です。\n(cid:2) (cid:3)\n<edafirstindent=..>オプション\nY=enumLmargini{0pt}\nY=begin{enumerate}[=Yprotect=Yexpandafter=Yfbox 1]\nY=item\nY=begin{edaenumerate}<edafirstindent=2zw>[(1)]\nY=item 第1問\nY=item 第2問\nY=item 第3問\nY=item 第4問\nY=end{edaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n1 (1) 第1問 (2) 第2問\n→\n(3) 第3問 (4) 第4問\n7.11.4 emathAeとの併用\nemathAe.styを用いて，解答を巻末に集めるときはこの方式のほうがすっきりするようです。ま\nた，Y=kaitouコマンドも使用可能となります。\n113", "tags": ["インストール", "初心者向け", "基本操作", "環境構築"]}
{"title": "Page 120", "content": "(cid:2) (cid:3)\nemathAeとの併用\nY=enumLmargin{0pt}\nY=openKaiFile\nY=begin{enumerate}[=Yprotect=Yexpandafter=Yfbox1]\nY=item 大問1\nY=kaitou{=Ydef=YKaienumerate{edaenumerate}%\nY=def=YKaienumopt{<edafirstindent=2zw,retusuu=3>}}%\nY=begin{enumerate}[(1)]\nY=item 小問1 Y=kaitou{解答1}\nY=item 小問2 Y=kaitou{解答2}\nY=item 小問3 Y=kaitou{解答3}\nY=item 小問4 Y=kaitou{解答4}\nY=item 小問5 Y=kaitou{解答5}\nY=item 小問6 Y=kaitou{解答6}\nY=end{enumerate}\nY=end{enumerate}\nY=closeKaiFile\nY=hrule\n【解答】\nY=inputKaiFile\n(cid:4) (cid:5)\n1 大問1\n(1) 小問1\n(2) 小問2\n(3) 小問3\n(4) 小問4\n→\n(5) 小問5\n(6) 小問6\n【解答】\n1 (1) 解答1 (2) 解答2 (3) 解答3\n(4) 解答4 (5) 解答5 (6) 解答6\n114", "tags": []}
{"title": "Page 121", "content": "7.11.5 betaenumerate環境では\n新設した<edafirstindent=..>は，betaenumerate環境に対しても有効です。\n(cid:2) (cid:3)\nbetaenumerate環境の場合\nY=enumLmargini{0pt}\nY=begin{enumerate}[=Yprotect=Yexpandafter=Yfbox 1]\nY=item\nY=begin{betaenumerate}<edafirstindent=2zw>[(1)]\nY=item 第1問\nY=item 第2問\nY=item 第3問\nY=item 第4問\nY=item 第5問\nY=item 第6問\nY=item 第7問\nY=item 第8問\nY=end{betaenumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n1 (1) 第1問 (2) 第2問 (3) 第3問 (4) 第4問 (5) 第5問 (6) 第6問\n→\n(7) 第7問 (8) 第8問\n115", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 122", "content": "7.11.6 解答部のbetaenumerate\nemathAe.styを用いて，解答部をbetaenumerateとする場合も同様です。\n(cid:2) (cid:3)\nemathAeでbetaenumerate\nY=enumLmargin{0pt}\nY=openKaiFile\nY=begin{enumerate}[=Yprotect=Yexpandafter=Yfbox1]\nY=item 大問1\nY=kaitou{=Ydef=YKaienumerate{betaenumerate}%\nY=def=YKaienumopt{<edafirstindent=2zw>}}%\nY=begin{enumerate}[(1)]\nY=item 小問1 Y=kaitou{解答1}\nY=item 小問2 Y=kaitou{かいとう2}\nY=item 小問3 Y=kaitou{answer3}\nY=item 小問4 Y=kaitou{解答4}\nY=item 小問5 Y=kaitou{解答5}\nY=item 小問6 Y=kaitou{解答6}\nY=item 小問7 Y=kaitou{解答7}\nY=item 小問8 Y=kaitou{解答8}\nY=end{enumerate}\nY=end{enumerate}\nY=closeKaiFile\nY=hrule\n【解答】\nY=inputKaiFile\n(cid:4) (cid:5)\n1 大問1\n(1) 小問1\n(2) 小問2\n(3) 小問3\n(4) 小問4\n(5) 小問5\n→\n(6) 小問6\n(7) 小問7\n(8) 小問8\n【解答】\n1 (1) 解答1 (2) かいとう2 (3) answer3 (4) 解答4 (5) 解答5\n(6) 解答6 (7) 解答7 (8) 解答8\n116", "tags": []}
{"title": "Page 123", "content": "7.12 list環境の行間\nenumerate以外のlistに基づく環境\ndescription, itemize\n環境について，行間の修正をするために\nY=apnlist\nを用意してあります。\n7.12.1 itemize環境\nitemize環境のデフォルト状態は\n(cid:2) (cid:3)\nitemize環境\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nY=begin{itemize} • aaa\nY=item aaa\n→ • bbb\nY=item bbb\nY=item ccc • ccc\nY=end{itemize}\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\n項目間の行間を狭くするにはY=apnlistの引数にlist環境の第2引数に引き渡すものを記述し\nます。\nあああああああああああああああああ\n(cid:2) (cid:3)\n行間を狭く あああああああああああああああああ\nあああああああああああああああああ • aaa\nあああああああああああああああああ → • bbb\nY=apnlist{=Ynarrowsep}\n• ccc\nY=begin{itemize}\n% 以下同じ いいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\nいいいいいいいいいいいいいいいいい\nY=narrowsepは\nY=def=Ynarrowsep{=Yparsep=Yz@=Yitemsep=Yz@=Yparskip=Yz@}\nとemathE.styで定義されています。すなわち\nY=parsep, =Yitemsep, =Yparskip\nを0ptとしています。この値を細かく調整することで好みのスタイルを実現できます。\n本文との間も詰めるには，Y=topsep=0ptを附加します。\n117", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 124", "content": "(cid:2) (cid:3) あああああああああああああああああ\nitemize環境\nあああああああああああああああああ\nあああああああああああああああああ • aaa\nあああああああああああああああああ → • bbb\nY=apnlist{=Ynarrowsep=Ytopsep=0pt}\n• ccc\nY=begin{itemize}\nいいいいいいいいいいいいいいいいい\n% 以下同じ\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\n7.12.2 description環境\ndescription環境についても同様です。\n(cid:2) (cid:3)\ndescription環境\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nあああああああああああああああああ\nAAA aaa\nY=begin{description}\nY=item [AAA] aaa → BB bbbb\nY=item [BB] bbbb\nY=item [C] ccccc C ccccc\nY=end{description}\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\nあああああああああああああああああ\n(cid:2) (cid:3)\n行間を狭く あああああああああああああああああ\nあああああああああああああああああ AAA aaa\nあああああああああああああああああ → BB bbbb\nY=apnlist{=Ynarrowsep}\nC ccccc\nY=begin{description}\n% 以下同じ いいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\nいいいいいいいいいいいいいいいいい\n(cid:2) (cid:3) あああああああああああああああああ\n本文との間隔\nあああああああああああああああああ\nあああああああああああああああああ AAA aaa\nあああああああああああああああああ → BB bbbb\nY=apnlist{=Ynarrowsep=Ytopsep=0pt}\nC ccccc\nY=begin{description}\nいいいいいいいいいいいいいいいいい\n% 以下同じ\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\n7.12.3 enumerate環境\nenumerate環境に対してもY=apnlistは有効ですが，層ごとに指定するのはちと面倒です。\n118", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 125", "content": "まずはデフォルトの enumerate 環境です。\n(cid:2) (cid:3)\nenumerate環境\nあああああああああああああああああ あああああああああああああああああ\nあああああああああああああああああ あああああああああああああああああ\nY=begin{enumerate}[1.~]\n1. 次の問いに答えよ。\nY=item 次の問いに答えよ。\nY=begin{enumerate}[(1)]\n(1) あああああああああああああ\nY=item あああああああああああ\nああああああああああ\nああああああああああああ\n→ (2) いいいいいいいいいいいいい\nY=item いいいいいいいいいいい\nいいいいいいいいいい\nいいいいいいいいいいいい\nY=end{enumerate} 2. アアアアアアアアアアアアアアア\nY=item アアアアアアアアアアアアア アアアアアアアアアア\nアアアアアアアアアアアア\nいいいいいいいいいいいいいいいいい\nY=end{enumerate}\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\n第2層のenumerate環境の直前にY=apnlist{=Ynarrowsep=Ytopsep=0pt} を置いて，小問間の空\nき・大問と小問の間の空きを取り去ってみます。\nあああああああああああああああああ\nあああああああああああああああああ\n(cid:2) (cid:3)\nY=apnlist\n1. 次の問いに答えよ。\nあああああああああああああああああ (1) あああああああああああああ\nあああああああああああああああああ ああああああああああ\nY=begin{enumerate}[1.~] (2) いいいいいいいいいいいいい\n→\nY=item 次の問いに答えよ。 いいいいいいいいいい\nY=apnlist{=Ynarrowsep=Ytopsep=0pt}\n2. アアアアアアアアアアアアアアア\nY=begin{enumerate}[(1)]\nアアアアアアアアアア\n% 以下前の例と同じ\n(cid:4) (cid:5)\nいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\nなお，Y=narrowsepは\nY=def=Ynarrowsep{=Yparsep==Yz@=Yitemsep=Yz@=Yparskip=Yz@}\nとemathE.styで定義されています。すなわち\nY=parsep, =Yitemsep, =Yparskip\nを0ptとしています。この値を細かく調整することで好みのスタイルを実現できます。\n先の例に戻り，大問間の行間も詰めたければ，第1層のenumerate環境の前に\nY=apnlist{narrowsep}\n119", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 126", "content": "を入れますと，\nあああああああああああああああああ\n(cid:2) (cid:3) あああああああああああああああああ\nY=apnlist\nあああああああああああああああああ 1. 次の問いに答えよ。\nあああああああああああああああああ (1) あああああああああああああ\nY=apnlist{=Ynarrowsep} ああああああああああ\nY=begin{enumerate}[1.~] → (2) いいいいいいいいいいいいい\nY=item 次の問いに答えよ。 いいいいいいいいいい\nY=apnlist{=Ynarrowsep=Ytopsep=0pt} 2. アアアアアアアアアアアアアアア\nY=begin{enumerate}[(1)] アアアアアアアアアア\n% 以下前の例と同じ\n(cid:4) (cid:5) いいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいい\n本文とenumerate環境部との縦間隔も詰めたい，となると第1層にもY=topsep=0ptを附加し\nます。\nあああああああああああああああああ\n(cid:2) (cid:3) あああああああああああああああああ\nY=apnlist\n1. 次の問いに答えよ。\nあああああああああああああああああ\n(1) あああああああああああああ\nあああああああああああああああああ\nああああああああああ\nY=apnlist{=Ynarrowsep=Ytopsep=0pt}\n→ (2) いいいいいいいいいいいいい\nY=begin{enumerate}[1.~]\nいいいいいいいいいい\nY=item 次の問いに答えよ。\n2. アアアアアアアアアアアアアアア\nY=begin{enumerate}[(1)]\nアアアアアアアアアア\n% 以下前の例と同じ\nいいいいいいいいいいいいいいいいい\n(cid:4) (cid:5)\nいいいいいいいいいいいいいいいいい\nこの場合，第1層，第2層のY=apnlistの引数は同一となりますから，第2層は省略可能です。（省\n略すれば，第1層のものが第2層以下すべてに有効となります。第2層はデフォルトのままにした\nい，ということなら第2層の前に\nY=apnlist{=Yrelax}\nなどと指定する必要があります。）\n7.13 問題番号の参照\nenumerate環境で番号付けされた問題番号にラベルをつけて，あとでそれを参照することができ\nますが，第2層以下の場合，参照の形式がそれより上の層の番号まで含まれてしまいます。具体例\nを挙げてみましょう。\n第1層の番号付けが 1,2,3,...\n第2層の番号付けが a,b,c,...\n120", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 127", "content": "であるとします。\n(cid:2) (cid:3)\n問題番号の参照（デフォルト）\nY=begin{enumerate}\nY=item 第1問\nY=begin{enumerate}\nY=item 小問a\nY=item=Ylabel{mon1b}小問b\nY=item =Yref{mon1b}において\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n1. 第1問\n−→\na. 小問a\nb. 小問b\nc. 1bにおいて\nしかし，この場合は小問c における参照は\n1b において\nではなく，大問番号を取り去って\nb において\nで十分です。このように，当該番号だけの参照を実現するために\nY=refcurrentenum\nを用意しました。次のように用います。\n(cid:2) (cid:3)\nY=refcurrentenumの効用\nY=refcurrentenum\nY=begin{enumerate}\nY=item 第1問\nY=begin{enumerate}\nY=item 小問a\nY=item=Ylabel{mon2b}小問b\nY=item =Yref{mon2b}において\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n121", "tags": []}
{"title": "Page 128", "content": "1. 第1問\n−→\na. 小問a\nb. 小問b\nc. bにおいて\nデフォルト状態に戻すために，Y=refallenum を用意しました。\n(cid:2) (cid:3)\nY=refallenumでデフォルトに戻す\nY=refallenum\nY=begin{enumerate}\nY=item 第1問\nY=begin{enumerate}\nY=item 小問a\nY=item=Ylabel{mon3b}小問b\nY=item =Yref{mon3b}において\nY=end{enumerate}\nY=end{enumerate}\n(cid:4) (cid:5)\n1. 第1問\n−→\na. 小問a\nb. 小問b\nc. 1bにおいて\n122", "tags": []}
{"title": "Page 129", "content": "8 その他一般\n8.1 数式モードの中で英大文字をローマン体にする。\n8.1.1 caprm環境\n数式モードの中ではアルファベットはすべて斜体となります。ところが，点を表す記号は立体\n（ローマン体）で表す習慣です。例えば点 $A(x_1,y_1)$ などと記述すると，A が斜体となってし\nまいます。対応策は Y=mathrm{A}(x_1,y_1), Y=text{A}(x_1,y_1) などと A を立体にするコマン\nドを記述するのが普通です。別の対策として，数式モードで英大文字は立体で，小文字は斜体で表\n示させようという方法もあります。そのための環境 caprm 環境です。\n(cid:2) caprm (cid:3)\nY=begin{caprm}\n二点 $A(a_1,a_2)$, $B(b_1,b_2)$ を結ぶ直線\nY=end{caprm}\n(cid:4) (cid:5)\nという記述をタイプセットすると\n二点 A(a1,a2), B(b1,b2) を結ぶ直線\nと，大文字は立体，小文字は斜体となります。しかし，大文字はいつでも立体にするというのも問\n題です。例えば正弦定理\na b c\n= = =2R\nsinA sinB sinC\nでは，大文字も斜体で書くのが習慣です。これは caprm 環境ではなく，通常の数式モードの方が\n良いでしょう。\n点を表す英大文字は立体で、三角形の頂角の大きさを表す英大文字は斜体で、などという区別は\nなかなかやっかいです。\nしかし，この caprm 環境はなかなか便利な場合もあります。例えば，\n点列 P1, P2, P3,······ , Pn,······\nの表現は caprm 環境だと\n(cid:2) caprm (cid:3)\n$ 点列 P_1,~P_2,~P_3,=Ycdots=Ycdots,~P_n,=Ycdots=Ycdots $\n(cid:4) (cid:5)\nと，簡潔に表されますが，普通の数式モードではやっかいで，一例を挙げると\n(cid:2) (cid:3)\n普通の数式モード\n$Y=mathrm{P_1,~P_2,=Ycdots=Ycdots},~=Ytext{P}_n,=Ycdots=Ycdots$\nとか\nP$_1$, P$_2$, $=Ycdots=Ycdots$, P$_n$, $=Ycdots=Ycdots$\n(cid:4) (cid:5)\nなどと面倒になります。\nなお，caprm 環境内で英大文字を斜体にしたいときは Y=mathnormal を用います。例えば\n123", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 130", "content": "(cid:2) (cid:3)\ncaprmで大文字を斜体\n$BC=2=Ymathnormal{R}=Ysin Y=mathnormal{A}$\n(cid:4) (cid:5)\nをタイプセットすると\nBC=2RsinA\nとなります。\n（注）caprm環境の中が数式モードになるわけではありません。caprm環境の中で，数式モードに\n入ると，そこでは大文字は立体で，小文字は数式イタリックになるというだけです。\n8.1.2 [o]オプション\ncaprm環境内で，あるブロックは大文字をデフォルトの数式イタリック体に戻すには，その部分\nを[o]オプション付のcaprm環境で囲みます。\n(cid:2) (cid:3)\n[o]オプション\nY=begin{caprm}\n三角形ABCにおいて\n三角形ABCにおいて\nY=[ BC=a,~CA=b,~AB=c =Y]\nBC=a, CA=b, AB=c\nとすると，\nY=begin{caprm}[o]\nとすると，(cid:13)三角形ABCの面積Sは\n→ S = s(s−a)(s−b)(s−c)\n三角形ABCの面積$S$は\nとなる。ここで\nY=[ S==Ysqrt{s(s-a)(s-b)(s-c)} =Y]\nBC+CA+AB\nY=end{caprm} s=\n2\nとなる。ここで\nY=[ s==Ybunsuu{BC+CA+AB}{2} =Y]\nY=end{caprm}\n(cid:4) (cid:5)\n8.1.3 コマンド型\n環境にせず，コマンドでローマン体，数式イタリック体を切り替える方法もあります。\nY=caprm ローマン体に\nY=caprm[o] 数式イタリック体に\n124", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 131", "content": "(cid:2) (cid:3)\nY=caprmコマンド\nY=caprm%\n三角形ABCにおいて 三角形ABCにおいて\nY=[ BC=a,~CA=b,~AB=c =Y] BC=a, CA=b, AB=c\nとすると，% とすると，(cid:13)三角形ABCの面積Sは\nY=caprm[o]=Yrelax% → S = s(s−a)(s−b)(s−c)\n三角形ABCの面積$S$は\nとなる。ここで\nY=[ S==Ysqrt{s(s-a)(s-b)(s-c)} =Y] BC+CA+AB\ns=\n2\nとなる。ここで\nY=caprm\nY=[ s==Ybunsuu{BC+CA+AB}{2} =Y]\n(cid:4) (cid:5)\n8.1.4 [l]オプション\n数式環境内で，小文字もローマン体にしたいときは，caprm 環境に [l] オプションをつけます。\n化学式などは小文字もローマン体です。\ncaprm環境の [l] オプション\nY=begin{caprm}[l]\n$Nd_2Fe_{14}B$ −→ Nd2Fe14B\nY=end{caprm}\n8.1.5 Y=mathRM\n数式環境内で大文字だけをローマン体にするとき，それが1個所だけであるなどというときは，\n環境よりはコマンドの方が使いやすいでしょう。そのためのコマンド Y=mathRM です。例えば\nY=mathRM\n$Y=mathRM{A_nB_n}$ −→ AnBn\nにおいて，大文字はローマン体，小文字は数式イタリックでタイプセットされます。\n8.1.6 Y=bekutoru*\n始点，終点に添え字がついた場合のベクトルは面倒です。これを処理するため，caprm環境内で\nの使用を前提とするY=bekutoru*コマンドを作りました。Y=bekutoruとの違いは，\nY=bekutoru の引数はテキストモードであるのに対し，\nY=bekutoru*の引数は数式モードである，ということです。\n125", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 132", "content": "例えば，ベクトルAnAn+1を両方のコマンドで表現してみます。\nY=bekutoruとY=bekutoru*の違い\n−−−−−→\nY=bekutoru{A$_n$A$_{n+1}$} −→ AnAn+1\n−−−−−→\nY=bekutoru*{A_nA_{n+1}} −→ AnAn+1\n同様の趣旨のコマンドに Y=kaku*, Y=sankaku* があります。\n8.1.7 Y=mitSなど\ncaprm環境のもとでは，英大文字はローマン体となります。しかし，面積を表すS は数式イタ\nリックとするのが慣わしです。そのためには$Y=mathnormal S$と記述すればよいのですが，タイ\nピングを楽にするためにY=mitSと，略記することも可能としました。\n(cid:2) (cid:3)\nY=mitSなど\nY=begin{caprm}\nY=sankaku{ABC}において (cid:4)ABCにおいて\nY=[ AB=4,~BC=5,~CA=6 =Y]\nAB=4, BC=5, CA=6\nのとき，次の問いに答えよ。\nのとき，次の問いに答えよ。\nY=begin{enumerate}[(1)] →\nY=item $=Ycos=YmitA$を求めよ。 (1) cosAを求めよ。\nY=item =Ysankaku{ABC}の面積 Y=mitS を求\n(2) (cid:4)ABCの面積Sを求めよ。\nめよ。\nY=end{enumerate}\nY=end{caprm}\n(cid:4) (cid:5)\nY=mitSなどは，Y=ensuremathをかぶせてありますから，\n$Y=cos=YmitA$\nと，数式モードの中で使用してもよし，\n面積Y=mitS を求めよ。\nなどと，地の文中で使用することもできます。（ただし，Y=mitSの後ろに半角空白を置いて，コマ\nンドが“Y=mitSを求めよ。”ではないことを明示する必要があります。）\n8.2 インデント\n条件部分の記述などで，字下げをしたいときがあります。\nquote(quotation)環境\nを用いることもできますが，\n左インデント量を変えたい，\n右インデントは要らない，\n126", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 133", "content": "といった場面で使うために，jquote(jquotation)環境を用意しました。\n127", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 134", "content": "(cid:2) (cid:3)\njquote\nY=noindent\n左端 Y=hfill 右端Y=par\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文\nY=begin{jquote}\nY=texttt{jquote}環境による字下げは，左が全角2文字分，\n右は字下げ無しがデフォルトです．\nY=end{jquote}\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文\nY=begin{jquote}(5zw)\nY=texttt{jquote}による字下げ量はオプション引数Y=texttt(...)によって指定することが\nできます．Y=par\nここでは Y=cmd{begin}=Ytexttt{=Y{jquote=Y}(5zw)}としてみました．\nY=end{jquote}\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文\nY=begin{jquote}(5zw)(3zw)\n右インデントもつけたいときは，さらにY=texttt(...)オプションをつけます．この部分は\nY=Y=Y=cmd{begin}=Ytexttt{=Y{jquote=Y}(5zw)(3zw)}としてあります．なお，右インデントをつ\nけるときは，必ず左インデント量を指定しなければなりません．\nY=end{jquote}\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文\nY=begin{jquote}[0pt]\nY=texttt{jquote}環境のブロックと，その前後の段落との行間は，\nY=begin{jquote}\nY=cmd{topsep}\nY=end{jquote}\nとしてあります．これは Y=texttt{[...]}オプションで指定することが\nできます．このブロックはY=cmd{begin}=Ytexttt{=Y{jquote=Y}[0pt]}としてみました．\nY=the=Ytopsep\n上下の間隔を異なる値にしたいときは，\nY=begin{jquote}\nY=begin{verbatim}\n<tsep=..,bsep=..>\nY=end{verbatim}\nY=end{jquote}\nオプションを用います。\nY=end{jquote}\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文\n(cid:4) 128 (cid:5)", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 135", "content": "左端 右端\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文本文\njquote環境による字下げは，左が全角2文字分，右は字下げ無しがデフォルトです．\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文本文\njquoteによる字下げ量はオプション引数(...)によって指定することができ\nます．\nここでは Y=begin{jquote}(5zw)としてみました．\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文本文\n右インデントもつけたいときは，さらに(...)オプションをつけます．\n−→ この部分は\nY=begin{jquote}(5zw)(3zw)としてあります．なお，右インデントを\nつけるときは，必ず左インデント量を指定しなければなりません．\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文本文\njquote環境のブロックと，その前後の段落との行間は，\nY=topsep\nとしてあります．これは [...]オプションで指定することができます．このブロッ\nクはY=begin{jquote}[0pt]としてみました．0.0pt\n上下の間隔を異なる値にしたいときは，\n<tsep=..,bsep=..>\nオプションを用います。\n本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本文本\n文本文本文本文本文本文本文本文本文\njquote環境の書式です。\n129", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 136", "content": "jquote環境の書式\nY=begin{jquote}<key=val>(左インデント量)(右インデント量)[上下の行間隔]\nkey は\ntsep=.. : 直前の段落との間隔調整 (ex. -=Ytopsep)\nbsep=.. : 直後の段落との間隔調整\nvsep=.. : tsep, bsep を同時指定\nデフォルト値は\n左インデント量 2zw\n右インデント量 0pt\n上下の行間隔 0pt\nとなっています。\njquotation環境も同様です。\nなお，これらの環境は jquote.sty で定義されていますから、使用する際は\nY=usepackage{jquote}\nとしておく必要があります。\n8.3 Y=EMparbox\nこの節では，ボックスのサイズを論じますので，Y=fboxでボックスを枠線で囲んで表示します。\nその際，Y=fboxsep=0ptとしてあります。\n8.3.1 Y=parbox\n複数行からなるブロックをまとめて一つのボックスとするのにY=parboxを用いることがありま\nす。ただし，このコマンドはボックスの横幅を指定する必要があります。\n(cid:2) (cid:3)\nY=parbox\nY=bigskip\nY=fbox{%\nY=parbox{8zw}{% あいうえお\nあいうえおY=Y= → かきくけこ\nかきくけこY=Y= やゆよ\nやゆよ}%\n}\nY=bigskip\n(cid:4) (cid:5)\n8.3.2 Y=EMparbox\nこの横幅指定が煩わしいからさぼろう，というのが新設したコマンドY=EMparbox です。\n130", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 137", "content": "(cid:2) (cid:3)\nY=EMparbox\nY=bigskip\nY=fbox{%\nY=EMparbox{% あいうえお\nあいうえおY=Y= → かきくけこ\nかきくけこY=Y= やゆよ\nやゆよ}%\n}\nY=bigskip\n(cid:4) (cid:5)\nもっとも，この例の場合はtabular環境を使う方が普通でしょう。\n(cid:2) (cid:3)\ntabular環境\nY=bigskip\nY=fbox{%\nY=begin{tabular}{l}\nあいうえお\nあいうえおY=Y=\n→ かきくけこ\nかきくけこY=Y=\nやゆよ\nやゆよ\nY=end{tabular}%\n}\nY=bigskip\n(cid:4) (cid:5)\n8.3.3 Y=EMparboxのベースライン\nそのベースラインは，Y=parboxと同じです。\n131", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 138", "content": "(cid:2) (cid:3)\nベースライン\nY=bigskip\nさ\nY=fbox{%\nY=parbox{8zw}{%\nあいうえおY=Y=\nかきくけこY=Y=\nやゆよ}%\nあいうえお あいうえお\n}\n→ さかきくけこ しかきくけこ す\nし\nやゆよ やゆよ\nY=fbox{%\nY=EMparbox{%\nあいうえおY=Y=\nかきくけこY=Y=\nやゆよ}%\n}\nす\nY=bigskip\n(cid:4) (cid:5)\nベースラインを変更する方法もY=parboxと同様です。\n(cid:2) (cid:3)\nベースラインの変更\nY=bigskip\nさ\nY=fbox{%\nY=parbox[b]{8zw}{%\nあいうえおY=Y=\nかきくけこY=Y=\nやゆよ}%\nあいうえお あいうえお\n}\n→ かきくけこ かきくけこ\nし\nさやゆよ しやゆよ す\nY=fbox{%\nY=EMparbox[b]{%\nあいうえおY=Y=\nかきくけこY=Y=\nやゆよ}%\n}\nす\nY=bigskip\n(cid:4) (cid:5)\n132", "tags": []}
{"title": "Page 139", "content": "8.4 Y=emovalbox\nfancybox.styで定義されているY=ovalboxは，eepic.styを用いた場合，上下の罫線と右四分円と\nがつながらない現象が発生します。\nそこで，emath.styにY=emovalboxを新設しました。\n(cid:2) (cid:3)\nY=emovalbox\n(cid:10) (cid:12)\nあY=ovalbox{$t=1$}い あ (cid:10)(cid:11)t=1 (cid:12)(cid:13)い\n→\nあ(cid:11)t=1(cid:13)い\nあY=emovalbox{$t=1$}い\n(cid:4) (cid:5)\nコーナーの四分円の半径はデフォルトではY=fboxsepとしてありますが，変更するには[..]オ\nプションを用います。\n(cid:2) (cid:3)\nコーナー半径の変更 (cid:4) (cid:5)\n→ あ(cid:2)t=1(cid:3)い\nあY=emovalbox[6pt]{$t=1$}い\n(cid:4) (cid:5)\n罫線の太さを変えたいなどに対しては，emathPs.styで定義されているY=EMpsovalboxをご使用\nください。\n8.5 数式の配置 左（右）寄せと中央揃えの切り替え\n別行立て数式の配置は，Y=documentclass のオプションで fleqn を指定したときは左寄せ，そ\nうでないときは中央揃えとなりますが，fleqnon, fleqnoff 環境を用いると，fleqnを指定していて\nもいなくても，2つの状態を切り替えることができます。\nサンプルをごらんいただきましょう。この文書は fleqn オプションをつけていますから，数式\nは左寄せとなります。\n(cid:2) (cid:3)\nデフォルトは左寄せ\nY=begin{align*}\ny &= ax^2+bx+c=YY=\ny’&= 2ax+b\nY=end{align*}\n(cid:4) (cid:5)\n↓\n2\ny =ax +bx+c\n(cid:5)\ny =2ax+b\nfleqnoff 環境内では，数式は中央揃えとなります。\n133", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 140", "content": "(cid:2) (cid:3)\nY=fleqnoffで中央揃え\nY=begin{fleqnoff}\nY=begin{align*}\ny &= ax^2+bx+c=YY=\ny’&= 2ax+b\nY=end{align*}\nY=end{fleqnoff}\n(cid:4) (cid:5)\n↓\n2\ny =ax +bx+c\n(cid:5)\ny =2ax+b\n134", "tags": []}
{"title": "Page 141", "content": "なお，左寄せにしたときの左インデント量は Y=mathindent で指定することができますが，\nY=fleqnonのオプション引数で指定することもできます。\n(cid:2) (cid:3)\n左インデント量の指定\nY=begin{fleqnon}[4zw]=Yrelax\nあいうえお\nY=begin{align*}\ny &= ax^2+bx+c=YY=\ny’&= 2ax+b\nY=end{align*}\nY=end{fleqnon}\n(cid:4) (cid:5)\n↓\nあいうえお\n2\ny =ax +bx+c\n(cid:5)\ny =2ax+b\nこのオプション引数のデフォルト値は Y=leftmargini です。\n数式を右寄せすることはあまり行われませんが，Y=tag*を用いれば実現できます。\n(cid:2) (cid:3)\n数式の右寄せ\nY=begin{gather}\nx=−1\nY=tag*{$x=-1$}=YY= →\ny =1\nY=tag*{$y=1$}\nY=end{gather}\n(cid:4) (cid:5)\n8.6 数式番号を左に出力\nemathでは，数式番号は右端に出力します。\ny =ax+b ···················· (cid:6)1\ny =px 2 +qx+r ···················· (cid:6)2\n文書全体で数式番号を左に出力するには，\nY=usepackage[leqno]{amsmath}\nとでもすればよいのですが，emathを使用する文書では，その必要が生ずることはないでしょう。\n下の公式集は，次の要求にこたえたものです。\n(1) 公式にナンバリングをする。\n(2) 公式は等号の位置で桁揃えをする\n(2)の桁揃えの要求がなければ，(1)のナンバリングはenumerate環境で実現できるのですが，桁\n揃えをするとなると，数式部分はalign, alignatなどを使いたくなります。ということで，ナンバリ\nングを数式番号を左に出すことで対応しようとしたのが下の結果です。\n135", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 142", "content": "(cid:2) (cid:3)\nY=EMleqnoなど\nY=begin{itemsquarebox}{公式（その1）}\nY=EMleqno% この環境内のみ数式番号左配置\nY=EMsaveeqno% 数式番号退避\nY=resetcounter{equation}% 数式番号リセット\nY=preEqlabel{}% 数式番号に3点リーダをつけない\nY=def=Ytagform#1{#1.}% 数式番号の形式を変更\nY=vspace{-=Ybaselineskip}\nY=begin{alignat}{3}\n&(fg)’ &&=f’g &&+fg’ =YY=\n&(fgh)’&&=f’gh &&+fg’h+fgh’\nY=end{alignat}\nY=EMrestoreeqno% 数式番号復元\nY=end{itemsquarebox}\n(cid:4) (cid:5)\n公式（その1）\n(cid:5) (cid:5) (cid:5)\n1. (fg) =f g +fg\n→\n(cid:5) (cid:5) (cid:5) (cid:5)\n2. (fgh) =f gh+fg h+fgh\n上の環境の外では，数式番号，形式などに影響がないことを確認します。\nax+by+c=0 ···················· (cid:6)3\nx 2 +y 2 =r 2 ···················· (cid:6)4\n8.7 行末にマーク\n証明終わりを表すマークを行末に置くためのコマンドがY=owariです。\n(cid:2) (cid:3)\nY=owari\nよって証明された。Y=owari\n(cid:4) (cid:5)\n−→ よって証明された。 (cid:6)\nこのコマンドは別行立て数式行でも有効です。また，終わり記号を変更するにはY=owariの[...]\nオプションを用います。\n(cid:2) (cid:3)\n別行立て数式内の Y=owari\nY=fleqnoff\nY=begin{equation}\ny=2x^2-3x+1 =Yowari[=YCdots （答）]\nY=end{equation}\n(cid:4) (cid:5)\n−→ y =2x 2−3x+1 …（答） ···················· (cid:6)1\nなお，amsmath.sty の ver.2 では上の例は\n136", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 143", "content": "Y=[ y=2x^2-3x+1 =Yowari[=YCdots （答）] Y=]\nと簡潔に書くことができます。\n行末に「…（答）」とすることは多いので，省略コマンドY=kotae もあります。これはオプショ\nンで3点リーダーの個数を指定することができます。一例です。\n(cid:2) (cid:3)\nY=kotae\n−→ ∴ x=2 …………（答）\n$Y=therefore ~ x=2$ =Ykotae[4]\n(cid:4) (cid:5)\n位置を行末から少し内側に寄せたいときは<..>オプションを用います。\n(cid:2) (cid:3)\nY=kotae\n−→ ∴ x=2 …………（答）\n$Y=therefore ~ x=2$ =Ykotae[4]<2zw>\n(cid:4) (cid:5)\n8.8 リーダー罫\n文字列と文字列の間を ··· でつなげるのに，Y=dotfillコマンドがあります。\n(cid:2) (cid:3)\nY=dotfill\n$y=ax^2+bx+c$=Ydotfill 放物線\n(cid:4) (cid:5)\n−→ y =ax2+bx+c........................................................放物線\n点々の位置をY=baselineではなく，少し上にあげたい，というのでコマンド Y=cdotfill を作り\nました。\n(cid:2) (cid:3)\nY=cdotfill\n$y=ax^2+bx+c$=Ycdotfill 放物線\n(cid:4) (cid:5)\n−→ y =ax2+bx+c·······················································放物線\nこのコマンドは[#1]オプションでリーダー罫の長さを指定することができます。\n(cid:2) (cid:3)\nY=cdotfillの長さ指定オプション\n$a_1$, $a_2$,=Ycdotfill[3em], $a_n$,=Ycdotfill[3em]\n(cid:4) (cid:5)\n−→ a1, a2,······, an,······\n左右の文字列とリーダー罫あわせた長さを指定する例です。\n(cid:2) (cid:3)\nY=cdotfillの長さ指定オプション\n１２３４５６７８９０１２３４５６Y=par=Ynoindent\nY=makebox[16zw]{$y=ax^2+bx+c$=Ycdotfill 放物線}\n(cid:4) (cid:5)\n１２３４５６７８９０１２３４５６\n−→\ny =ax2+bx+c···········放物線\n137", "tags": []}
{"title": "Page 144", "content": "点と点の間隔を調整したいときは，Y=cdotskipを再定義します。\nデフォルトは Y=def=Ycdotskip{1.5mu}となっています。\n(cid:2) (cid:3)\nY=cdotskipの変更\n$y=ax^2+bx+c$=Ycdotfill 放物線Y=par=Ynoindent\nY=def=Ycdotskip{0.5mu}%\n$y=ax^2+bx+c$=Ycdotfill 放物線\n(cid:4) (cid:5)\ny =ax2+bx+c·······················································放物線\n−→\ny =ax2+bx+c··········································································放物線\n左右の文字列がともに全角文字のときは，リーダー罫の位置を少し上に上げたい，というのが\nY=Cdotfill です。\n(cid:2) (cid:3)\nY=Cdotfill\n無理数Y=cdotfill 循環しない無限小数Y=par=Ynoindent\n無理数Y=Cdotfill 循環しない無限小数\n(cid:4) (cid:5)\n無理数····················································循環しない無限小数\n−→\n····················································\n無理数 循環しない無限小数\nY=Cdotfillにも，長さ指定オプションがあります。その使い方などはY=cdotfillと同様です。\n8.9 支柱\n高さを揃えるには，支柱を使います。\nまずは，高さ・深さが不揃いな例をご覧ください。\n(cid:2) (cid:3)\n高さが不揃いな例 √ √\n→ a b\n$Y=sqrt{a}=Ysqrt{b}$\n(cid:4) (cid:5)\na,bの高さ・深さが異なるため，根号が不揃いとなっています。このような場面では，Y=mathstrut\nという支柱が使われます。\n(cid:2) (cid:3)\nY=mathstrut (cid:13) (cid:13)\n→ a b\n$Y=sqrt{a=Ymathstrut}=Ysqrt{b=Ymathstrut}$\n(cid:4) (cid:5)\nY=mathstrutは，‘(’の高さと深さをもつ幅が0の支柱です。plain.texで\nY=def=Ymathstrut{=Yvphantom(}\nと定義されており，LATEXもその定義を採用しています。\nY=vphantom#1\n1\nは，#1と同じ高さ・深さをもつ支柱ですが，次の場合は分数 よりも少し高さ・深さを増やした\n2\n支柱がほしくなります。\n138", "tags": ["LaTeX", "中級者向け", "初心者向け", "基本操作", "数式描画"]}
{"title": "Page 145", "content": "(cid:2) (cid:3)\n天地寸詰まりの表\n$Y=begin{array}{|c|c|}=Yhline\nx y\nx & y Y=Y= Y=hline → 1\n2\n2\n2 & Y=bunsuu12 =YY= Y=hline\nY=end{array}$\n(cid:4) (cid:5)\nemath.styでは，Y=EMvphantomなるコマンドでそれを実現しています。\n(cid:2) (cid:3)\nY=EMvphantom\n$Y=begin{array}{|c|c|}=Yhline x y\nx & y Y=Y= Y=hline → 1\n2\n2 & Y=EMvphantom[4pt][3pt]{=Ybunsuu12}=Ybunsuu12 =YY= Y=hline 2\nY=end{array}$\n(cid:4) (cid:5)\n1\nY=EMvphantom[4pt][3pt]{=Ybunsuu12}で，分数 よりも，\n2\n高さを 4pt,\n深さを 3pt\n増やした支柱を作っています。この支柱は利用頻度が高そうですから，別名をY=bsityuuとしてあ\nります。\n(cid:2) (cid:3)\nY=bsityuu\n$Y=begin{array}{|c|c|}=Yhline x y\nx & y Y=Y= Y=hline → 1\n2\n2 & Y=bsityuu=Ybunsuu12 =YY= Y=hline 2\nY=end{array}$\n(cid:4) (cid:5)\nY=EMvphantom, Y=bsityuuの書式です。\n139", "tags": []}
{"title": "Page 146", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=EMvphantom[#1][#2]#3\n#3 の高さに #1 を附加し，\n#3 の深さに #2 を附加した支柱を表す。\n#1 のデフォルト値は 0pt\n#2 のデフォルト値は #1\nY=EMvphantom*[#1][#2]#3\n支柱を立てるだけではなく，#3をタイプセットする。\nY=bsityuu[#1][#2]\n分数2分の1の高さに #1 を附加し，\n分数2分の1の深さに #2 を附加した支柱を表す。\n#1 のデフォルト値は 4pt\n#2 のデフォルト値は 3pt\n8.10 下線\n8.10.1 Y=underline\n下線を引くコマンドはY=underlineです。\n(cid:2) (cid:3)\nY=underline\n下線を引きます。Y=underline{あいうえお}\n下線を引きます。あいうえお\n→\nただし，このコマンドは，行をまたぐことができません。\nY=underline{ただし，このコマンドは，行を\nまたぐことができません。}\n(cid:4) (cid:5)\n複数行に渡る下線を引くスタイルファイルにjumoline.styがあります。\njumoline.styについては，その作者である 中島 浩さんのホームページ\nhttp://www.para.tutics.tut.ac.jp/~nakasima/latex/\nをご覧ください。\n8.10.2 波下線\n8.10.2.1 ulem.sty 波下線を引くには，ulem.styで定義されているY=uwaveを用いるのが一般的\nな方法です。\n(cid:2) (cid:3)\nY=uwave\nあいうえお\n→ あいうえお (cid:2) か (cid:2)(cid:2) き (cid:2)(cid:2) く (cid:2)(cid:2) け (cid:2)(cid:2) こ (cid:2)(cid:2) さしすせそ\nY=uwave{かきくけこ}\nさしすせそ\n(cid:4) (cid:5)\n140", "tags": ["LaTeX", "中級者向け", "外部連携", "数式描画"]}
{"title": "Page 147", "content": "数式に適用するときは，\n(cid:2) (cid:3)\n数式に対するY=uwave\nY=uwaveの引数内で数式モードに\nY=cmd{uwave}の引数内で数式モードにしてもだ\nしてもだめで，\nめで，Y=Y= 1\nlim =0\nY=uwave{$=Ydlim{x=Yto=Yinfty}=Ybunsuu1x=0$}\n(cid:2)x(cid:2)→(cid:2)∞(cid:2)(cid:2)(cid:2)x(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)\n→ 数式モード内にY=uwaveを配置し\nY=Y=\nなければなりません。\n数式モード内にY=cmd{uwave}を配置しなければ\n1\nlim =0\nなりません。Y=Y= x→∞x\n(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)\n$Y=uwave{=Ydlim{x=Yto=Yinfty}=Ybunsuu1x=0}$\n(cid:4) (cid:5)\n8.10.2.2 Y=namikasen ところで，dviout.exe でみている限り綺麗なのですが，pdf にしてみる\nと，波のつながり具合が乱れてきます。ということもあって，emath.styにY=namikasenを新設し\nました。こちらは，コマンドの引数を数式モードにする方式です。\n(cid:2) (cid:3)\nY=namikasen\n1\nあいうえお あいうえお lim =0 さしすせ\nx→∞x\n(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\nY=namikasen{%\nそさしすせそさしすせそさしすせ\n→\n$Y=dlim{x=Yto=Yinfty}=Ybunsuu1x=0$}\nそさしすせそさしすせそさしすせ\nさしすせそさしすせそさしすせそさしすせそ\nそさしすせそ\nさしすせそさしすせそさしすせそさしすせそ\n(cid:4) (cid:5)\nただし，行をまたがることはできません。\nなお，Y=namikasenを用いるには，ulem.styは不要です。\n8.10.2.3 波二重下線 Y=uwaveによる波下線を二重にするコマンドY=uuwaveをemath.sty に新設\nしました。ただし，この下請けはulem.styにありますから，このスタイルファイルを読み込んでお\nく必要があります。\n(cid:2) (cid:3)\nY=uuwave 1\nlim =0 あああああああああ\nx→∞x\n$Y=uuwave{=Ydlim{x=Yto=Yinfty}=Ybunsuu1x=0}$ (cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)\n→\nああああああああああああああああああ あああああああああああああああ\nああああああああああああああああああ ああああああああああああ\n(cid:4) (cid:5)\nY=namikasenの方で，波下線を二重とするには，Y=namikasenに[1.5]などと，オプションを与\nえます。[...]内の数値は，二重線の間隔（単位は pt）です。\n(cid:2) (cid:3)\nY=namikasen[..]\n1\nY=namikasen[1.5]{% lim =0 あああああああああ\nx→∞x\n(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\n$Y=dlim{x=Yto=Yinfty}=Ybunsuu1x=0$} →\nあああああああああああああああ\nああああああああああああああああああ\nああああああああああああ\nああああああああああああああああああ\n(cid:4) (cid:5)\n8.10.2.4 太波下線 太い波下線を引くには，コマンドY=hutonamikasenを用います。\n141", "tags": ["LaTeX", "中級者向け", "外部連携", "数式描画"]}
{"title": "Page 148", "content": "(cid:2) (cid:3)\nY=namikasenUehosei\nY=namikasen{かきくけこ}\nかきくけこ\n(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\nかきくけこ\n→ (cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\nY=hutonamikasen{かきくけこ}\nかきくけこ\n(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\nY=hutonamikasen[2]{かきくけこ}\n(cid:4) (cid:5)\nただし，Y=hutonamikasenは，内部でY=scaleboxを用いていますから，graphicx.styを必要とし\nます。emathでは，emathP*.styを用いれば，graphicx.sty は自動的に読み込まれます。\n8.10.2.5 Y=namikasenと上下のアキ\nY=namikasenUehosei =Ynamikasenとその下線を引く対象との間隔を調整するコマンドが\nY=namikasenUehoseiです。\n(cid:2) (cid:3)\nY=namikasenUehosei\nY=namikasen{かきくけこ}\nかきくけこ\n(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\n下線の位置を対象に近づけたけれ\n下線の位置を対象に近づけたければ →\nば\nかきくけこ\n(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\nY=namikasenUehosei{-2pt}\nY=namikasen{かきくけこ}\n(cid:4) (cid:5)\nY=namikasenUehoseiの引数に，波線縦位置を補正する数値（単位付）を与えます。正の値を与\nえれば下に，負の値を与えれば上に動きます。\nY=namikasenSitahosei 逆に下線の下，すなわち下線と下の行との間隔を調整するのが\nY=namikasenSitahoseiです。\n(cid:2) (cid:3)\nY=namikasenSitahosei\n標準はかきくけこおおおおおおお\n標準はY=namikasen{かきくけこ} (cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\nおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおおおおお\nおお\n下線と次の行を離したければ\n下線と次の行を離したければ →\n標準はかきくけこおおおおおおお\n(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)(cid:27)\nY=namikasenSitahosei{10pt}\nおおおおおおおおおおおおおおお\n標準はY=namikasen{かきくけこ}\nおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおお\nおおおおおおおおおおおおおおおおおお\nおお\nおおおおおおおおおおおおおおおおおお\n(cid:4) (cid:5)\n上の例，後半ではY=namikasenSitahosei{10pt}として，波下線と次の行との間隔をデフォルト\nより10pt増やしています。\n142", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 149", "content": "9 メモリ不足への対応\n9.1 pool size\n図の描画には多くのメモリを必要とするようで，1ページの図が多いときなど\n! TeX capacity exceeded, sorry [pool size=67010].\nといったエラーメッセージに遭遇することがあります。\nこの場合は，texmf.cnf というファイルを編集します。編集する前に，フロッピなどにオリジナ\nルを保存した上でお願いします。\nこのファイルは TEXをインストールしたフォルダの\n...=Ytexmf=Yweb2c\nに存在します。このファイルはテキストファイルですから，エディタで開いて\npool_size = 125000\nという行を探します。（右辺値は異なるかもしれません。）\nこの式の右辺値を 300000などと修正し，上書き保存します。\npool_size = 300000\nなお，機種によってはこのファイルの拡張子が表示されないかもしれません（単に texmf と表\n示されます）。\n9.2 main memory size\n! TeX capacity exceeded, sorry [main memory size=263001].\nといったエラーメッセージの処理は，かなり厄介です。\n以下の記述では，TeX が c:=Yptex にインストールしてあるものとします。インストールドライ\nブ，フォルダが異なる場合は読み替えてください。\n(1) 修正するファイルのバックアップの作成\n修正するファイルは\ntexmf.cnf, platex.fmt\nの２つです。現在，c:=Yptex=Ytexmf=Yweb2cにあるものをフロッピ，MO,などにコピーします。\n(2) texmf.cnf の修正\nエディタで texmf.cnf を開きます。検索機能を利用して\nmain_memory\nを探してください。\nmain_memory = 263000 % words of inimemory available; also applies to inimf&mp\n143", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "外部連携", "数式描画", "環境構築"]}
{"title": "Page 150", "content": "という行が見つかるはずです。ここを修正します。私は\nmain_memory = 526000 % words of inimemory available; also applies to inimf&mp\nと修正しました。ついでに，その少し下の\npool_size = 125000\nも\npool_size = 250000\nと増やしました。\n(3) platex.fmt の作成\nDOS 窓で，キーボードから\nc:\ncd Y=ptex=Ytexmf=Ytex=Yplatex=Ybase\nと打ち込み，\nc:=Yptex=Ytexmf=Ytex=Yplatex=Ybase\nをカレントフォルダにします。\nその上で，キーボードから\nptex --ini platex.ltx\nと打ち込み，リターンキーを押します。いろいろなメッセージが流れますが，作業が終了する\nと，DOS Prompt が出ます。\n（注）ここで LATEXのバージョンが古いと\n!Latex source files more than 1 year old!.\n1.573 ...LaTeX source files more than 1 year old!}\nなどのメッセージが表れることがあります。このときは委細構わず，リターンキーを押せば作\n業は続行されます。もちろん，この機会に LATEXのバージョンアップをされることをお勧めし\nますが.....\n(4) platex.fmt を所定の場所に移す。(3) の作業の結果，\nc:=Yptex=Ytexmf=Ytex=Yplatex=Ybase\nに二つのファイル\nplatex.fmt, platex.log\nが作成されます。前者を\nc:=Yptex=Ytexmf=Yweb2c\nにコピーします。\n(5) c:=Yptex=Ytexmf=Ytex=Yplatex=Ybase に作成された platex.fmt, platex.log を削除します。\n144", "tags": ["LaTeX", "中級者向け", "外部連携", "数式描画"]}
{"title": "Page 151", "content": "9.3 hash size\nメモリ不足もいろいろあります。\n! TeX capacity exceeded, sorry [hash size=10000].\nへの対処法です。\nこちらは簡単で，texmf.cnf を書き換えるだけです。\nエディタで texmf.cnf を開き ‘hash’ で検索をかけると\nhash_extra = 0\nという行が見つかります。この右辺値を，たとえば 2000 などとしてやればOKです。フォーマッ\nトファイルを作り変える必要はありません。\n9.4 save size\n! TeX capacity exceeded, sorry [save size=4000].\nへの対処法です。\nこれもtexmf.cnf を書き換えるだけです。\ntexmf.cnf 中の一行\nsave_size = 4000 % for saving values outside current group\nの数値を例えば，8000 に増やします。\nフォーマットファイルの作り直しは不要です。\n9.5 number of strings\n! TeX capacity exceeded, sorry [number of strings=10603].\nへの対処法です。\nこれもtexmf.cnf を書き換えるだけです。\ntexmf.cnf 中の一行\nmax_strings = 15000 % max number of strings\nの数値を例えば，20000 に増やします。\nフォーマットファイルの作り直しは不要です。\n145", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 152", "content": "10 謝辞\nこのマクロ集の作成については，Waverさんからいろいろと有用なご助言をいただきました。ま\nた，7.6節のマクロはすべて Waver さんから使用を認めていただいたものです。\nまた，平行四辺形の記号については，トニイさんからここでの使用を認めていただきました。あ\nわせて感謝の意を表します。\n146", "tags": []}
{"title": "Page 153", "content": "索 引\napnenum=, 100 Y=EMrestoreeqno, 135\nY=apnlist, 117 Y=emRoman, 95\nY=atag, 38 Y=emroman, 94\nY=EMsaveeqno, 135\nY=baaiwake, 37\nY=EMvphantom, 139\nY=beku, 12\nY=enumLmargin, 105\nY=bekusityuu, 13\nY=enumSep, 104\nY=bekutoru, 12\nY=bekutoru*, 125 fleqnoff 環境, 133\nY=bekutorukata, 13 fleqnon 環境, 133\nY=bekutorusityuu, 13 Fmawarikomi 環境, 51\nbetaenumerate 環境, 90 Y=Fsyndiv, 8\nY=bsityuu, 139\nY=gauss, 17\nY=bunsuu, 1\nY=getcurrentenum, 98\ncaprm 環境, 123 Y=gyoube, 18\nY=Cdotfill, 138 gyoukan=, 86\nY=cdotfill, 137 Y=Gyouretu, 18\nY=Cnum, 19 Y=gyouretu, 17\nY=conj, 19\nY=heikou, 21\nY=DEG, 21 Y=heikousihenkei, 23\nY=Deg, 21 Y=hutonamikasen, 141\nY=degree, 21\nY=item*, 93\nY=Deruta, 25\nY=item**, 93\nY=dint, 25\nY=itemtopmath, 41\nY=dlim, 23\nY=izyohou, 7\nY=dpower, 11\nY=dumyeq, 39\njquotion 環境, 130\njquote 環境, 130\nedaenumerate 環境, 83\nY=edaitem, 83\nY=kagenhou, 9\nY=edasikiri, 88\nY=kaizyou, 26\nedatopsep=, 111\nY=kaku, 21\nY=EMabs, 14\nY=kaku*, 126\nY=emabs, 15\nY=kinzi, 1\nY=EMcaption, 82\nkizamiti=, 98\nemcases 環境, 36\nY=kmaru, 29\nY=EMleqno, 135\nY=knagamaru, 30\nY=emovalbox, 133\nY=ko, 22\nY=EMparbox, 130\nY=ko*, 22\n147", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 154", "content": "Y=kotae, 137 Y=retube, 18\nY=Kumiawase, 27 retusuu=, 86\nY=kumiawase, 26 Y=retuwa, 23\nY=kynagamaru, 31\nY=sankaku, 21\nY=kyokukeisiki, 20\nY=sankaku*, 126\nY=kyouyaku, 19\nY=secarrow, 24\nY=marudashref, 38 Y=setcurrentenum, 98\nY=marudashtag, 38 Y=sevarrow, 24\nY=mathindent, 32, 33 Y=shikaku, 22\nY=mathRM, 125 Y=souzi, 21\nmawarikomi 環境, 44, 53 Y=sqrt, 10\nmawarikomi* 環境, 44 Y=stasuki, 8\nY=mawarikomikankaku, 55 Y=suuretu, 23\nY=mawarikomiowari, 56 Y=syndiv, 7\nY=mawarikomisep, 47 syokiti=, 98\nY=mitS, 126 Y=syuugou, 26\nY=nagamaru, 30 Y=tagform, 33\nY=namikasen, 141 Y=Tasuki, 9\nY=narrowenumsep, 105 Y=tasuki, 8\nY=narrowsep, 117 Y=tasukikata, 9\nY=necarrow, 24 Y=tbEMcaption, 82\nY=neqq, 1 Y=Teisei, 5\nY=nevarrow, 24 Y=teisei, 3\nY=nheikou, 21 Y=teisekibun, 25\nnidan 環境, 56 Tmawarikomi 環境, 51\nY=tretuwa, 23\nY=Ofil, 95\nY=tsqrt, 11\nY=owari, 136\nY=wakudori, 74\nY=pgyouretu, 19\nY=polar, 20 Y=Yakubun, 2\npostedasep=, 110 Y=yakubun, 1\nY=postitem, 93 Y=ynagamaru, 31\npreedasep=, 108 yokoenumerate 環境, 91\nY=preEqlabel, 32\nY=zettaiti, 14\nY=preitem, 93\nY=zuhaiti, 72\nY=pxpercent, 3\nY=zyohou, 6\nY=refallenum, 122\nY=Zyunretu, 27\nY=refcurrentenum, 121\nY=zyunretu, 26\nY=resetcounter, 34\n円弧, 22\nY=resettagform, 33\nY=Retube, 18 凹凸, 24\n148", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 155", "content": "角（∠）, 21\n角度の記号, 21\n弧, 22\n三角形, 21\n3乗根, 10\nシグマ, 23\n斜体と立体, 123\n数式のインデント, 33\n数式番号, 32\n数式番号の書式, 33\n数式番号のリーダー罫, 32\n数列記号, 23\n数列の和, 23\n絶対値記号, 14\n増減と凹凸, 24\n増減表, 24\n相似, 21\n度の記号, 21\n二重根号, 11\n平行, 21\n平行四辺形, 22\n約分, 1, 2, 5\n立体と斜体, 123\n149", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 1", "content": "picture 環境支援マクロ集\nemathP.sty\nver.0.66\nemathPb.sty\nver.0.01\nemathPg.sty\nver.0.00\nemathPh.sty\nver.2.45\nemathPk.sty\nver.0.94\nemathPxy.sty\nver.0.31\nemathT.sty\nver.0.42\n使用例\ntDB\n2005/11/02\n概 要\n中学・高校で数学のプリントにつける図の作成に必要な記号，コマンド，環境を集めたマク\nロ集です．\nこのマクロ集のマクロについてのご質問，バグ報告，修正・追加の提案等は\nhttp://emath.s40.xrea.com/\nの掲示板へどうぞ。", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 2", "content": "目 次\n0 emathパッケージにおけるグラフィックス 1\n1 zahyou環境 3\n1.1 なぜzahyou環境か . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n1.2 zahyou環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n2 直線図形 4\n2.1 折れ線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n2.2 点線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n2.2.1 Y=emDottedline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n2.2.2 <G=..>オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n2.2.3 <C=..>オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.2.4 応用例 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.3 破線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.3.1 Y=Dashline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.3.2 Y=hasen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n2.3.3 Y=Hasen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n2.3.4 Y=Hasen* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n2.4 鎖線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n2.5 複数の折れ線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n2.6 矢線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n2.6.1 Y=yasen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n2.6.2 Y=ArrowLine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n2.6.3 始点・終点位置の微調整 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n2.6.4 鏃の形状. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n2.6.5 矢印の位置 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n2.6.6 矢線を点線・破線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n2.6.7 複数の矢線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n2.7 多角形 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n2.8 正多角形，極座標→直交座標. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n2.9 角の丸い多角形 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n2.10 分点 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n2.11 格子 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n2.12 さいころ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n3 文字列 24\n3.1 文字列 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n3.1.1 Y=Put . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n3.1.2 文字位置の調整 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n3.1.3 文字列位置の簡易指定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n3.1.4 文字列の回転 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n3.1.5 文字列から基準点への矢線 . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\ni", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 3", "content": "3.2 複数の点の定義とラベル付け. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n3.2.1 Y=tenretu . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n3.2.2 Y=tenretu* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n3.2.3 Y=oresen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n3.2.4 Y=rtenretu . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n3.2.5 座標に計算式を記述 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n3.3 線分に文字列 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n3.3.1 線分の長さ表記 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n3.3.2 Y=HenKo : 文字列の配置調整 . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n3.3.3 弧に矢印. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n3.3.4 Y=HenKoの中点，中心 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n3.3.5 Y=HenKoの形状いろいろ . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n3.3.6 辺にY=brace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n3.3.7 等辺記号. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n3.3.8 平行記号. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n3.4 角の内部に記号 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n3.4.1 Y=Kakukigou . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n3.4.2 直角記号. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n3.4.3 一般角 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n3.5 数式にpicture環境を併置 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n3.5.1 sikipicture環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n3.5.2 Y=sikiBi, Y=sikiTi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n3.5.3 Y=sikixposi, Y=sikiyhposi, Y=sikiydposi . . . . . . . . . . . . . . . . . . 67\n3.5.4 Y=sikixlposi, Y=sikixrposi . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n3.5.5 使用例 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n3.5.6 bunpicture環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n4 円・楕円 74\n4.1 円 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n4.1.1 円 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n4.1.2 円の破線描画 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n4.1.3 円弧 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n4.1.4 矢印付きの円弧(1) 偏角指定. . . . . . . . . . . . . . . . . . . . . . . . . . 77\n4.1.5 矢印付きの円弧(2) 端点指定. . . . . . . . . . . . . . . . . . . . . . . . . . 78\n4.1.6 等弧記号. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n4.1.7 扇形 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n4.1.8 弓形 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n4.2 楕円 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n4.2.1 楕円 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n4.2.2 楕円弧 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n4.2.3 破線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n4.2.4 矢印 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\n4.2.5 回転記号. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\nii", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 4", "content": "5 円・直線の交点 87\n5.1 2直線の交点 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n5.1.1 2直線の交点(1) Y=LandL . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n5.1.2 2直線の交点(2) Y=Landl . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n5.1.3 2直線の交点(3) Y=landl . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n5.1.4 2直線の交点(4) Y=Landk . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\n5.1.5 垂線の足. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n5.1.6 直線に関する対称点 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n5.2 円と直線の交点 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n5.2.1 円と直線の交点(1) Y=CandL . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n5.2.2 円と直線の交点(2) Y=Candl . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n5.2.3 円と直線の交点(3) Y=Candk . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n5.3 円と円の交点 Y=CandC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n6 楕円と直線の交点 97\n6.1 Y=EandL. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n6.2 Y=Eandl. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n6.3 Y=Eandk. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n6.4 楕円の接線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n6.4.1 Y=DaennoSessen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n6.4.2 Y=DaenniSessen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n6.4.3 Y=Earg . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\n7 塗りつぶし(1) 102\n7.1 多角形内部の塗りつぶし . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n7.2 円内部の塗りつぶし . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n7.3 扇形の塗りつぶし . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n7.4 弓形の塗りつぶし . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n7.5 楕円の塗りつぶし . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n7.6 弓形（楕円弧）の塗りつぶし. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n7.7 カラー指定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n7.7.1 Y=colorによる塗り色指定 . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n7.7.2 Y=En*の[nuriiro=..]オプション . . . . . . . . . . . . . . . . . . . . . . . 106\n7.7.3 円周の色は？ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n7.7.4 PostScriptでは . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n8 斜線塗り(1) 108\n8.1 多角形 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\n8.2 円 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\n8.3 扇形など . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n8.4 格子セルのぬりつぶし . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\n8.5 境界線と斜線の間を空ける . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n8.6 2円の共通部分に斜線. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n8.7 破線による斜線塗り . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\niii", "tags": []}
{"title": "Page 5", "content": "8.8 斜線塗りの制約条項 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n9 三角形の五心 117\n9.1 重心 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n9.2 外心 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n9.3 内心 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n9.4 傍心 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121\n9.5 垂心 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n9.6 角の二等分線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124\n10 三角形の決定 127\n10.1 三辺 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n10.2 二角夾辺 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n10.3 二辺夾角 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\n11 正弦定理・余弦定理 130\n11.1 正弦定理 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n11.2 余弦定理 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n12 ベクトル 133\n12.1 ベクトル演算 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n12.2 平行四辺形 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n12.3 回転 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n13 座標平面 136\n13.1 連立不等式の解を図表示 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\n13.2 zahyou 環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\n13.3 座標軸描画のタイミング . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139\n13.4 zahyou環境のオプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139\n13.4.1 Y=unitlengthの指定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n13.4.2 座標軸の名称変更 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\n13.4.3 軸記号の配置オプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\n13.4.4 矢印のサイズ変更 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\n13.4.5 軸の線種変更 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\n13.4.6 描画領域の周辺に余白 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\n13.4.7 縦横比の変更 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146\n13.5 zahyou環境の縦方向配置 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\n13.5.1 デフォルトの確認 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\n13.5.2 下揃え . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148\n13.5.3 上揃え . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\n13.5.4 中央揃え. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\n13.6 zahyou環境の書式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n13.7 目盛り . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n13.7.1 座標軸上に等間隔の目盛り . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\niv", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 6", "content": "13.7.2 グリッド線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n13.7.3 軸上に目盛り . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\n13.8 座標軸への垂線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158\n14 点・直線・円 162\n14.1 点の位置に黒丸 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162\n14.2 2点間の距離 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163\n14.3 直線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164\n14.3.1 ２点を通る直線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164\n14.3.2 1点と方向ベクトルによる直線 . . . . . . . . . . . . . . . . . . . . . . . . 166\n14.3.3 1点と方向角による直線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167\n14.3.4 線種の変更 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167\n14.3.5 直線 ax+by+c=0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168\n14.3.6 直線 y =ax+b . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169\n14.3.7 点P(x1, y1)と直線ax+by+c=0の距離 . . . . . . . . . . . . . . . . . . 169\n14.3.8 点P(x1, y1)と2点A,Bを通る直線の距離 . . . . . . . . . . . . . . . . . . 169\n14.4 円の接線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\n14.4.1 円周上の点における接線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\n14.4.2 円外の点からの接線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171\n14.4.3 二つの円の共通接線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\n14.5 半直線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n15 関数のグラフ 175\n16 空間座標 176\n16.1 Zahyou 環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176\n16.2 角錐 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178\n16.3 角柱 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\n16.4 直線と平面の交点 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\n16.5 垂線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\n16.6 空間曲線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\n17 作表 186\n17.1 列幅指定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\n17.2 表の罫線を太く . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187\n17.2.1 Y=arrayrulewidth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187\n17.2.2 外枠のみを太く . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187\n17.2.3 二重罫線との併用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n17.2.4 太罫線の太さ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n17.2.5 特定のブロック枠を太く . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n17.3 罫線を点線で . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\n17.4 カラムに斜線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\nv", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 7", "content": "18 囲み 190\n18.1 rectbox環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190\n19 その他 191\n19.1 線の太さ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191\nvi", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 8", "content": "0 emath\nパッケージにおけるグラフィックス\nemathパッケージでは，図を描画するのに二つの手法を用意しています。\n(1) tpic specialsを用いる方法\nemathPh.sty, emathPk.sty, emathP.sty では，tpic specialsを用いて，図を描画します。\n(2) Post Scriptを用いる方法\nemathPs.sty では，Post Scriptを用いて，図を描画します。\nいずれにせよ，Y=specialコマンドを用いてグラフィックスを扱うのは，OS・dvi-ware依存とな\nります。従って，emathP?.sty等のロードに先立って\ngraphicx.sty\nを，グラフィックスドライバを指定してロードしておく必要があります。例えば\nY=usepackage[dvips]{graphicx}\nY=usepackage[dviout]{graphicx}\nY=usepackage[dvipdfm]{graphicx}\nY=usepackage[dvipdfmx]{graphicx}\nカラーを用いる場合は，\ncolor.sty\nを，graphicx.styと同一のドライバを指定してロードしておく必要があります。\nY=usepackage[dvips]{graphicx,color}\nY=usepackage[dviout]{graphicx,color}\nY=usepackage[dvipdfm]{graphicx,color}\nY=usepackage[dvipdfmx]{graphicx,color}\n注 1. TEX環境がデフォルトのグラフィックスドライバを指定している場合は，単に\nY=usepackage{graphicx,color}\nとすれば，デフォルトのドライバが用いられます。\n注 2. dvipdfmxは，EPS において，座標が負の部分を無条件にカットする，などの振る舞いがあ\nりますので，emathではお勧めいたしかねます。emathパッケージでは，dvipsを標準とし\nています。\nまたdvipdfmxは図形の回転処理が独特ですから，どうしてもdvipdfmxを使用したい場合は\nY=usepackage[dvipdfmx]{graphicx,color}\nとしておく必要があります。こうしても，EPS ファイルの座標が負の部分をカットするこ\nとは回避できません。\nなお，dvipdfmxには，カラーの tpic が扱えないバージョンがあります。\n1", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 9", "content": "注 3. dvipdfmは，EPS において，座標が負の部分をカットする点は dvipdfmxと同様です。\n注 4. dvioutを用いたとき，白く塗りつぶしたはずが黒くなる，という場合の対策です。\n(a) dvioutの画面で黒塗りとなる場合は，グラフィックスドライバが不適切です。\nY=usepackage[dvips]{graphicx,color}\nと，グラフィックスドライバを明示するのがよいでしょう（ emathなどの読み込みに先\n立って）。\n【補足】 dviout のメニューバーから\nOption\nSetup Parameters\nGraphic\nとたどって，Ghostscript の項が\nOn(default)\nになっていることも必要です。\n(b) dvioutの画面では正常だが，印刷すると黒塗りになるという場合は，dviout の設定の\n問題です。\n具体的な手順です：\ndviout のメニューバーから\nOption\nSetup Parameters\nGraphic\nとたどり，その下方\ncolor specials\nの左にチェックが入っていることを確認し，\n右のドロップダウンリストで\nauto mode(rep)\nreplace(def)\nreplace(bak)\nのいずれかを選び，\nその右の Save ボタン\nさらに下の OK ボタン\nを押します。\n2", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 10", "content": "1 zahyou\n環境\n1.1 zahyou\nなぜ 環境か\nLATEXで座標平面を描画するには，picture環境があります。ただし，負の数を扱うには，picture\n環境の引数を計算しなければなりません。例えば，−3<x<3,−2<y <2の範囲を描画するには\n(cid:2) (cid:3)\npicture環境 (cid:3)\nY=unitlength=8mm\nY=begin{picture}(6,4)(-3,-2)% (cid:2)\n→\nY=put(-3,0){=Yvector(1,0){6}}%\nY=put(0,-2){=Yvector(0,1){4}}%\nY=end{picture}%\n(cid:4) (cid:5)\n引数の与え方が面倒であることと，座標軸の描画もまとめて面倒を見てしまおう，ということで\nzahyou環境です。\n1.2 zahyou\n環境\ny\n(cid:2) (cid:3)\nzahyou環境\nY=unitlength=8mm\n→ O x\nY=begin{zahyou}(-3,3)(-2,2)%\nY=end{zahyou}%\n(cid:4) (cid:5)\npicture環境とは，引数の与え方が異なり，\n(xmin, xmax)(ymin, ymax)\nと，x, yの区間を与えます。\nなお，この環境内では，次の変数が定義されています。\nY=xmin xの区間の最小値\nY=xmax xの区間の最大値\nY=ymin yの区間の最小値\nY=ymax yの区間の最大値\nY=O 原点\nY=XMAX x軸の右端の点\nY=XMIN x軸の左端の点\nY=YMAX y軸の上端の点\nY=YMIN y軸の下端の点\nY=RT 描画領域右上のコーナー\nY=RB 描画領域右下のコーナー\nY=LT 描画領域左上のコーナー\n3", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 11", "content": "Y=LB 描画領域左下のコーナー\n座標軸を描画する必要がない場合に対してはzahyou*環境を用意してあります。\n(cid:2) (cid:3)\nzahyou*環境\nY=unitlength=8mm\nY=begin{zahyou*}(-3,3)(-2,2)%\n→\nY=Drawline{=YLB=YRT=YRB=YLT=YLB}\nY=En=YO{2}%\nY=end{zahyou*}%\n(cid:4) (cid:5)\n上記リスト中，Y=Drawlineは，指定点を折れ線で結びます。Y=En=YO{2}は点Y=O（原点）を中心と\nする半径2の円を描画しています。詳細は後述します。\nzahyou環境には，細かい微調整をするためのオプションがありますが，これについては後述し\nます。\n2\n直線図形\n2.1\n折れ線\n折れ線を描画するのに，epic.sty で定義されている Y=drawline を用いることができます．\n(cid:2) (cid:3)\nY=drawline\nY=begin{picture}(3,3)%\n−→\nY=drawline(0,0)(3,0)(2,3)%\nY=end{picture}\n(cid:4) (cid:5)\nこのスタイルファイルでは，点を Y=def=YA{(3,0)}などと変数で表すことにしています．その場\n合は，Y=drawline は使えません．代わりに Y=Drawline を用意しました．このコマンドは内部で\nY=drawline を呼び出していますから，epic.sty を必要とします．\n(cid:2) (cid:3)\nY=Drawline\nY=begin{picture}(3,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(3,0)}% −→\nY=def=YB{(2,3)}%\nY=Drawline{=YO=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nY=Drawline の書式は\n4", "tags": ["インストール", "中級者向け", "初心者向け", "図形描画", "外部連携", "環境構築", "関数"]}
{"title": "Page 12", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Drawline#1\n#1 : 点列\n2.2\n点線\n点線を描画するにはY=emdottedlineを用います。\ny\n(cid:2) (cid:3)\nY=emdottedline\nY=begin{zahyou}[ul=5mm](-3,3)(-3,3)\nY=emdottedline(-2,2)(2,-1) → O x\nY=end{zahyou}\n(cid:4) (cid:5)\n2.2.1 Y=emDottedline\nemathでは，点列を一つにまとめて扱いますので，Y=emDottedlineを定義しました。\nただし，このコマンドはmultido.styで定義されているY=multido を用います。Y=emDottedline\nコマンドを使用するには，プリアンブルで\nY=usepackage{multido}\nを宣言しておく必要があります。\ny\n(cid:2) (cid:3)\nY=emDottedline\nA\nY=begin{zahyou}[ul=5mm](-3,3)(-3,3)\nY=tenretu{A(-2,2)w;B(2,-1)e} → O x\nY=emDottedline{=YA=YB} B\nY=end{zahyou}\n(cid:4) (cid:5)\n点と点の間隔は，デフォルトは3ptとしてありますが，これを変更するには<G=..>オプション\nを用います。\n2.2.2 <G=..>オプション\nさて，その<G=..>オプションを用いて，もう少し点を稠密にして見ましょう。\ny\n(cid:2) (cid:3)\n<G=..>オプション\nA\nY=begin{zahyou}[ul=5mm](-3,3)(-3,3)\nY=tenretu{A(-2,2)w;B(2,-1)e} → O x\nY=emDottedline<G=2pt>{=YA=YB} B\nY=end{zahyou}\n(cid:4) (cid:5)\n5", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 13", "content": "2.2.3 <C=..>オプション\n配置する点の形状を変更するには，<C=..>オプションを用います。\ny\n(cid:2) (cid:3)\n<C=..>オプション ∗\nA ∗ ∗\n∗\n∗\nY=begin{zahyou}[ul=5mm](-3,3)(-3,3) ∗ ∗\n∗\n∗\n∗\nY=tenretu{A(-2,2)w;B(2,-1)e} → O ∗ ∗ ∗ x\n∗\n∗\nY=emDottedline<C=$*$,G=5pt>{=YA=YB} B\nY=end{zahyou}\n(cid:4) (cid:5)\n小さい円（黒塗りの）にしますか。\n(cid:2) (cid:3)\n小さい円を配置 y\nA\nY=begin{zahyou}[ul=5mm](-3,3)(-3,3)\nY=ukansan{1pt}=Ytyokkei\n→ O x\nY=tenretu{A(-2,2)w;B(2,-1)e}\nB\nY=emDottedline<C==Ycircle*=Ytyokkei>{=YA=YB}\nY=end{zahyou}\n(cid:4) (cid:5)\nここで登場しているコマンドY=ukansan#1#2は，#1に与えられた，単位付の長さを，Y=unitlength\nを単位とする無名数に換算した結果を#2の制御綴に与えるものです。\n2.2.4 応用例\n奥村先生の掲示板 Q&A に「行列の点々」という投稿がありました。emathを用いる一案です。\n⎡ ⎤\na1 b1+d1 c1\n⎢ ⎥\n⎢ a2 b2+d2 c2 ⎥\n⎢ ⎥\n⎢ a3 b3+d3 c3 ⎥\n⎢ ⎥\n⎢ ⎥\n⎢ ⎥\n⎢ ⎥\n⎢ ⎥\n⎣ ⎦\nan−1 bn−1+dn−1 cn−1\nan bn+dn cn\n2.3\n破線\n2.3.1 Y=Dashline\n破線を引くコマンドは Y=Dashline です．\n6", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 14", "content": "(cid:2) (cid:3)\nY=Dashline\nY=begin{picture}(3,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(3,0)}% −→\nY=def=YB{(2,3)}%\nY=Dashline{0.2}{=YO=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nこのコマンドは内部で eepic.sty の Y=dashline を呼び出しています．書式もほぼ同様で\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Dashline[#1]#2#3\n#1 : stretch\n#2 : dashlength\n#3 : 点列\nです．[dashdotgap] はサポートしていません．[stretch] で代用してください．\n(cid:2) (cid:3)\nY=Dashline[stretch]\nY=begin{picture}(3,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(3,0)}% −→\nY=def=YB{(2,3)}%\nY=Dashline[25]{0.2}{=YO=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n2.3.2 Y=hasen\nY=dashlineの第1引数は Y=unitlengthの値によって変えなければなりません。\n(cid:2) (cid:3)\nY=DashlineとY=unitlength\nY=unitlength=10mm\nY=begin{picture}(3,3)\nY=dashline{.2}(0,0)(3,3)\nY=end{picture}=YY=\n→\nY=unitlength=1mm\nY=def=YB{(30,30)}\nY=begin{picture}(30,30)\nY=dashline{2}(0,0)(30,30)\nY=end{picture}\n(cid:4) (cid:5)\n7", "tags": []}
{"title": "Page 15", "content": "これは面倒ですから，Y=hasenを作りました。\n(cid:2) (cid:3)\nY=hasen\nY=unitlength=10mm\nY=begin{picture}(3,3)\nY=hasen(0,0)(3,3)\nY=end{picture}=YY= →\nY=unitlength=1mm\nY=begin{picture}(30,30)\nY=hasen(0,0)(30,30)\nY=end{picture}\n(cid:4) (cid:5)\nまた，Y=dashlineにおける第1引数は不要とし，Y=hasenの形状はオプション引数で指定する方\n式を取りました。Y=hasenの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=hasen[#1](x1,y1)(x2,y2).....(xN,yN)\n#1 : L=（破線の実線部分の長さ） デフォルト値=1mm\n: G=（破線のギャップの長さ） デフォルト値=0.9mm\n(x1,y1)...(xN,yN) : 折れ線の頂点列\nオプション引数を与えて破線の形状を変更する例です。\n(cid:2) (cid:3)\nY=hasenの形状変更\nY=unitlength=10mm\nY=begin{picture}(3,3) →\nY=hasen[L=2mm,G=2mm](0,0)(3,3)\nY=end{picture}\n(cid:4) (cid:5)\nただし，ギャップの長さは必ずしも指定した長さにはなりません。というのは，破線の両端にお\nける実線部分が指定した長さとなるようにギャップを調整しているからです。\n細かいことですが，Y=drawlineで描画した直線とY=dashlineで描画した破線の位置がずれるこ\nとがあります。これを修正するのもY=hasenを開発した目的の一つです。\n2.3.3 Y=Hasen\nY=drawline, Y=dashline に対して，Y=Drawline, Y=Dashline があるように，Y=hasen に対しても\nY=Hasen を定義しています。その書式は\n8", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 16", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Hasen[#1]#2\n#1 : L=（破線の実線部分の長さ） デフォルト値=1mm\n: G=（破線のギャップの長さ） デフォルト値=0.9mm\n#2 : 破線で結ぶ点列\n(cid:2) (cid:3)\nY=Hasen\ny\nY=begin{zahyou}[ul=10mm](-.5,2.5)(-.5,1.5) A B\nY=tenretu{A(0,1)w;B(2,1)e;C(2,0)s} →\nY=Hasen{=YA=YB=YC}\nO C x\nY=end{zahyou}\n(cid:4) (cid:5)\n複数の点列を定義するY=tenretuなど，まだ説明していないコマンドが登場してしまいましたが，\nここでは折れ線を破線で引く例としてご覧ください。\n2.3.4 Y=Hasen*\n2点を破線で結ぶコマンドY=hasen, Y=Hasenは，両端から実線部分が始まりますが，これを両端\nからは空白部分が始まるようにしたものが*つきコマンドです。\n下の例では，実線ABと破線BCの境界がBではなくなってしまいます。\ny\nA\n(cid:2) (cid:3)\nY=Hasen\nY=begin{zahyou}[ul=10mm](-.5,1.5)(-2.5,2.5) B\nY=tenretu{A(1,2)e;B(1,1)e;C(1,-1)e;D(1,-2)e}\nY=kuromaru{=YA;=YB;=YC;=YD} → O x\nY=Drawlines{=YA=YB;=YC=YD}\nY=Hasen{=YB=YC} C\nY=end{zahyou}\n(cid:4) (cid:5) D\nY=Hasen*と比較してみてください。\ny\nA\n(cid:2) (cid:3)\nY=Hasen*\nY=begin{zahyou}[ul=10mm](-.5,1.5)(-2.5,2.5) B\nY=tenretu{A(1,2)e;B(1,1)e;C(1,-1)e;D(1,-2)e}\nY=kuromaru{=YA;=YB;=YC;=YD} → O x\nY=Drawlines{=YA=YB;=YC=YD}\nY=Hasen*{=YB=YC} C\nY=end{zahyou}\n(cid:4) (cid:5) D\n9", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 17", "content": "2.4\n鎖線\n鎖線をひくコマンドは Y=Chainlineです。\n(cid:2) (cid:3)\nY=Chainline\nY=begin{picture}(3,3)%\nY=def=YA{(0,0)}%\nY=def=YB{(3,0)}%\nY=put(0,3){=YChainline{=YA=YB}}% −→\nY=put(0,2){=YChainline[.2][.1]{=YA=YB}}%\nY=put(0,1){=YChainline[.5][.1]{=YA=YB}}%\nY=put(0,0){=YChainline[.5][.4]{=YA=YB}}%\nY=end{picture}\n(cid:4) (cid:5)\nその書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Chainline[#1][#2]#3\n#1 : 一つの線分の長さ\n#2 : 線分と線分の間の長さ\n#3 : 点列\n2.5\n複数の折れ線\n複数の折れ線を描画するコマンド Y=Drawlines もあります。複数の折れ線を‘;’で区切ります。\n(cid:2) (cid:3)\nY=Drawlines\nY=begin{picture}(3,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(2,0)}%\n−→\nY=def=YB{(3,3)}%\nY=def=YC{(1,3)}%\nY=Drawlines{=YO=YA=YB=YC=YO=YB;=YA=YC}%\nY=end{picture}\n(cid:4) (cid:5)\n折れ線の線種を変更するには，<...> オプションを用います。\n10", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 18", "content": "(cid:2) (cid:3)\n線種の変更\nY=begin{picture}(3,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(2,0)}%\nY=def=YB{(3,3)}%\nY=def=YC{(1,3)}% −→\nY=Drawline{=YO=YA=YB=YC=YO}%\nY=Drawlines<%\nsensyu==Ydashline[40]{.1}>{%\nY=O=YB;=YA=YC}%\nY=end{picture}\n(cid:4) (cid:5)\nY=Drawlinesの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Drawlines<#1>#2\n<#1> : <sensyu==Ydashlines[40]{.1}>などによる\n線種のローカルな変更\n#2 : 複数の点列を‘;’で区切る\n2.6\n矢線\n矢線を引くコマンドは2種類用意してあります。\nY=yasenは，成分を指定します。\nもうひとつのY=ArrowLineは，始点と終点を指定します。\n2.6.1 Y=yasen\nまずは成分を与えて矢線を描画するコマンド Y=yasen を使用する一例です：\n(cid:2) (cid:3)\nY=yasen\nY=begin{zahyou*}[ul=10mm](0,4)(0,3)\nY=put(0,0){=Ykousi43}%\n→\nY=put(1,0){=Yyasen(-1,3)}%\nY=put(3,0){=Yyasen(1,3)}%\nY=end{zahyou*}\n(cid:4) (cid:5)\nこのコマンドは，矢線の傍に文字列を配置するオプションをもっています。\n11", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 19", "content": "(cid:2) (cid:3)\n<..>オプション\nY=begin{zahyou*}[ul=10mm](0,4)(0,3)\nY=put(0,0){=Ykousi43}%\nY=put(1,0){% (cid:2)a (cid:2)b\n→\nY=yasen<[ne]{=Ybeku a}>(-1,3)}%\nY=put(3,0){%\nY=yasen<[nw]{=Ybeku b}>(1,3)}%\nY=end{zahyou*}\n(cid:4) (cid:5)\nすなわち<...>オプションに，文字列を与えます。その際，Y=Putの配置オプションを附加するこ\nとができます。なお，文字列を配置する基準点は，矢線の中点です。これを動かすのが[..]オプ\nションです。\n(cid:2) (cid:3)\n[..]オプション\nY=begin{zahyou*}[ul=10mm](0,4)(0,4) (cid:2)a\nY=put(0,0){=Ykousi43}% (cid:2)b\nY=put(1,0){%\n→\nY=yasen[1]<[n]{=Ybeku a}>(-1,3)}%\nY=put(3,0){%\nY=yasen[.8]<[nw]{=Ybeku b}>(1,3)}%\nY=end{zahyou*}\n(cid:4) (cid:5)\n[..]オプションのデフォルト値は0.5，すなわち中点です。これを[1]とすれば，終点，[0]と\nすれば，始点がそれぞれ文字列配置の基準点となります。\nY=yasenの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=yasen[#1]<#2>(#3,#4)\nY=Yasen[#1]<#2>#3\n#1 : ラベルを置く位置（デフォルト=0.5, 中点）\n#2 : ラベル（位置指定を含めて）\n(#3,#4) : 成分（始点は Y=put (=YPut) で指定）\n成分を，まとめてひとつにして扱うものが Y=Yasen です。\n(cid:2) (cid:3)\nY=Yasen\nY=begin{zahyou*}[ul=10mm](0,4)(0,3)\nY=def=Yavec{(1,3)}\nY=put(0,0){=Ykousi43}% →\nY=put(0,0){=YYasen=Yavec}%\nY=put(3,0){=YYasen=Yavec}%\nY=end{zahyou*}\n(cid:4) (cid:5)\n12", "tags": []}
{"title": "Page 20", "content": "Y=Yasenに対しても，[...], <...> オプションがY=yasenと同様に使用できます。\n2.6.2 Y=ArrowLine\n矢線を引くコマンドが Y=ArrowLine です．\n(cid:2) (cid:3)\nY=ArrowLine\nY=begin{picture}(2,2)\nY=def=YA{(0,2)}%\n−→\nY=def=YB{(2,0)}%\nY=ArrowLine=YA=YB%\nY=end{picture}\n(cid:4) (cid:5)\n矢線の傍に文字列を配置することも可能です。\n(cid:2) (cid:3)\nY=ArrowLineの文字列配置オプション\nY=begin{zahyou*}[ul=10mm](0,4)(-1,4)\nY=tenretu{A(0,0)s;B(3,0)s;\nC(4,3)n;D(1,3)n}\nD C\nY=Drawline{=YB=YC=YD}\n{Y=thicklines\nY=ArrowLine<putstr=[s]{=Yprotect=Ybeku (cid:2)d\n→\nb}>\nY=A=YB\nY=ArrowLine<putstr=[nw]{=Yprotect=Ybeku\nA (cid:2)b B\nd}>\nY=A=YD}%\nY=end{zahyou*}\n(cid:4) (cid:5)\nすなわち，<...>オプションとして，putstrの右辺値に，文字列を配置オプションとともに記\n述します。配置基準点（デフォルトは中点）を変更するには，キーワードputposを用います。\n(cid:2) (cid:3)\nY=ArrowLineの文字列配置基準点の変更\nY=begin{zahyou*}[ul=10mm](0,4)(-1,4)\nD C\nY=tenretu{A(0,0)s;B(3,0)s;\nC(4,3)n;D(1,3)n}\nY=Drawline{=YB=YC=YD=YA}\n→\n{Y=thicklines\nY=ArrowLine<putpos=0.9,\nputstr=[n]{=Ybeku b}>\n(cid:2)b\nA B\nY=A=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\nY=ArrowLineの書式です。\n13", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 21", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=ArrowLine<#1>[#2]#3#4\n#1 : key=val\nsensyu=\nputstr= （矢線の傍に置く配置オプション+文字列）\nputpos= （文字列の配置基準位置：デフォルトは0.5, 中点）\n#2 : 矢印を置く位置（デフォルト = 1 すなわち終点）\nただし #2=b のときは，両端に矢印\n#3 : 始点\n#4 : 終点\n2.6.3 始点・終点位置の微調整\nY=ArrowLineで引かれる矢線の始点・終点を少しずらしたいときがあります。例えば\n(cid:2) (cid:3)\nY=ArrowLine\nY=begin{zahyou*}[ul=10mm](-.5,2.5)(-.5,1.5)\nB\nY=tenretu{A(0,0)w;B(2,1)e}\n→\nY=Kuromaru=YB\nA\nY=ArrowLine=YA=YB\nY=end{zahyou*}\n(cid:4) (cid:5)\nのような場合，矢印が終点の黒丸にめり込んでいます。矢印の終点を左下に少しずらしたいときな\nどのために\n<Henvi=..> 始点に対する修正ベクトル\n<Henvii=...> 終点に対する修正ベクトル\nオプションを新設しました。右辺値はベクトルで，成分は単位を伴った長さです。右辺値には‘,’が\n入りますから，右辺値全体を{...}でくくる必要があります。\n(cid:2) (cid:3)\n<Henvii=..>オプション\nY=begin{zahyou*}[ul=10mm](-.5,2.5)(-.5,1.5)\nB\nY=tenretu{A(0,0)w;B(2,1)e}\n→\nY=Kuromaru=YB\nA\nY=ArrowLine<Henvii={(-.8pt,-.4pt)}>=YA=YB\nY=end{zahyou*}\n(cid:4) (cid:5)\nなお\n<henvi=..> 始点に対する修正ベクトル\n<henvii=...> 終点に対する修正ベクトル\nも同機能ですが，右辺値の成分はY=unitlengthを単位とする無名数で与えます。\n14", "tags": []}
{"title": "Page 22", "content": "2.6.4 鏃の形状\n鏃のサイズを変更することもできます．例えば\nY=changeArrowHeadSize{1.5}\nとすれば，鏃の大きさは1.5倍になります。\n(cid:2) (cid:3)\nY=changeArrowHeadSize\nY=begin{picture}(2,2)\nY=def=YA{(0,2)}\nY=def=YB{(2,0)} −→\n{Y=changeArrowHeadSize{1.5}\nY=ArrowLine=YA=YB}\nY=end{picture}\n(cid:4) (cid:5)\n鏃の開き具合も調整できます．デフォルトは\nY=def=YArrowHeadAngle{18}%\nとなっています．これを 30 とすると，鏃は正三角形になります．\n(cid:2) (cid:3)\nY=ArrowHeadAngle\n{Y=changeArrowHeadSize{3}%\nY=begin{picture}(2,2)\nY=def=YA{(0,2)}%\n−→\nY=def=YB{(2,0)}%\nY=changeArrowHeadSize[30]{1.5}%\nY=ArrowLine=YA=YB%\nY=end{picture}}\n(cid:4) (cid:5)\nサイズ・開き具合の両方を同時に変更するときは\nY=changeArrowHeadSize[30]{3}\nとY=changeArrowHeadSizeのオプションで開き角を指定することもできます。\n(cid:2) (cid:3)\nY=ArrowHeadAngle\n{Y=changeArrowHeadSize[30]{3}%\nY=begin{picture}(2,2)\nY=def=YA{(0,2)}% −→\nY=def=YB{(2,0)}%\nY=ArrowLine=YA=YB%\nY=end{picture}}\n(cid:4) (cid:5)\nY=ArrowLineで引かれる矢線において，鏃は二等辺三角形を塗りつぶしていますが，その底辺に窪み\nをつけることも可能です。窪みの深さの「二等辺三角形の高さを1としての比率」をY=ArrowHeadPit\nで指定します。\n次の図では，座標軸が2個描画されますが，上が従来の形状，下が窪みをつけた形状です。\n15", "tags": []}
{"title": "Page 23", "content": "y\n(cid:2) Y=ArrowHeadPit (cid:3) O x\nY=begin{zahyou}[ul=8mm](-3,3)(-3,3)\nY=ArrowLine=YLB=YRT\nY=end{zahyou}\n→ y\nY=def=YArrowHeadPit{0.25}\nY=begin{zahyou}[ul=8mm](-3,3)(-3,3)\nY=ArrowLine=YLB=YRT\nY=end{zahyou}\n(cid:4) (cid:5)\nO x\nY=changeArrowHeadSizeに<...>オプションを用いて，窪みを指定することもできます。\nY=def=YArrowHeadPit{.25}\nと\nY=changeArrowHeadSize<.25>{1}\nは同値です。前者の方が簡潔ですが，矢印の長さ・開き角を変更する際には後者の方が便利で\nしょうか。\nそんな馬鹿な，という極端な例です：\n(cid:2) (cid:3) AB\nY=changeArrowSizeによる指定 y\nY=changeArrowHeadSize[30]<0.3333>{4}\nY=bekutorukata{fill}\nY=bekutoru{AB} →\nO x\nY=begin{zahyou}[ul=8mm](-3,3)(-3,3)\nY=ArrowLine=YLB=YRT\nY=end{zahyou}\n(cid:4) (cid:5)\nなお，これら矢線では鏃が塗りつぶされますが，これを枠線のみ描画させるには\nY=renewcommand=YArrowHeadType{l}\nとします。デフォルトは Y=newcommand=YArrowHeadType{f} としてあります．\n16", "tags": []}
{"title": "Page 24", "content": "(cid:2) (cid:3)\n塗りつぶさない鏃\n{Y=def=YArrowHeadType{l}%\nY=changeArrowHeadSize{3}%\nY=begin{picture}(2,2)\n−→\nY=def=YA{(0,1)}%\nY=def=YB{(2,1)}%\nY=ArrowLine=YA=YB%\nY=end{picture}}\n(cid:4) (cid:5)\n2.6.5 矢印の位置\n矢印を途中に付けるためには，[...] オプションで，矢印を置く位置を指定します．\n(cid:2) (cid:3)\nY=ArrowLine[0.5]\n{Y=unitlength8mm=Ysmall\nY=begin{picture}(4,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(4,3)}%\nY=def=YB{(4,0)}%\nY=ArrowLine[.5]=YO=YA%\nY=ArrowLine[.5]=YA=YB%\nY=ArrowLine[.5]=YB=YO%\nY=end{picture}}%\n(cid:4) (cid:5)\n−→\nまた，矢印を両向きにつけたいときは[b]オプションをつけます。\n(cid:2) (cid:3)\n両向き矢印\nY=unitlength10mm=Yrelax\nY=begin{picture}(2,1)\nY=def=YA{(0,.5)} →\nY=def=YB{(2,.5)}\nY=ArrowLine[b]=YA=YB\nY=end{picture}\n(cid:4) (cid:5)\n2.6.6 矢線を点線・破線\n矢線の線種を変更するには Y=ArrowLine に<sensyu=...> オプションを付与します。\n17", "tags": []}
{"title": "Page 25", "content": "(cid:2) (cid:3)\n矢線を点線で\nY=unitlength10mm=Yrelax\nY=begin{picture}(2,1)\nY=def=YA{(0,.5)}\nY=def=YB{(2,.5)} →\nY=ArrowLine%\n<sensyu==Yprotect=Yemdottedline>%\nY=A=YB\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2) (cid:3)\n矢線を破線で\nY=unitlength10mm=Yrelax\nY=begin{picture}(2,1)\nY=def=YA{(0,.5)}\nY=def=YB{(2,.5)} →\nY=ArrowLine%\n<sensyu==Yprotect=Yhasen>%\nY=A=YB\nY=end{picture}\n(cid:4) (cid:5)\n2.6.7 複数の矢線\n複数の矢線を引くコマンドが Y=ArrowLines です。始点・終点を‘;’で区切って並べます。\n(cid:2) (cid:3)\nY=ArrowLines\nY=unitlength=10mm\nY=begin{picture}(4,2)\nY=def=YA{(0,0)}\nY=def=YB{(3,0)}\n→\nY=def=YC{(4,2)}\nY=def=YD{(1,2)}\nY=ArrowLines[.5]{%\nY=A=YB;=YB=YC;=YC=YD;=YD=YA}\nY=end{picture}\n(cid:4) (cid:5)\n2.7\n多角形\n多角形を描画するコマンドがY=Takakkeiです。\n18", "tags": []}
{"title": "Page 26", "content": "(cid:2) (cid:3)\nY=多角形\nY=begin{picture}(3,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(3,0)}% −→\nY=def=YB{(2,3)}%\nY=Takakkei{=YO=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nY=Takakkeiの始点Oと終点Bを結ぶ線分が強制的に付加されます。\n2.8\n正多角形，極座標→直交座標\n円周上に点をとるときは，極座標形式の方が便利です．これを直交座標に変換するコマンド\nY=kyokuTyoku です．使用例として，正六角形を描画してみました．\n(cid:2) (cid:3)\nY=kyokuTyoku\nY=begin{picture}(3,3)(-1.5,-1.5)%\nY=kyokuTyoku(1,90)=YA%\nY=kyokuTyoku(1,150)=YB%\nY=kyokuTyoku(1,210)=YC%\nY=kyokuTyoku(1,270)=YD%\nY=kyokuTyoku(1,330)=YE%\n−→\nY=kyokuTyoku(1,30)=YF%\nY=def=YO{(0,0)}%\nY=En=YO{1}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YD=YE=YF=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nY=kyokuTyoku(1,90)=YA\nで，極座標(1,90)を直交座標に変換した(0,1)がY=Aにセットされます．Y=kyokuTyokuの書式です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=kyokuTyoku(#1,#2)#3\n(#1,#2) : 極座標\n#3 : 変換した直交座標を代入するコントロールシーケンス\n(1) このスタイルファイルでは，原則として，角の単位は六十分法で表します．\n19", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 27", "content": "(2) Y=kyokuTyokuは点を一つずつ定義しますが，複数の点列を定義するコマンド\nY=rtenretu, =Yrtenretu*\nもあります。\n(3) 正多角形を描画するためのemPoly.styもあります。\n2.9\n角の丸い多角形\n多角形を描画するコマンドY=TakakkeiのバリエーションY=ovalTakakkeiコマンドは多角形の\nコーナーを丸くするコマンドです。まずは，Y=Takakkeiの使用例からご覧ください。\n(cid:2) (cid:3)\nY=Takakkei\nC\nY=begin{zahyou*}%\n[ul=10mm,Ueyohaku=1em,\nD\nHidariyohaku=1em,%\nSitayohaku=1em]%\n→\n(0,4)(0,4)\nY=tenretu{A(1,0)s;B(4,1)e;%\nB\nC(2,4)n;D(0,3)w}\nY=Takakkei{=YA=YB=YC=YD}\nA\nY=end{zahyou*}\n(cid:4) (cid:5)\nコーナーを切り取って，円弧で結びます。切り取る線分の長さをY=ovalTakakkeiの第1引数に\n与えます。単位を伴った数値を指定します。\n(cid:2) (cid:3)\nY=ovalTakakkei\nY=begin{zahyou*}%\n[ul=10mm,Ueyohaku=1em,\nHidariyohaku=1em,%\nSitayohaku=1em]%\n→\n(0,4)(0,4)\nY=tenretu*{A(1,0)s;B(4,1)e;%\nC(2,4)n;D(0,3)w}\nY=ovalTakakkei{5mm}{=YA=YB=YC=YD}\nY=end{zahyou*}\n(cid:4) (cid:5)\n2.10\n分点\n線分を内分（外分）する点を求めるコマンド Y=Bunten です．(cid:4)ABC の辺BCの中点MとAを\n結ぶ線分を描画する例です．\n20", "tags": []}
{"title": "Page 28", "content": "(cid:2) (cid:3)\nY=Bunten\nY=begin{picture}(3,3)%\nY=def=YA{(2,3)}%\nY=def=YB{(0,0)}%\nY=def=YC{(3,0)}%\nY=Bunten=YB=YC{1}{1}=YM% −→\nY=Drawline{=YA=YM}\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nY=Bunten の書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Bunten#1#2#3#4#5\n#1 : 端点1\n#2 : 端点2\n#3#4 : 内（外）分比\n#5 : 分点\nすなわち #1 と #2 を結ぶ線分を #3:#4 に分ける点の座標を #5 にセットします．\n特に1:1の内分点，すなわち中点を求めるコマンドY=Tyuutenも便利です。\n(cid:2) (cid:3)\nY=Bunten\nY=begin{picture}(3,3)%\nY=def=YA{(2,3)}%\nY=def=YB{(0,0)}%\nY=def=YC{(3,0)}%\nY=Tyuuten=YB=YC=YM% −→\nY=Drawline{=YA=YM}\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n2.11\n格子\n碁盤の目状の街路図などは良く登場します．格子を描画するコマンド Y=kousi です．\n21", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 29", "content": "(cid:2) (cid:3)\nY=kousi\nY=unitlength5mm\nY=begin{picture}(6,4)% −→\nY=kousi{6}{4}%\nY=end{picture}%\n(cid:4) (cid:5)\n縦横のサイズを変更したいときは，(横サイズ,縦サイズ) オプションを指定します．サイズの\n単位は Y=unitlength です．\n(cid:2) (cid:3)\nY=kousi(..,..)オプション\n{Y=unitlength8mm=Ysmall\nY=begin{picture}(5,2.5)% −→\nY=kousi(1,0.5){5}{5}%\nY=end{picture}}%\n(cid:4) (cid:5)\nY=kousi の書式です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=kousi(#1,#2)#3#4\n#1 : 横方向1区画の長さ（デフォルト=1）\n#2 : 縦方向1区画の長さ（デフォルト=1）\n#3 : 横方向のブロック数\n#4 : 縦方向のブロック数\n置く位置は Y=put で指定する．\n格子を点線・破線で引いてみます。\n(cid:2) (cid:3)\n格子線を破線で引く\nY=unitlength5mm\nY=begin{picture}(6,4)%\n−→\n{Y=def=Ysensyu{=Ydashline[40]{.1}}%\nY=kousi{6}{4}}%\nY=end{picture}%\n(cid:4) (cid:5)\n2.12\nさいころ\nさいころの目を表すコマンド Y=saikoro を用意しました．\n22", "tags": []}
{"title": "Page 30", "content": "(cid:2) (cid:3)\nさいころ\nY=saikoro{1}~\n(cid:4) (cid:5) (cid:4) (cid:5) (cid:4) (cid:5)\nY=saikoro{2}~\n(cid:2)(cid:4) (cid:3)(cid:5) (cid:2)(cid:4) (cid:3)(cid:5) (cid:2)(cid:4) (cid:3)(cid:5)\nY=saikoro{3}=YY= −→\n(cid:2) (cid:3) (cid:2) (cid:3) (cid:2) (cid:3)\nY=saikoro{4}~\nY=saikoro{5}~\nY=saikoro{6}\n(cid:4) (cid:5)\nただし，このコマンドはascmac.styで定義されているY=keytopコマンドを使用していますから，\nこのスタイルファイルを使用することが前提です．さらに，このスタイルファイルは emathP から\n読み込まれるeepic.styと相性が悪いことがあります．その対策をitembbox.styで施していますの\nで，ascmac.styに引き続き itembbox.styも読み込んでおく必要があります．\n23", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 31", "content": "3\n文字列\n3.1\n文字列\n3.1.1 Y=Put\nLATEXの picture 環境において，文字列を配置するコマンドはY=putです。\nemath では，点の位置を Y=A などの変数名で指定します。そこで Y=Put の登場となります。\n(cid:2) (cid:3)\nY=Put\nY=begin{picture}(3,2)\nB\nY=def=YA{(0,0)}\nY=def=YB{(3,2)}\n→\nY=Drawline{=YA=YB}\nY=Put=YA{A} A\nY=Put=YB{B}\nY=end{picture}\n(cid:4) (cid:5)\nうまくないですね。単に Y=Put=YA{A} では，文字‘A’の左下が指定した点A(0,0)にくるように\n配置されます。これを修正するのに\n(dx,dy)[pos]\nオプションを用意しました。次節以降この解説をしますが，とりあえずY=Putの書式をご覧くだ\nさい。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Put#1(#2,#3)[#4]#5\n#1 : 文字列を置く位置（座標）\n(#2,#3) : 位置の修正ベクトル（長さの単位が必要です。）\n#4 : 配置 (l,r,t,b)\n#5 : 文字列\n3.1.2 文字位置の調整\n文字列位置の微調整を行う例です。\n24", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "図形描画", "数式描画", "環境構築", "関数"]}
{"title": "Page 32", "content": "(cid:2) (cid:3)\n位置の調整前\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\nY=def=YA{(2,3)}%\nY=def=YB{(0,0)}%\nA\nY=def=YC{(3,0)}%\nY=Bunten=YB=YC{1}{1}=YM%\nY=Put=YA{A}%\n−→\nY=Put=YB{B}%\nY=Put=YC{C}%\nY=Put=YM{M}% B M C\nY=Drawline{=YA=YM}\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2) (cid:3)\n位置の調整後\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\nY=def=YA{(2,3)}%\nY=def=YB{(0,0)}%\nA\nY=def=YC{(3,0)}%\nY=Bunten=YB=YC{1}{1}=YM%\nY=Put=YA(0,2pt)[b]{A}%\n−→\nY=Put=YB(0,0)[r]{B }%\nY=Put=YC(0,0)[l]{ C}%\nY=Put=YM(0,-2pt)[t]{M}%\nB C\nM\nY=Drawline{=YA=YM}\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nAの調整は (0,2pt) の指定により，頂点Aの上 2pt のところが基準になります。[b]指定に\nより，基準点が文字のbottomとなるように配置されます。(x,y) の x, y は単位をつけた数値で\nす。0だけは単位をつけなくてもよい，としてあります。\n文字位置の調整量(#2,#3)は直交座標成分ですが，[r](#2,#3)とすれば，極座標指定とみなさ\nれます。Aの位置を変えてみます。\n25", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 33", "content": "(cid:2) (cid:3)\n調整量を極座標指定\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\nY=def=YA{(2,3)}%\nY=def=YB{(0,0)}%\nA\nY=def=YC{(3,0)}%\nY=Bunten=YB=YC{1}{1}=YM%\nY=Put=YA[r](2pt,45)[lb]{A}%\n−→\nY=Put=YB(0,0)[r]{B }%\nY=Put=YC(0,0)[l]{ C}%\nY=Put=YM(0,-2pt)[t]{M}%\nB C\nM\nY=Drawline{=YA=YM}\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n3.1.3 文字列位置の簡易指定\n位置の調整を記述するのは面倒なので，簡易指定オプションを用意しました。その書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Put#1[#2]#3\n#1 : 文字列を置く位置（座標）\n#2 : 位置指定オプション\nn = 北 （上）\nnw= 北西（左上）\nw = 西 （左）\nsw= 南西（左下）\ns = 南 （下）\nse= 南東（右下）\ne = 東 （右）\nne= 北東（右上）\n#3 : 文字列\nこれを用いると，先の例は次のように記述できます。\n26", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 34", "content": "(cid:2) (cid:3)\n位置の簡易指定オプション\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\nY=def=YA{(2,3)}%\nY=def=YB{(0,0)}%\nA\nY=def=YC{(3,0)}%\nY=Bunten=YB=YC{1}{1}=YM%\nY=Put=YA[n]{A}% 位置の\n−→\nY=Put=YB[w]{B}% 簡易指定\nY=Put=YC[e]{C}% オプション\nY=Put=YM[s]{M}%\nB C\nM\nY=Drawline{=YA=YM}\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nすなわち，点からみて文字列をおくべき方位を指定します。\n（注）Y=Put の正しいコマンド名は Y=emathPut です。コマンド名 Y=Putが他のスタイルファイル\nと競合した場合は，Y=emathPut をお使いください。\n3.1.4 文字列の回転\nY=Put[#1] には前節のほか次のオプションがあります。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nkaiten =ddd 文字を回転する\nhoukou =vvv 回転角を間接的に指定\nfrom =PPP 次の to=QQQ と併せて回転角を間接的に指定\nto =QQQ\n次は kaiten=ddd で文字を回転させます。回転角 ddd は符号付きの六十分法でです。\n27", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 35", "content": "(cid:2) (cid:3)\nkaiten=\nY=unitlength6mm=Yfootnotesize\ny\nY=begin{zahyou}(-2.5,2.5)(-2.5,2.5)\n1\nY=tenretu*{A(0,-1);B(1,0)} −\nx\n=\nY=Put=YA[w]{$-1$} y\n→ O 1 x\nY=Put=YB[s]{1}\n−1\nY=Tyokusen=YA=YB{}{}\nY=Put[kaiten=45]=YB(0,1mm)[lb]{%\n$y=x-1$}\nY=end{zahyou}\n(cid:4) (cid:5)\n回転角を方向ベクトルによって与えるオプションhoukou=vvv です。\n(cid:2) (cid:3)\nhoukou=\nY=unitlength6mm=Yfootnotesize\nY=begin{zahyou}(-2.5,2.5)(-2.5,2.5) y\n2\nY=tenretu*{A(0,2);B(1,0)} y\n=\nY=Put=YA[w]{2} 2\n−\nY=Put=YB[s]{1} → O 1 2 x x\nY=Tyokusen=YA=YB{}{}\nY=Subvec=YB=YA=YAB\nY=Put[houkou==YAB]=YA(1mm,0)[lb]{%\n$y=2-2x$}\nY=end{zahyou}\n(cid:4) (cid:5)\n2点を与えて回転角を指示する例です。\n(cid:2) (cid:3)\nfrom= , to=\nY=unitlength6mm=Yfootnotesize\ny\nY=begin{zahyou}(-2.5,2.5)(-2.5,2.5) 2\ny\nY=tenretu*{A(0,2);B(1,0)} =\n2\n−\nY=Put=YA[w]{2}\n2\n→ O 1x x\nY=Put=YB[s]{1}\nY=Tyokusen=YA=YB{}{}\nY=Put[from==YA,to==YB]=YA(1mm,0)[lb]{%\n$y=2-2x$}\nY=end{zahyou}\n(cid:4) (cid:5)\n文字列を白抜きにします。\n28", "tags": []}
{"title": "Page 36", "content": "(cid:2) (cid:3)\n白抜き\nY=unitlength6mm=Yfootnotesize\nY=begin{zahyou}(-2.5,2.5)(-2.5,2.5) y\n2\nY=tenretu*{O(0,0);A(0,2);B(1,0)} y\n=\nY=Put=YA[w]{2} 2\n−\nY=Put=YB[s]{1} → O 1 2 x x\nY=En*=YO{2}\nY=Tyokusen=YA=YB{}{}\nY=Put[from==YA,to==YB]=YA(%\n1mm,0)[lb]{=Ycolorbox{white}{$y=2-2x$}}\nY=end{zahyou}\n(cid:4) (cid:5)\n文字の外側の余白は Y=fboxsep により調整できます。\n(cid:2) (cid:3)\nY=fboxsepによる余白調整\nY=unitlength6mm=Yfootnotesize\nY=begin{zahyou}(-2.5,2.5)(-2.5,2.5) y\n2\nY=tenretu*{O(0,0);A(0,2);B(1,0)} y\n=\nY=Put=YA[w]{2} 2\n−\n2\nY=Put=YB[s]{1} → O 1x x\nY=En*=YO{2}\nY=Tyokusen=YA=YB{}{}\n{Y=fboxsep=0pt=YPut[from==YA,to==YB]=YA(%\n1mm,0)[lb]{=Ycolorbox{white}{$y=2-2x$}}}\nY=end{zahyou}\n(cid:4) (cid:5)\n3.1.5 文字列から基準点への矢線\n文字列を置きたい付近で図が込み入っている場合，文字列を少し離れた位置において，そこから\n該当個所に矢線を引くためのコマンドが Y=PutStr です。\n(cid:2) (cid:3)\nY=PutStr\n{Y=unitlength8mm=Yrelax\nY=begin{picture}(3,3)\nA(1, 1)\nY=def=YA{(1,1)} −→\nY=def=YAA{(2,2)}\nY=PutStr=YAA[e]{A(1, 1)}to=YA\nY=end{picture}}\n(cid:4) (cid:5)\n矢線を円弧にしたいときは to の後ろに [半径] オプションをつけます。半径は無名数で単位は\nY=unitlength です。\n29", "tags": []}
{"title": "Page 37", "content": "(cid:2) (cid:3)\nY=PutStr\n{Y=unitlength8mm=Yrelax\nY=begin{picture}(3,3)\nA(1, 1)\nY=def=YA{(1,1)} −→\nY=def=YAA{(2,2)}\nY=PutStr=YAA[e]{A(1, 1)}to[1.2]=YA\nY=end{picture}}\n(cid:4) (cid:5)\n半径に負の値を指定すると，矢印が負の回転を表す方向につきます。\n(cid:2) (cid:3)\nY=PutStr\n{Y=unitlength8mm=Yrelax\nY=begin{picture}(3,3)\nA(1, 1)\nY=def=YA{(1,1)} −→\nY=def=YAA{(2,2)}\nY=PutStr=YAA[e]{A(1, 1)}to[-1.2]=YA\nY=end{picture}}\n(cid:4) (cid:5)\naddvec=オプション 矢印の先端が曲線に埋没しているのが気になる場合の対策です。矢印の先\n端の位置を微調整するためにのオプションが[addvec=..]です。上の例で，矢印の先端を上方に\n1.1pt持ち上げてみます。\n(cid:2) (cid:3)\nY=PutStr\ny\nY=begin{zahyou}[ul=7.5mm](-2,3)(-2,3)\nA(1, 1)\nY=PutStr{(1,2)}(0,0)[b]{A(1, 1)}%\nto[addvec={(0,1.1pt)}]{(1,1)}\n{Y=Thicklines →\nY=En=YO{1.414} O x\nY=kTyokusen=YO{45}{}{}\n}%\nY=end{zahyou}\n(cid:4) (cid:5)\nすなわち，addvecの右辺値に矢印の位置を修正するベクトルを与えますが，その成分は，単位\nを伴った数値です。x成分，y成分の間に‘,’が入りますから，addvec={(0,1.1pt)}と，右辺全体\nを{ }でくくっておく必要があります。\n極座標形式の指定法 また，線幅が細くても対象点に黒丸をつけたりした場合も矢印が埋没します。\n30", "tags": []}
{"title": "Page 38", "content": "(cid:2) (cid:3)\nY=PutStr\ny\nY=begin{zahyou}[ul=7.5mm](-2.5,3)(-2.5,3)\n√\nY=def=YA{(1,1.732)} A(1, 3)\nY=PutStr{(-1,2)}(0,0)[r]%\n{A(1, $=Ysqrt3$)}%\n→\nto=YA O x\nY=En=YO{2}\nY=kTyokusen=YO{60}{}{}\nY=Kuromaru=YA\nY=end{zahyou}\n(cid:4) (cid:5)\nこの場合は，微調整ベクトルを極座標形式で与える方法も用意しました。\n(cid:2) (cid:3)\nY=PutStr\ny\nY=begin{zahyou}[ul=7.5mm](-2.5,3)(-2.5,3)\n√\nY=def=YA{(1,1.732)} A(1, 3)\nY=PutStr{(-1,2)}(0,0)[r]%\n{A(1, $=Ysqrt3$)}%\n→\nto[addvec={r(1.2pt,180)}]=YA O x\nY=En=YO{2}\nY=kTyokusen=YO{60}{}{}\nY=Kuromaru=YA\nY=end{zahyou}\n(cid:4) (cid:5)\nすなわち，r(.,.)と，先頭に‘r’を附加します。\n円弧にする場合の半径指定 矢線を円弧にするには，[...]オプションに，[hankei=..]を附加\nします。\n(cid:2) (cid:3)\nY=PutStr\n√ y\nY=begin{zahyou}[ul=7.5mm](-2.5,3)(-2.5,3)\nA(1, 3)\nY=def=YA{(1,1.732)}\nY=PutStr{(-1,2.5)}(0,0)[r]%\n{A(1, $=Ysqrt3$)}%\n→\nto[hankei=-2,addvec={r(1.2pt,120)}]=YA O x\nY=En=YO{2}\nY=kTyokusen=YO{60}{}{}\nY=Kuromaru=YA\nY=end{zahyou}\n(cid:4) (cid:5)\n右辺値は，Y=unitlengthを単位とする無名数であるのは，今までの仕様を引きずっています。\nY=PutStr の arrowheadsize=オプション Y=PutStrは，デフォルトでは矢印がつきます。\n矢印のサイズを変更するためにのオプションがarrowheadsize=..です。特に右辺値を0とす\nれば，矢印がつかないこととなります。\n31", "tags": []}
{"title": "Page 39", "content": "(cid:2) (cid:3)\nY=PutStr\ny\nY=begin{zahyou}[ul=10mm](-1.2,2.5)(-1.2,1.5)\nY=En=YO{1}\n(1, 0)\nY=PutStr{(1.2,.5)}[e]{(1, 0)}to →\nO x\n[hankei=-1,arrowheadsize=0]%\n{(1,0)}\nY=end{zahyou}\n(cid:4) (cid:5)\nY=PutStrの書式 Y=PutStrの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=PutStr#1[#2]#3to[#4]#5\n#1 : 文字列を置く位置\n#2 : #1 から見ての方位（デフォルト = e ）\n#3 : 文字列\n#4 : 文字列から出る矢印を円弧にしたいときは\nその半径を指定する。\nkey=val の形式も可能\nhankei=..\naddvec=..\narrowheadsize=..\n#5 : 文字列から出る矢印の終点\nY=PutStr#1(#2,#3)[#4]#5to[#6]#7\n#1〜#5 : Y=Put 文と同じ\n#6 : 文字列から出る矢印を円弧にしたいときは\nその半径を指定する。\n#7 : 文字列から出る矢印の終点\n3.2\n複数の点の定義とラベル付け\n3.2.1 Y=tenretu\n複数の点の定義とラベル付けを同時に片付けようというのがY=tenretuコマンドです。\n32", "tags": []}
{"title": "Page 40", "content": "(cid:2) (cid:3)\nY=tenretu\nY=begin{picture}%\n(3.2,4)(-.1,-.5)% A\nY=tenretu{%\nA(2,3)n;B(0,0)w;C(3,0)e}%\nY=Bunten=YB=YC{1}{1}=YM% −→\nY=Put=YM[s]{M}%\nY=Drawline{=YA=YM}%\n{Y=thicklines B C\nM\nY=Drawline{=YA=YB=YC=YA}}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n複数の点の定義とラベルつけ\nY=tenretu#1\nY=tenretu*#1（定義のみ ラベル付けはオプション）\n#1 は点列を ‘;’ で区切った列\n#1は\n[##1]##2(##3,##4)##5\nの形式で点列を ‘;’ で区切る。\n##1 : オプションで，点の位置に置く文字列\n（省略時は，##2 と同じ）\n##2 : Y=##2 という変数の頂点名\n[r] : をつけると極座標形式とみなす\n[s] : をつけると相対移動とみなす\n(##3,##4) : 頂点の座標\n##5 : 頂点の近傍に置く文字列の配置オプション\n[方角] オプションに限り\n区切子 ‘[’, ‘]’ を省略可能\nY=edef=Y##2{(##3,##4)}として，点Y=##2 が定義され，\nY=Put に\nY=Put=Y##2##5{##1}\nとして引き渡される。）\n3.2.2 Y=tenretu*\n*を附加した Y=tenretu* は，点を定義するだけで，ラベル付けはしません。\n33", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 41", "content": "(cid:2) (cid:3)\nY=tenretu\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\nY=tenretu*{%\nA(2,3);B(0,0);C(3,0)}%\n−→\nY=Bunten=YB=YC{1}{1}=YM%\nY=Drawline{=YA=YM}%\n{Y=thicklines\nY=Drawline{=YA=YB=YC=YA}}%\nY=end{picture}\n(cid:4) (cid:5)\n3.2.3 Y=oresen\n更にそれらを折れ線で結んでしまおう，というのがY=oresenです。\n(cid:2) (cid:3) A\nY=oresen\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\n−→\nY=oresen{%\nA(2,3)n;B(0,0)w;C(3,0)e}%\nY=end{picture}\nB C\n(cid:4) (cid:5)\n<sensyu=...>オプションを利用して，折れ線を点線・破線・鎖線にすることも可能です。\n(cid:2) (cid:3) A\n線種の変更（鎖線）\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\n−→\nY=oresen<sensyu==Ychainline>{%\nA(2,3)n;B(0,0)w;C(3,0)e}%\nY=end{picture}\nB C\n(cid:4) (cid:5)\n(cid:2) (cid:3)\n線種の変更（破線） A\nY=begin{picture}%\n(3.2,4)(-.1,-.5)%\nY=oresen<% −→\nsensyu==Ydashline[40]{.1}>{%\nA(2,3)n;B(0,0)w;C(3,0)e}%\nB C\nY=end{picture}\n(cid:4) (cid:5)\nY=oresenの書式です。\n34", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 42", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=oresen<#1>#2\n<#1> : 線種を変更するときのオプション\nsensyu==Ydashline[40]{.1}\nsensyu==Ychainline[.4][.2]\nなど\n#2 は折れ線の頂点列を ‘;’ で区切った列\n#2は\n[##1]##2(##3,##4)##5\nの形式で点列を ‘;’ で区切る。\n##1 : オプションで，点の位置に置く文字列\n（省略時は，##2 と同じ）\n##2 : Y=##2 という変数の頂点名\n[r] : をつけると極座標形式とみなす\n[s] : をつけると相対移動とみなす\n(##3,##4) : 頂点の座標\n##5 : 頂点の近傍に置く文字列の配置オプション\n[方角] オプションに限り\n区切子 ‘[’, ‘]’ を省略可能\nY=edef=Y##2{(##3,##4)}として，点Y=##2 が定義され，\nY=Put に\nY=Put=Y##2##5{##1}\nとして引き渡される。）\n3.2.4 Y=rtenretu\nY=tenretu(*)による点の定義は直交座標を前提としています。[r]オプションで極座標形式にす\nることができますが，多くの点を極座標形式で定義するには，煩雑です。\nそこで，すべての点が極座標形式であるときに使用するためにY=rtenretu(*)を作りました。\n(cid:2) (cid:3)\nY=rtenretu\nY=begin{zahyou}[ul=10mm](-1.2,1.5)(-1.2,1.5) y\nC B\nY=small\nY=rtenretu{A(1,0)ne;B(1,60)ne;C(1,120)nw;\nD A\n→\nD(1,180)nw;E(1,240)sw;F(1,300)se} O x\nY=Drawline{=YA=YB=YC=YD=YE=YF=YA}\nE F\nY=En=YO{1}\nY=end{zahyou}\n(cid:4) (cid:5)\n中心が原点以外のときは[...]オプションで指定します。\n35", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 43", "content": "(cid:2) (cid:3)\nY=rtenretu[極]\nY=begin{zahyou}[ul=10mm](-0.2,2.5)(-1.2,1.5)\ny\nY=small C B\nY=def=YTyuusin{(1,0)}\nY=rtenretu[=YTyuusin]{A(1,0)ne;B(1,60)ne; → D A\nO x\nC(1,120)nw;D(1,180)nw;E(1,240)sw;F(1,300)se}\nY=Drawline{=YA=YB=YC=YD=YE=YF=YA} E F\nY=En=YTyuusin{1}\nY=end{zahyou}\n(cid:4) (cid:5)\n*付のY=rtenretu*とY=rtenretuの関係は，Y=tenretu*とY=tenretuの関係と同じです。\n3.2.5 座標に計算式を記述\nY=tenretuに<perl>オプションを付加すると，座標に計算式を記述することができます。ただし，\nperlとの連携機能を前提としますから，samplePp.texをご覧ください。\n3.3\n線分に文字列\n3.3.1 線分の長さ表記\n線分の両端を円弧で結び，その中央部に長さなどを記入するためのコマンド Y=HenKo です。\n(cid:2) (cid:3)\nY=HenKo\nY=begin{zahyou*}(0,3)(0,3)\nB\nY=tenretu{A(1,1)sw;B(2,2)ne} √\n−→\nY=HenKo=YA=YB{$=Ysqrt{2}$}% 2\nA\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\nY=HenKoは基本的には，\n線分の両端と中央部に置く文字列\nの3個の引数を与えます。なお，与える両端の点の順序を逆転させると，円弧と文字列が線分の反\n対側に表示されます。\n(cid:2) (cid:3)\n端点の順序\nY=begin{zahyou*}(0,3)(0,3) B\n√\nY=tenretu{A(1,1)sw;B(2,2)ne} 2\n−→\nY=HenKo=YB=YA{$=Ysqrt{2}$}%\nA\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\n書式は\n36", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 44", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=HenKo[#1]<#2>#3#4#5\n#1: 弧を点線にする場合，点の個数(*を指定した場合は，一任)\n#2: key=val\nhenkoH=.. 辺と弧の距離(単位付数値) デフォルト値=1.6ex\nhenkohi=..右辺値は無名数で，\n辺と弧の距離をデフォルトの何倍にするかを指定\nputoption=..\nhenkosep=.. (白抜きボックスの Y=fboxsep)\nyazirusi=a/r/b\nhenkomozikaiten=1/-1\nlinewidth=..\nhenkotype=0/1 (0:円弧（デフォルト）, 1:楕円, 2:折れ線)\n#3,#4 : 両端の点\n#5 : 配置する文字列\n引数が多いですが，必須のものは，上の例のように #3, #4, #5 だけです。\n線分と弧の間隔を調整するには，henkoH=..オプションを用います。デフォルト値の1.6exか\nら大きくしてみましょう。\n(cid:2) (cid:3)\n文字と線分との間隔\nY=begin{zahyou*}(0,3)(0,3) B\nY=tenretu{A(1,1)sw;B(2,2)ne}\n−→ √\nY=HenKo<henkoH=3ex>=YA=YB{$=Ysqrt{2}$}% 2\nA\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\n弧の部分を点線にするには [#1] で，弧上に置く点の個数を指定します。\n(cid:2) (cid:3)\n弧を点線で\nY=begin{zahyou*}(0,3)(0,3) B\nY=tenretu{A(1,1)sw;B(2,2)ne} √\n−→\n2\nY=HenKo[20]=YA=YB{$=Ysqrt{2}$}%\nA\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\n極端な話し，これを [0] と指定すれば，円弧は描かれません。\n37", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 45", "content": "(cid:2) (cid:3)\n文字のみ\nY=begin{zahyou*}(0,3)(0,3) B\nY=tenretu{A(1,1)sw;B(2,2)ne} √\n−→\n2\nY=HenKo[0]=YA=YB{$=Ysqrt{2}$}%\nA\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\nなお，文字列は線分の中央に置かれますが，これをどちらかに寄せるコマンドがY=sPut です。\n(cid:2) (cid:3)\nY=sPut\n{Y=unitlength10mm=Ysmall y\nY=begin{zahyou}(-1,2)(-1,2.5) P\n(cid:2)p\nY=def=YO{(0,0)}%\nY=def=YP{(1,2)}%\n−→\nY=Put=YP(0,0)[l]{ P}%\nY=sPut[.75]=YO=YP(0,0)[rb]{% O x\n$Y=beku p$}%\nY=ArrowLine=YO=YP%\nY=end{zahyou}}%\n(cid:4) (cid:5)\n書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=sPut[#1]#2#3(#4,#5)[#6]#7\n#1 : 比率 (0~1)\n#2 : 始点\n#3 : 終点\n(#4,#5) : 位置の修正ベクトル 単位必須\n#6 : Y=makebox の [..] オプション\n#7 : 文字列\n#2 から #3 へ向かう線分の #1 倍の位置(Y=X)に，\nY=Put=YX(#4,#5)[#6]#7 として文字列(#7)を置く。\n（注）dviout.exe による印刷で，辺の傍に記した長さの文字などが黒いボックスになってしまう\n場合は，dviout のgraphic — color specials 設定をreplace(def) または replace(bak) にしてみて\nください。\n3.3.2 Y=HenKo : 文字列の配置調整\nY=HenKoで線分の傍に置く文字列が長くなったときなど文字位置を調整したいときがあります。\nその一例です。\n38", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 46", "content": "(cid:2) (cid:3)\n修正前\nY=unitlength10mm=Yfootnotesize\nA\nY=drawaxisfalse\nY=begin{zahyou}(-.5,2.5)(-.5,2.5)\n√\nY=Thicklines → 2+ 3\nY=oresen{A(0,2)n;B(2,0)s}\nY=thinlines B\nY=HenKo=YA=YB{$2+=Ysqrt3$}\nY=end{zahyou}\n(cid:4) (cid:5)\n√\n文字列2+ 3が線分にかかっていますので，左に動かします。調整に入る前に，デフォルトの\n文字列配置について述べます。\n基準点は円弧の中点で，文字列ボックスの中心がこの基準点にくるように配置されます。では，\n基準点を左に4mm動かしてみましょう。\n(cid:2) (cid:3)\n平行移動\nY=unitlength10mm=Yfootnotesize\nY=drawaxisfalse A\nY=begin{zahyou}(-.5,2.5)(-.5,2.5)\nY=Thicklines\n√\n→ 2+ 3\nY=oresen{A(0,2)n;B(2,0)s}\nY=thinlines\nB\nY=HenKo<putoption={(-4mm,0)}>=YA=YB%}>%\n{$2+=Ysqrt3$}\nY=end{zahyou}\n(cid:4) (cid:5)\n<putoption={(-4mm,0)}>の部分が平行移動をするためのオプションで，Y=Putにオプションとし\nて引き渡されます。すなわち，円弧の中点をY=Qとして\nY=Put=YQ(-4mm,0){$2+=Ysqrt3$}\nが実行されます。\n文字列が長いときは，文字列を回転して線分と平行にする方がよいでしょうか。\n<henkomozikaiten=1> オプション\nです。\n39", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 47", "content": "(cid:2) (cid:3)\n回転\nY=unitlength10mm=Yfootnotesize\nA\nY=drawaxisfalse\nY=begin{zahyou}(-.5,2.5)(-.5,2.5)\nY=tenretu{A(0,2)n;B(2,0)s} → 2 +√\nY=HenKo<henkomozikaiten=1>=YA=YB% 3\n{$2+=Ysqrt3$} B\n{Y=Thicklines=YDrawline{=YA=YB}}\nY=end{zahyou}\n(cid:4) (cid:5)\nオプションの右辺値を−1とすれば，文字は180度回転します。\n(cid:2) (cid:3)\n逆回転\nY=unitlength10mm=Yfootnotesize\nA\nY=drawaxisfalse\nY=begin{zahyou}(-.5,2.5)(-.5,2.5)\nY=tenretu{A(0,2)n;B(2,0)s} → 3\n√+\nY=HenKo<henkomozikaiten=-1>=YA=YB% 2\n{$2+=Ysqrt3$} B\n{Y=Thicklines=YDrawline{=YA=YB}}\nY=end{zahyou}\n(cid:4) (cid:5)\n3.3.3 弧に矢印\n弧の端末に矢印をつけるオプションが<yazirusi=a>オプションです。\n(cid:2) (cid:3)\n<yazirusi=a>オプション\nY=begin{zahyou*}(0,3)(0,3)\nY=def=YA{(1,1)}%\nY=def=YB{(2,2)}% B\nY=Put=YA{=Ymakebox(0,0)[r]{A }}% → r\nY=Put=YB{=Ymakebox(0,0)[l]{ B}}% A\nY=HenKo<yazirusi=a>=YA=YB{$r$}%\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\n逆向きにつけるには\n40", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 48", "content": "(cid:2) (cid:3)\n<yazirusi=r>オプション\nY=begin{zahyou*}(0,3)(0,3)\nY=def=YA{(1,1)}%\nY=def=YB{(2,2)}% B\nY=Put=YA{=Ymakebox(0,0)[r]{A }}% → r\nY=Put=YB{=Ymakebox(0,0)[l]{ B}}% A\nY=HenKo<yazirusi=r>=YA=YB{$r$}%\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\n両向きにつけるには\n(cid:2) (cid:3)\n<yazirusi=b>オプション\nY=begin{zahyou*}(0,3)(0,3)\nY=def=YA{(1,1)}%\nY=def=YB{(2,2)}% B\nY=Put=YA{=Ymakebox(0,0)[r]{A }}% → r\nY=Put=YB{=Ymakebox(0,0)[l]{ B}}% A\nY=HenKo<yazirusi=b>=YA=YB{$r$}%\nY=Drawline{=YA=YB}\nY=end{zahyou*}\n(cid:4) (cid:5)\n3.3.4 Y=HenKoの中点，中心\nY=HenKoコマンド発行後，円弧の中点，円弧の中心位置を知りたいことがあります。\nY=HenKoTyuuten =YHenKoで描画される円弧の中点はY=HenKoTyuutenに保存されています。\n(cid:2) (cid:3)\nY=HenKoTyuuten\nY=begin{zahyou*}[ul=8mm](-.5,3)(-.5,2.5) B\nY=tenretu{A(0,0)nw;B(3,2)ne}\nY=Drawline{=YA=YB} →\nY=HenKo=YA=YB{} A\nY=Kuromaru=YHenKoTyuuten\nY=end{zahyou*}\n(cid:4) (cid:5)\nY=HenKoTyuusin =YHenKoで描画される円弧の中心をY=HenKoTyuusinに保存します。\n41", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 49", "content": "(cid:2) (cid:3)\nY=HenKoTyuuten\nY=begin{zahyou*}[ul=8mm](-1,4)(-1,4)\nY=tenretu{A(0,0)sw;B(2,0)se}\nY=Drawline{=YA=YB}\nY=HenKo=YA=YB{}\nY=Kuromaru=YHenKoTyuusin →\nY=Hasen{=YA=YHenKoTyuusin=YB}\nY=Enko<hasen={[.5][.8]}>=YHenKoTyuusin%\nA B\n{tuukaten==YA}%\n{hazimeten==YB}{owariten==YA}\nY=end{zahyou*}\n(cid:4) (cid:5)\n応用例 Y=HenKoTyuuten, Y=HenKoTyuusinを利用した例です。\n(cid:2) (cid:3)\n応用例\nY=begin{zahyou*}[ul=8mm](-.5,2.5)(-.5,4.5)\nY=tenretu{A(2,4)n;B(1,2)se;C(0,0)s}\nA\nY=Drawline{=YA=YC}\nY=HenKo=YA=YB{}\nY=Bunten=YHenKoTyuusin=YHenKoTyuuten{.95}{.05}=YP\nY=Bunten=YHenKoTyuusin=YHenKoTyuuten{1.05}{-.05}=YQ → B\nY=Drawline{=YP=YQ}\nY=HenKo=YB=YC{}\nY=Bunten=YHenKoTyuusin=YHenKoTyuuten{.95}{.05}=YP\nC\nY=Bunten=YHenKoTyuusin=YHenKoTyuuten{1.05}{-.05}=YQ\nY=Drawline{=YP=YQ}\nY=end{zahyou*}\n(cid:4) (cid:5)\n3.3.5 Y=HenKoの形状いろいろ\nY=HenKoの<henkotype=..>オプションにより，円弧部分のバリエーションについて説明します.\nこの節では，Y=HenKoの方が焦点ですから，辺のほうは破線描画としておきます。\n色つけ 円弧の部分に色をつけるには <henkocolor=...> オプションを用います。\n(cid:2) (cid:3)\n<henkocolor=..>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\n→ B\nY=Hasen{=YA=YB}\na\nA\nY=HenKo<henkocolor=red>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n42", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 50", "content": "<henkotype=..>オプション デフォルトでは，辺の両端を円弧で結びますが，この形状を変える\nオプションが <henkotype=..>オプションです。\n<henkotype=ellipse> 円弧ではなく，楕円弧にするオプションが\n<henkotype=1> または <henkotype=ellipse>\nです。\n(cid:2) (cid:3)\n<henkotype=ellipse>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\n→ B\nY=Hasen{=YA=YB}\na\nA\nY=HenKo<henkotype=ellipse>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n<henkotype=triangle> 円弧ではなく，辺の両端点・文字列を配置する点を結ぶ三角形を描画す\nるオプションが\n<henkotype=2> または <henkotype=triangle>\nです。\n(cid:2) (cid:3)\n<henkotype=triangle>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\n→ B\nY=Hasen{=YA=YB}\na\nA\nY=HenKo<henkotype=triangle>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n<henkotype=parallel> 円弧ではなく，辺と平行な線分を描画するオプションが\n<henkotype=3> または <henkotype=parallel>\nです。\n(cid:2) (cid:3)\n<henkotype=parallel>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\n→ B\nY=Hasen{=YA=YB}\na\nA\nY=HenKo<henkotype=parallel>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n43", "tags": []}
{"title": "Page 51", "content": "yazirusi=a/r/bオプション この形状は，線分ABの長さを表すときなどに利用できそうです。\nそして，Y=HenKoで描画される方の線分には矢印をつけることが多いようです。\n(cid:2) (cid:3)\n<yazirusi=b>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\n→ B\nY=Hasen{=YA=YB}\na\nA\nY=HenKo<henkotype=parallel,yazirusi=b>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\nY=HenKo<yazirusi=..>=YA=YB{...}におけるyazirusi=..の右辺値は\na: 点Y=Aから点Y=Bに向かう向き\nr: 点Y=Bから点Y=Aに向かう向き\nb: 両向き\nのいずれかです。\n<henkosideb=..,henkosidet=..> オプション この場合，さらに補助線—線分の両端とY=HenKo\nによって引かれる並行線分の両端を結ぶ線分（若干延長して)が欲しくなるかもしれません。\n(cid:2) (cid:3)\n<henkosideb=..,henkosidet=..>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\nY=Hasen{=YA=YB} → B\nY=HenKo<henkotype=parallel,yazirusi=b,% A a\nhenkosideb=0,henkosidet=1.5>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\nこの場合，補助線は，辺の端点とY=HenKoによって引かれる線分（矢線）の端点を結ぶ線分を\nY=henkosideb : 1-=Yhenkosideb\nと\nY=henkosidet : 1-=Yhenkosidet\nに分ける2点を結ぶ線分\nとなります。\nなお，<henkocolor=..>オプションによる色づけはY=HenKoによる線分（両向き矢線）に対して\nのみ働きます。\n(cid:2) (cid:3)\n<henkocolor=..>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\nY=Hasen{=YA=YB}\n→ B\nY=HenKo<henkotype=parallel,yazirusi=b,%\na\nA\nhenkocolor=red,%\nhenkosideb=0,henkosidet=1.5>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n44", "tags": []}
{"title": "Page 52", "content": "補助線に対する色づけは<henkosidecolor=..>オプションで行います。\n(cid:2) (cid:3)\n<henkosidecolor=..>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\nY=Hasen{=YA=YB}\n→ B\nY=HenKo<henkotype=parallel,yazirusi=b,%\na\nA\nhenkocolor=red,henkosidecolor=green,%\nhenkosideb=0,henkosidet=1.5>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\nまさかねぇ〜(^^ゞ\n<henkotype=bracket> 円弧ではなく，大括弧にするオプションが\n<henkotype=1> または <henkotype=bracket>\nです。\n(cid:2) (cid:3)\n<henkotype=bracket>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\n→ B\nY=Hasen{=YA=YB}\na\nA\nY=HenKo<henkotype=bracket>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n角を丸く コーナーを丸くするオプションが<Oval=..>オプションです。右辺値は，単位を伴った\n長さでコーナーの四分円の半径を指定します。\n(cid:2) (cid:3)\n<Oval=...>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\nY=Hasen{=YA=YB}\n→ B\na\nA\nY=HenKo<henkotype=bracket,Oval=4pt,henkocolor=cyan>\nY=A=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n注：<henkotype=brace>はありません。後述のY=rotUbraceコマンドをご覧ください.\n<agezoko=..>オプション Y=HenKoの端点を辺から浮かせたいときがあります。そのためのオプ\nションです。右辺値は無名数で単位は Y=unitlength です。単位をつけた数値で指定したいとき\nは<Agezoko=..>オプションを用います。\n45", "tags": []}
{"title": "Page 53", "content": "(cid:2) (cid:3)\n<agezoko=>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu{A(0,1)w;B(4,2)e}\n→ B\nY=Hasen{=YA=YB}\nA a\nY=HenKo<henkotype=bracket,Agezoko=5pt>=YA=YB{$a$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n<agezokovi=..,agezokovii=..>オプション Y=HenKoの端点をオプションの右辺値だけずらすオ\nプションです。右辺値はベクトルで，成分は無名数—単位はY=unitlengthです。単位をつけた数\n値で指定したいときは<Agezokovi=..,=YAgezokovii=..>オプションを用います。末尾‘i’が始点\nに，‘ii’が終点に対する補正ベクトルです。\n(cid:2) (cid:3)\n<agezokovi=>オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,2)\nY=tenretu{A(0,1)nw;B(4,1)ne}\nY=Hasen{=YA=YB}\nA B\nY=HenKo<henkotype=bracket>=YA=YB{} →\nY=HenKo<henkotype=bracket,henkocolor=red,%\nAgezokovi={(-2pt,0)},Agezokovii={(2pt,0)},%\nhenkoH=3pt>=YA=YB{}\nY=end{zahyou*}\n(cid:4) (cid:5)\n3.3.6 辺にY=brace\nY=underbrace, Y=overbraceを傾いた線分に対して使用するコマンドが\nY=rotUbrace, Y=rotObrace\nです。\nまずは，Y=rotUbraceの書式から\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=rotUbrace[#1]#2#3#4\n点#2から点#3へ向かう有向線分の，\n進行方向右側に Y=underbrace をつけ，\n中央下部に文字列#4を配置する。\n（#4 は数式モード内と解釈される。--- Y=scriptstyle ）\nY=underbrace 記号と有向線分の間隔を空けたいときは#1に\ndepth=3pt\nなどと，間隔を単位付き数値で指定する。\n46", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 54", "content": "では，簡単な使用例です。\n(cid:2) (cid:3)\nY=rotUbrace\nY=footnotesize\nY=begin{zahyou}[ul=4mm](-1,11)(-1,6)% y\n5\nY=tenretu*{A(0,5);B(10,0)}% (cid:8)\nY=Put=YA[w]{5}=YPut=YB[s]{10}%\n→ (cid:9)(cid:10)\nY=kuromaru[2pt]{=YA;(2,4);(4,3); 6\n個\n(6,2);(8,1);=YB}%\nO (cid:11)10x\nY=Tyokusen=YA=YB{}{}%\nY=rotUbrace=YA=YB{=Ytext{6個}}%\nY=end{zahyou}\n(cid:4) (cid:5)\nすなわち点A(0, 5)から点B(10, 0)へ向かう線分の下にY=underbraceをつけ，その中央部に格\n子点の個数を示しています。この文字列はデフォルトでは Y=scriptstyle で小さすぎますので，\nY=textstyleを付加しています。\nY=underbraceを線分から少し離したい，という場面もあるでしょう。そのためのオプションが\n[depth=...]\nです。右辺値は単位を伴った数値です。\n(cid:2) (cid:3)\n[depth=...オプション\nY=footnotesize\nY=begin{zahyou}[ul=4mm](-1,11)(-1,6)%\ny\nY=tenretu*{A(0,5);B(10,0)}% 5\n(cid:8)\nY=Put=YA[w]{5}=YPut=YB[s]{10}%\nY=kuromaru[2pt]{=YA;(2,4);(4,3); → (cid:9)(cid:10)\n6\n(6,2);(8,1);=YB}% 個\nY=Tyokusen=YA=YB{}{}% O (cid:11)10x\nY=rotUbrace[depth=3pt]=YA=YB%\n{Y=text{6個}}%\nY=end{zahyou}\n(cid:4) (cid:5)\n基準となる線分は有向線分として扱われます。上の例で，向きを入れ変えると\n(cid:2) (cid:3)\n有向線分の向きを逆\nY=footnotesize\ny\nY=begin{zahyou}[ul=4mm](-1,11)(-1,6)%\n5\n(cid:11)\nY=tenretu*{A(0,5);B(10,0)}%\nY=Put=YA[w]{5}=YPut=YB[s]{10}% 個 6\n→ (cid:10)(cid:9)\nY=kuromaru[2pt]{=YA;(2,4);(4,3);\n(6,2);(8,1);=YB}%\nO (cid:8)10x\nY=Tyokusen=YA=YB{}{}%\nY=rotUbrace=YB=YA{=Ytext{6個}}%\nY=end{zahyou}\n(cid:4) (cid:5)\n47", "tags": []}
{"title": "Page 55", "content": "Y=brace記号が線分ABに関して対称な位置に付きます。文字の向きがおかしいですか。これは\nY=underbraceを回転させているからで，文字の向きを逆にするには，Y=overbraceを用いればよい\nでしょう。ということで，つぎはY=rotObraceの話しに移ります。\n(cid:2) (cid:3)\nY=rotObrace\nY=footnotesize\nY=begin{zahyou}[ul=4mm](-1,11)(-1,6)% y\n5(cid:10)\nY=tenretu*{A(0,5);B(10,0)}%\nY=Put=YA[w]{5}=YPut=YB[s]{10}% (cid:11) 6 (cid:8)個\n→\nY=kuromaru[2pt]{=YA;(2,4);(4,3);\n(6,2);(8,1);=YB}% (cid:9)\nO 10x\nY=Tyokusen=YA=YB{}{}%\nY=rotObrace=YA=YB{=Ytext{6個}}%\nY=end{zahyou}\n(cid:4) (cid:5)\n線分とY=overbrace記号を離すためのオプションは[height=...]です。\n(cid:2) (cid:3)\n[height=...]オプション\nY=footnotesize\ny\nY=begin{zahyou}[ul=4mm](-1,11)(-1,6)% (cid:10)\n5\nY=tenretu*{A(0,5);B(10,0)}%\n6\nY=Put=YA[w]{5}=YPut=YB[s]{10}% (cid:11)(cid:8)個\n→\nY=kuromaru[2pt]{=YA;(2,4);(4,3);\n(cid:9)\n(6,2);(8,1);=YB}%\nO 10x\nY=Tyokusen=YA=YB{}{}%\nY=rotObrace[height=3pt]=YA=YB{=Ytext{6個}}%\nY=end{zahyou}\n(cid:4) (cid:5)\nY=rotObraceの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=rotObrace[#1]#2#3#4\n点#2から点#3へ向かう有向線分の，\n進行方向左側に Y=overbrace をつけ，\n中央上部に文字列#4を配置する。\n（#4 は数式モード内と解釈される。--- Y=scriptstyle ）\nY=overbrace 記号と有向線分の間隔を空けたいときは#1に\nheight=3pt\nなどと，間隔を単位付き数値で指定する。\n48", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 56", "content": "3.3.7 等辺記号\n2つの線分の長さが等しいときに，縦棒を引いたりして表現するためのコマンド Y=Touhenkigou\nです。\n(cid:2) (cid:3)\nY=Touhenkigou\nY=begin{picture}\n(3.4,4)(-.2,-.5)%\nY=def=YB{(0,0)}%\nA\nY=def=YC{(3,0)}%\nY=def=YA{(1.5,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}% −→ | |\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=Touhenkigou=YA=YB\nB C\nY=Touhenkigou=YA=YC\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Touhenkigou[#1]<#2><#3>(#4)#5#6\n#1 : 記号（デフォルトは | ）\n#2 : 個数\n#3 : #2で複数を指定した場合の記号間間隔（デフォルト0.5pt）\n#4 : 位置（デフォルトは0.5，すなわち中点）\n#5, #6 : 線分の両端\n辺上に置く縦棒を2本（3本）にしたいときは <#2> オプションを用います。\n49", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 57", "content": "(cid:2) (cid:3)\nY=Touhenkigou\nY=begin{picture}\n(3.4,4)(-.2,-.5)%\nY=def=YB{(0,0)}%\nA\nY=def=YC{(3,0)}%\nY=def=YA{(1.5,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}% −→ || |||\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=Touhenkigou<2>=YA=YB\nB C\nY=Touhenkigou<3>=YA=YC\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n複数の線分に等辺記号をつけるコマンドが Y=touhenkigou です。線分を‘;’で区切って並べます。\n(cid:2) (cid:3)\nY=touhenkigou\nY=begin{picture}\n(3.4,4)(-.2,-.5)%\nY=def=YB{(0,0)}% A\nY=def=YC{(3,0)}%\nY=def=YA{(1.5,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\n−→ || ||\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=touhenkigou<2>{=YA=YB;=YA=YC}%\nB C\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=touhenkigou[#1]<#2>#3\n#1 : 辺上に置く記号（デフォルトは | ）\n#2 : 個数\n#3 : 線分列（区切子は‘;’）\n50", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 58", "content": "3.3.8 平行記号\n(cid:2) (cid:3)\nY=heikoukigou\nY=unitlength5mm=Ysmall B D\nY=begin{picture}(6,6)\nY=tenretu{A(1,1)s;B(4,5)n;\n→\nC(3,1)s;D(6,5)n}\nY=heikoukigou{=YA=YC;=YB=YD}\nA C\nY=heikoukigou[2]{=YA=YB;=YC=YD}\nY=end{picture}\n(cid:4) (cid:5)\n(1) すなわち一番簡単な使用法は\nY=heikoukigou{=YP=YQ;=YR=YS}\nなどと，新コマンドY=heikoukigouの引数に平行記号をつけたい線分を‘;’で区切って並べます．\n(2) (1)の場合，記号‘>’は1個だけつきますが，これを2個にしたければ\nY=heikoukigou[2]{=YP=YQ;=YR=YS}\nと，Y=heikoukigouに[2]オプションをつけます．\n(3) さらに記号のサイズ，間隔，位置などを調整したいときは[...] オプションに\nkey=val,key=val,....\nの形のオプションを列記します．どの様なオプションがあるかは，次の書式をご覧ください．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n平行記号\n線分の中央に，記号 ‘>’ を配置する。\nY=heikoukigou[#1]#2\n#1 : 記号の個数\nまたは key=val\nheikoukigoukosuu=記号の個数（デフォルト値は1）\nheikoukigouiti =記号の位置（デフォルト値は0.5,\nすなわち線分の中点）\nheikoukigoukankaku=記号を複数配置するときの間隔\n（デフォルト値は1mm）\nheikoukigousize =記号の大きさ（デフォルト値は2）\n#2 : 線分の列を‘;’区切りで列記する．\n51", "tags": []}
{"title": "Page 59", "content": "3.4\n角の内部に記号\n3.4.1 Y=Kakukigou\n角の内部に円弧などを描き，角の大きさなどを表示させるコマンド\nY=Kakukigou です。\n(cid:2) (cid:3)\nY=Kakukigou\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou=YB=YA=YC{45=YDeg}%\n45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nY=Kakukigou の基本的な使用法は\n角を構成する3点（真ん中が角の頂点）と角内に置く記号（文字列）\nの4つの引数を与えます。書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n角の内部に円弧を描き，その傍に記号などを置く。\nY=Kakukigou[#1]<#2>#3#4#5<#6><#7>\n#1 : 円弧の上に置く記号\n#1=a のときは角記号に矢印をつける。\n#1=r のときは角記号に逆向きの矢印をつける。\n#1=b のときは角記号に両向きの矢印をつける。\n#1=| のときは，円弧中央に円弧と垂直な短い線分\n注：| は，アルファベット小文字のエル(l)ではなく，縦棒(|)です。\n#2 : 円弧の個数\n#3#4#5 : 角BAC\n#4 が角の頂点\n半直線 #4#3 を 回転して #4#5 に重ねる回転を表示する。\n#6 : 円弧と頂点の距離係数（デフォルト値 1 ）\nhankei=（無名数） 半径の指定\nHankei=（単位付） 〃\nsiteiten= 円弧が指定点を通過\nhasen=[破線の長さ][破線の間隔] 円弧を破線で\n#7 : 円弧の中心と角の頂点位置（デフォルト値 0 ）\n以下，Y=emathPut に続く。\nY=Kakukigou* : 円弧の内部を塗りつぶします。\n#3 と #5 を入れ替えると，\n52", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 60", "content": "(cid:2) (cid:3)\n角の向き\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou=YC=YA=YB[w]{135=YDeg}%\n135◦A B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nすなわち，半直線 #4#3 を正の向きに回転して #4#5 に重ねる回転を表示します。\n円弧の位置を調整するには <#6> オプションを用います。デフォルトを1として，1より大きく\nすれば頂点から離れ，1より小さくすると頂点に近づきます。\n(cid:2) (cid:3)\n円弧の位置\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→ 45◦\nY=Kakukigou=YB=YA=YC<2>{45=YDeg}%\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n円弧の半径を直接指定することも可能です。\n(cid:2) (cid:3)\n円弧の半径指定\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→ 45◦\nY=Kakukigou=YB=YA=YC<hankei=.8>{45=YDeg}%\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nhankei=の右辺値の単位はY=unitlengthです。これをY=unitlengthに依存しない値で指定する\nには，Hankei=とします。\n(cid:2) (cid:3)\n円弧の半径指定（単位付）\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→ 45◦\nY=Kakukigou=YB=YA=YC<Hankei=8mm>{45=YDeg}%\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n円弧が通過すべき一点を指定する方法もあります。\n(cid:2) (cid:3)\n円弧の通過点指定\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→ 45◦\nY=Kakukigou=YB=YA=YC<siteiten==YB>{45=YDeg}%\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n53", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 61", "content": "円弧の曲がり具合は，<#7> オプションで調整します。デフォルトは 0 ですが，1に近づけると\n半径が小さくなっていきます。\n(cid:2) (cid:3)\nY=Kakukigou\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→ 45◦\nY=Kakukigou=YB=YA=YC<2><.5>{45=YDeg}%\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n円弧の中央部に円弧に垂直な縦線を1本入れる表示法もあります。[|] オプションです。\n(cid:2) (cid:3)\n円弧の中心に縦棒\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou[|]=YB=YA=YC{45=YDeg}%\n45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n円弧に矢印をつけるには Y=Kakukigou に [a] オプションをつけます。\n(cid:2) (cid:3)\n円弧に矢印\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou[a]=YB=YA=YC{45=YDeg}%\n45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n[a] オプションでは，矢印は正の回転方向につきます。これを逆向きにつけたいときは，[a] オ\nプションに代えて[r] オプションをつけます。\n(cid:2) (cid:3)\n逆向きに矢印\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou[r]=YB=YA=YC{45=YDeg}%\n45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n[b] オプションをつけると，両向きに矢印がつきます。\n(cid:2) (cid:3)\n両向きに矢印\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou[b]=YB=YA=YC{45=YDeg}%\n45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n54", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 62", "content": "円弧の内部を塗りつぶすには，Y=Kakukigou*コマンドを用います。\n(cid:2) (cid:3)\n円弧の内部を塗りつぶす\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou*=YB=YA=YC{45=YDeg}%\n45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n塗りつぶしの濃度を指定するには[...]オプションを用います。0（白）と1（真黒）の間の数\nを指定します。\n(cid:2) (cid:3)\n円弧の内部を黒で塗りつぶす\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou*[1]=YB=YA=YC{45=YDeg}%\n45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n複数の角を区別するため，角内の円弧を2重，3重にすることができます。<..>オプションです。\n(cid:2) (cid:3)\n円弧を二重に\nY=begin{picture}(4,4)%\nY=tenretu{A(1,1)w;B(3,1)e;C(2,3)e}%\nY=Kakukigou=YB=YA=YC[e]{$=Yalpha$}%\nY=Kakukigou<2>=YC=YB=YA[w]{$=Ybeta$}%\nY=Kakukigou<3>=YA=YC=YB[s]{$=Ygamma$}%\nY=Drawline{=YC=YA=YB=YC}%\nY=end{picture}\n(cid:4) (cid:5)\nC\nγ\n−→\nα β\nA B\n逆に <..> オプションに <0> と指定すれば，角内に円弧は描かず，記号類だけを置くこともで\nきます。\n55", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 63", "content": "(cid:2) (cid:3)\n円弧なし\nY=begin{picture}(4,5)(-0.5,-0.5)%\nY=tenretu{A(0,0)w;B(2,0)e;C(2,3.464)n}%\nY=Bunten=YB=YC{1}{2}=YD%\nY=Put=YD[ne]{D}%\nY=Kakukigou<0>=YB=YA=YD(0,0)[c]{$=Ybullet$}%\nY=Kakukigou<0>=YD=YA=YC(0,0)[c]{$=Ybullet$}%\nY=Drawline{=YA=YD}%\n{Y=thicklines\nY=Drawline{=YC=YA=YB=YC}}%\nY=end{picture}\n(cid:4) (cid:5)\nC\n−→\nD\n•\n•\nA B\n円弧を破線で描画することも可能です。\n(cid:2) (cid:3)\n破線の円弧\nY=begin{picture}(5,5)%\nY=tenretu{A(4.5,0.5)e;B(0.5,0.5)w;C(3,4)n}\nY=Drawline{=YA=YB=YC}\nY=Kakukigou=YA=YB=YC<hasen=[.5][.5],Hankei=1cm>(%\n2pt,2pt)[l]{=Ymaru2}\nY=end{picture}\n(cid:4) (cid:5)\nC\n−→\n(cid:6)2\nB A\n56", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 64", "content": "さらに矢印を付けることも可能です。\n(cid:2) (cid:3)\n破線の円弧に矢印\nY=begin{picture}(5,5)%\nY=tenretu{A(4.5,0.5)e;B(0.5,0.5)w;C(3,4)n}\nY=Drawline{=YA=YB=YC}\nY=Kakukigou[b]=YA=YB=YC<hasen=[.5][.5],Hankei=1cm>(%\n2pt,2pt)[l]{=Ymaru2}\nY=end{picture}\n(cid:4) (cid:5)\nC\n−→\n(cid:6)2\nB A\n最後に，角内に置く文字列の位置調整です。これは，Y=Putの文字列位置調整オプションと同じ\nです。\n(cid:2) (cid:3)\nY=Kakukigou\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou=YB=YA=YC[e]{45=YDeg}% 45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nと簡易指定オプション[e]も使えますが，角内は狭いですから\n(cid:2) (cid:3)\nY=Kakukigou\nY=begin{picture}(3,3)%\nC\nY=tenretu{A(1,1)w;B(2,1)e;C(2,2)e}%\n−→\nY=Kakukigou=YB=YA=YC(2pt,2pt)[l]{45=YDeg}% 45◦\nA B\nY=Drawline{=YC=YA=YB}%\nY=end{picture}\n(cid:4) (cid:5)\nなどと細かく指定した方が良いでしょう。蛇足ながら文字列を配置する基準点は，円弧の中点です。\n等しい角に同じ記号をつけるためのコマンドが Y=toukakukigou です。角を ‘;’ で区切って並べ\nるというのは，Y=touhenkigou と同様です。\n57", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 65", "content": "(cid:2) (cid:3)\nY=toukakukigou\nY=begin{picture}\n(3.4,4)(-.2,-.5)%\nY=def=YB{(0,0)}% A\nY=def=YC{(3,0)}%\nY=def=YA{(1.5,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\n−→\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=toukakukigou<2>{=YC=YB=YA;=YA=YC=YB}%\nB C\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nY=toukakukigou*と‘∗’をつけると角内を塗りつぶします。\n(cid:2) (cid:3)\nY=toukakukigou*\nY=begin{picture}\n(3.4,4)(-.2,-.5)%\nY=def=YB{(0,0)}% A\nY=def=YC{(3,0)}%\nY=def=YA{(1.5,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\n−→\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=toukakukigou*{=YC=YB=YA;=YA=YC=YB}%\nB C\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n書式です。\n58", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 66", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n複数の角に角記号をつける。\nY=toukakukigou[#1]<#2>#3\nY=toukakukigou*[#1]<#2>#3\n#1 : 円弧の上に置く記号\n[|] のときは，円弧中央に円弧と垂直な短い線分（デフォルト）\n注：| は，アルファベット小文字のエル(l)ではなく，縦棒(|)です。\n[] のときは，なにもつけない（円弧のみ）\n*付のときは，塗りつぶしの濃度(0〜1)\n#2 : 円弧の個数\n#3 : 角の列 区切り子は‘;’\n3.4.2 直角記号\n特に直角を表す記号です。\n(cid:2) (cid:3)\n<..>オプション\nY=begin{picture}%\n(3,5)(-0.5,-0.5)%\nY=def=YA{(0,0)}%\nC\nY=def=YB{(2,0)}%\nY=def=YC{(2,3.464)}%\nY=Bunten=YB=YC{1}{2}=YD%\nY=Put=YA{=Ymakebox(0,0)[r]{A }}% −→\nY=Put=YB{=Ymakebox(0,0)[l]{ B}}%\nY=Put=YC{=Ymakebox(0,0.5){C}}%\nY=Tyokkakukigou=YA=YB=YC\nA B\nY=thicklines\nY=Drawline{=YC=YA=YB=YC}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Tyokkakukigou[#1](#2)#3#4#5\n#1 : 直角記号内を塗りつぶすときの濃さ\n#2 : 直角記号のサイズ\n#3#4#5 : 直角(#4が頂点)\n59", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 67", "content": "直角記号のサイズは (#2) で指定できます。デフォルトは 5(pt) です。10pt にしたいときは，\n(10) と指定します。\n(cid:2) (cid:3)\n<..>オプション\nY=begin{picture}%\n(3,5)(-0.5,-0.5)%\nY=def=YA{(0,0)}%\nC\nY=def=YB{(2,0)}%\nY=def=YC{(2,3.464)}%\nY=Bunten=YB=YC{1}{2}=YD%\nY=Put=YA{=Ymakebox(0,0)[r]{A }}% −→\nY=Put=YB{=Ymakebox(0,0)[l]{ B}}%\nY=Put=YC{=Ymakebox(0,0.5){C}}%\nY=Tyokkakukigou(10)=YA=YB=YC\nA B\nY=thicklines\nY=Drawline{=YC=YA=YB=YC}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n空間図形など複雑な図形で，直角記号を塗りつぶしたいときは，[#1] オプションに塗りつぶし\nの濃度(0〜1)を指定します。\n60", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 68", "content": "(cid:2) (cid:3)\n<..>オプション\n{Y=unitlength5mm=Ysmall\nY=begin{picture}(11,10)(-1,-1)\nY=def=Ytakasa{7}%\nY=def=YA{(0,0)}=Ydef=YB{(6,0)}=Ydef=YD{(3,2)}%\nY=Addvec=YB=YD=YC\nY=Bunten=YA=YC{1}{1}=YH\nY=Addvec=YH{(0,=Ytakasa)}=YO\nY=Put=YO{=Ymakebox(0,0.8){O}}%\nY=Put=YB{=Ymakebox(0,0)[lt]{ B}}%\nY=Put=YA{=Ymakebox(0,0)[r]{A }}%\nY=Put=YD{=Ymakebox(0,0)[rb]{D }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=Put=YH{=Ymakebox(0,-0.8){H}}%\n%Y=Tyokkakukigou[.5]=YO=YH=YA% 直角記号塗りつぶし[.5]オプション\nY=Tyokkakukigou[.5](10)=YO=YH=YA% (10)はサイズオプション\nY=Drawline{=YA=YC}%\nY=Drawline{=YB=YD}%\nY=Drawline{=YO=YH}%\nY=thicklines\nY=Drawline{=YO=YA=YB=YC=YO=YB}%\nY=Dottedline{0.3}{=YA=YD=YC}%\nY=Dottedline{0.3}{=YO=YD}%\nY=thinlines\nY=end{picture}%\n}\n(cid:4) (cid:5)\nO\n−→\nD\nC\nH\nA\nB\n複数の角に直角記号をつけるコマンドY=tyokkakukigouもあります。\n61", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 69", "content": "3.4.3 一般角\n360◦ を越える角に角記号をつけるコマンド Y=ippankaku の基本的な使用法は，引数に角度を与\nえるだけです。\ny\n(cid:2) (cid:3)\nY=ippankaku\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\n→ O x\nY=ippankaku{1230}%\nY=kHantyokusen{(0,0)}{1230}%\nY=end{zahyou}\n(cid:4) (cid:5)\nY=rasenP この記号の適当なところに文字列を配置するために，角度を指定して螺旋上の点を求め\nるコマンド Y=rasenP を用意しました。Y=emathPutと併用して文字列を配置します。\ny\n(cid:2) (cid:3)\nY=rasenP\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\n1230◦\nY=ippankaku{1230}%\n→ O x\nY=rasenP{1140}=YP\nY=kHantyokusen{(0,0)}{1230}%\nY=Put=YP[ne]{1230=YDeg}%\nY=end{zahyou}\n(cid:4) (cid:5)\n螺旋の形状変更 螺旋 r = aθ+b の係数 a, b のデフォルト値はa = 0.02, b = 0.2 としてありま\nす。これを変更するためのオプションが\nY=ippankaku<#1><#2>\n#1 : a を #1 倍する。\n#2 : b を #2 倍する。\nその効果は\n62", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 70", "content": "y\n(cid:2) (cid:3)\n<...>オプション\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\n→ O x\nY=ippankaku<1.5><2.5>{1230}%\nY=kHantyokusen{(0,0)}{1230}%\nY=end{zahyou}\n(cid:4) (cid:5)\n始線変更オプション 始線の位置を変更するには [...] オプションを用います。\ny\n(cid:2) (cid:3)\n[...]オプション\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\nY=ippankaku[60]{1230}%\n→ O x\nY=def=YO{(0,0)}%\nY=kHantyokusen{(0,0)}{60}%\nY=kHantyokusen{(0,0)}{1230}%\nY=end{zahyou}\n(cid:4) (cid:5)\n角が負の場合の処理 角が負の場合は，内部処理で r =aθ+b の a の符号を逆転させています。\ny\n(cid:2) (cid:3)\n負の角\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\n→ O x\nY=ippankaku{-1230}%\nY=kHantyokusen{(0,0)}{-1230}%\nY=end{zahyou}\n(cid:4) (cid:5)\n矢印の制御 矢印の制御は (#4) オプションで行います。デフォルトは終端に矢印をつけます。こ\nれを逆に始端につけたいときは (s) オプションをつけます。\n63", "tags": []}
{"title": "Page 71", "content": "y\n(cid:2) (cid:3)\n(s)オプション\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\n→ O x\nY=ippankaku(s){1230}%\nY=kHantyokusen{(0,0)}{1230}%\nY=end{zahyou}\n(cid:4) (cid:5)\n両端につけるには (b) オプションを用います。\ny\n(cid:2) (cid:3)\n(b)オプション\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\n→ O x\nY=ippankaku(b){1230}%\nY=kHantyokusen{(0,0)}{1230}%\nY=end{zahyou}\n(cid:4) (cid:5)\n矢印をつけたくないときは (n) オプションです。\ny\n(cid:2) (cid:3)\n(n)オプション\nY=unitlength8mm=Ysmall\nY=begin{zahyou}(-3,3)(-3,3)%\n→ O x\nY=ippankaku(n){1230}%\nY=kHantyokusen{(0,0)}{1230}%\nY=end{zahyou}\n(cid:4) (cid:5)\n両端にY=Kuromaru, Y=Siromaru 両端に黒丸,白丸を配置したいときは，らせん上の1点を求める\nY=rasenP コマンドを用います。\n64", "tags": []}
{"title": "Page 72", "content": "(cid:2) −690◦ (cid:2)θ <0◦ (cid:3)\ny\nY=small\nY=begin{zahyou*}[ul=8mm](-3,3)(-3,3)%\nY=drawXYaxis −690◦\nY=ippankaku<1.5><2.5>(n){-690}%\nY=kHantyokusen{(0,0)}{-690}% → O x\nY=rasenP{0}=YStart=YSiromaru=YStart\nY=rasenP{-690}=YEnd=YKuromaru=YEnd\nY=rasenP{-640}=YP\nY=Put=YP[ne]{$-690=YDeg$}%\nY=end{zahyou*}\n(cid:4) (cid:5)\nY=ippankaku の書式 Y=ippankaku の書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=ippankaku<#1><#2>[#3](#4)#5\n#1 : a の倍率\n#2 : b の倍率\n#3 : 始め角（六十分法）\n#4 : 矢印の配置\ne = 終端（デフォルト）\ns = 始端\nb = 両端\nn = なし\n#5 : 終り角（六十分法）\n3.5 picture\n数式に 環境を併置\n3.5.1 sikipicture環境\n数式にpicture環境を併設し,数式を飾り立てようというのがsikipicture環境です。これは，実質\nzahyou*環境です。したがって，その環境内には，zahyou*環境内に記述できるものはすべて記述可\n能です。\n65", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "図形描画", "数式描画", "環境構築", "関数"]}
{"title": "Page 73", "content": "(cid:2) (cid:3)\nsikipicture環境\naY=begin{sikipicture}{%\nx^2,\n+,\n2,\nx, → ax2+2x+ 1 z\n2\n+,\nY=protect=Ybunsuu12}\nY=Takakkei{=YLT=YLB=YRB=YRT}\nY=put(0,0){=Ycolor{red}=YKuromaru=YO}%\nY=end{sikipicture}z\n(cid:4) (cid:5)\n座標領域を確認するため，四隅を結ぶ四角形と座標原点に赤丸印を描画しておきました。\n注1. Y=begin{sikipicture}{...}の引数内にY=bunsuuなどのコマンドを入れるときはY=protect\nをかぶせておく必要があります。\n注2. TEXが認知するサイズは上図の四角形です。Y=putを用いてこの四角形の外部に文字列を配\n置することは可能ですが，TEXはその存在を認知しませんから，前後の文章とかぶります。\nY=vspace{...}などで調整する必要があります。\n注3. sikipicture環境のY=unitlengthは，1pt（固定）です。\n注4. sikixyposも同義語として使えます。\n3.5.2 Y=sikiBi, Y=sikiTi\nY=begin{sikipicture}{...}の引数内で，分割記述された各項の中央下部の点の座標が\nY=sikiBi, =YsikiBii, =YsikiBiii, .....\nに定義されています。そこに赤丸を打ってみましょう。\n(cid:2) (cid:3)\nY=sikiBi,...\naY=begin{sikipicture}{%\nx^2,\n+,\n2,\nx, ax2+2x+ 1 z\n→\n+, 2\nY=protect=Ybunsuu12}\nY=put(0,0){=Ycolor{red}=Ykuromaru{%\nY=sikiBi;=YsikiBii;=YsikiBiii;%\nY=sikiBiv;=YsikiBv;=YsikiBvi}}%\nY=end{sikipicture}z\n(cid:4) (cid:5)\n66", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 74", "content": "+の下の赤丸がずれていますね。これは，二項演算子，関係演算子には両側にアキが入ること\nによるずれです。正しい位置が欲しければ，Y=begin{sikipicture}{...}の引数内の演算子両側に\n{}を補ってやります。\n(cid:2) (cid:3)\n二項演算子に対する補正\naY=begin{sikipicture}{%\nx^2,\n{}+{},\n2,\nx, ax2+2x+ 1 z\n→\n2\n{}+{},\nY=protect=Ybunsuu12}\nY=put(0,0){=Ycolor{red}=Ykuromaru{%\nY=sikiBi;=YsikiBii;=YsikiBiii;%\nY=sikiBiv;=YsikiBv;=YsikiBvi}}%\nY=end{sikipicture}z\n(cid:4) (cid:5)\nx2 の下もずれてるって？これはずれていません。x2 の中央下です。底のxの中央下が欲しいな\nら，xとその冪を分離して与えます。\nついでに，各項の中央上にも緑丸をつけてみます。（Y=sikiTi, =YsikiTii, .....）\n(cid:2) (cid:3)\n二項演算子に対する補正\naY=begin{sikipicture}{%\nx,\n{}^2,\n{}+{},\n2,\nx,\n{}+{},\nY=protect=Ybunsuu12} ax2+2x+ 1 z\n→\n2\nY=put(0,0){=Ycolor{red}=Ykuromaru{%\nY=sikiBi;=YsikiBii;=YsikiBiii;%\nY=sikiBiv;=YsikiBv;=YsikiBvi;%\nY=sikiBvii}}%\nY=put(0,0){=Ycolor{green}=Ykuromaru{%\nY=sikiTi;=YsikiTii;=YsikiTiii;%\nY=sikiTiv;=YsikiTv;=YsikiTvi;%\nY=sikiTvii}}%\nY=end{sikipicture}z\n(cid:4) (cid:5)\n3.5.3 Y=sikixposi, Y=sikiyhposi, Y=sikiydposi\nなお，丸印をつけた点のx座標は\n67", "tags": []}
{"title": "Page 75", "content": "Y=sikixposi, =Ysikixposii, .....\nです。またy座標は，赤丸のほうが\nY=sikiydposi, =Ysikiydposii, .....\n緑丸のほうが\nY=sikiyhposi, =Ysikiyhposii, .....\nとなっています。\n(cid:2) (cid:3)\nY=sikixpos..\naY=begin{sikipicture}{%\nx,\n{}^2,\n{}+{},\n2,\nx,\n{}+{},\nY=protect=Ybunsuu12}\nY=Takakkei{=YLT=YLB=YRB=YRT} → ax2+2x+ 1 z\n2\nY=put(0,0){=Ycolor{red}=Ykuromaru{%\n(Y=sikixposi,=Yymin);%\n(Y=sikixposii,=Yymin);%\n(Y=sikixposiii,=Yymin)}}%\nY=put(0,0){=Ycolor{green}=Ykuromaru{%\n(Y=sikixposi,=Yymax);%\n(Y=sikixposii,=Yymax);%\n(Y=sikixposiii,=Yymax)}}%\nY=end{sikipicture}z\n(cid:4) (cid:5)\n3.5.4 Y=sikixlposi, Y=sikixrposi\nY=sikixposiなどは各項の中央x座標を表しますが，各項・左右端のx座標はそれぞれ\nY=sikixlposi, =Ysikilposii, .....\nY=sikixrposi, =Ysikirposii, .....\nなどです。\n68", "tags": []}
{"title": "Page 76", "content": "(cid:2) (cid:3)\nY=sikixlpos.., Y=sikixrpos..\naY=begin{sikipicture}{%\nx,\n{}^2,\n{}+{},\n2,\nx,\n{}+{}, ax2+2x+ 1 z\n→\n2\nY=protect=Ybunsuu12}\nY=Takakkei{=YLT=YLB=YRB=YRT}\nY=put(0,0){=Ycolor{red}=Ykuromaru{%\n(Y=sikixlposiv,=Ysikiyhposiv);%\n(Y=sikixrposiv,=Ysikiyhposiv)}}%\nY=put(0,0){=Ycolor{green}=Ykuromaru{%\n(Y=sikixposiv,=Ysikiydposiv)}}%\nY=end{sikipicture}z\n(cid:4) (cid:5)\n3.5.5 使用例\n式展開の説明図 式を展開するときの流れを説明する図です.\n(cid:2) (cid:3)\n式展開の説明図\nY=vskip 24pt\nY=begin{sikipicture}{(,a,+,b,),=Ykern1em(,x,+,y,)=,ax,+,ay,+,bx,+,by}\nY=HenKo{(=Ysikixposvii,=Yymax)}{(=Ysikixposii,=Yymax)}{=Ymaru1}\nY=HenKo<henkoH=15pt>{(=Ysikixposix,=Yymax)}{(=Ysikixposii,=Yymax)}{=Ymaru2}\nY=HenKo{(=Ysikixposiv,=Yymin)}{(=Ysikixposvii,=Yymin)}{=Ymaru3}\nY=HenKo<henkoH=15pt>{(=Ysikixposiv,=Yymin)}{(=Ysikixposix,=Yymin)}{=Ymaru4}\nY=Put{(=Ysikixposxi,=Yymax)}(0,0)[b]{=Ymaru1}\nY=Put{(=Ysikixposxiii,=Yymax)}(0,0)[b]{=Ymaru2}\nY=Put{(=Ysikixposxv,=Yymin)}(0,0)[t]{=Ymaru3}\nY=Put{(=Ysikixposxvii,=Yymin)}(0,0)[t]{=Ymaru4}\nY=end{sikipicture}\nY=vskip 10pt\nY=mbox{}\n(cid:4) (cid:5)\n(cid:6)2\n(cid:6)1 (cid:6)1 (cid:6)2\n→ (a+b) (x+y)=ax+ay+bx+by\n(cid:6)3 (cid:6)3 (cid:6)4\n(cid:6)4\n69", "tags": []}
{"title": "Page 77", "content": "部分積分の流れ 部分積分の流れを示すのにも使えます.\n(cid:2) (cid:3)\n不定積分の流れ\nY=vskip15pt\nY=begin{sikipicture}{%\nY=dint{}{},f’(x),g(x),dx=,f(x),g(x),-,=Ydint{}{},f(x),g’(x),dx\n}\nY=HenKo<henkoH=15pt,yazirusi=r>=YsikiTv=YsikiTii{=Yfootnotesize 積分する}\nY=HenKo<henkoH=15pt,yazirusi=r>=YsikiTix=YsikiTv{=Yfootnotesize そのまま}\nY=HenKo<henkoH=15pt,yazirusi=a>=YsikiBiii=YsikiBvi{=Yfootnotesize そのまま}\nY=HenKo<henkoH=15pt,yazirusi=a>=YsikiBvi=YsikiBx{=Yfootnotesize 微分する}\nY=end{sikipicture}\nY=vskip10pt\nY=mbox{}\n(cid:4) (cid:5)\n(cid:12) 積分する そのまま(cid:12)\nf (cid:3) (x)g(x)dx=f(x)g(x)− f(x)g (cid:3) (x)dx\n→\nそのまま 微分する\nY=HenKoによる円弧を式から少し離したいときは，Y=HenKoに対し<agezoko=..>オプションをつ\nけます。\n(cid:2) (cid:3)\n不定積分の流れ\nY=vskip18pt\nY=begin{sikipicture}{%\nY=dint{}{},f’(x),g(x),dx=,f(x),g(x),-,=Ydint{}{},f(x),g’(x),dx\n}\nY=HenKo<henkoH=15pt,yazirusi=r,agezoko=3>=YsikiTv=YsikiTii{=Yfootnotesize\n積分する}\nY=HenKo<henkoH=15pt,yazirusi=r,agezoko=3>=YsikiTix=YsikiTv{=Yfootnotesize\nそのまま}\nY=HenKo<henkoH=15pt,yazirusi=a,agezoko=3>=YsikiBiii=YsikiBvi{=Yfootnotesize\nそのまま}\nY=HenKo<henkoH=15pt,yazirusi=a,agezoko=3>=YsikiBvi=YsikiBx{=Yfootnotesize\n微分する}\nY=end{sikipicture}\nY=vskip10pt\nY=mbox{}\n(cid:4) (cid:5)\n70", "tags": []}
{"title": "Page 78", "content": "積分する そのまま\n(cid:12) (cid:12)\n→ f (cid:3) (x)g(x)dx=f(x)g(x)− f(x)g (cid:3) (x)dx\nそのまま 微分する\n談話室 No.107 ふたたび newPh232.texでも取り上げた使用例を再度取り上げてみます。\nソースリストはre107a.texです。\nx2+ 6x+ 3 2 =1+ 3 2 (x+3)2+10\n(cid:6)2\nの形\n半分の2乗\n右側の部分，前回はY=phkasenでアンダーラインを引きましたが，今回はY=HenKoで\n<henkotype=bracket>\nオプションを用いてみました。\n71", "tags": []}
{"title": "Page 79", "content": "3.5.6 bunpicture環境\nsikipicture環境は，数式に対するもので\nY=begin{sikipicture}{.....}\nの引数{.....}は数式モードに入ると仮定されています。\nこれに対して，テキストモードに入るものをbunpicture環境と称することとします。\n(cid:2) (cid:3)\nbunpicture環境\nY=begin{bunpicture}{%\nY=underline{It}, is natural ,=Yunderline{that she should think}, so.}\nY=HenKo<yazirusi=r,henkotype=bracket,Oval=4pt,Agezoko=2pt>=YbunBi=YbunBiii{}\nY=end{bunpicture}\nY=vskip5pt\nY=mbox{}\n(cid:4) (cid:5)\nIt is natural that she should think so.\n→\nさらに手が込んで\n(cid:2) (cid:3)\n応用例\nY=mbox{}=Yvskip1=Ybaselineskip\nY=begin{bunpicture}{It ,is natural, that ,she should think so,.}\nY=HenKo<henkotype=bracket,yazirusi=r,Agezoko=2pt,putoption={(0,1pt)[b]}>%\nY=bunTiii=YbunTi{=Yfootnotesize Itはthat以下を表します}\nY=HenKo<henkotype=bracket,yazirusi=a,Agezoko=2pt>%\n{(=Ybunxposiii,=Yymin)}{(=Ybunxlposiv,=Yymin)}{}\nY=Add=Yymin{-2}=Yyy\nY=put(0,0){=Ycolor{red}%\nY=ArrowLine{(=Ybunxlposiv,=Yyy)}{(=Ybunxrposiv,=Yyy)}%\nY=HenKo<henkotype=bracket,yazirusi=r,henkoH=10pt,Oval=5pt,%\nputoption={(0,-2pt)[t]},Agezoko=2pt>%\n{(=Ybunxlposii,=Yymin)}{(=Ybunxrposiv,=Yymin)}%\n{Y=color{black}=Yfootnotesize that以下がItの後に続きます}\nY=ArrowLine{(=Ybunxlposii,=Yyy)}{(=Ybunxrposii,=Yyy)}%\n}%\nY=end{bunpicture}\nY=vskip1=Ybaselineskip\nY=mbox{}\n(cid:4) (cid:5)\n72", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 80", "content": "Itはthat以下を表します\nIt is natural that she should think so.\n→\nthat以下がItの後に続きます\n73", "tags": []}
{"title": "Page 81", "content": "4\n円・楕円\n4.1\n円\n4.1.1 円\n中心と半径を指定 円を描画するには，LATEXで Y=circle がありますが，直径を指定することに\nなっています．半径の方が使いやすいので，Y=En を用意しました．次のように使います．\n(cid:2) (cid:3)\nY=En\nY=begin{picture}(3,3)%\nY=def=YC{(1.5,1.5)}% −→\nY=En=YC{1}%\nY=end{picture}\n(cid:4) (cid:5)\nすなわち，Y=En は，中心と半径の2つの引数をとります．\n半径の間接指定 半径を指定する代わりに，円周上の1点を指定して描画する方法もあります。\n(cid:2) (cid:3)\n円周上の1点を指定\nP\nY=begin{picture}(3,3)%\nY=tenretu{C(1.5,1.5)s;P(2.5,2.5)ne}\n−→\nC\nY=kuromaru{=YC;=YP}\nY=En=YC{tuukaten==YP}%\nY=end{picture}\n(cid:4) (cid:5)\n直径を指定 2点を指定して，それを結ぶ線分を直径とする円を描画するコマンドY=EnT もあり\nます。\n(cid:2) (cid:3)\n直径を指定\nB\nY=begin{picture}(3,3)%\nY=tenretu{A(.5,.5)sw;B(2.5,2.5)ne}\n−→\nY=kuromaru{=YA;=YB}\nY=EnT=YA=YB\nA\nY=end{picture}\n(cid:4) (cid:5)\n4.1.2 円の破線描画\n円を破線で描画するには，\n74", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 82", "content": "(cid:2) (cid:3)\n円周を破線で\nY=begin{picture}(3,3)%\nY=def=YC{(1.5,1.5)}% −→\nY=En<hasen=[.6][.8]>=YC{1}%\nY=end{picture}\n(cid:4) (cid:5)\nと<hasen=[破線の長さ][破線の間隔]>オプションを与えます。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=En<#1>#2#3\n<#1>: hasen=xx で円弧を破線で描画するときの\n[破線の長さ][破線の間隔]\n#2 : 中心の座標\n#3 : 半径\n4.1.3 円弧\n円弧を描画するために，Y=Enko を用意しました．\n(cid:2) (cid:3)\nY=Enko\nY=begin{picture}(3,2)%\nY=def=YC{(2,0)}% −→\nY=Enko=YC{2}{45}{150}\nY=end{picture}\n(cid:4) (cid:5)\nすなわち，Y=Enko は，\nY=Enko{中心}{半径}{開始角}{終了角}\n中心，半径，開始角，終了角と4つの引数を取ります．\n円弧を破線で描画するには，<#1> に\n<hasen=[破線の長さ][破線の間隔]>\nオプションを与えます。\n(cid:2) (cid:3)\n円弧を破線で\nY=begin{picture}(3,2)%\nY=def=YC{(2,0)}%\n−→\nY=Enko<hasen=[.6][.8]>%\nY=C{2}{45}{150}\nY=end{picture}\n(cid:4) (cid:5)\n点線で描画するには，<#1>に\n75", "tags": []}
{"title": "Page 83", "content": "<ten=周上に置く点の個数>\nオプションを与えます。\n(cid:2) (cid:3)\n円弧を点線で\nY=begin{picture}(3,2)%\nY=def=YC{(2,0)}%\n−→\nY=Enko<ten=30>%\nY=C{2}{45}{150}\nY=end{picture}\n(cid:4) (cid:5)\nY=Enkoの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n% 円弧\nY=Enko<#1>#2#3#4#5\n#1 : オプション\nhasen=xx で円弧を破線で描画するときの\n[破線の長さ][破線の間隔]\nオプションを与える。\nten=xx 円周を点線で描画するときの周上の点の個数\nyazirusi=a : 正方向に矢印をつける\n=r : 負方向に矢印をつける\n=b : 両方向に矢印をつける\n=n : 矢印をつけない\n#2 : 中心\n#3 : 半径を直接与えるか\ntuukaten=xx として，円弧の周上の一点を与える\n#4 : 始め角を直接与えるか\nhazimeten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 始め角とするように指定する。\n#5 : 終り角を直接与えるか\nowariten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 終り角とするように指定する。\n始め角，終り角を六十分法の角度で与える代わりに，点を指定して，中心から指定した点に向か\nうベクトルの方向角で与えるオプションの利用例です。\n76", "tags": []}
{"title": "Page 84", "content": "(cid:2) (cid:3)\n両端の間接的指定\nY=begin{picture}(3,2)%\nY=def=YA{(0,0)}%\nY=def=YB{(0,2)}%\nY=def=YC{(3,0)}% −→\nY=Enko=YC{2}%\n{hazimeten==YB}{owariten==YA}%\nY=Dashline[40]{.1}{=YC=YA=YB=YC}%\nY=end{picture}\n(cid:4) (cid:5)\n半径も円周上の一点を指定することにより，間接的に与えることもできます。\n(cid:2) (cid:3)\n半径の間接的指定\nY=begin{picture}(3,2)%\nY=def=YA{(1,1)}%\nY=def=YC{(2,0)}%\n−→\nY=Enko=YC{tuukaten==YA}%\n{45}{150}\nY=Kuromaru=YA\nY=end{picture}\n(cid:4) (cid:5)\n4.1.4 矢印付きの円弧(1) 偏角指定\n円弧に矢印をつけるには，Y=Enkoに<yazirusi=a>オプションをつけます。\n(cid:2) (cid:3)\n<yazirusi=a>\nY=begin{picture}(3,2)%\n−→\nY=Enko<yazirusi=a>{(2,0)}{2}{45}{150}\nY=end{picture}\n(cid:4) (cid:5)\n矢印を逆向きにしたいときは，オプションの右辺値を‘r’とします。\n(cid:2) (cid:3)\n<yazirusi=r>\nY=begin{picture}(3,2)%\n−→\nY=Enko<yazirusi=r>{(2,0)}{2}{45}{150}\nY=end{picture}\n(cid:4) (cid:5)\nまた，オプションの右辺値を‘b’とすれば，両向きの矢印がつきます。\n(cid:2) (cid:3)\n<yazirusi=b>\nY=begin{picture}(3,2)%\n−→\nY=Enko<yazirusi=b>{(2,0)}{2}{45}{150}\nY=end{picture}\n(cid:4) (cid:5)\nさらには，<hasen=..>オプションと併用も可能です。\n77", "tags": []}
{"title": "Page 85", "content": "(cid:2) (cid:3)\n<yazirusi=b>\nY=begin{picture}(3,2)%\nY=Enko<hasen=[.6][.8],yazirusi=b>% −→\n{(2,0)}{2}{45}{150}\nY=end{picture}\n(cid:4) (cid:5)\n4.1.5 矢印付きの円弧(2) 端点指定\n矢印付きの円弧を，半径と端点を指定して描画するのがY=ArrowArc コマンドです．\n(cid:2) (cid:3)\nY=ArrowArc\nY=begin{picture}(3,2)%\nY=def=YA{(3,0)}%\n−→\nY=def=YB{(0,2)}%\nY=ArrowArc{4}=YA=YB\nY=end{picture}\n(cid:4) (cid:5)\n半径に負の値を与えると，回転が負の方向となるように描画されます．\n(cid:2) (cid:3)\n回転の向き\nY=begin{picture}(3,2)%\nY=def=YA{(3,0)}%\n−→\nY=def=YB{(0,2)}%\nY=ArrowArc{-4}=YA=YB\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=ArrowArc[#1]#2#3#4\n#1 :\n#2 : 半径（負のときは回転が負となる）\n#3 : 始点\n#4 : 終点\nこのコマンドを造った理由の一つは，図が込み入って来たりして，文字列を該当個所に置けない\nとき，ゆったりしたところに文字列を置き，そこから矢線を引こう，というねらいがあります．少\nし曲げた方が見やすいのではないか，と思います．\n78", "tags": []}
{"title": "Page 86", "content": "(cid:2) (cid:3)\nY=ArrowArcの一応用\nY=begin{picture}(3,2)%\nY=def=YO{(0,0)}%\nY=def=YA{(3,0)}%\nY=def=YB{(1,2)}%\nα\nY=def=YC{(3,1)}%\nY=Kakukigou=YA=YO=YC{}%\n−→\nY=Kakukigou<2>=YC=YO=YB{$=Ybeta$}%\nβ\nY=put(2.5,1.8){$=Yalpha$}%\nY=ArrowArc[r]{5}%\n{(2.5,1.8)}{(0.45,0.05)}%\nY=Drawline{=YA=YO=YC}%\nY=Drawline{=YO=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n4.1.6 等弧記号\n二つの円弧の長さが等しいことを表すのに，円弧の中央部分に短い縦線を入れるコマンドが\nY=Toukokigouです。\n(cid:2) (cid:3)\nY=Toukokigou\nY=begin{zahyou}[ul=15mm](-0.2,2.5)(-1.2,1.5)\ny\nY=small\nC\nY=def=YO{(1,0)} B\n||\nY=rtenretu[=YO]{A(1,0)ne;B(1,60)ne; D\nC(1,90)nw;D(1,150)nw}\n||\n→ A\nY=Enko=YO{1}{0}{60} O x\nY=Enko=YO{1}{90}{150}\nY=Toukokigou<2>=YO=YA=YB\nY=Toukokigou<2>=YO=YC=YD\nY=Drawlines{=YA=YO=YB;=YC=YO=YD}\nY=end{zahyou}\n(cid:4) (cid:5)\n書式は\n79", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 87", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Toukokigou<#1>#2#3#4\n#1 : 中央に配置する短い縦棒の個数（デフォルト値=1）\n#2 : 円弧の中心\n#3 : 弧の端点1\n#4 : 弧の端点2\n4.1.7 扇形\n扇形を描画するために，Y=ougigata を用意しました．\n(cid:2) (cid:3)\nY=ougigata\nY=begin{picture}(3,2)%\nY=put(2,0){% −→\nY=ougigata{2}{45}{150}}%\nY=end{picture}\n(cid:4) (cid:5)\nすなわち，Y=ougigata は，半径，開始角，終了角と３つの引数を取ります．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=ougigata#1#2#3\n#1 : 半径を直接与えるか\ntuukaten=xx として，円弧の周上の一点を与える\n#2 : 始め角を直接与えるか\nhazimeten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 始め角とするように指定する。\n#3 : 終り角を直接与えるか\nowariten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 終り角とするように指定する。\n（中心は Y=put (=YemathPut) で指定する．）\n4.1.8 弓形\n弓形を描画するために，Y=yumigata を用意しました．\n80", "tags": []}
{"title": "Page 88", "content": "(cid:2) (cid:3)\nY=yumigata\nY=begin{picture}(3,2)%\nY=put(2,0){% −→\nY=yumigata{2}{45}{150}}\nY=end{picture}\n(cid:4) (cid:5)\nすなわち，Y=yumigata は，半径，開始角，終了角と３つの引数を取ります．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=yumigata#1#2#3\n#1 : 半径を直接与えるか\ntuukaten=xx として，円弧の周上の一点を与える\n#2 : 始め角を直接与えるか\nhazimeten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 始め角とするように指定する。\n#3 : 終り角を直接与えるか\nowariten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 終り角とするように指定する。\n（中心は Y=put (=YemathPut) で指定する．）\n4.2\n楕円\n4.2.1 楕円\n軸が水平，垂直な楕円を描画するコマンドは Y=Daen です．\n(cid:2) (cid:3)\nY=Daen\nY=begin{picture}(3,2)%\n−→\nY=Daen{(2,1)}{2}{1}%\nY=end{picture}\n(cid:4) (cid:5)\n中心，横方向半径，縦方向半径 と三つの引数をとります．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Daen#2#3#4\n#1 : 中心の座標\n#2 : 横軸方向の半径\n#3 : 縦軸方向の半径\n81", "tags": []}
{"title": "Page 89", "content": "4.2.2 楕円弧\n楕円の一部を描画する Y=Daenko です．\n(cid:2) (cid:3)\nY=Daenko\nY=begin{picture}(4,2)%\nY=Put{(2,1)}{% −→\nY=Daenko{2}{1}{-90}{90}}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Daenko<#1>#2#3#4#5\n#1 : key=val\nhasen=[破線の長さ][破線の間隔]\nyazirusi=a : 正方向に矢印をつける\n=r : 負方向に矢印をつける\n=b : 両方向に矢印をつける\n=n : 矢印をつけない\n#2 : 横軸方向の半径\n#3 : 縦軸方向の半径\n#4 : 始め角\n#5 : 終り角\n（中心は Y=put (=YemathPut) で指定する．）\n4.2.3 破線\n（楕）円（弧）を破線で描画するには Y=Daenko に<hasen=..>オプションを与えます．\n(cid:2) (cid:3)\n楕円弧の破線\nY=begin{picture}(4,2)%\nY=Put{(2,1)}{% −→\nY=Daenko<hasen=[1]>{2}{1}{0}{180}}%\nY=end{picture}\n(cid:4) (cid:5)\n破線の長さを変更するには，オプションの値を変更します．上の図を標準として比率を指定し\nます．\n82", "tags": []}
{"title": "Page 90", "content": "(cid:2) (cid:3)\n破線の長さ\nY=begin{picture}(4,2)%\nY=Put{(2,1)}{%\n−→\nY=Daenko<hasen=[0.5]>{2}{1}%\n{0}{180}}%\nY=end{picture}\n(cid:4) (cid:5)\n破線の間隔を調整するには，第2の [..]オプションです．やはり，標準に対する比率です．\n(cid:2) (cid:3)\n破線の間隔\nY=begin{picture}(4,2)%\nY=Put{(2,1)}{%\n−→\nY=Daenko<hasen=[0.5][0.5]>%\n{2}{1}{0}{180}}%\nY=end{picture}\n(cid:4) (cid:5)\nなお，横軸方向の半径と縦軸方向の半径を同じ値にすれば，円（弧）を破線で描画することもで\nきます．\n4.2.4 矢印\n（楕）円（弧）に矢印をつけるには Y=Daenko に<yazirusi=..>オプションを与えます．\n(cid:2) (cid:3)\n楕円弧に矢印\nY=begin{picture}(4,2)%\nY=Put{(2,1)}{%\n→\nY=Daenko<yazirusi=b>%\n{2}{1}{0}{90}}%\nY=end{picture}\n(cid:4) (cid:5)\n4.2.5 回転記号\n楕円弧に矢印を付ける機能を利用して，回転軸の周りに回転を表す記号を付けることができます。\n(cid:2) Y=kaitenkigou (cid:3) y\nY=begin{zahyou}[ul=10mm](-2,2)(-1,1)\n→ O x\nY=Put{(1.5,0)}{=Ykaitenkigou}\nY=end{zahyou}\n(cid:4) (cid:5)\ny軸の周りの回転を表すには，[90]オプションを付けます。\n83", "tags": []}
{"title": "Page 91", "content": "y\n(cid:2) (cid:3)\ny軸の周りの回転\nY=begin{zahyou}[ul=10mm](-2,2)(-2,2)\n→ O x\nY=Put{(0,1.5)}{=Ykaitenkigou[90]}\nY=end{zahyou}\n(cid:4) (cid:5)\nここで，矢印は正の回転を表すようにつきますが，これを負の回転を表すようにつけるためには\n<muki=r>\nオプションを用います。\n(cid:2) (cid:3)\n矢印を逆向き\ny\nY=begin{zahyou}[ul=10mm](-1,3.5)(-.5,.5)\n→ O x\nY=Put{(3,0)}{=Ykaitenkigou<muki=r>}\nY=end{zahyou}\n(cid:4) (cid:5)\n<..>オプションは，本来は倍率指定オプションです。\n(cid:2) (cid:3)\n倍率指定\ny\nY=begin{zahyou}[ul=10mm](-1,3.5)(-.5,.5)\n→ O x\nY=Put{(3,0)}{=Ykaitenkigou<1.5>}\nY=end{zahyou}\n(cid:4) (cid:5)\n倍率指定と矢印向きなど他のオプションと併用したいときは<bairitu=..>オプションを用い\nます。\n(cid:2) (cid:3)\n倍率指定\nY=begin{zahyou}[ul=10mm](-1,3.5)(-.5,.5) y\nY=Put{(3,0)}{% → O x\nY=kaitenkigou<bairitu=1.5,muki=r>}\nY=end{zahyou}\n(cid:4) (cid:5)\n楕円のサイズは，デフォルトでは\ntyouhankei=3mm\ntanhankei=1.5mm\nとしてあります。これを変更するオプションです：\n(cid:2) (cid:3)\nサイズ変更\nY=begin{zahyou}[ul=10mm](-1,3.5)(-.5,.5) y\nY=Put{(3,0)}{% → O x\nY=kaitenkigou<tanhankei=3mm>}\nY=end{zahyou}\n(cid:4) (cid:5)\n84", "tags": []}
{"title": "Page 92", "content": "楕円の右端を一部切って矢印をつけていますが，切る場所を変えるオプションを紹介します。\n(cid:2) (cid:3)\n矢印の位置変更\nY=begin{zahyou}[ul=10mm](-1,3.5)(-.5,.5) y\nY=Put{(3,0)}{=Ykaitenkigou% → O x\n<hazimekaku=-165,owarikaku=165>}\nY=end{zahyou}\n(cid:4) (cid:5)\nデフォルト値は\nhazimekaku=15, owarikaku=345\nとなっています。\n回転オプションと併用するときは，上記の指定角は回転する前の状況での値です。上の図を90◦\n回転してみましょう。\n(cid:2) (cid:3)\n回転との併用\nY=begin{zahyou}[ul=10mm]% y\n(-1,3.5)(-.5,1.5)\nY=Put{(0,1)}{=Ykaitenkigou% →\n<hazimekaku=-165,% O x\nowarikaku=165>[90]}\nY=end{zahyou}\n(cid:4) (cid:5)\n最後に，Y=kaitenkigouの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n直線のまわりに回転させることを表す記号\nY=kaitenkigou<#1>[#2]\n#1 : 倍率\nまたは key=val\nbairitu= （倍率）デフォルト値 : 1\nmuki = r/n n\nr で，負の向き\nn で，正の向き\nhazimekaku= 15\nowarikaku= 345\ntyouhankei= 3mm\ntanhankei= 1.5mm\n#2 : 回転角\n位置は Y=emathPut で指定\n直線y =xの周りに回転させる記号を，2倍のサイズで描いてみます。\n85", "tags": []}
{"title": "Page 93", "content": "y\n(cid:2) (cid:3)\ny軸の周りの回転\nY=begin{zahyou}[ul=10mm](-2,2)(-2,2)\nY=Put{(1.8,1.8)}{=Ykaitenkigou<2>[45]} → O x\nY=kTyokusen=YO{45}{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n86", "tags": []}
{"title": "Page 94", "content": "5\n円・直線の交点\n直線と直線，円と直線，円と円の交点を求めるコマンド類です．コマンド名は Y=*and* の形で *\nのところは\nC : 円\nL : 2点を与えた直線\nl : 1点と方向ベクトルを与えた直線\nk : 1点と方向角を与えた直線\nのいずれかで，\nY=CandC\nY=CandL\nY=Candl\nY=Candk\nY=LandL\nY=Landl\nY=landl\nY=Landk\nY=kandk\nの9種類があります．\n5.1 2\n直線の交点\n5.1.1 2直線の交点(1) Y=LandL\nY=LandL の使用例です．\n(cid:2) (cid:3)\nY=LandL\nY=begin{picture}(3.4,4)(-.2,-.5)%\nY=tenretu{B(0,0)w;C(3,0)e;A(2,3)n}\nY=Bunten=YA=YB21=YF\nY=Bunten=YC=YA21=YE A\nY=LandL=YB=YE=YC=YF=YP% BEとCFの交点P\nE\nY=LandL=YA=YP=YB=YC=YD% APとBCの交点D\nY=Put=YF[nw]{F}% −→\nF\nY=Put=YE[ne]{E}%\nP\nY=Put=YD[s]{D}%\nY=Put=YP(-1.5pt,-3pt)[lt]{P}% B C\nD\nY=Drawlines{=YA=YD;=YB=YE;=YC=YF}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=end{picture}\n(cid:4) (cid:5)\n87", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 95", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=LandL#1#2#3#4#5\n2点 #1, #2 を通る直線と\n2点 #3, #4 を通る直線の交点を #5 に与える．\n5.1.2 2直線の交点(2) Y=Landl\n(cid:4)ABC の辺AB上に ∠BCD=30◦ となる点Dを求める例です．\n(cid:2) (cid:3)\nY=Landl\nY=begin{zahyou*}[ul=12mm]%\n(-.5,3.5)(-.5,1.5)=Ysmall\nY=tenretu{A(1.732,1)n;B(0,0)w;C(3,0)e}\nA\nY=Landl=YA=YB=YC{(-1.7321,1)}=YD D\nY=Put=YD(-2pt,1pt)[b]{D}% −→\n30◦\nY=Kakukigou=YD=YC=YB<Hankei=10mm>% B C\n(-2pt,2pt)[r]{=Yfootnotesize 30=YDeg}%\nY=Drawline{=YC=YD}%\nY=thicklines=YDrawline{=YA=YB=YC=YA}%\nY=end{zahyou*}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Landl#1#2#3#4#5\n2点 #1, #2 を通る直線と\n点 #3 を通り，方向ベクトルが #4 の直線の交点を #5 に与える．\n5.1.3 2直線の交点(3) Y=landl\n直線を1点と方向ベクトルで与える場合の，交点を求めるコマンドがY=landl です．\n88", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 96", "content": "(cid:2) (cid:3)\nY=landl\nY=begin{zahyou*}[ul=10mm]%\n(-.5,3.5)(-.5,2.2)\nY=tenretu{B(0,0)w;C(3,0)e}\nY=landl=YB{(1,1)}=YC{(-1,1.7321)}=YA\nY=Kakukigou=YC=YB=YA{}\n−→\nY=Put=YB(4mm,4pt)[lb]{45=YDeg}\n45◦ 60◦\nY=Kakukigou<2>=YA=YC=YB{} B C\nY=Put=YC(-4mm,4pt)[rb]{60=YDeg}\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=end{zahyou*}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=landl#1#2#3#4#5\n点 #1 を通り, 方向ベクトルが #2 の直線と\n点 #3 を通り，方向ベクトルが #4 の直線の交点を #5 に与える．\n5.1.4 2直線の交点(4) Y=Landk\n直線を1点と方向角(x軸の正の向きとなす角—六十分法）で与えた場合です。まずは Y=kandk\nの使用例です。\n(cid:2) (cid:3)\nY=kandk\nY=begin{zahyou*}(-.5,4)(-.5,3)\nY=tenretu{B(0,0)s;C(3,0)s}\nY=kandk=YB{60}=YC{135}=YD D\nY=Put=YD[n]{D}\n−→\nY=Kakukigou=YC=YB=YD(2pt,2pt)[l]{60=YDeg}\nY=Kakukigou=YXMAX=YC=YD[ne]{135=YDeg}\n135◦\n60◦\nY=Drawline{=YB=YC=YD=YB}%\nB C\nY=Hasen{=YC=YXMAX}\nY=end{zahyou*}\n(cid:4) (cid:5)\n89", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 97", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=kandk#1#2#3#4#5\n点 #1 を通り, 方向角が #2 の直線と\n点 #3 を通り，方向角が #4 の直線の交点を #5 に与える．\nついで，Y=Landk の使用例です。\n(cid:2) (cid:3)\nY=Landk\nY=begin{zahyou*}[ul=10mm]%\n(-.5,3.5)(-.5,1.5)\nA\nY=tenretu{B(0,0)s;A(2,1)n;C(3,0)s}\nY=Landk=YB=YC=YA{60}=YD\n−→ 60◦\nY=Kakukigou=YC=YD=YA[ne]{60=YDeg} B C\nY=Drawlines{=YB=YC;=YA=YD}\nY=end{zahyou*}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Landk#1#2#3#4#5\n2点 #1, #2 を通る直線と\n点 #3 を通り，方向角が #4 の直線の交点を #5 に与える．\n5.1.5 垂線の足\n三角形の頂点から対辺（またはその延長）に下した垂線の足を求めるコマンド Y=Suisen です．\n(cid:2) (cid:3)\nY=Suisen\nY=begin{picture}(3,3)%\nY=def=YO{(0,0)}%\nY=def=YA{(3,0)}%\nY=def=YB{(2,3)}%\nY=Suisen=YO=YA=YB=YH\n−→\nY=Tyokkakukigou=YO=YH=YA\nY=Drawline{=YO=YH}%\nY=thicklines\nY=Drawline{=YO=YA=YB=YO}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n90", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 98", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Suisen#1#2#3#4\n点 #1 から直線 #2#3 へ下ろした垂線の足を #4 にセット\n関連して，直線が1点と方向ベクトルまたは方向角で与えられている場合に用いるコマンドがそ\nれぞれY=mSuisen, Y=kSuisen です。使用例を一つずつあげます。\n(cid:2) (cid:3)\nY=mSuisen\ny\nY=unitlength9mm=Yfootnotesize\nP\nY=begin{zahyou}(-3,3)(-3,3)\nY=tenretu{A(-2,-1)s;P(-1,2)n}\nY=def=YhoukouV{(1,1)} Q\nY=mSuisen=YP=YA=YhoukouV=YQ\n→ O x\nY=kuromaru{=YA;=YP;=YQ}\nY=Put=YQ[se]{Q}\nA\nY=Drawline{=YP=YQ}\nY=Tyokkakukigou=YP=YQ=YA\nY=mTyokusen=YA=YhoukouV{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n(cid:2) (cid:3)\nY=kSuisen y\nY=unitlength9mm=Yfootnotesize\nP\nY=begin{zahyou}(-3,3)(-3,3)\nQ\nY=tenretu{A(-2,-1)s;P(-1,2)n}\nY=def=Ykaku{60}\nY=kSuisen=YP=YA=Ykaku=YQ → O x\nY=kuromaru{=YA;=YP;=YQ}\nY=Put=YQ[s]{Q} A\nY=Drawline{=YP=YQ}=YTyokkakukigou=YP=YQ=YA\nY=kTyokusen=YA=Ykaku{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n5.1.6 直線に関する対称点\n前節の垂線を発展させて，点の直線に関する対称点を求めるコマンド\nY=Taisyouten 2点を通る直線\nY=mTaisyouten 1点と方向ベクトルを指定した直線\nY=kTaisyouten 1点と方向角を指定した直線\nを新設しました。以下，その使用例を並べます。\n91", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 99", "content": "(cid:2) (cid:3) y\nY=Taisyouten\nP\nY=unitlength9mm=Yfootnotesize\nY=begin{zahyou}(-3,3)(-3,3)\nY=tenretu{A(-2,-1)s;B(1,1)s;P(-1,2)n} B\nY=Taisyouten=YP=YA=YB=YQ\n→ O x\nY=kuromaru{=YA;=YB;=YP;=YQ}\nY=Put=YQ[s]{Q}\nA\nY=Drawline{=YP=YQ} Q\nY=Tyokusen=YA=YB{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n(cid:2) (cid:3)\nY=mTaisyouten y\nY=unitlength9mm=Yfootnotesize P\nY=begin{zahyou}(-3,3)(-3,3)\nY=tenretu{A(-2,-1)s;P(-1,2)n}\nY=def=YhoukouV{(1,1)}\nY=mTaisyouten=YP=YA=YhoukouV=YQ → O Q x\nY=kuromaru{=YA;=YP;=YQ}\nY=Put=YQ[s]{Q} A\nY=Drawline{=YP=YQ}\nY=mTyokusen=YA=YhoukouV{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n(cid:2) (cid:3)\nY=kTaisyouten y\nY=unitlength9mm=Yfootnotesize P\nY=begin{zahyou}(-3,3)(-3,3)\nY=tenretu{A(-2,-1)s;P(-1,2)n} Q\nY=def=Ykaku{60}\nY=kTaisyouten=YP=YA=Ykaku=YQ → O x\nY=kuromaru{=YA;=YP;=YQ}\nY=Put=YQ[s]{Q} A\nY=Drawline{=YP=YQ}\nY=kTyokusen=YA=Ykaku{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n対称の中心（垂線の足）が必要なときは，オプション引数 [#4] にその点を受取る制御綴を与え\nておきます。\n92", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 100", "content": "(cid:2) (cid:3)\n対称の中心\ny\nY=unitlength9mm=Yfootnotesize\nP\nY=begin{zahyou}(-3,3)(-3,3)\nY=tenretu{A(-2,-1)s;B(1,1)s;P(-1,2)n}\n||\nY=Taisyouten=YP=YA=YB[=YH]=YQ B\nY=kuromaru{=YA;=YB;=YP;=YQ;=YH}\n→ O x\nY=Put=YQ[s]{Q}\n||\nY=Tyokkakukigou=YP=YH=YA\nA\nY=touhenkigou<2>{=YP=YH;=YH=YQ} Q\nY=Drawline{=YP=YQ}\nY=Tyokusen=YA=YB{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\nこの機能は，Y=mTaisyouten, Y=kTaisyouten にも使用できます。\n(cid:2) (cid:3)\nY=mTaisyouten\nY=unitlength9mm=Yfootnotesize y\nY=begin{zahyou}(-3,3)(-3,3) P\nY=tenretu{A(-2,-1)s;P(-1,2)n}\n||\nY=def=YhoukouV{(1,1)}\nY=mTaisyouten=YP=YA=YhoukouV[=YH]=YQ\n||\nY=kuromaru{=YA;=YP;=YQ;=YH} → O Q x\nY=Put=YQ[s]{Q}\nY=Drawline{=YP=YQ} A\nY=Tyokkakukigou=YP=YH=YA\nY=touhenkigou<2>{=YP=YH;=YH=YQ}\nY=mTyokusen=YA=YhoukouV{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n(cid:2) (cid:3)\nY=kTaisyouten\nY=unitlength9mm=Yfootnotesize y\nY=begin{zahyou}(-3,3)(-3,3) P\nY=tenretu{A(-2,-1)s;P(-1,2)n} ||\n||\nY=def=Ykaku{60} Q\nY=kTaisyouten=YP=YA=Ykaku[=YH]=YQ\nY=kuromaru{=YA;=YP;=YQ;=YH} → O x\nY=Put=YQ[s]{Q}\nY=Drawline{=YP=YQ} A\nY=Tyokkakukigou=YP=YH=YA\nY=touhenkigou<2>{=YP=YH;=YH=YQ}\nY=kTyokusen=YA=Ykaku{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n93", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 101", "content": "5.2\n円と直線の交点\n5.2.1 円と直線の交点(1) Y=CandL\n(cid:4)ABCの中線AMの延長が(cid:4)ABCの外接円と交わる点Dを求めます．\n(cid:2) (cid:3)\nY=CandL\nY=begin{picture}%\n(4,4)(-2,-2)%\nY=def=YO{(0,0)}%\nY=kyokuTyoku(2,60)=YA\nY=kyokuTyoku(2,-150)=YB\nY=kyokuTyoku(2,-30)=YC\nY=Bunten=YB=YC{1}{1}=YM −→\nY=CandL=YO{2}=YA=YM=YD=YE\nY=Drawline{=YA=YD}%\nY=En=YO{2}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=CandL#1#2#3#4#5#6\nY=CandL*#1#2#3#4#5#6\n点 #1 を中心とし，半径 #2 の円と\n2点 #3, #4 を通る直線との交点を #5 と #6 にセットする．\n円と直線の2つの交点のどちらを #5 とするかについては\nY=CandL の場合\n2つの交点のうち，x座標の小さい方が #5\n2つの交点のx座標が一致するときは，y座標の小さい方が #5\nY=CandL* の場合\n円の中心(#1)と2つの交点(#5, #6)で作られる三角形の周を\n#1 → #5 → #6 → #1\nとたどる回り方が正の回転となるように定める。\n（三角形がつぶれる場合は，Y=CandL の定め方に従う）\n5.2.2 円と直線の交点(2) Y=Candl\n原点中心，半径1の円と，点(2,0)を通り傾き−1\nの直線との交点を求めます．\n3\n94", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 102", "content": "(cid:2) (cid:3)\nY=Candl\nY=begin{picture}%\n(4,4)(-2,-2)%\nY=def=YO{(0,0)}%\nY=def=YA{(2,0)}% −→\nY=Candl=YO{1}=YA{(3,-1)}=YP=YQ\nY=Drawline{=YA=YP}%\nY=En=YO{1}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Candl#1#2#3#4#5#6\n点 #1 を中心とし，半径 #2 の円と\n点 #3 を通り, 方向ベクトルが #4 の直線\nとの交点を #5 と #6 にセットする．\n2つの交点のうち，どちらを #5 とするかは Y=CandL と同じ。\n5.2.3 円と直線の交点(3) Y=Candk\n原点中心，半径1の円と，点(2,0)を通り傾き方向角15◦\nの直線との交点を求めます．\n(cid:2) (cid:3)\nY=Candl\nY=begin{picture}%\n(4,4)(-2,-2)%\nY=def=YO{(0,0)}%\nY=def=YA{(2,0)}% −→\nY=Candk=YO{1}=YA{15}=YP=YQ\nY=Drawline{=YA=YP}%\nY=En=YO{1}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Candk#1#2#3#4#5#6\n点 #1 を中心とし，半径 #2 の円と\n点 #3 を通り, 方向角が #4 の直線\nとの交点を #5 と #6 にセットする．\n2つの交点のうち，どちらを #5 とするかは Y=CandL と同じ。\n95", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 103", "content": "5.3 Y=CandC\n円と円の交点\n線分BCの長さが7のとき，Bを中心とする半径5の円と，Cを中心とする半径3の円との交点\nをAとすれば，3辺の長さが7, 5, 3の三角形がえられます．\n(cid:2) (cid:3)\nY=CandC\n{Y=unitlength2mm%\nY=begin{picture}%\n(12,14)(-7,-7)%\nY=def=YB{(0,0)}%\nY=def=YC{(7,0)}% −→\nY=CandC=YB{5}=YC{3}=YD=YA\nY=Drawline{=YA=YB=YC=YA}%\nY=En=YB{5}%\nY=En=YC{3}%\nY=end{picture}}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=CandC#1#2#3#4#5#6\n点 #1 を中心，半径 #2 の円と\n点 #3 を中心，半径 #4 の円との交点を#5と#6にセット\n円と円の2つの交点のどちらを #5 とするかについては\nY=CandC の場合\n2つの交点のうち，x座標の小さい方が #5\n2つの交点のx座標が一致するときは，y座標の小さい方が #5\nY=CandC* の場合\n円の中心(#1)と2つの交点(#5, #6)で作られる三角形の周を\n#1 → #5 → #6 → #1\nとたどる回り方が正の回転となるように定める。\n（三角形がつぶれる場合は，Y=CandC の定め方に従う）\n96", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 104", "content": "6\n楕円と直線の交点\n6.1 Y=EandL\n円と直線の交点を求めるコマンドを発展させ，楕円と直線の交点を求めるコマンドがY=EandLで\nす。その書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=def=YEandL#1#2#3#4#5#6#7{%\n#1 : 楕円の中心\n#2 : x軸方向の半径\n#3 : y軸方向の半径\n#4 : 直線上の点1\n#5 : 直線上の点2\n#6 : 交点1を受け取る制御綴\n#7 : 交点2を受け取る制御綴\n使用例です。2点A(−1, 0), B(2, 1)を通る直線と楕円\nx2\n+y2 =1との交点P, Qを求めます。\n4\n(cid:2) (cid:3)\nY=EandL\nY=begin{zahyou}[ul=10mm]%\n(-2.5,2.5)(-1.5,1.5)\ny\nY=tenretu{A(-1,0)nw;B(2,1)nw}\n1 B\nY=kuromaru{=YA;=YB}\nQ\nY=Put=YB[syaei=xy,xpos={[ne]}, A 2\nypos={[ne]}]{} → O x\nP\nY=Daen=YO{2}{1}=YTyokusen=YA=YB{}{}\nY=EandL=YO{2}{1}=YA=YB=YP=YQ\nY=Put=YP[s]{P}=YPut=YQ[s]{Q}\nY=kuromaru{=YP;=YQ}\nY=end{zahyou}\n(cid:4) (cid:5)\n6.2 Y=Eandl\n直線を1点と方向ベクトルで与える場合です。\n(x−2)2\n楕円 +(y−1)2 =1と，点A(0, 1)を通り方向ベクトルが(2, 1)の直線の交点を求め\n4\nます。この場合，点Aは楕円上にありますから，交点の一方PとAは一致します。\n97", "tags": []}
{"title": "Page 105", "content": "(cid:2) (cid:3)\nY=Eandl\nY=begin{zahyou}[ul=10mm]%\n(-.5,4.5)(-.5,2.5)\nY=tenretu{A(0,1)nw;C(2,1)se}\ny\nY=Put=YC[syaei=xy,ypos={[ne]}]{}\nQ\nY=def=Ym{(2,1)}%\nA1\nY=Kuromaru{=YA} → P C\nY=Daen=YC{2}{1}\nY=mTyokusen=YA=Ym{}{} O 2 x\nY=Eandl=YC{2}{1}=YA=Ym=YP=YQ\nY=Put=YP[se]{P}=YPut=YQ[s]{Q}\nY=kuromaru{=YP;=YQ}\nY=end{zahyou}\n(cid:4) (cid:5)\n6.3 Y=Eandk\n直線を1点と方向角（六十分法）で与える場合です。\n(x−2)2\n楕円 +(y−1)2 = 1と，点A(1, 2)を通り方向角が−45◦ である直線との交点を求め\n4\nます。\n(cid:2) (cid:3)\nY=Eandk\nY=begin{zahyou}[ul=10mm]%\n(-.5,4.5)(-.5,2.5)\nY=tenretu{A(1,2)ne;C(2,1)ne}\ny\nY=Put=YA[syaei=xy]{}\nA\n2\nY=Put=YC[syaei=xy]{} P\nY=def=Ym{(2,1)}% C\n→ 1\nY=Kuromaru{=YA}\nQ\nY=Daen=YC{2}{1}\nO 1 2 x\nY=kTyokusen=YA{-45}{}{}\nY=Eandk=YC{2}{1}=YA{-45}=YP=YQ\nY=Put=YP[s]{P}=YPut=YQ[n]{Q}\nY=kuromaru{=YP;=YQ}\nY=end{zahyou}\n(cid:4) (cid:5)\n6.4\n楕円の接線\n6.4.1 Y=DaennoSessen\n楕円の周上の点における接線の方向ベクトルを求めるコマンドです。\n98", "tags": []}
{"title": "Page 106", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=DaennoSessen#1#2#3#4#5{%\n#1 : 楕円の中心\n#2 : x軸方向の半径\n#3 : y軸方向の半径\n#4 : 接点\n#5 : 接線の方向ベクトルを受け取る制御綴\n(x−1)2 y2 (cid:13)\n5\n√ (cid:14)\n楕円 + =1上の点A , 3 における接線を引きます。\n9 4 2\n(cid:2) (cid:3)\nY=EandL\nY=begin{zahyou}[ul=5mm]% y\n(-2.5,5)(-2.5,4)\nA\nY=tenretu{A(2.5,1.732)ne;[]C(1,0)}\nY=Kuromaru=YA →\nY=Daen=YC{3}{2} O x\nY=DaennoSessen=YC{3}{2}=YA=Yuvec\nY=mTyokusen=YA=Yuvec{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n6.4.2 Y=DaenniSessen\nつぎは，楕円の外部の点から楕円に引いた接線の接点を求めます。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=DaenniSessen#1#2#3#4#5#6{%\n#1 : 楕円の中心\n#2 : x軸方向の半径\n#3 : y軸方向の半径\n#4 : 楕円の外部の点\n#5 : 接点1を受け取る制御綴\n#6 : 接点2を受け取る制御綴\n(x−3)2 (y+2)2\n楕円 + =1に点A(6, 1)から接線を引きます。\n9 4\n99", "tags": []}
{"title": "Page 107", "content": "(cid:2) (cid:3)\nY=DaennnoSessen\nY=begin{zahyou}[ul=5mm]%\n(-1,7)(-5,2)\ny\nY=tenretu{A(6,1)nw;C(3,-2)se}\nA\n1\nY=Put=YC[syaei=xy,xpos={[se]}]{}\n6\nY=Put=YA[syaei=xy,xpos={[ne]}]{} O 3 x\nY=Kuromaru{=YA} → −2\nY=Daen=YC{3}{2} C\nY=DaenniSessen=YC{3}{2}=YA=YP=YQ\nY=kuromaru{=YP;=YQ;=YC}\nY=Tyokusen=YA=YP{}{}\nY=Tyokusen=YA=YQ{}{}\nY=end{zahyou}\n(cid:4) (cid:5)\n6.4.3 Y=Earg\n楕円の媒介変数表示\nx=x0+acosθ\ny =y0+bsinθ\nにおいて，周上の点(x, y)を指定してθを求めるマクロです。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Earg#1#2#3#4#5{%\n#1 : 楕円の中心\n#2 : x軸方向の半径\n#3 : y軸方向の半径\n#4 : 周上の点\n#5 : 媒介変数の値（六十分法）\n100", "tags": []}
{"title": "Page 108", "content": "(cid:2) (cid:3)\nY=Earg\nY=begin{zahyou*}[ul=5mm](-3,5)(-4,6)\nY=tenretu{[]C(1,-1);A(2,5)n}\nA\nY=DaenniSessen=YC{3}{2}=YA=YP=YQ\nY=Put=YP[nw]{P}=YPut=YQ[ne]{Q}\nY=kuromaru{=YP;=YQ}\nY=Earg=YC{3}{2}=YP=YargP\n→\nY=Earg=YC{3}{2}=YQ=YargQ\nP\nQ\nY=Put=YC{=YDaenko<hasen=[.5][.5]>%\n{3}{2}{=YargQ}{=YargP}}\nY=Add=YargQ{360}=YargQQ\nY=Put=YC{=YDaenko{3}{2}{=YargP}{=YargQQ}}\nY=Drawline{=YP=YA=YQ}\nY=end{zahyou*}\n(cid:4) (cid:5)\n101", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 109", "content": "7 (1)\n塗りつぶし\n7.1\n多角形内部の塗りつぶし\n多角形の内部を塗りつぶすコマンド Y=Nuritubusi です．\n(cid:2) (cid:3)\n多角形の塗りつぶし\nY=begin{picture}(4,5)(0,-1.5)\nY=def=YA{(0,0)}%\nY=def=YB{(4,0)}%\nY=def=YC{(1,3)}%\nY=Gaisetuen=YA=YB=YC%\nY=Drawline{=YvGaisin=YA}%\nY=Drawline{=YvGaisin=YB}% −→\nY=Drawline{=YvGaisin=YC}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\n% 塗りつぶし\nY=Nuritubusi{=YA=YvGaisin=YB=YA}%\nY=end{picture}\n(cid:4) (cid:5)\nY=Nuritubusi の書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Nuritubusi[#1]#2\n#1 : 塗る濃さ\n( 0 と 1 の間の数． 0 は真っ白，1は真っ黒．\nデフォルトは 0.5)\n#2 : 多角形の点列（閉じていなければなりません．)\n7.2\n円内部の塗りつぶし\n円の内部を塗りつぶすのが Y=En* コマンドです．\n(cid:2) (cid:3)\n円の塗りつぶし\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\n−→\nY=En*=YA{2}%\nY=En=YA{2}%\nY=end{picture}\n(cid:4) (cid:5)\n102", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 110", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=En*[#1]#2#3\n#1 : 塗る濃さ\n( 0 と 1 の間の数． 0 は真っ白，1は真っ黒．\nデフォルトは 0.5)\n#2 : 中心の座標\n#3 : 半径\nオプション引数[..]で濃さを指定することができます．デフォルトは0.5です．特に0を指定\nすると白抜きとなります．\n(cid:2) (cid:3)\n白抜き\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\nY=def=YB{(1,2)}% −→\nY=En*=YA{2}%\nY=En*[0]=YB{1}%\nY=end{picture}\n(cid:4) (cid:5)\n7.3\n扇形の塗りつぶし\n(cid:2) (cid:3)\n扇形の塗りつぶし\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\n−→\nY=Put=YA{%\nY=ougigata*{2}{-30}{270}}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=ougigata*[#1]<#2>#3#4#5\n#1 : 塗りつぶしの濃さ\n#2 : 境界線描画オプション\n<border=1> で境界線を描画する。\n#3 〜 #5 : Y=ougigata の #1〜#3 と同じ\n（中心は Y=put (=YPut) で指定する．）\n103", "tags": []}
{"title": "Page 111", "content": "7.4\n弓形の塗りつぶし\n(cid:2) (cid:3)\n弓形の塗りつぶし\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\n−→\nY=Put=YA{%\nY=yumigata*{2}{-30}{270}}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=yumigata*[#1]<#2>#3#4#5\n#1 : 塗りつぶしの濃さ\n#2 : 境界線描画オプション\n<border=1> で境界線を描画する。\n#3 〜 #5 : Y=yumigata の #1〜#3 と同じ\n（中心は Y=put (=YPut) で指定する．）\n7.5\n楕円の塗りつぶし\n(cid:2) (cid:3)\n楕円の塗りつぶし\nY=begin{picture}(4,2)\nY=def=YA{(2,1)}% −→\nY=Daen*=YA{2}{1}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Daen*[#1]#2#3#4\n#1 : 塗る濃さ\n( 0 と 1 の間の数． 0 は真っ白，1は真っ黒．\nデフォルトは 0.5)\n#2 : 中心の座標\n#3 : 横軸方向の半径\n#4 : 縦軸方向の半径\n104", "tags": []}
{"title": "Page 112", "content": "7.6\n弓形（楕円弧）の塗りつぶし\n(cid:2) (cid:3)\n弓形（楕円弧）の塗りつぶし\nY=begin{picture}(4,2)\nY=def=YA{(2,1)}%\n−→\nY=Put=YA{%\nY=Daenko*{2}{1}{0}{180}}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Daenko*[#1]#2#3#4#5\n#1 : 塗る濃さ\n( 0 と 1 の間の数． 0 は真っ白，1は真っ黒．\nデフォルトは 0.5)\n#2 : 横軸方向の半径\n#3 : 縦軸方向の半径\n#4 : 始め角\n#5 : 終り角\n（中心は Y=put (=YPut) で指定する．）\n7.7\nカラー指定\nY=En*, Y=Nuritubusiにおいて，色をつけるときは少々厄介なことがあります。\n7.7.1 Y=colorによる塗り色指定\n次の例では，\n(cid:2) (cid:3)\nY=colorによる塗り色指定\nY=begin{picture}(50,50)\n→\nY=color{red}=Yput(25,25){=Ycircle*{40}}\nY=end{picture}\n(cid:4) (cid:5)\nさて，あなたの環境では円は何色で塗りつぶされていますか。実は，それは dvi-wareに依存す\nるのです。emathでは\n.tex ----> .dvi by platex\n.dvi ----> .ps by dvips\n(.ps ----> .pdf by Distiller)\nを標準としていますが，この方式で作成される .ps(, .pdf) は真っ黒に塗りつぶされています。赤\nはかけらも見えません。\n105", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "図形描画", "数式描画", "環境構築", "関数"]}
{"title": "Page 113", "content": "注 このあたり，さらに分析をしておきます。\nY=color{red}=Ycircle*{..}は分析すると\nY=color{red}=Yspecial{bk}=Ycircle{..}\nとなります。この順序を一部入れ替えて\nY=special{bk}=Ycolor{red}=Ycircle{..}\nとすると，dvipsで作られる .ps ファイルも円の内部が赤くなります。\n(cid:2) (cid:3)\nY=colorコマンド発行のタイミング\nY=begin{picture}(50,50)\nY=put(25,25){=Ycolor{red}=Yspecial{bk}=Ycircle{40}}\nY=end{picture} →\nY=begin{picture}(50,50)\nY=put(25,25){=Yspecial{bk}=Ycolor{red}=Ycircle{40}}\nY=end{picture}\n(cid:4) (cid:5)\n2つの円が描画されますが，dvipsで変換した .ps ファイルでは，円の内部は\n上は黒\n下は赤\nで塗りつぶされます。\n7.7.2 Y=En*の[nuriiro=..]オプション\nそこで，emathでは，En*などに[nuriiro=...]オプションをつけることで内部に色をつける\nことにしています。\n(cid:2) (cid:3)\nY=En*の[nuriiro=..]オプション\nY=begin{picture}(50,50)\n→\nY=En*[nuriiro=red]{(25,25)}{20}\nY=end{picture}\n(cid:4) (cid:5)\n注 現時点では，[nuriiro=..]オプションではなく，Y=colorコマンドを用いても，同様の結果を\n得ることができます。\n(cid:2) (cid:3)\n暫定仕様\nY=begin{picture}(50,50)\n→\nY=color{red}=YEn*{(25,25)}{20}\nY=end{picture}\n(cid:4) (cid:5)\n106", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 114", "content": "しかし，将来的にはこの方式は破産する予感がありますので，[nuriiro=..]オプションの\n使用を推奨します。\n7.7.3 円周の色は？\n円の内部は色付けができましたが，円周は黒のままですねぇ〜。これはtpic specialsの仕様\nかも知れません。いや，そもそもtpic specialsはカラー対応しているんでしょうか。浅学にし\nてわかりません。(^^ゞ\nそこで何とかの上塗りをすることとします。\n(cid:2) (cid:3)\nY=En*の[border=..]オプション\nY=begin{picture}(50,50)\n→\nY=En*[nuriiro=red,border=red]{(25,25)}{20}\nY=end{picture}\n(cid:4) (cid:5)\n[border=red]オプションで円周を赤で上塗りしました。円周も赤になったかに見えますが，よ\nく見ると元の黒が一部はみ出していますね。赤の上塗りをもう少し線を太くすれば良いかもしれま\nせんが．．．．．．．\nしかし，労多くして何とやらという気もします。カラーはやはりPostScriptで扱うべきもので\nしょうか。\n注 tpic specialsでも\n円・楕円\nと\n多角形\nでは，結果が異なり，前者は境界が黒で描画されますが，後者は境界は描画されません。ど\nうも，tpic specialsでカラーを扱うのは気が進みませんね。\n(cid:2) (cid:3)\nY=Nuritubusiの場合\nY=begin{picture}(50,50)\nY=Nuritubusi[nuriiro=red]{% →\n(0,0)(50,0)(50,50)(10,40)}\nY=end{picture}\n(cid:4) (cid:5)\n7.7.4 PostScriptでは\n以上の考察から，カラー塗りつぶしはPostScript --- pszahyou環境を使用するのがよさそ\nうです。\n107", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 115", "content": "8 (1)\n斜線塗り\n前節のコマンドの末尾に更に * を付加すると，斜線塗りとなります．\n8.1\n多角形\nまずは，多角形の内部に斜線を引いてみます．\n(cid:2) (cid:3)\n多角形の内部に斜線\nY=begin{picture}(4,4)\nY=def=YA{(0,0)}%\nY=def=YB{(0,4)}%\nY=def=YC{(2,3)}% −→\nY=def=YD{(4,0)}%\nY=Nuritubusi*{=YA=YB=YC=YD=YA}%\nY=Drawline{=YA=YB=YC=YD=YA}%\nY=end{picture}\n(cid:4) (cid:5)\nY=Nuritubusi* の書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Nuritubusi*[#1]<#2>#3\n#1 : 斜線の方向角\n( -90 と 90 の間の数（単位は度）．デフォルトは 45)\n#2 : 斜線の間隔 （デフォルトは 0.125 ）\n#3 : 多角形の点列（閉じていなければなりません．)\n8.2\n円\n円の内部を斜線塗りする例です．[-45]オプションをつけて，斜線の方向角を変更してみました．\n(cid:2) (cid:3)\n円の内部に斜線\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\n−→\nY=En**[-45]=YA{2}%\nY=En=YA{2}%\nY=end{picture}\n(cid:4) (cid:5)\nY=En** の書式です．\n108", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 116", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=En**[#1]<#2>#3#4\n#1 : 斜線の方向角\n( -90 と 90 の間の数（単位は度）．デフォルトは 45)\n#2 : 斜線の間隔 （デフォルトは 0.125 ）\n#3 : 中心の座標\n#4 : 半径\n8.3\n扇形など\nY=Daen**, Y=yumigata**, Y=ougigata**, Y=Daenko**, Y=Nuritubusi* も同様です．\n代表的にY=yumigata** の書式を記します。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=yumigata**[#1]<#2>#3#4#5\n#1 : 斜線塗りの傾斜角（デフォルトは45）\n#2 : オプション\n<border=1> で境界線を描画する。\n<syanurisiteiten=xx> で斜線群が指定点xxを通るようにする。\n<syanurikankaku=xx> 斜線の間隔を指定する無名数（デフォルトは 0.125）\n#2 に単に無名数を記述すれば，斜線の間隔を変更する指示と解釈される。\n#3 〜 #5 : Y=yumigata の #1〜#3 と同じ\n（注）始め角と終り角の与え方の順序について\n2つの角を指定すると，円は2つの弓形に分割されます。\nそのどちらが描画されるのかという話です。\n始め角で指定された動径を正の向きに（時計の針と反対向き）\n回転して終り角で指定した動径と重なるまでを描画します。\n(cid:2) (cid:3)\n弓形の斜線塗り\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\nY=Put=YA{% −→\nY=yumigata**{2}{-30}{270}%\nY=yumigata{2}{-30}{270}}%\nY=end{picture}\n(cid:4) (cid:5)\n109", "tags": []}
{"title": "Page 117", "content": "(cid:2) (cid:3)\n扇形の斜線塗り\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\nY=Put=YA{% −→\nY=ougigata**{2}{-30}{90}%\nY=ougigata{2}{-30}{90}}%\nY=end{picture}\n(cid:4) (cid:5)\nただし，扇形の中心角は180度以下でなければなりません．優角の扇形の斜線塗りは，円を斜線\n塗りした後，余分の扇形を白塗りします．\n(cid:2) (cid:3)\n扇形の斜線塗り（優角の場合）\nY=begin{picture}(4,4)\nY=def=YA{(2,2)}%\nY=En**=YA{2}%\n−→\nY=Put=YA{%\nY=ougigata*[0]{2}{-90}{-30}%\nY=ougigata{2}{-30}{270}}%\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2) (cid:3)\n弓形（楕円弧）の斜線塗り\nY=begin{picture}(4,2)\nY=def=YA{(2,1)}%\nY=Put=YA{%\n−→\nY=Daenko**{2}{1}{0}{180}%\nY=drawline(-2,0)(2,0)%\nY=Daenko{2}{1}{0}{180}}%\nY=end{picture}\n(cid:4) (cid:5)\n8.4\n格子セルのぬりつぶし\n格子を描画する Y=kousi に\nセルを塗る\nセルの座標を指定しての Y=put,\n黒丸配置\nなどのを実現する<nuri=..>オプションの説明です。<nuri=..>の右辺に，塗りつぶしを行うセル\nの左下コーナーの格子座標を与えます。\n110", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 118", "content": "(cid:2) (cid:3)\n塗りつぶし\nY=begin{zahyou*}[ul=4mm](0,8)(0,8)\n→\nY=kousi<nuri={(1,2)}>(2,1.5){4}{5}\nY=end{zahyou*}\n(cid:4) (cid:5)\n<nuri=..>の右辺は，コンマを含みますから，{...}でくくっておく必要があります。濃度指定は\n(cid:2) (cid:3)\n濃度指定\nY=begin{zahyou*}[ul=4mm](0,8)(0,8)\n→\nY=kousi<nuri={<thickness=1>(3,1)}>(2,1.5){4}{5}\nY=end{zahyou*}\n(cid:4) (cid:5)\n<nuri=..(x,y)>における..の部分はY=emPaintのオプションとして引き渡されます。赤で塗り\nつぶしてみましょう。\n(cid:2) (cid:3)\nカラー塗り\nY=begin{zahyou*}[ul=4mm](0,8)(0,8)\n→\nY=kousi<nuri={<nuriiro=red>(3,0)}>(2,1.5){4}{5}\nY=end{zahyou*}\n(cid:4) (cid:5)\nということなれば，斜線塗りは\n(cid:2) (cid:3)\n斜線塗り\nY=begin{zahyou*}[ul=4mm](0,8)(0,8)\n→\nY=kousi<nuri={*(1,4)}>(2,1.5){4}{5}\nY=end{zahyou*}\n(cid:4) (cid:5)\n斜線の角度，間隔指定も\n(cid:2) (cid:3)\n斜線角度，間隔\nY=begin{zahyou*}[ul=4mm](0,8)(0,8)\nY=kousi<nuri=%\n→\n{*<slashangle=-45,%\nslashspace=.5>(0,2)}>(2,1.5){4}{5}\nY=end{zahyou*}\n(cid:4) (cid:5)\nY=Nuritubusiのオプションと同様であることが納得いただけたでしょうか。\n111", "tags": []}
{"title": "Page 119", "content": "複数のセルに対して塗りを指定するには，<nuri=..>の右辺に，上記の指定を‘;’で区切って並\nべれば実現できます。\n(cid:2) (cid:3)\n複数指定\nY=begin{zahyou*}[ul=4mm](0,8)(0,8)\nY=kousi<nuri={%\n(1,2);%\n<thickness=1>(3,1);%\n→\n<nuriiro=red>(3,0);%\n*(1,4);%\n*<slashangle=-45,slashspace=.5>(0,2)%\n}>(2,1.5){4}{5}\nY=end{zahyou*}\n(cid:4) (cid:5)\n8.5\n境界線と斜線の間を空ける\n領域の境界を含まないことを示すのに，斜線と境界をくっつけず，少し空ける流儀があります。\nこれを実現するにはいくつかの方法がありますが，田中 徹 さんがBBS #354に投稿された方法\n(1) ひとまず塗りつぶしを行う\n(2) 境界線を太めの白い線で上書き\n(3) 改めて境界線を引く\nは有力な手法です。\nそのアイデアを頂いてマクロ化してみました。emathPh.sty v 1.07で\nsyasentanmatu=...（単位付の長さ）\nオプションにより白塗りの幅を指定することにしてみました。境界線を中心として，その左右に指\n定した幅を有する白い曲線を描画します。\n（斜線の端点と境界線の距離が指定した長さとなり，白塗りの曲線の太さは指定した幅の2倍と\nなります。）\n(cid:2) (cid:3)\nsyasentanmatu=..オプション\nY=begin{zahyou*}[ul=6mm](0,5)(0,4)\nY=tenretu*{A(0,0);B(5,0);C(4,4);D(1,3)}\nY=Nuritubusi*<syasentanmatu=1mm>% →\n{Y=A=YB=YC=YD=YA}\nY=Drawline{=YA=YB=YC=YD=YA}\nY=end{zahyou*}\n(cid:4) (cid:5)\n8.6 2\n円の共通部分に斜線\n2円の共通部分を斜線塗りするのは，結構面倒です。\n112", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 120", "content": "まずは斜線塗りではなく，ベタ塗りの場合を検討します。これは，共通弦で2分割したそれぞれ\nの弓形を塗りつぶします。\n(cid:2) (cid:3)\n2円の共通部分のベタ塗り\nY=unitlength12mm=Ydrawaxisfalse\nY=begin{zahyou}(-1.5,1.5)(-1.5,2.5)\nY=tenretu*{A(0,0);B(0,1)}\nY=edef=YhankeiA{1}\nY=edef=YhankeiB{1}\nY=En=YA=YhankeiA\n→\nY=En=YB=YhankeiB\nY=CandC=YA=YhankeiA=YB=YhankeiB=YP=YQ\nY=Put=YA{=Yyumigata*=YhankeiA{%\nhazimeten==YQ}{owariten==YP}}\nY=Put=YB{=Yyumigata*=YhankeiB{%\nhazimeten==YP}{owariten==YQ}}\nY=end{zahyou}\n(cid:4) (cid:5)\nこれが斜線塗りとなると\n(cid:2) (cid:3)\n2円の共通部分の斜線塗り(1)\nY=unitlength12mm=Ydrawaxisfalse\nY=begin{zahyou}(-1.5,1.5)(-1.5,2.5)\nY=tenretu*{A(0,0);B(0,1)}\nY=edef=YhankeiA{1}\nY=edef=YhankeiB{1}\nY=En=YA=YhankeiA\n→\nY=En=YB=YhankeiB\nY=CandC=YA=YhankeiA=YB=YhankeiB=YP=YQ\nY=Put=YA{=Yyumigata**=YhankeiA{%\nhazimeten==YQ}{owariten==YP}}\nY=Put=YB{=Yyumigata**=YhankeiB{%\nhazimeten==YP}{owariten==YQ}}\nY=end{zahyou}\n(cid:4) (cid:5)\n2つの弓形の斜線がつながりません。\nそこで，斜線塗りに\nsyanurisiteiten=\nという書式で，斜線群が通過すべき1点を指定するためのオプションを付加しました。その効果は\n113", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 121", "content": "(cid:2) (cid:3)\n2円の共通部分の斜線塗り(1)\nY=unitlength12mm=Ydrawaxisfalse\nY=begin{zahyou}(-1.5,1.5)(-1.5,2.5)\nY=tenretu*{A(0,0);B(0,1)}\nY=edef=YhankeiA{1}\nY=edef=YhankeiB{1}\nY=En=YA=YhankeiA\nY=En=YB=YhankeiB\n→\nY=CandC=YA=YhankeiA=YB=YhankeiB=YP=YQ\nY=Put=YA{=Yyumigata**<%\nsyanurisiteiten==YQ>=YhankeiA{%\nhazimeten==YQ}{owariten==YP}}\nY=Put=YB{=Yyumigata**<%\nsyanurisiteiten==YQ>=YhankeiB{%\nhazimeten==YP}{owariten==YQ}}\nY=end{zahyou}\n(cid:4) (cid:5)\n一見つながったように見えますが，よく目を凝らすとちょっとずれています。これが気になれば，\n斜線塗りする領域の境界線を多角形近似して，多角形を斜線塗りするコマンド Y=Nuritubusi を使\nうことになりましょう。円弧を折れ線近似するには，\n$n$次関数のグラフを折れ線近似する Y=KinziOresen\n一般の関数のグラフを折れ線近似する Y=yKinziOresen\n媒介変数表示の曲線を折れ線近似する Y=bKinziOresen\nなどを用いれば可能ですが，この際，円弧を折れ線近似するコマンドを作ってみました。名付けて\nY=KinziEnko 書式はあとで記述することにして，とりあえず使用効果を見てみましょう。\n(cid:2) (cid:3)\n2円の共通部分の斜線塗り(1)\nY=unitlength12mm=Ydrawaxisfalse\nY=begin{zahyou}(-1.1,1.1)(-1.5,2.5)\nY=tenretu*{A(0,0);B(0,1)}\nY=edef=YhankeiA{1}=Yedef=YhankeiB{1}\nY=En=YA=YhankeiA=YEn=YB=YhankeiB\nY=CandC=YA=YhankeiA=YB=YhankeiB=YP=YQ\nY=Put=YP[w]{P}=YPut=YQ[e]{Q} → P Q\nY=KinziEnko=YA=YhankeiA{hazimeten==YQ}{%\nowariten==YP}=YoresenA\nY=KinziEnko=YB=YhankeiB{hazimeten==YP}{%\nowariten==YQ}=YoresenB\nY=edef=Yoresen{=YQ=YoresenA=YP=YoresenB=YQ}\nY=Nuritubusi*=Yoresen\nY=end{zahyou}\n(cid:4) (cid:5)\nきれいに斜線塗りができたようです。\n114", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 122", "content": "Y=KinziEnko の書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n円弧を近似する折れ線\nY=KinziEnko<#1>#2#3#4#5#6\n#1 : 刻み値\n#2 : 中心\n#3 : 半径を直接与えるか\ntuukaten=xx として，円弧の周上の一点を与える\n#4 : 始め角を直接与えるか\nhazimeten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 始め角とするように指定する。\n#5 : 終り角を直接与えるか\nowariten=xx として，中心を始点，xx を終点とするベクトルの\n方向角を 終り角とするように指定する。\n#6 : 近似折れ線を受け取る制御綴\n8.7\n破線による斜線塗り\n斜線を破線で引くには\nY=def=Ysensyu{=Yhasen}%\nなどとします．\n(cid:2) (cid:3)\n破線による斜線塗り\nY=begin{picture}(4,2)\nY=def=YA{(2,1)}%\nY=Put=YA{{%\nY=def=Ysensyu{=Yhasen}% −→\nY=Daenko**{2}{1}{0}{180}}%\nY=drawline(-2,0)(2,0)%\nY=Daenko{2}{1}{0}{180}}%\nY=end{picture}\n(cid:4) (cid:5)\nなお，斜線を Y=color{lightgray} などとするのも有力な手法です．ただし，gray の濃度はプ\nリンタ環境によって調整する必要があります．\n115", "tags": ["インストール", "中級者向け", "初心者向け", "図形描画", "環境構築", "関数"]}
{"title": "Page 123", "content": "(cid:2) (cid:3)\nグレースケールによる斜線塗り\nY=definecolor{%\nlightgray}{gray}{.8}%\nY=begin{picture}(4,2)\nY=def=YA{(2,1)}%\nY=Put=YA{{% −→\nY=color{lightgray}%\nY=Daenko**{2}{1}{0}{180}}%\nY=drawline(-2,0)(2,0)%\nY=Daenko{2}{1}{0}{180}}%\nY=end{picture}\n(cid:4) (cid:5)\n8.8\n斜線塗りの制約条項\n斜線塗りの制約条項 斜線の方向角をθとして，直線群 ycosθ−xsinθ =k が領域によってきり取\nられる線分は単一の連結な線分であること．\n駄目な場合の典型は，ドーナッツです．これはどのような方向で切っても中心を通る直\n線がドーナッツによって切り取られる部分は２個の線分になってしまします．このような領\n域の斜線塗りはいっぺんにはできません．ドーナッツの場合は，大きい円の内部全部を一旦\n斜線塗りしたうえで，小さい円の内部を白塗りすることで実現できます．\n116", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 124", "content": "9\n三角形の五心\n9.1\n重心\n(cid:2) (cid:3)\n重心\nY=begin{picture}%\n(3.4,4)(-.2,-.5)%\nY=def=YB{(0,0)}%\nY=def=YC{(3,0)}%\nY=def=YA{(2,3)}% A\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\n−→\nY=Zyuusin=YA=YB=YC=YG\nY=Put=YG{=Ymakebox(0,-0.5){G}}% G\nY=Drawline{=YA=YG}%\nB C\nY=Drawline{=YB=YG}%\nY=Drawline{=YC=YG}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Zyuusin#1#2#3#4\n#1,#2,#3 を頂点とする三角形の重心を #4 にセットします．\n9.2\n外心\n三角形の外心を求めるコマンド Y=Gaisin です．\n117", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 125", "content": "(cid:2) (cid:3)\n外心\nY=begin{picture}(3,3)%\nY=def=YB{(0,0)}%\nY=def=YC{(3,0)}%\nY=def=YA{(2,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}% A\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=Gaisin=YA=YB=YC=YO\n||\nY=Put=YO{=Ymakebox(0,-0.5){O}}%\n−→\nY=Drawline{=YA=YO}%\nO\nY=Drawline{=YB=YO}%\n|| ||\nY=Drawline{=YC=YO}%\nB C\nY=Touhenkigou<2>=YO=YA\nY=Touhenkigou<2>=YO=YB\nY=Touhenkigou<2>=YO=YC\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Gaisin#1#2#3#4\n#1,#2,#3 を頂点とする三角形の外心を #4 にセットします．\n三角形の外接円を描くコマンド Y=Gaisetuen もあります．\n118", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 126", "content": "(cid:2) (cid:3)\n外接円\nY=begin{picture}%\n(3.2,4.5)(-.2,-1)%\nA\nY=def=YB{(0,0)}%\nY=def=YC{(3,0)}%\nY=def=YA{(2,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\n−→\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nB C\nY=Gaisetuen=YA=YB=YC\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Gaisetuen#1#2#3\n#1,#2,#3 を頂点とする三角形の外接円を描画します．\n外心は Y=vGaisin にセット，半径は Y=lR\n9.3\n内心\n三角形の内心を求めるコマンド Y=Naisin です．\n119", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 127", "content": "(cid:2) (cid:3)\n内心\nY=begin{picture}(3,4)(-.2,-.5)\nY=def=YB{(0,0)}%\nY=def=YC{(3,0)}%\nY=def=YA{(2,3)}%\nA\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=Naisin=YA=YB=YC=YI −→\nY=Put=YI{=Ymakebox(0,-0.5){I}}%\nI\nY=Drawline{=YA=YI}%\nB C\nY=Drawline{=YB=YI}%\nY=Drawline{=YC=YI}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Naisin#1#2#3#4\n#1,#2,#3 を頂点とする三角形の内心を #4 にセットします．\n三角形の内接円を描くコマンド Y=Naisetuen もあります．\n(cid:2) (cid:3)\n内接円\nY=begin{picture}(3,4)(-.2,-.5)\nY=def=YB{(0,0)}%\nA\nY=def=YC{(3,0)}%\nY=def=YA{(2,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}% −→\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=Naisetuen=YA=YB=YC\nB C\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n120", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 128", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Naisetuen#1#2#3\n#1,#2,#3 を頂点とする三角形の内接円を描画します．\n内心は Y=vNaisin にセット，半径は Y=lr\n9.4\n傍心\n三角形の傍心を求めるコマンド Y=Bousin です．\n(cid:2) (cid:3)\n傍心\nY=begin{zahyou*}[ul=5mm](-2,5)(-3,4)\nY=tenretu{A(2,3)n;B(0,0)w;C(3,0)e} A\nY=Bunten=YA=YB3{-1}=YP\nY=Bunten=YA=YC3{-1}=YQ\nY=Bousin=YA=YB=YC=YJ −→\nB C\nY=Drawlines{=YA=YJ;=YB=YJ;=YC=YJ;=YP=YA=YQ}\nY=thicklines\nY=Takakkei{=YA=YB=YC}%\nY=thinlines\nY=end{zahyou*}\n(cid:4) (cid:5)\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Bousin#1#2#3#4\n#1,#2,#3 を頂点とする三角形の，\n∠A内にある傍心を #4 にセットします．\n三角形の傍接円を描くコマンド Y=Bousetuen もあります．\n(cid:2) (cid:3)\n傍接円\nA\nY=begin{zahyou*}[ul=5mm](-2,5)(-6,4)\nY=tenretu{A(2,3)n;B(0,0)w;C(3,0)e}\nY=Bunten=YA=YB2{-1}=YP\nY=Bunten=YA=YC2{-1}=YQ B C\nY=Bousetuen=YA=YB=YC −→\nY=Drawlines{=YP=YA=YQ}\nY=thicklines\nY=Takakkei{=YA=YB=YC}%\nY=thinlines\nY=end{zahyou*}\n(cid:4) (cid:5)\n121", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 129", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Bousetuen#1#2#3\n#1,#2,#3 を頂点とする三角形の傍接円を描画します．\n傍心は Y=vBousin にセット，半径は Y=BousetuenHankei\n三角形の内接円，3つの傍接円を描画する例です。\n(cid:2) (cid:3)\n内接円と傍接円\nY=begin{footnotesize}\nY=begin{zahyou*}[ul=10mm](-5,6)(-7,5)\nY=tenretu{A(2,2)n;B(0,0)sw;C(3,0)se}\nY=Naisetuen=YA=YB=YC\nY=Bousetuen=YA=YB=YC=Yedef=YJ{=YvBousin}\nY=Bousetuen=YB=YC=YA=Yedef=YK{=YvBousin}\nY=Bousetuen=YC=YA=YB=Yedef=YL{=YvBousin}\nY=Takakkei{=YJ=YK=YL}\nY=Drawlines{=YJ=YA;=YK=YB;=YL=YC}\nY=Tyokusen=YA=YB{}{}\nY=Tyokusen=YB=YC{}{}\nY=Tyokusen=YC=YA{}{}\nY=thicklines\nY=Takakkei{=YA=YB=YC}\nY=end{zahyou*}\nY=end{footnotesize}\n(cid:4) (cid:5)\n122", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 130", "content": "A\nB C\n−→\n9.5\n垂心\n三角形の垂心を求めるコマンドは用意してありません．Y=Suisen で垂線を引き，Y=LandL で交点\nを求めることで垂心が得られます．\n123", "tags": []}
{"title": "Page 131", "content": "(cid:2) (cid:3)\n垂心\nY=begin{picture}(3,4)(-.2,-.5)\nY=def=YB{(0,0)}%\nY=def=YC{(3,0)}%\nY=def=YA{(2,3)}%\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}% A\nY=Suisen=YB=YC=YA=YE\nY=Suisen=YC=YA=YB=YF\nY=LandL=YB=YE=YC=YF=YH\n−→\nY=LandL=YA=YH=YB=YC=YD\nY=Drawline{=YA=YD}%\nY=Drawline{=YB=YE}%\nB C\nY=Drawline{=YC=YF}%\nY=Tyokkakukigou=YA=YD=YB\nY=Tyokkakukigou=YB=YE=YA\nY=Tyokkakukigou=YC=YF=YA\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\n9.6\n角の二等分線\n三角形の二等分線と対辺の交点を求めるには，コマンドY=Nitoubunsenを用います。その書式\nです。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n三角形の二等分線と対辺の交点を求める。\nY=Nitoubunsen[#1]#2#3#4#5\n角#2#3#4（#3が角の頂点）を2等分する直線が辺#2#4と交わる点を#5に与える。\n#1を与えたときは，外角の2等分線を#1に与える。\nまずは，内角の二等分線です。\n124", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 132", "content": "(cid:2) (cid:3)\nY=Nitoubunsen\nY=begin{zahyou*}[ul=10mm](-1,5)(-1,3)=Yfootnotesize\nY=tenretu{A(3,2)n;B(0,0)s;C(4,0)s}\nY=Nitoubunsen=YB=YA=YC=YD\nY=Put=YD[s]{D}\nY=Drawline{=YA=YB=YC=YA=YD}\nY=Kakukigou<0>=YB=YA=YD(0,0)[c]{$=Ybullet$}\nY=Kakukigou<0>=YD=YA=YC(0,0)[c]{$=Ybullet$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n↓\nA\n••\nB D C\n外角の二等分線と対辺（の延長）との交点を得るには，オプション引数[#1]に交点を受け取る\n制御綴を与えます。\n(cid:2) (cid:3)\n外角の二等分線\nY=begin{zahyou*}[ul=10mm](-1,12)(-1,4)=Yfootnotesize\nY=tenretu{A(3,2)n;B(0,0)s;C(4,0)s}\nY=Nitoubunsen[=YE]=YB=YA=YC=YD\nY=Put=YD[s]{D}\nY=Put=YE[s]{E}\nY=Hantyokusen=YB=YC\nY=Hantyokusen=YB=YA\nY=Drawlines{=YA=YB=YC=YA=YD;=YA=YE}\nY=Kakukigou<0>=YB=YA=YD(0,0)[c]{$=Ybullet$}\nY=Kakukigou<0>=YD=YA=YC(0,0)[c]{$=Ybullet$}\nY=Bunten=YA=YB{-1}{2}=YT\nY=Kakukigou<0>=YC=YA=YE(0,0)[c]{$=Ytimes$}\nY=Kakukigou<0>=YE=YA=YT(0,0)[c]{$=Ytimes$}\nY=end{zahyou*}\n(cid:4) (cid:5)\n↓\n125", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 134", "content": "10\n三角形の決定\n10.1\n三辺\n三辺の長さがわかっているときに，その三角形をどのように描画するか，という話です．\n具体例としてAB=7, BC=5, CA=3としましょう．まずA(0,0), B(7,0)とします．点Cは，\nAを中心とする半径3の円と，Bを中心とする半径5の円との交点として求めます．\n(cid:2) (cid:3)\n三角形の決定(1)三辺\nY=begin{picture}(7,3)(-.5,-.5)\nY=def=YA{(0,0)}%\nY=def=YB{(7,0)}%\nY=CandC=YA{3}=YB{5}=YD=YC\nY=Put=YA{=Ymakebox(0,0)[r]{A }}%\nY=Put=YB{=Ymakebox(0,0)[l]{ B}}%\nY=Put=YC{=Ymakebox(0,0.4){C}}%\nY=HenKo<.4>=YA=YB{7}%\nY=HenKo<.4>=YB=YC{5}%\nY=HenKo<.4>=YC=YA{3}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nC\n3 5\n−→\nA B\n7\n10.2\n二角夾辺\nBC=5, ∠B=60◦, ∠C=45◦ としましょう．これは，B(0,0), C(5,0) とした上で\n点Bを通り，方向角 60◦ の直線と\n点Cを通り，方向角 135◦ の直線\nの交点としてAを求めます．\n127", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 135", "content": "(cid:2) (cid:3)\n三角形の決定(2) 二角夾辺\nY=begin{picture}(7,4.5)(-0.5,-0.5)%\nY=def=YB{(0,0)}%\nY=def=YC{(5,0)}%\nY=kandk=YB{60}=YC{135}=YA\nY=Put=YA{=Ymakebox(0,0.5){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=HenKo<.4>=YB=YC{5}%\nY=Kakukigou=YC=YB=YA(2pt,1pt)[l]{60=YDeg}%\nY=Kakukigou<2>=YA=YC=YB(-2pt,1pt)[r]{45=YDeg}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nA\n−→\n60◦ 45◦\nB C\n5\n10.3\n二辺夾角\nAB=3, BC=5, ∠B=60◦ としましょう．これは B(0,0), C(5,0) とした上で A の座標を極座\n標→直交座標変換で求めます．すなわち\nY=kyokuTyoku(3,60)=YA\n128", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 136", "content": "(cid:2) (cid:3)\n三角形の決定(3) 二辺夾角\nY=unitlength1cm\nY=begin{picture}(5.5,3.5)(-0.5,-0.5)\nY=def=YB{(0,0)}%\nY=def=YC{(5,0)}%\nY=kyokuTyoku(3,60)=YA\nY=Put=YA{=Ymakebox(0,0.4){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=HenKo[60]<.4>=YB=YC{5}%\nY=HenKo[36]<.4>=YA=YB{3}%\nY=Kakukigou=YC=YB=YA(2pt,0)[l]{60=YDeg}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nA\n3\n−→\n60◦\nB C\n5\n129", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 137", "content": "11\n正弦定理・余弦定理\n11.1\n正弦定理\n正弦定理を用いて三角形の辺・角，外接円の半径を求めるコマンドを解説します．一例として，\nA=120◦, B =15◦, c=10\nである三角形を BC を底辺として描画することを考えてみます．そのために BC=a を正弦定理\nで求めます．\nまずは C =45◦ と c=10 から\nc\n=2R\nsinC\nを用いて外接円の半径を求めます．そのためのコマンドがY=seigenRです．書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=seigenR#1#2\n#1 : 向かい合った辺・角のうち辺\n#2 : 角\n外接円の直径が Y=lRR, 半径が Y=lR にセットされる．\nここでは，Y=seigenR{10}{45} とします．\n次いで，\na\n=2R\nsinA\nを用いて a を求めます．そのためのコマンドが Y=seigen です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=seigen#1#2\n#1 : 角\n#2 : 角と向かい合った辺の長さを受取るコントロールシーケンス\nここでは Y=seigen{120}=Yla として Y=la に a がセットされます．\n関連して，逆に辺を与えて角を求めるコマンドが Y=Seigen です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Seigen[#1]#2#3\n#2 : a\n#3 : A を受取るコントロールシーケンス\n#1 = e のときは，角A（鋭角）を求める．（デフォルト）\n#1 = d のときは，角A（鈍角）を求める．\n130", "tags": []}
{"title": "Page 138", "content": "では，この節のはじめに取り上げた三角形を実際に描画してみましょう．\n(cid:2) (cid:3)\n正弦定理\n{Y=unitlength4mm=Ysmall=Ydrawaxisfalse\nY=begin{zahyou}(-1,15)(-1,4)%\nY=seigenR{10}{45}%\nY=seigen{120}=Yla\nY=def=YB{(0,0)}%\nY=def=YC{(=Yla,0)}%\nY=kyokuTyoku(10,15)=YA\nY=Put=YA(0,2pt)[b]{A}%\nY=Put=YB(0,-2pt)[rt]{B}%\nY=Put=YC(0,-2pt)[lt]{C}%\nY=HenKo[0]=YA=YB{10}%\nY=Kakukigou[|]=YC=YB=YA<hankei=3>(0,0)[l]{15=YDeg}%\nY=Kakukigou=YB=YA=YC(0,0)[t]{120=YDeg}%\nY=Drawline{=YA=YB=YC=YA}%\nY=end{zahyou}}\n(cid:4) (cid:5)\nA\n10\n−→ 120◦\n15◦\nB C\n11.2\n余弦定理\n2辺夾角がわかっているときに，第3辺を求めるコマンドがY=yogen です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n2辺夾角から第3辺の長さを求める．\nY=yogen#1#2#3#4\n#1=b, #2=c, #3=A → a を#4にセットする．\nでは，このコマンドを用いて\n◦\nb=2, c=3, A=60\nである三角形を BC を底辺として描画してみます．\n131", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 139", "content": "(cid:2) (cid:3)\n余弦定理\n{Y=unitlength10mm=Ysmall=Ydrawaxisfalse\nY=begin{zahyou}(-.2,3)(-.5,2.25)%\nY=yogen{2}{3}{60}=Yla\nY=def=YB{(0,0)}%\nY=def=YC{(=Yla,0)}%\nY=CandC=YB{3}=YC{2}=YAA=YA\nY=Put=YA(0,2pt)[b]{A}%\nY=Put=YB(0,-2pt)[t]{B}%\nY=Put=YC(0,-2pt)[t]{C}%\nY=HenKo[0]=YC=YA{2}%\nY=HenKo[0]=YA=YB{3}%\nY=Kakukigou=YB=YA=YC(0,-2pt)[t]{60=YDeg}%\nY=Drawline{=YA=YB=YC=YA}%\nY=end{zahyou}}%\n(cid:4) (cid:5)\nA\n60◦\n3\n2\n−→\nB C\n関連して，3辺の長さがわかっているとき，角を求めるコマンドが Y=Yogen です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n3辺の長さから角の余弦を求める．\nY=Yogen[#1]#2#3#4#5\ncos(A)=(b^2+c^2-a^2)/(2bc)\n#2=a, #3=b, #4=c 結果は #5 にセット\n#1=a のときは角を求める．（単位は度）\n132", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 140", "content": "12\nベクトル\n12.1\nベクトル演算\n点の座標を位置ベクトルの成分と見て，ベクトル演算をするコマンドを用意しました．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n和： Y=Addvec#1#2#3：2つのベクトル#1, #2の和ベクトルを#3に与えます．\n差： Y=Subvec#1#2#3：2つのベクトル#1, #2の差ベクトルを#3に与えます．\nスカラー倍： Y=Mulvec#1#2#3：ベクトル#2 のスカラー#1倍を#3に与えます．\n大きさ： Y=Absvec#1#2: ベクトル#1 の大きさを #2 に与えます．\n方向角： Y=Argvec#1#2: ベクトルが x軸の正の向きとなす角を #2 に与えます．\n法線ベクトル： Y=Nvec#1#2: ベクトル #1 に垂直な単位ベクトルを #2 に与えます．\n回転： Y=Rotvec[#1]<#2>#3#4#5: ベクトル #3 を 角 #4 だけ回転したベクトル\nを #5に与えます．[#1] を指定した場合は，長さを指定した値にします．\nまた，<#2> を指定した場合は，長さを元のベクトルの #2 倍にします．\n成分： Y=vecXY#1#2#3: ベクトル #1 のx成分を #2 へ，y成分を #3 へ抽出し\nます．\n12.2\n平行四辺形\nA(2,3), B(1,1), C(4,1) を頂点とする平行四辺形 ABCD を作図するには3点の座標 Y=A, Y=B, Y=C\nを位置ベクトルと見て\nY=A+Y=C−Y=B\nとして Y=D を求めます．\n133", "tags": []}
{"title": "Page 141", "content": "(cid:2) (cid:3)\n平行四辺形\nY=unitlength1cm\nY=begin{picture}(5,3)(0.8,0.5)\nY=def=YA{(2,3)}%\nY=def=YB{(1,1)}%\nY=def=YC{(4,1)}%\nY=Addvec=YA=YC=YD\nY=Subvec=YD=YB=YD\nY=Put=YA{=Ymakebox(0,0.4){A}}%\nY=Put=YB{=Ymakebox(0,0)[r]{B }}%\nY=Put=YC{=Ymakebox(0,0)[l]{ C}}%\nY=Put=YD{=Ymakebox(0,0)[l]{ D}}%\nY=thicklines\nY=Drawline{=YA=YB=YC=YD=YA}%\nY=thinlines\nY=end{picture}\n(cid:4) (cid:5)\nA\nD\n−→\nB C\n12.3\n回転\nベクトルを回転させるコマンドY=Rotvecを用いて回転を行うことができます．ここではさらに一\n般化したY=Kaiten を用いて，指定した2点 A, B を結ぶ線分を一辺とする正三角形を作図します．\n(cid:2) (cid:3)\n回転\nY=begin{picture}(3,5)%\nC\nY=def=YB{(3,3)}%\nY=def=YA{(1,2)}%\nY=Kaiten=YA=YB{60}=YC\nB\nY=Kaiten=YA=YB{-60}=YD\n−→\nY=Put=YA{=Ymakebox(0,0)[r]{A }}%\nA\nY=Put=YB{=Ymakebox(0,0)[l]{ B}}%\nY=Put=YC{=Ymakebox(0,0.4){C}}%\nY=Put=YD{=Ymakebox(0,-0.4){D}}% D\nY=Drawline{=YA=YB=YC=YA=YD=YB}%\nY=end{picture}\n(cid:4) (cid:5)\n134", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 142", "content": "Y=Kaiten コマンドの書式です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Kaiten[#1]<#2>#3#4#5#6\n#1 : 長さ指定\n#2 : 長さの倍率指定\n#3 : 回転の中心\n#4 : 回転させる点\n#5 : 回転角\n#6 : 結果の座標を受け取るコントロールシーケンス\n135", "tags": []}
{"title": "Page 143", "content": "13\n座標平面\n13.1\n連立不等式の解を図表示\n連立方程式の解を数直線上に図表示する話です。\n(cid:2) (cid:3)\n例1\n連立不等式\nY=renritu{&x+1<0 =YY= &x^2<4}\nの解は\nY=begin{zahyou*}[ul=10mm](-5,5)(-.5,1.5)%\nY=ArrowLine{(=Yxmin,0)}{(=Yxmax,0)}%\nY=Put{(=Yxmax,0)}[s]{$x$}%\nY=Put{(0,0)}[s]{$0$}%\nY=Put{(-1,0)}[s]{$-1$}%\nY=Put{(-2,0)}[s]{$-2$}%\nY=Put{(2,0)}[s]{$2$}%\nY=KTkukan{(,-1);(-2,2)}{(-2,-1)}\nY=end{zahyou*}\n(cid:4) (cid:5)\n連立不等式\n(cid:15)\nx+1<0 ···················· (cid:6)1\nx 2 <4 ···················· (cid:6)2\n→ の解は\n(cid:6)2\n(cid:6)1\n−2 −1 0 2 x\n136", "tags": []}
{"title": "Page 144", "content": "(cid:2) (cid:3)\n例2\n連立不等式\nY=renritu{&x^2>x =Ylabel{E2-1}=YY= &x^2=Yleqq 4=Ylabel{E2-2}}\nの解は\nY=begin{zahyou*}[10mm](-5,5)(-.5,1.5)%\nY=ArrowLine{(=Yxmin,0)}{(=Yxmax,0)}%\nY=Put{(=Yxmax,0)}[s]{$x$}%\nY=Put{(0,0)}[s]{$0$}%\nY=Put{(1,0)}[s]{$1$}%\nY=Put{(-2,0)}[s]{$-2$}%\nY=Put{(2,0)}[s]{$2$}%\nY=KTkukan[E2-1;E2-2]{{(,0)|(1,)};[-2,2]}{[-2,0)|(1,2]}\nY=end{zahyou*}\n(cid:4) (cid:5)\n連立不等式\n(cid:15)\nx 2 >x ···················· (cid:6)3\nx 2 (cid:2)4 ···················· (cid:6)4\n→ の解は\n(cid:6)4\n(cid:6)3 (cid:6)3\n−2 0 1 2 x\nY=KTkukanの書式です。\n137", "tags": []}
{"title": "Page 145", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=KTkukan[#1]#2#3\n#1 : 各区間のラベル指定オプション\n#2 : 各区間を‘;’区切りで並べる\n#3 : 結果の区間\n区間は\n開区間 : (-3,5)\n閉区間 : [-3,5]\n半開区間 : (-3,5], [-3,5)\n無限区間 : (,-3), (5,)\nなどと表す。\n2つの区間の和集合は (,-3)|(5,) などのように，‘|’を用いる\nラベル指定オプションは，\nデフォルトは [auto] で，Y=maru1, =Ymaru2, .....が付与される。\n各不等式に Y=label がついているときは，ラベル名を‘;’区切りで並べる。\n[] と指定すれば，区間にラベルはつかない。\n下の Y=kukantakasa を用いて，自由に配置してもよい。\n区間を表す横罫線の y座標は Y=kukantakasa で，そのデフォルト値は 0.5\n層を重ねるときは，その 2, 3, ... 倍となる。\n13.2 zahyou\n環境\n座標軸を描きます．\n基本的な使用法は\nY=begin{zahyou}(xの下限, xの上限)(yの下限, yの上限)\n例えば，\ny\n(cid:2) (cid:3)\n座標平面\nY=begin{zahyou}(-2,2)(-1,3)\n−→\nY=En{(0,1)}{1}%\nY=end{zahyou}\n(cid:4) (cid:5) O x\nzahyou環境は，実質 picture 環境です．ここへ，1次関数，2次関数のグラフを描こうという魂\n胆です．\n138", "tags": ["インストール", "初心者向け", "基本操作", "環境構築"]}
{"title": "Page 146", "content": "なお，座標軸を描画したくないときは，*付のzahyou*環境を使用します。下の例は，Y=drawXaxis\nでx軸だけを描画しています。\n(cid:2) (cid:3)\nY=drawaxisfalse\nY=begin{zahyou*}(-2,2)(-1,3)\nY=drawXaxis\n−→\nY=Put{(=Yxmax,0)}[e]{$x$}\nY=En{(0,1)}{1}\nx\nY=end{zahyou*}\n(cid:4) (cid:5)\ny軸のみを描画するY=drawYaxisも定義されています。\n13.3\n座標軸描画のタイミング\n座標軸を描画するタイミングは，zahyou環境の最後ですが，座標軸を描画した後に，座標軸上\nの点にY=Siromaruで白丸をつけたいときなどはうまくありません。下の図のように，白丸の中を\n座標軸が突き抜けてしまいます。\n(cid:2) (cid:3)\n座標軸描画のタイミング\ny\nY=begin{zahyou}[ul=16mm](-.5,1.5)(-.5,1)\nY=tenretu*{A(0,0);B(1,0);C(.5,0)}\n{Y=thicklines=YEnko=YC{.5}{0}{180}}% −→\nY=siromaru[2pt]{=YA;=YB} O 1 x\nY=Put=YB[se]{1}%\nY=end{zahyou}\n(cid:4) (cid:5)\nそのようなときはzahyou*環境を用いて，適切なタイミングでY=drawXYaxisを発行して，座標\n軸を別途描画します。\n(cid:2) (cid:3)\nY=drawXYaxis\nY=begin{zahyou*}[ul=16mm](-.5,1.5)(-.5,1)\ny\nY=tenretu*{A(0,0);B(1,0);C(.5,0)}\n{Y=thicklines=YEnko=YC{.5}{0}{180}}%\n−→\nY=drawXYaxis\nO 1 x\nY=siromaru[2pt]{=YA;=YB}\nY=Put=YB[se]{1}%\nY=end{zahyou*}\n(cid:4) (cid:5)\n13.4 zahyou\n環境のオプション\nzahyou環境については，一番初めに紹介しましたが，細かい点を修正するオプションについて\n説明します。\nzahyou環境の細かい指定をするのに，オプション引数を用意しています。これらは\n139", "tags": ["インストール", "中級者向け", "初心者向け", "図形描画", "環境構築", "関数"]}
{"title": "Page 147", "content": "key = val\nの形式で，コンマで区切ることで複数のオプションを指定できます。\n13.4.1 Y=unitlengthの指定\npicture環境の単位長(Y=unitlength)は，デフォルトでは1ptとなっています。これを変更する\nオプションが\nul=...\nで，右辺値は単位を伴った長さです。\ny\n(cid:2) (cid:3)\nul=...オプション\nY=begin{zahyou}[ul=8mm]%\n(-3,3)(-2,2)% → O 1 x\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\n注 1. TEXが扱える実数値は\nY=maxdimen=16383.99999pt % the largest legal <dimen>\nが上限とされています。emathPhにおける計算もこの制限を受けます。距離計算では平方計\n算が必要ですが，1282\nでオーバーフローしてしまいます。従って座標の値を大きくしない\nように，Y=unitlengthを1cm前後にしておく方が良いでしょう。\n注 2. Y=unitlength8mm\nY=begin{zahyou}....\nY=end{zahyou}\nと\nY=begin{zahyou}[ul=8mm]....\nY=end{zahyou}\nとの大きな違いは，Y=unitlength変更の有効範囲です。\n前者はzahyou環境が終わった後でもこの変更が有効（残ってしまう）のに対して，後者は\nこの変更が当該 zahyou 環境内のみに有効である，すなわちこの zahyou 環境が終われば，\nY=unitlengthは以前の値に戻ることです。\nzahyouの[...]オプションによる変更はすべて当該zahyou環境内に限定されます。\n140", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 148", "content": "13.4.2 座標軸の名称変更\nデフォルトでは，\n原点には O\n横軸には x\n縦軸には y\nが表示されますが，これを変更するオプションが\ngentenkigou=\nyokozikukigou=\ntatezikukigou=\nで，右辺値は文字列です。\n原点記号を変更します。\n(cid:2) (cid:3)\n原点記号の変更\nY=begin{zahyou}% y\n[%\nul=8mm,\ngentenkigou=O$’$ → O(cid:3) 1 x\n]%\n(-3,3)(-2,2)%\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\n原点記号をつけたくない、という場面なら\n(cid:2) (cid:3)\n原点記号なし\nY=begin{zahyou}% y\n[%\nul=8mm,\ngentenkigou={} → 1 x\n]%\n(-3,3)(-2,2)%\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\n座標軸名称の変更例です。\n141", "tags": []}
{"title": "Page 149", "content": "(cid:2) (cid:3)\n座標軸名の変更\nY=begin{zahyou}%\nb\n[%\nul=8mm,\nyokozikukigou=$a$,\ntatezikukigou=$b$ → O 1 a\n]%\n(-3,3)(-2,2)%\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\n13.4.3 軸記号の配置オプション\nデフォルトでは，\n原点記号は 左下\n横軸名は 下\n縦軸名は 左\nに表示されますが，これを変更するオプションが\ngentenhaiti=\nyokozikuhaiti=\ntatezikuhaiti=\nで，右辺値はY=Putのオプションと同形式です。原点記号はデフォルトでは左下に配置されますが，\nこれを右下に変更してみましょう。\n(cid:2) (cid:3)\n原点記号の配置変更\nY=begin{zahyou}% y\n[%\nul=8mm,\ngentenhaiti={[se]} → O 1 x\n]%\n(-3,3)(-2,2)%\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\nY=Putの配置オプション [se]をgentenhaiti=の右辺値に指定しますが，]がzahyou環境に対\nする[...] オプションの終了と解釈されるのを防ぐため{[se]}と，{ } で括っておく必要があり\nます。\n次に座標軸名の配置を変更する例です。\n142", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 150", "content": "(cid:2) (cid:3)\n座標軸名の配置変更\nY=begin{zahyou}%\ny\n[%\nul=8mm,\nyokozikuhaiti={[e]},\nx\ntatezikuhaiti={(-1pt,0)[r]} → O 1\n]%\n(-3,3)(-2,2)%\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\nこの場合，座標軸名x, yはzahyou環境の外に飛び出しています。これを防ぐために，周囲に少\nし余白を付けておきたい，というのが後述の\nmigiyohaku=\nhidariyohaku=\nueyohaku=\nsitayohaku=\nオプションです。\n13.4.4 矢印のサイズ変更\n座標軸の矢印を含め，zahyou環境内の矢印のサイズを変更するオプションが\narrowheadsize=\nです。\n(cid:2) (cid:3)\n矢印のサイズ変更\nY=begin{zahyou}% y\n[%\nul=8mm,\narrowheadsize=2.5 → O 1 x\n]%\n(-3,3)(-2,2)%\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\n矢印が大きくなりすぎましたか。arrowheadsizeの右辺値を適当に変更してください。この数\n値は，現在のサイズの何倍にするかを指定するものです。\n逆に矢印がいらない場合は，つぎのzikusensyuオプションを用います。\n143", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 151", "content": "13.4.5 軸の線種変更\n座標軸には，デフォルトで矢印が付加されていますが，軸の線種を変更することで矢印を付けな\nいようにすることができます。\n(cid:2) (cid:3)\n軸の矢印なし\nY=begin{zahyou}% y\n[%\nul=8mm,\nzikusensyu==Ydrawline → O 1 x\n]%\n(-3,3)(-2,2)%\nY=xmemori{1}%\nY=end{zahyou}%\n(cid:4) (cid:5)\n軸を太くしてみましょうか。\n(cid:2) (cid:3)\n軸を太目に\ny\nY=begin{zahyou}%\n[%\nul=8mm,\n→ O x\nzikusensyu==Ythicklines=Ydrawline\n]%\n(-3,3)(-2,2)%\nY=end{zahyou}%\n(cid:4) (cid:5)\n軸を太くし，矢印も付けるには，線種をデフォルトのY=arrowdrawlineにしてY=thicklinesな\nどをかぶせます。\n(cid:2) (cid:3)\n軸を太目に，矢印も\ny\nY=begin{zahyou}[%\nul=8mm,\nzikusensyu==Ythicklines=Yarrowdrawline,\n→ O x\narrowheadsize=2\n]%\n(-3,3)(-2,2)%\nY=end{zahyou}%\n(cid:4) (cid:5)\n13.4.6 描画領域の周辺に余白\n描画領域の周辺に文字を配置するためなどに余白をとっておきたいことがあります。そのための\nオプションが\nmigiyohaku\nhidariyohaku\n144", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 152", "content": "ueyohaku\nsitayohaku\nです。\nまず基準の確認です。TEXが認識しているzahyou環境をY=fboxで枠をつけてみます。\n(cid:2) (cid:3)\n基準サイズ\nY=fboxsep=0pt=Yfbox{%\nY=begin{zahyou}%\ny\n[%\nul=8mm,\nyokozikuhaiti={[e]},\ntatezikuhaiti={[n]} →\n]%\nx\n(-3,3)(-1,3)% O 1\nY=xmemori{1}%\nY=def=YFx{X*X}\nY=YGraph=YFx\nY=end{zahyou}}%\n(cid:4) (cid:5)\n座標軸のラベルが枠外にはみだしています。\n上と右に余白を付けて見ます。\n(cid:2) (cid:3)\n上と右に余白\nY=fboxsep=0pt=Yfbox{%\nY=begin{zahyou}%\n[%\nul=8mm,\ny y =x2\nyokozikuhaiti={[e]},\ntatezikuhaiti={[n]},\nueyohaku=.75,\n→\nmigiyohaku=.5 1\n]%\nx\n(-3,3)(-1,3)% O 1\nY=def=YFx{X*X}\nY=Put{(1,1)}[syaei=xy]{}%\nY=YGraph=YFx\nY=Put{(1.732,3)}[n]{$y=x^2$}%\nY=end{zahyou}}%\n(cid:4) (cid:5)\n枠内に納まりましたね。\nueyohakuなどの右辺値は，無名数で，単位は Y=unitlength です。\nこれに対して\nMigiyohaku=\nHidariyohaku=\n145", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 153", "content": "Ueyohaku=\nSitayohaku=\nYohaku=\nは，右辺値に単位を伴う長さを与えます。\n(cid:2) (cid:3)\nY=Ueyohaku\nY=fboxsep=0pt=Yfbox{%\nY=begin{zahyou}%\n[%\nul=8mm,\ny y =x2\nyokozikuhaiti={[e]},\ntatezikuhaiti={[n]},\nUeyohaku=15pt,\n→\nMigiyohaku=10pt 1\n]%\nx\n(-3,3)(-1,3)% O 1\nY=def=YFx{X*X}\nY=Put{(1,1)}[syaei=xy]{}%\nY=YGraph=YFx\nY=Put{(1.732,3)}[n]{$y=x^2$}%\nY=end{zahyou}}%\n(cid:4) (cid:5)\n（注）単位付の余白設定オプションは，内部では Y=unitlength単位に換算されます。従って，\n[ul=..]と併用するときは，ul=..が先行する必要があります。\n13.4.7 縦横比の変更\nzahyou環境では，縦と横の単位長は同一になっています。これを別々に設定するためのオプション\nyscale, xscale\nがあります。\nただし，この機能はemathPxy.styで定義されていますから，\nY=usepackage{emathPxy}\nとしておく必要があります。\n次のリストはyscale=.25として，y軸方向を1/4に縮め，y =x2 (−4<x<4)のグラフを描\n画しています。\n146", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 154", "content": "(cid:2) (cid:3)\n<yscale=...>オプション\ny\nY=begin{zahyou}%\n12\n[ul=6mm,yscale=.25]%\n(-4,4)(-4,16) 8\n→\nY=def=YFx{X*X} 4\nY=YGraph=YFx\n−3 −2 −1O 1 2 3 x\nY=zahyouMemori[g]<dx=1,dy=4>\nY=end{zahyou}\n(cid:4) (cid:5)\nグラフ描画コマンド Y=YGraph については後述します。\n次は横長の格子を描く例です。\nul=3mm,xscale=3,yscale=2\nというオプションで\nul=3mm で Y=unitlength は 3mm\nx軸方向の単位長は ul×xscale 9mm で Y=xunitlength が 9mm\ny軸方向の単位長は ul×yscale 6mm で Y=yunitlength が 6mm\nに設定されます。\n(cid:2) (cid:3)\n横長の格子\nY=begin{zahyou*}[%\nul=3mm,xscale=3,%\nyscale=2](0,4)(0,5)% →\nY=Put=YO{=Ykousi{4}{5}}%\nY=Kuromaru{(2,3)}%\nY=end{zahyou*}%\n(cid:4) (cid:5)\n13.5 zahyou\n環境の縦方向配置\nまずは，\npicture(zahyou)環境で作成した図，\ntabular(array)環境で作成した表\nを横に並べたときの縦位置に関する話から始めます。\n13.5.1 デフォルトの確認\nまずはデフォルトの状態の確認です。\n147", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 155", "content": "(cid:2) (cid:3)\nデフォルト\nY=kizyunsen\nあいう%\nY=fbox{=Ybegin{zahyou}[ul=10mm](-2,2)(-1,5)\nY=En=YO{1}\nY=end{zahyou}}%\nxyz%\nY=begin{tabular}{|c|c|}=Yhline\n1 & 1 Y=Y=Y=hline\n1 & 1 Y=Y=Y=hline\nY=end{tabular}%\nか漢字%\n(cid:4) (cid:5)\ny\n→\nO x\n1 1\nあいう xyz か漢字\n1 1\n赤の横線が基準線（ベースライン）です。TEXは，この線を文字通り基準として文字，表，図な\nどボックスを配置して行きます。まずは，文字にご注目ください。‘y’は基準線から下にはみ出す\n形で配置されています。すなわち「深さ」をもっています。全角文字も良く見ると一部基準線から\n下にはみ出しています。\nさて，図ですが，picture環境の下辺を基準線に重ねる，というのがLATEXの仕様です。\n表のほうは，デフォルトでは，縦方向中央揃えとなります。デフォルトでは，といったのは，オ\nプションで変更可能ということで，次節でそれを見ていきます。\n13.5.2 下揃え\n表の下辺を基準線に重ねるのが，tabular, arrayの[b]オプションです。\n(cid:2) (cid:3)\n下揃え\nY=begin{tabular}[b]{|c|c|}=Yhline\n(cid:4) (cid:5)\n148", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "数式描画", "環境構築"]}
{"title": "Page 156", "content": "y\n→\nO x 1 1\n1 1\nあいう xyz か漢字\nソースリストは，デフォルトのものから変更した行だけを記します。\n13.5.3 上揃え\n逆に，表の上辺を基準線に重ねるのが，tabular, arrayの[t]オプションです。zahyou環境にも\n[haiti=t]オプションがあります。\n(cid:2) (cid:3)\n上揃え\nY=fbox{=Ybegin{zahyou}[ul=10mm,haiti=t](-2,2)(-1,5)\nY=begin{tabular}[t]{|c|c|}=Yhline\n(cid:4) (cid:5)\nあいう xyz か漢字\ny\n1 1\n1 1\n→\nO x\nzahyou環境の上辺をさらに上に引っ張って文字の高さと揃えたい，というご要望もありそうで\nす。そのためにhaiti=t/c/bオプションには，そのあとに補正量を与えることができるようにし\nてあります。\n(cid:2) (cid:3)\n上揃え–さらに調整\nY=fbox{=Ybegin{zahyou}[ul=10mm,haiti=t+1zh](-2,2)(-1,5)\n(cid:4) (cid:5)\n149", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 157", "content": "y\nあいう xyz か漢字\n1 1\n1 1\n→\nO x\n正の補正量で上方に，負の補正量で下方に移動します。\n13.5.4 中央揃え\n表を縦方向センタリングするのが，tabular, arrayの[c]オプションです。\nzahyou環境にも[haiti=c]オプションがあります。\n(cid:2) (cid:3)\n中央揃え\nY=fbox{=Ybegin{zahyou}[ul=10mm,haiti=c](-2,2)(-1,5)\nY=begin{tabular}[c]{|c|c|}=Yhline\n(cid:4) (cid:5)\ny\n1 1\n→ あいう xyz か漢字\n1 1\nO x\nzahyou環境には，[haiti=x]オプションもあります。これはx軸を基準線に重ねます。\n(cid:2) (cid:3)\n横軸揃え\nY=fbox{=Ybegin{zahyou}[ul=10mm,haiti=x](-2,2)(-1,5)\nY=begin{tabular}[c]{|c|c|}=Yhline\n(cid:4) (cid:5)\n150", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 158", "content": "y\n→\n1 1\nあいう xyz か漢字\nO x 1 1\nemathPh.styv1.70までは，[haiti=c]オプションで，x軸を基準線に重ねていましたが，v1.71\nで上記のように修正いたしました。\n151", "tags": []}
{"title": "Page 159", "content": "13.6 zahyou\n環境の書式\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=begin{zahyou}[#1](#2,#3)(#4,#5)\n#1 : key=val の形式で，key には次のものが使えます。\nyokozikukigou デフォルトは $x$\ntatezikukigou デフォルトは $y$\ngentenkigou デフォルトは O\nyokozikuhaiti デフォルトは (0,-3pt)[rt]\ntatezikuhaiti デフォルトは (-3pt,0)[rt]\ngentenhaiti デフォルトは [sw]\nul Y=unitlength を変更します。デフォルトは 1pt\nyscale デフォルトは1 --> emathPxy.sty\nxscale デフォルトは1 --> emathPxy.sty\narrowheadsize 矢印のサイズ（その時点のものに対する比率）\nzikusensyu 座標軸の線種\nデフォルトは Y=arrowdrawline\nueyohaku 右辺値は無名数（単位はY=unitlength)\nsitayohaku\nmigiyohaku\nhidariyohaku\nUeyohaku 右辺値は単位を伴う長さ\nSitayohaku\nMigiyohaku\nHidariyohaku\nhaiti t/c/b/x\n(#2,#3) : xの範囲\n(#4,#5) : yの範囲\n13.7\n目盛り\n13.7.1 座標軸上に等間隔の目盛り\n座標軸に等間隔に目盛りを打つコマンドが Y=zahyouMemori です．\n(cid:2) (cid:3)\n座標目盛り\nY=begin{zahyou}(-1.5,4.5)(-2.5,2.5)=Ysmall\nY=zahyouMemori%\nY=end{zahyou}\n(cid:4) (cid:5)\n152", "tags": ["インストール", "中級者向け", "初心者向け", "図形描画", "環境構築", "関数"]}
{"title": "Page 160", "content": "y\n2\n1\n−→ −1 O 1 2 3 4 x\n−1\n−2\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=zahyouMemori[#1][#2]<#3>\n#1 : g : グリッド\n+ : 格子点に +マーク\no : 格子点に黒丸\nz : 座標軸上の格子点に +マーク\n#2 : n : グリッドのみで，目盛り数値を打たない．\n#3 : 刻み\nkey=val の形式 ---> emathPxy.sty\nkey は\ndx= xの刻み値\ndy= yの刻み値\nxo= xの基準値\nyo= yの基準値\n目盛りの間隔はデフォルトでは1ですが，これを2に変更してみましょう。\ny\n4\n(cid:2) (cid:3)\n間隔2の目盛線\n2\nY=small\nY=begin{zahyou}[ul=4mm](-5,5)(-5,5) → −4 −2 O 2 4 x\nY=zahyouMemori<2>\n−2\nY=end{zahyou}\n(cid:4) (cid:5) −4\nx軸とy軸とで間隔を変えることもできます。\n153", "tags": []}
{"title": "Page 161", "content": "(cid:2) (cid:3) y\n<dx=..,dy=..>オプション\n4\nY=small 2\nY=begin{zahyou}%\n→ −6 −3 O 3 6x\n[ul=3mm](-7,7)(-5,5)\n−2\nY=zahyouMemori<dx=3,dy=2>\n−4\nY=end{zahyou}\n(cid:4) (cid:5)\nY=xscale, Y=yscale と併用して\n(cid:2) (cid:3)\nY=xscaleと併用オプション\nY=small y\nY=begin{zahyou}% 1\n[ul=8mm,yokozikuhaiti={[n]},% x\n→ O 90 180 270 360\nxscale=0.017453]%\n(-5,400)(-1.5,1.5) −1\nY=zahyouMemori<dx=90>\nY=end{zahyou}\n(cid:4) (cid:5)\n基準点はデフォルトでは原点ですが，これを変更するには，<xo=...,yo=...>オプションを用\nいます。\n(cid:2) (cid:3)\n基準点の変更\nY=small\nY=begin{zahyou}% y\n[ul=8mm,% 1\nyokozikuhaiti={[n]},% x\n→ −30 O 60 150 240 330\ngentenhaiti={[se]},%\nxscale=0.017453]% −1\n(-60,360)(-1.5,1.5)\nY=zahyouMemori<dx=90,xo=-30>\nY=end{zahyou}\n(cid:4) (cid:5)\n13.7.2 グリッド線\n[g]オプションをつけると方眼を描きます．\n(cid:2) (cid:3)\n方眼 & 目盛り\nY=begin{zahyou}(-1.5,4.5)(-2.5,2.5)=Ysmall\nY=zahyouMemori[g]%\nY=end{zahyou}\n(cid:4) (cid:5)\n154", "tags": []}
{"title": "Page 162", "content": "y\n2\n1\n−→ −1 O 1 2 3 4 x\n−1\n−2\nグリッド線の線種を変更するには，<sensyu=...> オプションを用います。\n(cid:2) (cid:3)\n線種の変更\nY=begin{zahyou}(-1.5,4.5)(-2.5,2.5)=Ysmall\nY=zahyouMemori[g]<sensyu==Ydrawline>%\nY=end{zahyou}\n(cid:4) (cid:5)\ny\n2\n1\n−→ −1 O 1 2 3 4 x\n−1\n−2\n[+]オプションでは，格子点に + マークをつけます。\n(cid:2) (cid:3)\n格子点に +\nY=begin{zahyou}(-1.5,4.5)(-2.5,2.5)=Ysmall\nY=zahyouMemori[+]%\nY=end{zahyou}\n(cid:4) (cid:5)\n155", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 163", "content": "y\n2\n1\n−→ −1 O 1 2 3 4 x\n−1\n−2\n[o]オプションでは，格子点に黒丸をつけます。\n(cid:2) 格子点に • (cid:3)\nY=begin{zahyou}(-1.5,4.5)(-2.5,2.5)=Ysmall\nY=zahyouMemori[o]%\nY=end{zahyou}\n(cid:4) (cid:5)\ny\n2\n1\n−→ −1 O 1 2 3 4 x\n−1\n−2\nなお，目盛りの数値は要らないというときは第2の[n]オプションをつけます．\ny\n(cid:2) (cid:3)\n方眼\n{Y=unitlength5mm=Ysmall\nY=begin{zahyou}%\n−→\n(-3.5,3.9)(-3.5,3.9)% O x\nY=zahyouMemori[g][n]%\nY=end{zahyou}}%\n(cid:4) (cid:5)\n13.7.3 軸上に目盛り\nまた，座標軸上の指定した位置に目盛りを打つコマンドが\nY=xmemori, Y=ymemori\n156", "tags": []}
{"title": "Page 164", "content": "です．\n(cid:2) (cid:3)\n目盛り\nY=unitlength5mm y\nY=begin{zahyou}%\n1\n(-1.5,4.5)(-2.5,2.5)%\n−→ O π x\nY=small\nY=ymemori{1}%\nY=xmemori<=Ypi>{3.1416}%\nY=end{zahyou}\n(cid:4) (cid:5)\n目盛りの位置をずらしたいときは，[..]オプションにY=emathPutの配置オプションを記述し\nます。\n(cid:2) (cid:3)\nY=xmemoriの[...]オプション\nY=begin{zahyou}[ul=10mm](-5,5)(-1,1)\nY=xmemori[b]{1}\nY=xmemori[t]{2}\nY=xmemori[{[ne]}]{3}\nY=xmemori[{(-2pt,-3pt)[rt]}]{-1}\nY=end{zahyou}\n(cid:4) (cid:5)\n↓\ny\n1 3\n−1 O 2 x\ny\n(cid:2) (cid:3) 3\nY=ymemoriの[...]オプション\nY=begin{zahyou}[ul=10mm](-1,1)(-2,4) 2\nY=ymemori[l]{1}\nY=ymemori[r]{2} → 1\nY=ymemori[{[sw]}]{3}\nY=ymemori[{(-2pt,-3pt)[rt]}]{-1} O x\nY=end{zahyou}\n(cid:4) (cid:5)\n−1\nY=xmemori, Y=ymemoriの書式は\n157", "tags": []}
{"title": "Page 165", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n座標軸上任意位置に目盛\nY=xmemori[#1]<#2>#3\nY=ymemori[#1]<#2>#3\n#1 : t = 座標軸の下に目盛\nb = 上\nl = 右\nr = 左\nY=emathPut の配置指定オプション\n#2 : 目盛の文字\n（省略すれば，#3 に指定したものが代用されます．）\n#3 : 目盛の位置\nY=xscaleと併用した例です。\n(cid:2) (cid:3)\nY=xscaleと併用\nY=footnotesize\nY=begin{zahyou}[ul=5mm](-5,5)(-1.5,2)\ny\nY=zahyouMemori[g][n]<dx=1.57,dy=.5> 1\nY=ymemori{1} →\n−π O π x\nY=ymemori{-1} −1\nY=xmemori<=Ypi>{3.14}\nY=xmemori<-=Ypi>{-3.14}\nY=end{zahyou}\n(cid:4) (cid:5)\n13.8\n座標軸への垂線\n平面上に点をプロットしたとき，その点から座標軸に下ろした垂線を破線で描画したいときがあ\nります。この目的のために Y=Put にオプションを追加しました。\n158", "tags": []}
{"title": "Page 166", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=emathPut#1[#2].....\n#1 : 文字列を置く位置（座標）\n#2 : 方位\nsyaei=x|y|xy\nhoui=n|nw|w|sw|s|se|e|ne\nxlabel=..\nylabel=..\nxpos=..\nypos=..\nsyaeisensyu=..\n従来，[#2] オプションは，文字列の点に対する方位を指定するものでした。これはそのまま有\n効ですが，ここに\nsyaei=xy\nとすれば，点から両座標軸への垂線を描画することができます。\ny\n(cid:2) (cid:3)\n[syaei=xy]\nA\n2\nY=unitlength10mm=Yfootnotesize\nY=begin{zahyou}(-1,3)(-1,3)\n→\nY=tenretu{A(1,2)ne}\nY=Put=YA[syaei=xy]{}\nO 1 x\nY=end{zahyou}\n(cid:4) (cid:5)\nsyaei=x\nとすれば，x軸への垂線が描画されます。\ny\n(cid:2) (cid:3)\n[syaei=x]\nA\nY=unitlength10mm=Yfootnotesize\nY=begin{zahyou}(-1,3)(-1,3)\n→\nY=tenretu{A(1,2)ne}\nY=Put=YA[syaei=x]{}\nO 1 x\nY=end{zahyou}\n(cid:4) (cid:5)\n従来の方位オプションもここに記述したいときは\nhoui=..\nと記述します。\n159", "tags": []}
{"title": "Page 167", "content": "y\n(cid:2) (cid:3)\n[houi=..]\n2\nY=unitlength10mm=Yfootnotesize A\nY=begin{zahyou}(-1,3)(-1,3)\n→\nY=def=YA{(1,2)}\nY=Put=YA[syaei=xy,houi=sw]{A}\nO 1 x\nY=end{zahyou}\n(cid:4) (cid:5)\n座標軸上のラベルですが，デフォルトでは指定点の x, y座標が表示されます。これが整数の場\n合は問題ないのですが，分数，無理数，文字を表示したいときは\nxlabel=..\nylabel=..\nオプションを用います。\ny\n(cid:2) (cid:3)\n[xlabel=..]\nY=unitlength10mm=Yfootnotesize\nY=begin{zahyou}(-1,3)(-1,3) √ 2 A\nY=tenretu{A(1.5,1.414)ne} →\nY=Put=YA[syaei=xy,xlabel==Yfrac32,\nylabel==Ysqrt2]{} O 3 x\n2\nY=end{zahyou}\n(cid:4) (cid:5)\nこのオプションの右辺値は数式モード内であるという前提です。また [...,xlabel=] と右辺値\nを空にすればラベルは打たれません。\nまた，垂線の線種を変更するには，syaeisensyu=..オプションを用います。\ny\n(cid:2) (cid:3)\n[syaeisensyu=]\nA\nY=unitlength10mm=Yfootnotesize\nY=begin{zahyou}(-1,3)(-1,3)\nY=tenretu{A(1,2)ne} →\nY=Put=YA[syaei=x,%\nsyaeisensyu==Yprotect=Yemdottedline]{} O 1 x\nY=end{zahyou}\n(cid:4) (cid:5)\n垂線の足につける目盛り位置を修正するときは，[xpos=..], [ypos=..] オプションで，右辺値\nにY=Putの配置オプションを記述します。\nx軸に下ろした垂線の足位置につける文字位置は[xpos=..]オプションで修正します。\n160", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 168", "content": "(cid:2) (cid:3)\nxpos=..オプション\ny\nY=begin{zahyou}[ul=10mm]% A\n1\n(-2.5,2.5)(-1.5,1.5)\nY=tenretu{A(2,1)ne;B(-2,-1)sw} 2\n→ −2 O x\nY=Put=YA[syaei=xy,xpos={[ne]}]{}\nY=Put=YB[syaei=xy,% −1\nB\nxpos={(-2pt,-2pt)[rt]}]{}\nY=end{zahyou}\n(cid:4) (cid:5)\ny軸に下ろした垂線の足位置につける文字位置の調整は[ypos=..]オプションです。\n(cid:2) (cid:3)\nypos=..オプション\ny\nY=begin{zahyou}[ul=10mm]% 1 A\n(-2.5,2.5)(-1.5,1.5)\nY=tenretu{A(2,1)ne;B(-2,-1)sw} −2\n→ O 2 x\nY=Put=YA[syaei=xy,ypos={[ne]}]{}\nY=Put=YB[syaei=xy,%\nB −1\nypos={(-2pt,-2pt)[rt]}]{}\nY=end{zahyou}\n(cid:4) (cid:5)\n161", "tags": []}
{"title": "Page 169", "content": "14\n点・直線・円\n14.1\n点の位置に黒丸\n軌跡を求める問題などで，端点が含まれるとか含まれないとかを黒丸・中抜きの白丸などで表示\nすることがあります．そのためのコマンドが Y=Kuromaru, Y=Siromaru です．\n(cid:2) (cid:3)\n黒丸・白丸\n{Y=unitlength10mm\ny\nY=begin{zahyou}(-.5,2.5)(-.5,2.5)%\nY=def=YA{(0,1)}%\nY=def=YB{(1,0)}%\n−→\nY=def=YC{(1,1)}%\nY=Put=YC{=Yenko{1}{-90}{180}}%\nO x\nY=Kuromaru=YA\nY=Siromaru=YB\nY=end{zahyou}}\n(cid:4) (cid:5)\nその書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n黒丸，白丸\nY=Kuromaru[#1]#2\nY=Siromaru[#1]#2\n#1 : 丸の半径（単位をつける）デフォルトは 1pt\n#2 : 位置\n黒丸の大きさを変更したいときは，Y=Kuromaruの[#1]オプションを利用すればよいのですが，\n文書全体で，あるいは広範囲にY=Kuromaruの大きさを変更したいときはY=KuromaruHankeiコマ\nンドの引数に黒丸の半径（単位つき） を与える方法もあります。\n(cid:2) (cid:3)\n黒丸の大きさ\n{Y=unitlength10mm\nY=KuromaruHankei{3pt} y\nY=begin{zahyou}(-.5,2.5)(-.5,2.5)%\nY=def=YA{(0,1)}%\nY=def=YB{(1,0)}% −→\nY=def=YC{(1,1)}%\nY=Put=YC{=Yenko{1}{-90}{180}}% O x\nY=Kuromaru=YA\nY=Siromaru=YB\nY=end{zahyou}}\n(cid:4) (cid:5)\n162", "tags": []}
{"title": "Page 170", "content": "複数の点に黒丸（白丸）をつけるコマンドが Y=kuromaru(Y=siromaru) です。複数の点を‘;’で区\n切ります。\n(cid:2) (cid:3)\n複数の点に黒丸\n{Y=unitlength10mm y\nY=begin{zahyou}(-.5,2.5)(-.5,2.5)%\nY=def=YA{(0,1)}%\nY=def=YB{(1,0)}% −→\nY=def=YC{(1,1)}%\nY=Put=YC{=Yenko{1}{-90}{180}}% O x\nY=kuromaru{=YA;=YB;=YC}%\nY=end{zahyou}}\n(cid:4) (cid:5)\n丸のサイズを指定する [..]オプションも Y=Kuromaru などと同様に有効です。\n14.2 2\n点間の距離\n2点間の距離を求めるには，コマンド Y=Kyori を用います．\n(cid:2) (cid:3)\nY=Kyori\n{Y=unitlength10mm=Ysmall y\nY=begin{zahyou}(-2,2)(-2,2)%\nA(−1,1)\nY=def=YA{(-1,1)}%\nY=def=YB{(1,-1)}%\n2.82843\nY=Kyori=YA=YB=Ykyori −→ O x\nY=Put=YA(0,2pt)[b]{A$(-1,1)$}%\nY=Put=YB(0,-2pt)[t]{A$(1,-1)$}% A(1,−1)\nY=Drawline{=YA=YB}%\nY=HenKo[20]=YB=YA=Ykyori\nY=end{zahyou}}%\n(cid:4) (cid:5)\nY=Kyori の書式です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n% 2点間の距離\n% Y=Kyori#1#2#3\n% 2点 #1, #2 の距離を #3 に代入\n距離の平方を求めるコマンドが Y=Kyorii です．\n163", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 171", "content": "(cid:2) (cid:3)\nY=Kyorii\n{Y=unitlength10mm=Ysmall\ny\nY=begin{zahyou}(-2,2)(-2,2)%\nY=def=YA{(-1,1)}% A(−1,1)\nY=def=YB{(1,-1)}%\n√\nY=Kyorii=YA=YB=Ykyorii 8\n−→ O x\nY=Put=YA(0,2pt)[b]{A$(-1,1)$}%\nY=Put=YB(0,-2pt)[t]{A$(1,-1)$}%\nA(1,−1)\nY=Drawline{=YA=YB}%\nY=HenKo[20]=YB=YA{%\n$Y=sqrt{=Ykyorii}$}%\nY=end{zahyou}}%\n(cid:4) (cid:5)\nY=Kyorii の書式です．\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n% 2点間の距離の平方\n% Y=Kyorii#1#2#3\n% 2点 #1, #2 の距離の平方を #3 に代入\n14.3\n直線\n14.3.1 ２点を通る直線\n2点を通る直線を描画するコマンドが Y=Tyokusen です．\ny\n(cid:2) (cid:3)\n2点を通る直線\nY=begin{zahyou}(-2,2)(-1,3)%\nY=def=YA{(0,1)}%\n−→\nY=def=YB{(1,2)}%\nY=Tyokusen=YA=YB=Yxmin=Yxmax\nO x\nY=end{zahyou}%\n(cid:4) (cid:5)\nY=Tyokusenの書式です．\n164", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 172", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n2点を与えて直線を描画する．\nY=Tyokusen[#1]#2#3[#4]#5[#6]#7\n#1 : Y=qbezier の [...]\n#1を与えないときは直線を\nY=qbezier ではなく，Y=drawline で描画する．\n#2,3 : 直線上の２点\n#5 : 左端の x座標 （#4 に [y] とすれば，y座標）\n#7 : 右端の x座標 （#6 に [y] とすれば，y座標）\n直線を描画領域いっぱいにかくときは，#5, #7を空にすることができます。\ny\n(cid:2) (cid:3)\n2点を通る直線\nY=begin{zahyou}(-2,2)(-1,3)%\nY=def=YA{(0,1)}%\n−→\nY=def=YB{(1,2)}%\nY=Tyokusen=YA=YB{}{}\nO x\nY=end{zahyou}%\n(cid:4) (cid:5)\nこの場合，描画した直線の両端点が\nY=hidariT, =YmigiT\nに定義されています。ただし，Y=hidariTとY=migiTは，左・右とはなっていません。\n(cid:2) Y=hidariT(1) (cid:3) y Y=migiT\nY=begin{zahyou}[ul=10mm](-2,2)(-1,3)% B\nY=tenretu{A(0,1)se;B(1,2)nw}\nY=kuromaru{=YA;=YB}\n→ A\nY=Tyokusen=YA=YB{}{}\nY=Put=YhidariT[e]{=Ycmd{hidariT}}\nO x\nY=Put=YmigiT[e]{=Ycmd{migiT}}\nY=end{zahyou}% Y=hidariT\n(cid:4) (cid:5)\nは自然ですが,\n165", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 173", "content": "(cid:2) (cid:3)\nY=hidariT(2) y Y=hidariT\nY=begin{zahyou}[ul=10mm](-2,2)(-1,3)%\nY=tenretu{A(1,2)se;B(0,1)nw} A\nY=kuromaru{=YA;=YB} B\n→\nY=Tyokusen=YA=YB{}{}\nY=Put=YhidariT[e]{=Ycmd{hidariT}}\nO x\nY=Put=YmigiT[e]{=Ycmd{migiT}}\nY=end{zahyou}% Y=migiT\n(cid:4) (cid:5)\nは，???ですね。\n#1に近い方がY=hidariT, #2に近い方がY=migiTです。\n14.3.2 1点と方向ベクトルによる直線\n1点と方向ベクトルを与えて直線を描画するコマンドがY=mTyokusen です．\ny\n(cid:2) (cid:3)\n1点と方向ベクトルを指定\nY=begin{zahyou}(-2,2)(-1,3)%\nY=def=YA{(0,1)}%\n−→\nY=def=Yu{(1,2)}%\nY=mTyokusen=YA=Yu[y]=Yymin[y]=Yymax\nO x\nY=end{zahyou}%\n(cid:4) (cid:5)\nその書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n１点と方向ベクトルを与えて直線を描画する．\nY=mTyokusen[#1]#2#3[#4]#5[#6]#7\n#1 : Y=qbezier の [...]\n#1を与えないときは直線を\nY=qbezier ではなく，Y=drawline で描画する．\n#2 : 直線上の１点\n#3 : 方向ベクトル\n#5 : 左端の x座標 （#4 に [y] とすれば，y座標）\n#7 : 右端の x座標 （#6 に [y] とすれば，y座標）\n直線を描画領域いっぱいにかくときは，#5, #7を空にすることができます。\n166", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 174", "content": "y\n(cid:2) (cid:3)\n端点の指定省略\nY=begin{zahyou}(-2,2)(-1,3)%\nY=def=YA{(0,1)}%\n−→\nY=def=Yu{(1,2)}%\nY=mTyokusen=YA=Yu{}{}\nO x\nY=end{zahyou}%\n(cid:4) (cid:5)\nこの場合も，両端点がY=hidariT, =YmigiTに定義されています。\n14.3.3 1点と方向角による直線\n1点と方向角を与えて直線を描画するコマンドがY=kTyokusen です．\ny\n(cid:2) (cid:3)\n1点と方向角を指定\nY=begin{zahyou}(-2,2)(-1,3)%\nY=def=YA{(0,1)}% −→\nY=kTyokusen=YA{-30}{}{}\nY=end{zahyou}% O x\n(cid:4) (cid:5)\nその書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n１点と方向角を与えて直線を描画する．\nY=kTyokusen[#1]#2#3[#4]#5[#6]#7\n#1 : Y=qbezier の [...]\n#1を与えないときは直線を\nY=qbezier ではなく，Y=drawline で描画する．\n#2 : 直線上の１点\n#3 : 方向角\n#5 : 左端の x座標 （#4 に [y] とすれば，y座標）\n#7 : 右端の x座標 （#6 に [y] とすれば，y座標）\n直線を描画領域いっぱいにかくときは，#5, #7を空にすることができます。\nこの場合も，両端点がY=hidariT, =YmigiTに定義されています。\n14.3.4 線種の変更\n直線を実線ではなく，点線とか破線で描画するには Y=sensyuを再定義します。デフォルトは\n167", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 175", "content": "Y=def=Ysensyu{=Ydrawline}\nとなっています。\n(cid:2) (cid:3)\n線種の変更\nY=begin{zahyou}(-2,2)(-1,3)%\ny\nY=def=YA{(0,1)}%\nY=def=YB{(1,2)}%\nY=def=YC{(1,0)}%\n{Y=def=Ysensyu{%\n−→\nY=protect=Yemdottedline}\nY=Tyokusen=YA=YB{}{}}\nO x\n{Y=def=Ysensyu{%\nY=dashline[40]{.1}}\nY=Tyokusen=YA=YC{}{}}\nY=end{zahyou}%\n(cid:4) (cid:5)\n14.3.5 直線 ax+by+c=0\n方程式 ax+by+c=0 で与えられた直線を描画する Y=tyokusen です．\ny\n(cid:2) (cid:3)\n方程式の係数指定\nY=begin{zahyou}(-2,2)(-1,3)%\n−→\nY=tyokusen{1}{1}{-1}{}{}\nY=end{zahyou}%\n(cid:4) (cid:5) O x\nその書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n直線 ax+by+c=0 を描画する．\nY=tyokusen[#1]#2#3#4[#5]#6[#7]#8\n#1 : Y=qbezier の [...]\n#1を与えないときは直線を\nY=qbezier ではなく，Y=drawline で描画する．\n#2 : a\n#3 : b\n#4 : c\n#6 : 左端の x座標 （#5 に [y] とすれば，y座標）\n#8 : 右端の x座標 （#7 に [y] とすれば，y座標）\n168", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 176", "content": "このコマンドでも，座標平面全体に描画するときは#5, #7は空でかまいません。\n14.3.6 直線 y =ax+b\nこれは，次節の一次関数のグラフ描画コマンドをご利用ください．\n14.3.7 点P(x1, y1)と直線ax+by+c=0の距離\n点Pと直線lの距離を求めることにより，点Pを中心としてlに接する円を描画することが出来\nます．\n(cid:2) (cid:3)\nY=tentotyokusen\ny\n{Y=unitlength10mm=Ysmall\nY=begin{zahyou}(-2,2)(-2,2)%\nY=def=YC{(1,1)}% 点Cを中心とし\nY=tyokusen{1}{-1}{1}{}{}%\n−→ O x\n% 直線 x-y+1=0 に\nY=tentotyokusen=YC{1}{-1}{1}%\nY=hankei%\nY=En=YC=Yhankei% 接する円\nY=end{zahyou}}%\n(cid:4) (cid:5)\nその書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n点と直線の距離(1)\n点 P$(x1,y1)$ と直線 $ax+by+c=0$ との距離を求める．\nY=tentotyokusen#1#2#3#4#5\n#1 : 点P\n#2 : $a$\n#3 : $b$\n#4 : $c$\n#5 : 点と直線の距離\n14.3.8 点P(x1, y1)と2点A,Bを通る直線の距離\n直線がその上の2点で指定された場合です．\n169", "tags": []}
{"title": "Page 177", "content": "(cid:2) (cid:3)\nY=tentoTyokusen\n{Y=unitlength6mm=Ysmall y\nY=begin{zahyou}(-2,4)(-3,3)%\nY=def=YC{(1,1)}% 点Cを中心とし，\nY=def=YA{(0,-2)}%\n−→ O x\nY=def=YB{(1,-1)}% 直線ABに\nY=tentoTyokusen=YC=YA=YB=Yhankei\nY=En=YC=Yhankei% 接する円\nY=Tyokusen=YA=YB{}{}%\nY=end{zahyou}}%\n(cid:4) (cid:5)\nその書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n点と直線の距離(2)\n点 PY=retu(x1,y1) と直線 AB との距離を求める．\nY=tentoTyokusen#1#2#3#4\n#1 : 点P\n#2 : 点A\n#3 : 点B\n#4 : 点と直線の距離\n14.4\n円の接線\n14.4.1 円周上の点における接線\n円周上の点における接線を描画するために，その方向ベクトルを求めるコマンドがY=ennoSessen\nです．\n(cid:2) (cid:3) y\n円周上の点における接線\n{Y=unitlength3mm=Ysmall\nY=begin{zahyou}(-8,8)(-8,8)%\nY=def=YO{(0,0)}%\nY=def=YT{(3,4)}% −→ O x\nY=ennoSessen=YO=YT=Ym\nY=mTyokusen=YT=Ym{}{}\nY=En=YO{5}%\nY=end{zahyou}}\n(cid:4) (cid:5)\nその書式は\n170", "tags": []}
{"title": "Page 178", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n円周上の点における接線の単位方向ベクトルを求める．\nY=ennoSessen#1#2#3{%\n#1 : 円の中心\n#2 : 円周上の点\n#3 : 接線の方向ベクトル（単位ベクトル）\n14.4.2 円外の点からの接線\n円の外部の点から円に引いた接線の2個の接点を求めるコマンドがY=enniSessenです．\n(cid:2) (cid:3)\n円外の点からの接線\ny\n{Y=unitlength10mm=Ysmall\nY=begin{zahyou}(-1,3)(-2,2)%\nY=def=YA{(3,2)}% 円外の点\nY=def=YC{(1,0)}% 円の中心\n−→ O x\nY=def=Yhankei{1}% 円の半径\nY=enniSessen=YC=Yhankei=YA=YT=YTT\nY=En=YC=Yhankei\nY=Drawline{=YA=YT=YC=YTT=YA=YC}%\nY=end{zahyou}}\n(cid:4) (cid:5)\n書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\n円の外部の点から円に引いた接線の接点を求める．\nY=enniSessen#1#2#3#4#5{%\n#1 : 円の中心\n#2 : 円の半径\n#3 : 円の外部の点\n#4 : 接点(1)\n#5 : 接点(2)\n2つの接点のうち\nx座標の小さい方\n等しいときは y座標の小さい方\nが #4 に入ります．\n171", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 179", "content": "14.4.3 二つの円の共通接線\n2つの円の共通外（内）接線を描画するためのコマンドがY=KTGAISessen, Y=KTNAISessen です。\n書式は\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=KTGAISessen#1#2#3#4#5#6#7#8\nY=KTNAISessen#1#2#3#4#5#6#7#8\n#1 : 円1の中心\n#2 : 円1の半径\n#3 : 円2の中心\n#4 : 円2の半径\n#5 : 共通接線1と円1の接点\n#6 : 共通接線1と円2の接点\n#7 : 共通接線2と円1の接点\n#8 : 共通接線2と円2の接点\nで，共通接線と円との接点を求め，Y=Tyokusen などで共通接線を引きます。その一例です。\n(cid:2) (cid:3)\n共通接線\n{Y=unitlength10mm=Ysmall=Ydrawaxisfalse\nY=begin{zahyou}(-5,5)(-5,5)%\nY=def=YCi{(-1,0)}=Ydef=Yri{1}%\nY=def=YCii{(2,1)}=Ydef=Yrii{2}%\nY=En=YCi=Yri=YEn=YCii=Yrii\nY=KTGAISessen=YCi=Yri=YCii=Yrii=YTi=YTii=YSi=YSii\nY=Kuromaru=YTi=YKuromaru=YTii=YKuromaru=YSi=YKuromaru=YSii\nY=Tyokusen[l]=YTi=YTii{}{}\nY=Tyokusen[l]=YSi=YSii{}{}\nY=KTNAISessen=YCi=Yri=YCii=Yrii=YTi=YTii=YSi=YSii\nY=Kuromaru=YTi=YKuromaru=YTii=YKuromaru=YSi=YKuromaru=YSii\nY=ennoSessen=YCi=YTi=Yhoukouv\nY=mTyokusen[l]=YTi=Yhoukouv{}{}\nY=ennoSessen=YCi=YSi=Yhoukouv\nY=mTyokusen[l]=YSi=Yhoukouv{}{}\nY=end{zahyou}}\n(cid:4) (cid:5)\n172", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 180", "content": "−→\n14.5\n半直線\n端点と方向角を六十分法で指定して半直線を描画するコマンドが Y=kHantyokusen です。\ny\n(cid:2) (cid:3)\n半直線（端点と方向角指定)\nY=begin{zahyou}(-2,2)(-1,3)%\nY=tenretu{A(1,1)e}%\nY=def=Ykaku{150}% −→ A\nY=kHantyokusen=YA=Ykaku\nY=Kuromaru=YA O x\nY=end{zahyou}%\n(cid:4) (cid:5)\n端点と方向ベクトルを指定する Y=mHantyokusen です。\ny\n(cid:2) (cid:3)\n半直線（端点と方向ベクトル指定)\nY=begin{zahyou}(-2,2)(-1,3)%\nY=tenretu{A(1,1)e}%\nY=def=Yhoukou{(-2,1)}% −→ A\nY=mHantyokusen=YA=Yhoukou\nY=Kuromaru=YA O x\nY=end{zahyou}%\n(cid:4) (cid:5)\n173", "tags": []}
{"title": "Page 181", "content": "端点と通過する1点を指定する Y=Hantyokusen です。\ny\n(cid:2) (cid:3)\n半直線（端点と通過する1点指定)\nB\nY=begin{zahyou}(-2,2)(-1,3)%\nY=tenretu{A(1,1)e;B(0,2)ne}%\n−→ A\nY=Hantyokusen=YA=YB\nY=kuromaru{=YA;=YB}%\nO x\nY=end{zahyou}%\n(cid:4) (cid:5)\nこれらの半直線の線種を変更するには，\n<sensyu=....>\nオプションを利用します。一例です。\n(cid:2) (cid:3)\n鎖線で半直線 y\nY=begin{zahyou}(-2,2)(-1,3)%\nB\nY=tenretu{A(1,1)e;B(0,2)ne}%\nY=Hantyokusen<%\n−→ A\nsensyu==Ychainline[.2][.1]>%\nY=A=YB\nO x\nY=kuromaru{=YA;=YB}%\nY=end{zahyou}%\n(cid:4) (cid:5)\n半直線の描画領域における端点を返すコマンドがY=HtyokuTです。半直線にラベルをつけたりす\nるのに便利でしょう。\n(cid:2) (cid:3)\nY=HtyokuT\ny\n(cid:7)\nY=begin{zahyou}[ul=10mm]%\n(-1.5,1.5)(-1.5,1.5)\nY=En=YO{1} → O x\nY=kHantyokusen=YO{60}\nY=Put=YHtyokuT[se]{$=Yell$}\nY=end{zahyou}\n(cid:4) (cid:5)\n174", "tags": []}
{"title": "Page 182", "content": "15\n関数のグラフ\n関数のグラフを描画するのに，Perlを用いる方法があります。\n(cid:2) y =cosx (cid:3)\nY=begin{zahyou}[ul=10mm](-5.5,5.5)(-1.2,1.5)\nY=def=YFx{cos(X)}\nY=YGraph=YFx\nY=end{zahyou}\n(cid:4) (cid:5)\ny\n→\nO x\n関数式の記述が簡単でお勧めですが，機種に依存する面もありますので別ファイルにしてありま\nす。samplePp.texをご覧ください。\n175", "tags": ["LaTeX", "中級者向け", "外部連携", "数式描画"]}
{"title": "Page 183", "content": "16\n空間座標\n16.1 Zahyou\n環境\nzahyou環境が平面座標を扱ったのに対して，Zahyou環境は空間座標を扱います。\n単純な例です。\n(cid:2) (cid:3)\n空間座標\n{Y=unitlength6mm=Yfootnotesize\nY=begin{Zahyou}(-1,3)(-1,3)(-1,4)%\nY=def=YO{(0,0,0)}\nY=def=YP{(1,2,3)}\nY=def=YH{(1,2,0)}\nY=def=YA{(1,0,0)}\nz\nY=def=YB{(0,2,0)}\n3 P(1,2,3)\nY=def=YC{(0,0,3)}\nY=iiiKuromaru=YP\nY=iiiPut=YP[ne]{P(1,2,3)} −→\nY=iiiDashline[40]{.1}{=YA=YH=YB} O 2 y\n1\nY=iiiDashline[40]{.1}{=YO=YH=YP=YC}\nx\nY=iiiPut=YA[n]{1}\nY=iiiPut=YB[n]{2}\nY=iiiPut=YC[w]{3}\nY=iiiPut=YO[nw]{O}\nY=iiiPut{(=YXmax,0,0)}[nw]{$x$}\nY=iiiPut{(0,=YYmax,0)}[e]{$y$}\nY=iiiPut{(0,0,=YZmax)}[e]{$z$}\nY=end{Zahyou}}\n(cid:4) (cid:5)\n簡単に解説します。\nまず，Zahyou環境は\nxの範囲，yの範囲，zの範囲\nを\n(xの下限,xの上限),(yの下限,yの上限),(zの下限,zの上限)\nの形で与えます。これらの値は，Zahyou環境内では，順に\nY=Xmin, =YXmax, =YYmin, =YYmax, =YZmin, =YZmax\nで引用することができます。\n点は Y=def=YP{(1,2,3)}のように3次元ベクトルで与えます。\n次いで，Y=iiiKuromaru=YPで点Pに黒丸を打ちます。座標平面で定義された多くのコマンドの先\n頭に‘iii’をつけた空間座標用のコマンドが定義されています。現時点で定義されているコマン\nドは次の通りです。\n176", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 184", "content": "Y=iiiPut, =YiiiPutStr\nY=iiiBunten\nY=iiiDrawline, =YiiiDashline, =YiiiArrowLine\nY=iiiTyokkakukigou, =YiiiHenKo\nY=iiiKuromaru, =YiiiSiromaru\nY=iiiKyori, =YiiiKyorii\nY=iiiAddvec, =YiiiSubvec, =YiiiMulvec\nY=iiiNuritubusi\nY=iiibGurafu\n空間特有のコマンドについては，次節以降でとりあげます。\nさて，座標軸の向き，単位長の変更についてのオプション機能です。\nZahyou環境の[...]オプションでx, y, z軸の単位ベクトルを指定できるようにしてあります。\nただし，それらは描画する平面を座標平面と見立てての成分表示です。デフォルトでは\nz軸：(0, 1)\ny軸：(1, 0)\nx軸は Y=kyokuTyoku(.667,-138)\nとなっています。これを変更してみます。\n(cid:2) (cid:3)\n基本単位ベクトルの変更\n{Y=unitlength6mm\nY=begin{Zahyou}%\n[(-.7,-.7)][(.7,-.7)][(0,.7)]%\n(-1,3)(-1,3)(-1,4)%\nY=def=YO{(0,0,0)}\nY=def=YP{(1,2,3)}\nY=def=YH{(1,2,0)}\nz\nY=def=YA{(1,0,0)} 3\nY=def=YB{(0,2,0)}\nY=def=YC{(0,0,3)} O P(1,2,3)\nY=iiiKuromaru=YP −→ 1\n2\nY=iiiPut=YP[ne]{P(1,2,3)}\nx y\nY=iiiDashline[40]{.1}{=YA=YH=YB}\nY=iiiDashline[40]{.1}{=YO=YH=YP=YC}\nY=iiiPut=YA[n]{1}\nY=iiiPut=YB[n]{2}\nY=iiiPut=YC[w]{3}\nY=iiiPut=YO[nw]{O}\nY=iiiPut{(=YXmax,0,0)}[nw]{$x$}\nY=iiiPut{(0,=YYmax,0)}[e]{$y$}\nY=iiiPut{(0,0,=YZmax)}[e]{$z$}\nY=end{Zahyou}}\n(cid:4) (cid:5)\n177", "tags": ["インストール", "中級者向け", "初心者向け", "図形描画", "基本操作", "環境構築", "関数"]}
{"title": "Page 185", "content": "16.2\n角錐\n角錐を描画するのにコマンドY=Kakusuiを用意しました。O(0, 0, 0), A(1, 0, 0), B(0, 1, 0)を頂\n点とする三角形OABを底面とし，C(0, 0, 1)を頂点とする角錐—四面体を描画してみます。\n(cid:2) (cid:3)\n角錐\n{Y=unitlength20mm=Yfootnotesize\nY=Drawaxisfalse\nY=begin{Zahyou}(0,1.1)(0,1)(0,1.1)\nC\nY=def=YO{(0,0,0)}\nY=def=YA{(1,0,0)}\nY=def=YB{(0,1,0)}\n−→\nY=def=YC{(0,0,1)}\nO\nB\nY=iiiPut=YA[w]{A}\nY=iiiPut=YB[e]{B}\nA\nY=iiiPut=YO[ne]{O}\nY=iiiPut=YC[n]{C}\nY=Kakusui{AB}{O}{C}\nY=end{Zahyou}}\n(cid:4) (cid:5)\nここでは，座標軸を描画しないように指定するのに，Y=Drawaxisfalseとしています。\nY=Kakusuiの書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Kakusui<#1>#2#3#4\n#1 : 角錐台を描画する際の切断面の位置 (0〜1)\n#2 : 見える頂点列\n#3 : 見えない頂点列\n#4 : 錐の頂点\n図の見えない部分の点線のスタイルは，デフォルトでは\nY=def=YiiiTensen{=YiiiDashline[40]{.1}}\nとなっていますが，これを再定義してみます。\n178", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 186", "content": "(cid:2) (cid:3)\nY=iiiTensenの再定義\n{Y=unitlength20mm=Yfootnotesize\nY=Drawaxisfalse\nY=def=YiiiTensen{=YiiiDashline[80]{.05}}\nY=begin{Zahyou}(0,1.1)(0,1)(0,1.1) C\nY=def=YO{(0,0,0)}\nY=def=YA{(1,0,0)}\nY=def=YB{(0,1,0)} −→\nO\nY=def=YC{(0,0,1)} B\nY=iiiPut=YA[w]{A}\nA\nY=iiiPut=YB[e]{B}\nY=iiiPut=YO[ne]{O}\nY=iiiPut=YC[n]{C}\nY=Kakusui{AB}{O}{C}\nY=end{Zahyou}}\n(cid:4) (cid:5)\n16.3\n角柱\n立方体，直方体，平行六面体を描画するためにY=Kakutyuuを用意してあります。平行六面体を\n描画してみます。\n(cid:2) (cid:3)\n角柱\n{Y=unitlength8mm=Yfootnotesize\nY=Drawaxisfalse\nY=begin{Zahyou}[][][(.2,1)]%\n(0,1.6)(0,3.1)(0,2.1)\nY=def=YO{(0,0,0)}\n−→\nY=def=YA{(1.5,0,0)}\nY=def=YC{(0,3,0)}\nY=def=YD{(0,0,2)}\nY=iiiAddvec=YA=YC=YB\nY=Kakutyuu{ABC}{O}{D}\nY=end{Zahyou}}\n(cid:4) (cid:5)\n直方体ではないことを示すため，z軸方向の単位ベクトルを変更した斜交座標系を用いています。\nY=Kakutyuuの書式です。\n179", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 187", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=Kakutyuu#1#2#3\n#1 : 見える頂点列\n#2 : 見えない頂点列\n#3 : 高さベクトル\n16.4\n直線と平面の交点\n直線と平面の交点を求めるコマンドは，次の4つを用意してあります。\nY=PandL, Y=Pandl, Y=pandL, Y=pandl\nここで，\nP は3点を指定した平面\np は点と法線ベクトルを指定した平面\nL は2点を指定した直線\nl は点と方向ベクトルを指定した直線\nを意味します。\n一例として直方体OABC-DEFGの対角線OFと3点A, C, Dを含む平面との交点Pを描画し\nてみます。\n180", "tags": []}
{"title": "Page 188", "content": "(cid:2) (cid:3)\n直線と平面\n{Y=unitlength7mm=Yfootnotesize\nY=Drawaxisfalse\nY=begin{Zahyou}(0,3)(0,6)(0,4)\nY=def=YO{(0,0,0)}\nY=def=YA{(2,0,0)}\nY=def=YC{(0,4,0)}\nY=def=YD{(0,0,3)}\nY=iiiAddvec=YA=YC=YB\nY=iiiAddvec=YA=YD=YE\nY=iiiAddvec=YC=YD=YG\nY=iiiAddvec=YB=YD=YF\nD\nG\nY=PandL=YA=YC=YD=YO=YF=YP\nY=iiiKuromaru=YP E F\nY=Kakutyuu{ABC}{O}{D} −→\nY=iiiNuritubusi{=YA=YC=YD=YA}\nY=iiiDrawline{=YC=YA=YD} O C\nY=iiiDrawline{=YF=YP} A B\nY=iiiDashline[60]{.1}{=YO=YP}\nY=iiiDashline[60]{.1}{=YC=YD}\nY=iiiPut=YO[se]{O}\nY=iiiPut=YA[s]{A}\nY=iiiPut=YB[s]{B}\nY=iiiPut=YC[se]{C}\nY=iiiPut=YD[ne]{D}\nY=iiiPut=YE[w]{E}\nY=iiiPut=YF[e]{F}\nY=iiiPut=YG[e]{G}\nY=end{Zahyou}}\n(cid:4) (cid:5)\n書式です。\n181", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 189", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=PandL#1#2#3#4#5#6\n3点#1, #2, #3を通る平面と，\n2点#4, #5を通る直線との交点を#6に\nY=Pandl#1#2#3#4#5#6\n3点#1, #2, #3を通る平面と，\n点#4を通り方向ベクトルが#5の直線との交点を#6に\nY=pandL#1#2#3#4#5\n点#1を通り法線ベクトルが#2の平面と，\n2点#3, #4を通る直線との交点を#5に\nY=pandl#1#2#3#4#5\n点#1を通り法線ベクトルが#2の平面と，\n点#3を通り方向ベクトルが#4の直線との交点を#5に\n16.5\n垂線\n座標平面で，点から直線に下した垂線の足を求めるコマンドY=Suisenの3次元版の話しです。\n書式です。\n(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=LSuisen#1#2#3#4\n点 #1 から直線 #2#3 へ下ろした垂線の足を #4 にセット\nY=lSuisen#1#2#3#4\n点#1から，点#2を通り，方向ベクトルが#3の直線への垂線\nの足を #4 にセット\nY=pSuisen#1#2#3#4\n点#1から，#2を通り法線ベクトルが#3である平面\nに下ろした垂線の足を#4に与える。\nY=PSuisen#1#2#3#4#5\n点#1から，三点#2,#3,#4を通る平面\nに下ろした垂線の足を#5に与える。\n例として，四面体OABCの頂点Oから底面ABCに下した垂線OPと，Oから線分ABに下し\nた垂線OHを作図します。\n182", "tags": []}
{"title": "Page 190", "content": "(cid:2) (cid:3)\n垂線\n{Y=unitlength20mm=Yfootnotesize\nY=Drawaxisfalse\nY=begin{Zahyou}(0,1.2)(0,1.2)(0,1.2)\nY=def=YO{(0,0,0)}\nY=def=YA{(1,0,0)}\nY=def=YB{(0,1,0)}\nY=def=YC{(0,0,1)}\nY=PSuisen=YO=YA=YB=YC=YP\nY=LSuisen=YO=YA=YB=YH\nC\nY=iiiKuromaru=YP\nY=iiiKuromaru=YH\nY=Kakusui{AB}{O}{C}\n−→\nY=iiiNuritubusi{=YO=YC=YH=YO} P\nO\nY=iiiDrawline{=YC=YH} B\nH\nY=iiiDashline[80]{0.05}{=YH=YO=YP}\nA\nY=iiiTyokkaku=YP[=YO]=YC\nY=iiiTyokkaku=YH[=YO]=YA\nY=iiiTyokkaku=YH[=YC]=YB\nY=iiiPut=YA[s]{A}\nY=iiiPut=YB[s]{B}\nY=iiiPut=YC[n]{C}\nY=iiiPut=YO[w]{O}\nY=iiiPut=YP[e]{P}\nY=iiiPut=YH[s]{H}\nY=end{Zahyou}}\n(cid:4) (cid:5)\n16.6\n空間曲線\n座標平面で媒介変数表示された曲線を描画するコマンドY=bGurafu の3次元版がY=iiibGurafu\nです。書式は\n183", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 191", "content": "(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)(cid:3)(cid:2)\nY=iiibGurafu(#1)(#2)#3#4#5#6#7\n#1 : t の刻み値（デフォルト値は 0.05 ）\n#2 : 点線で描画するときの描画する部分の t のレンジ\n#3 : x=f(t)\n#4 : y=g(t)\n#5 : z=h(t)\n#6 : t の始め値\n#7 : 終り値\n具体例として，円柱螺旋を描画してみましょう。\n(cid:2) (cid:3)\n円柱螺旋\n{Y=unitlength20mm=Yfootnotesize\nY=Drawaxisfalse\nY=begin{Zahyou}[(-1,0)][(0,-.5)][(0,.2)]%\n(-2,2)(-2,2)(-1,18)\nY=def=YFx#1#2{=YCos{#1}#2}\nY=def=YFy#1#2{=YSin{#1}#2}\nY=def=YFz#1#2{=Yedef#2{#1}}\nY=def=YFo#1#2{=Yedef#2{0}}\nY=def=YFi#1#2{=Yedef#2{=Ytmax}}\nY=Mul3=YPie=YPiii\nY=Mul4=YPie=Ytmax\n{Y=thicklines\nY=iiibGurafu=YFx=YFy=YFz{0}{=YPie}\nY=iiibGurafu=YFx=YFy=YFz{=YPii}{=YPiii}\nY=iiibGurafu(.05)(.02)=YFx=YFy=YFz{=YPie}{=YPii}\nY=iiibGurafu(.05)(.02)=YFx=YFy=YFz{=YPiii}{=Ytmax}}\nY=iiibGurafu=YFx=YFy=YFo{0}{=YPie}\nY=iiibGurafu(.05)(.02)=YFx=YFy=YFo{=YPie}{=YPii}\nY=iiibGurafu=YFx=YFy=YFi{0}{=YPii}\nY=iiiDrawline{(1,0,0)(1,0,=Ytmax)}\nY=iiiDrawline{(-1,0,0)(-1,0,=Ytmax)}\nY=end{Zahyou}}\n(cid:4) (cid:5)\n184", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 192", "content": "−→\nなお，空間曲線を近似する折れ線を得るコマンドY=iiiBKinziOresenもありますが，これはperl\nとの連携機能を必要とします。\n185", "tags": []}
{"title": "Page 193", "content": "17\n作表\nこの節の環境，コマンド類は emathT.sty で定義されています。したがって，プリアンブルで\nY=usepackage{emathT}\nを宣言しておく必要があります．\n17.1\n列幅指定\n表を作成するには，tabular環境，array環境があります．これらの環境で作成される表の列幅は，\n列の中に置かれる内容によって自動的に定まります．\n(cid:2) (cid:3)\n表の幅\nY=begin{tabular}{|*{4}{c|}}=Yhline\n& かみ & いし & はさみ Y=Y=Y=hline\nかみ & & ○ & × Y=Y=Y=hline\nいし & × & & ○ Y=Y=Y=hline\nはさみ & ○ & × & Y=Y=Y=hline\nY=end{tabular}\n(cid:4) (cid:5)\nかみ いし はさみ\nかみ ○ ×\n−→\nいし × ○\nはさみ ○ ×\nこれは便利ですが，ときには列幅を指定したいこともあります．欄指定子 l/c/r を発展させて\nL/C/R を用意しました．これらは，列の幅を引数に取ります．その一例です．\n(cid:2) (cid:3)\n列幅一定の表\nY=begin{tabular}{|*{4}{C{4zw}|}}=Yhline\n& かみ & いし & はさみ Y=Y=Y=hline\nかみ & & ○ & × Y=Y=Y=hline\nいし & × & & ○ Y=Y=Y=hline\nはさみ& ○ & × & Y=Y=Y=hline\nY=end{tabular}\n(cid:4) (cid:5)\nかみ いし はさみ\nかみ ○ ×\n−→\nいし × ○\nはさみ ○ ×\n186", "tags": ["アニメーション", "インストール", "上級者向け", "初心者向け", "環境構築"]}
{"title": "Page 194", "content": "17.2\n表の罫線を太く\n17.2.1 Y=arrayrulewidth\n表の罫線全部を太くするのは，LATEXで用意されているY=arrayrulewidthの値を変更すること\nで実現できます。\n(cid:2) (cid:3)\nY=arrayrulewidthの変更\nY=arrayrulewidth1pt=Yrelax\nA B C D\nY=begin{tabular}{|c|c|c|c|}=Yhline\nA & B & C & D =YY=Y=hline → 1 2 3 4\n1 & 2 & 3 & 4 =YY=Y=hline a b c d\na & b & c & d =YY=Y=hline\nY=end{tabular}\n(cid:4) (cid:5)\n17.2.2 外枠のみを太く\n外枠だけを太くしたい，など一部の罫線を太くするには，面倒な手順を踏まねばなりませんの\nで，マクロ化することにしました。\n横罫線を太くするために\nY=hline, =Ycline\nにかえて，それぞれ\nY=hlineb, =Yclineb\nを新設しました。これらの罫線の太さはY=arrarulewidthbで指定します。デフォルトは1ptとし\nてあります。縦罫線を太くする位置には\n|\nにかえて\nI\nを用います。\nでは，これらを用いて外枠だけを太くしてみましょう。\n(cid:2) (cid:3)\n外枠を太く\nY=begin{tabular}{Ic|c|c|cI}=Yhlineb\nA B C D\nA & B & C & D =YY=Y=hline\n→ 1 2 3 4\n1 & 2 & 3 & 4 =YY=Y=hline\na b c d\na & b & c & d =YY=Y=hlineb\nY=end{tabular}\n(cid:4) (cid:5)\n187", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 195", "content": "17.2.3 二重罫線との併用\nさらに，見出し行・列と表の内容との境界を二重線にすることもできます。この部分はhhline.sty\nの一部を修正しています。なお，emathT.styはその中で，array.styとhhline.styを読み込んでいます。\n(cid:2) (cid:3)\n二重罫線も\nY=begin{tabular}{Ic||c|c|cI}=Yhlineb\nA B C D\nA & B & C & D =YY=Y=hhline{I=#=|=|=I}\n→ 1 2 3 4\n1 & 2 & 3 & 4 =YY=Y=hline\na b c d\na & b & c & d =YY=Y=hlineb\nY=end{tabular}\n(cid:4) (cid:5)\n17.2.4 太罫線の太さ\n太罫線の太さはY=arrayrulewidthbで決まりますから，もっと太くしたければ\n(cid:2) (cid:3)\nY=arrayrulewidthb\nY=arrayrulewidthb=2pt=Yrelax\nA B C D\nY=begin{tabular}{Ic||c|c|cI}=Yhlineb\nA & B & C & D =YY=Y=hhline{I=#=|=|=I} → 1 2 3 4\n1 & 2 & 3 & 4 =YY=Y=hline a b c d\na & b & c & d =YY=Y=hlineb\nY=end{tabular}\n(cid:4) (cid:5)\n17.2.5 特定のブロック枠を太く\n(cid:2) (cid:3)\n一部分を太罫線で\nY=begin{tabular}{|c|c|c|c|}=Yhlineb\nA & B & C & D =YY=Y=hline\nY=noalign{=Yvskip-=Yarrayrulewidth}\nY=clineb{2-3}\nY=multicolumn{1}{|cI}{1}\n& Y=multicolumn{1}{c|}{2}\nA B C D\n& Y=multicolumn{1}{cI}{3}\n→ 1 2 3 4\n& 4 Y=Y=\na b c d\nY=noalign{=Yvskip-=Yarrayrulewidthb\nY=vskip=Yarrayrulewidth}\nY=clineb{2-3}\nY=noalign{=Yvskip=Yarrayrulewidthb\nY=vskip-=Yarrayrulewidth}=Yhline\na & b & c & d =YY=Y=hlineb\nY=end{tabular}\n(cid:4) (cid:5)\n188", "tags": []}
{"title": "Page 196", "content": "17.3\n罫線を点線で\n罫線を点線で引くには，arydshln.styを用いることが出来ます。しかし，このスタイルファイル\nはhhline.styと相性が悪いので，emathT.styとの併用については，emathWiki の arydshln-LO-T\nなるページをご覧ください。\n17.4\nカラムに斜線\nまた，この環境内では，Y=emTsya コマンドで欄に斜線を引くことができます．\n(cid:2) (cid:3)\nカラムに斜線\nY=begin{tabular}{|L{6zw}|*{3}{C{4zw}|}}=Yhline\nY=emTsya[r]<=Yhyoumidasi{甲}{乙}> & かみ & いし & はさみ Y=Y=Y=hline\nかみ & Y=emTsya[r] & ○ & × Y=Y=Y=hline\nいし & × & Y=emTsya[r] & ○ Y=Y=Y=hline\nはさみ & ○ & × & Y=emTsya[r] =YY=Y=hline\nY=end{tabular}\n(cid:4) (cid:5)\n甲 乙 かみ いし はさみ\nかみ ○ ×\n−→\nいし × ○\nはさみ ○ ×\n詳しくは emathWiki の emTsya なるページをご覧ください。\n189", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 197", "content": "18\n囲み\n18.1 rectbox\n環境\nこの節で紹介するrectbox環境はemathPb.styで定義されています。\n版面，左右いっぱいに拡がる罫線囲みです。\n(cid:2) (cid:3)\nrectbox環境\nY=begin{rectbox}[item=~見出し~]\nあああああああああああああああああああ\nあああああああああああああああああああ\nあああああああああああああああああああ\nいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいい\nY=end{rectbox}\n(cid:4) (cid:5)\n↓\n見出し\nああああああああああああああああああああああああああああああああああああああああ\nあああああああああああああああああ\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\nいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいいい\n詳しくは，emathWiki の「枠囲み」のページをご覧ください。\n190", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 198", "content": "19\nその他\n19.1\n線の太さ\n線の太さは3種類用意されています。（デフォルトは Y=thinlines です。）\n(cid:2) (cid:3)\n線の太さ\nY=begin{picture}(3,4)%\nY=thinlines\nY=put(0,3){=Ydrawline(0,0)(3,0)}%\n{Y=thicklines −→\nY=put(0,2){=Ydrawline(0,0)(3,0)}}%\n{Y=Thicklines\nY=put(0,1){=Ydrawline(0,0)(3,0)}}%\nY=end{picture}\n(cid:4) (cid:5)\nもっと太くしたい，というときは Y=allinethickness というコマンドもeepic.styで用意されて\nいます。引数に太さを与えます。\n(cid:2) (cid:3)\nY=allinethickness\nY=begin{picture}(3,2)%\n{Y=allinethickness{2pt}% −→\nY=put(0,1){=Ydrawline(0,0)(3,0)}}%\nY=end{picture}\n(cid:4) (cid:5)\n191", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 199", "content": "索 引\nY=Absvec, 133 Y=Gaisin, 118\nY=Addvec, 133\nY=Hasen, 9\nY=Argvec, 133\nY=hasen, 8\nY=ArrowArc, 78\nY=Hasen*, 10\nY=ArrowHeadAngle, 15\nY=HenKo, 36\nY=ArrowHeadType, 16\nY=HtyokuT, 174\nY=ArrowLine, 14\nY=iiiAddvec, 177\nY=Bousetuen, 121\nY=iiiArrowLine, 177\nY=BousetuenHankei, 122\nY=iiibGurafu, 183\nY=Bousin, 121\nY=iiiBKinziOresen, 185\nY=CandC, 96 Y=iiiBunten, 177\nY=Candk, 95 Y=iiiDashline, 177\nY=CandL, 94 Y=iiiDrawline, 177\nY=Candl, 94 Y=iiiHenKo, 177\nY=Chainline, 10 Y=iiiKuromaru, 176, 177, 181\nY=changeArrowHeadSize, 15 Y=iiiKyori, 177\nY=iiiKyorii, 177\nY=Daen, 81\nY=iiiMulvec, 177\nY=Daen*, 104\nY=iiiNuritubusi, 177\nY=Daen**, 109\nY=iiiPut, 177\nY=Daenko, 82\nY=iiiPutStr, 177\nY=Daenko*, 105\nY=iiiSiromaru, 177, 181\nY=Daenko**, 109\nY=iiiSubvec, 177\nY=Dashline, 6\nY=iiiTensen, 178\nY=drawaxisfalse, 139\nY=iiiTyokkakukigou, 177\nY=Drawline, 4\nY=Drawlines, 10 Y=Kaiten, 134\nY=drawXaxis, 139 Y=Kakukigou, 52\nY=drawXYaxis, 139 Y=Kakusui, 178\nY=drawYaxis, 139 Y=Kakutyuu, 179\nY=kousi, 21\nY=emathPut, 27\nY=kSuisen, 91\nY=En, 74\nY=kTaisyouten, 91\nY=En*, 102\nY=KTGAISessen, 172\nY=En**, 108\nY=KTNAISessen, 172\nY=Enko, 75\nY=kTyokusen, 167\nY=enniSessen, 171\nY=Kuromaru, 162\nY=ennoSessen, 170\nY=kuromaru, 163\nY=KuromaruHankei, 162\nY=Gaisetuen, 118\n192", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 200", "content": "Y=kyokuTyoku, 19 Y=sensyu, 167\nY=Kyori, 163 Y=Siromaru, 162\nY=Kyorii, 164 Y=siromaru, 163\nY=sPut, 38\nY=Landk, 89, 90\nY=Subvec, 133\nY=LandL, 87\nY=Suisen, 90\nY=Landl, 88\nY=landl, 88 Y=Taisyouten, 91\nY=lR, 119, 130 Y=Takakkei, 18\nY=lr, 121 Y=tenretu, 32, 33\nY=lRR, 130 Y=tenretu*, 34\nY=LSuisen, 182 Y=tentoTyokusen, 170\nY=lSuisen, 182 Y=tentotyokusen, 169\nY=Touhenkigou, 49\nY=mSuisen, 91\nY=touhenkigou, 50\nY=mTaisyouten, 91\nY=toukakukigou, 58\nY=mTyokusen, 166\nY=toukakukigou*, 58\nY=Mulvec, 133\nY=Toukokigou, 80\nY=Tyokkakukigou, 59\nY=Naisetuen, 120\nY=tyokkakukigou, 61\nY=Naisin, 119\nY=Tyokusen, 164\nY=Nuritubusi, 102\nY=tyokusen, 168\nY=Nuritubusi*, 108, 109\nY=Nvec, 133\nY=vBousin, 122\nY=vecXY, 133\nY=oresen, 34\nY=vGaisin, 119\nY=ougigata, 80\nY=vNaisin, 121\nY=ougigata*, 103\nY=ougigata**, 109\nxpos オプション, 160\nY=xscale, 146\nY=PSuisen, 182\nY=pSuisen, 182\nY=Yasen, 12\nY=Put, 24\nY=yasen, 12\nY=PutStr, 32\nY=Yogen, 132\nY=yogen, 131\nY=rotObrace, 48\nypos オプション, 161\nY=rotUbrace, 46\nY=yscale, 146\nY=Rotvec, 133\nY=yumigata, 80\nY=rtenretu, 35\nY=yumigata*, 104\nY=rtenretu*, 36\nY=yumigata**, 109\nY=saikoro, 22\nZahyou 環境, 176\nY=Seigen, 130\nzahyou 環境, 152\nY=seigen, 130\nY=zahyouMemori, 152\nY=seigenR, 130\nY=Zyuusin, 117\n193", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 1", "content": "K TCindy 関数リファレンス\nE\nKETCindy Project Team\n2021年8月5日\n- 第3.2版 -\n目次\n1 平面の図形とグラフ 2\n1.1 設定・定義 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n1.1.1 環境設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n1.1.2 描画設定・定義 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n1.2 描画 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n1.2.1 書式とオプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n1.2.2 点・線分・直線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n1.2.3 曲線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n1.2.4 関数のグラフ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n1.2.5 文字 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n1.2.6 マーキング . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n1.3 プロットデータの操作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n1.4 計算 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n1.5 値の取得と入出力 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\n1.6 作表 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n1.7 ファイル操作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n1.8 Tikzコマンドの利用. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n1.9 その他 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70\n2 他の数式処理ソフトなどとの連携 78\n2.1 Rとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n2.1.1 Rの関数の利用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n2.1.2 TEXのコマンド書き出し（メタコマンド） . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n2.2 KETCindyでのメタコマンドの利用例 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n2.3 Maximaとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n2.4 Wolfram Engineとの連携. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n2.5 Risa/Asirとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n2.6 FriCAS(Axiom)との連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n2.7 MeshLabとの連携. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n2.8 表計算ソフトとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n3 アニメーションPDF 102\n3.1 概要 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n1", "tags": ["KeTCindy", "LaTeX", "アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "基本操作", "外部連携", "数式描画", "構文", "環境構築"]}
{"title": "Page 2", "content": "3.2 関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n3.3 制作例 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n4 KeTスライド 106\n4.1 概要と制作手順 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106\n4.2 コンテンツファイル . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n4.3 関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n5 KETCindy3D 114\n5.1 概要 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n5.2 設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n5.3 描画 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n5.3.1 点・線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n5.3.2 多面体 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\n5.3.3 曲面 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124\n5.4 プロットデータの操作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n5.5 その他 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139\n6 KeTJS 146\n6.1 CindyJSとKeTJS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146\n6.2 KeTJSの動作環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146\n6.3 KeTJSの設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\n6.4 KeTJSのコマンド . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148\n6.5 入力窓の利用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\n7 付録 150\n7.1 用語解説 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\n7.2 Cinderellaの作図ツール . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\n7.3 他のテキストエディタの使用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\n7.4 色名とカラーコード一覧 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n7.5 点の作図についての比較表 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\n8 関数一覧 154\n2", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "基本操作", "外部連携", "構文", "環境構築"]}
{"title": "Page 3", "content": "1 平面の図形とグラフ\n1.1 設定・定義\n1.1.1 環境設定\n関数 Ketinit(options)\n機能 KETCindyを初期化する。平面図形ではDrawスロットに，空間図形ではInitialization スロットの冒頭に記\n述する必要がある。\n説明 option 作業サブフォルダ\n通常は不要で，Ketinit() だけでよい。\n関数 Initglist(), Setglist(), Addglist()\n機能 ketlibスロットで作られる描画データを描画リストに追加する。\n説明 Implicitplot,Hatchdataなど実行時間のかかるコマンドをfiguresスロットにおくと，その都度実行されてし\nまう。それを避けるためketlibスロットにおいたときに用いる。\nInitglist(); // ketlibスロットで\nImplicitplot(''1'',fun,rng);\nSetglist();\nKetinit(); // figuresスロットで\nAddglist();\n関数 Setfiles(filename）\n機能 出力するファイル名の設定\n説明 出力するTexのファイル名を指定する。\n出力するファイル名は 初期設定では，作図しているCinderellaのファイル名。\nたとえば，triangle.cdy で作図して出力すると，triangle.tex ができる。\nこれに対し，triangle.cdy で作図しているときに，grav.tex で出力したい場合は\nSetfiles(\"grav\");\nとすると，grav.tex ができる。\n関数 Setparent(filename）\n機能 Parent ボタンで出力するファイル名の設定\n説明 Figpdf() を使ってParent ボタンで出力するTexのファイル名を指定する。\nParent ボタンで出力するファイル名は 初期設定がないので，指定する必要がある。\nたとえば，triangle.cdy で作図しているときに，図サイズの grav.pdf を作る場合，\nSetparent(\"grav\");\nとすると，図のTeXファイルtriangle.tex と PDFを作る grav.tex ができ，ここから grav.pdf ができる。\n関数 Changework(パス名）\n機能 作業ディレクトリを指定（変更）する\n説明 作業ディレクトリは， 初期設定では，現在作図しているファイルのあるフォルダ（ディレクトリ）の fig フォ\nルダである。これを変更する。\n関数 Addpackage(パッケージ名)\n3", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "図形描画", "外部連携", "構文", "環境構築", "関数"]}
{"title": "Page 4", "content": "機能 TeXのパッケージを追加する\n説明 プレビュー用のTeXソースにパッケージを追加する。\n【例】emathパッケージを追加する。\nAddpackage(\"emath\");\nまたは\nAddpackage([\"emath\"]);\nにより，プレビュー用のTeXのプリアンブルに\n\\usepackage{emath}\nが追加されて，emath のコマンドが利用できる。\n注）初期設定では，次のパッケージを利用している。\nketpic, ketlayer, amsmath, amssymb, graphicx, color\n関数 Usegraphics(”tpic”/”pict2e”/”tikz”)\n機能 TeXのグラフィクスパッケージを変更する。\n説明 デフォルトのパッケージは Pluginsにある\"ketcindy.ini\" に記述されているが，これを変更する。\n⇒関数一覧\n4", "tags": ["KeTCindy", "構文"]}
{"title": "Page 5", "content": "1.1.2 描画設定・定義\n関数 Addax(0または1)\n機能 座標軸の表示\n説明 引数が1のとき座標軸を描き，0のとき描かない。初期設定は1で，座標軸を描かない場合のみ Addax(0) と\nすればよい。\n【例】三角形を描く\n左図が 初期設定（座標軸表示） Addax(0) をつけると右図になる。\nListplot([B,A,C]);\nLetter([A,\"ne\",\"A\",B,\"se\",\"B\",C,\"se\",\"C\"]);\ny\nA A\nx\nOB C B C\n関数 Setax()\n機能 座標軸の書式を設定する。\n説明 Cinderellaの描画面には反映されない。（座標軸は描かれない）\n引数はリストで与え，要素は順番に\n1. 軸の形状（直線は ”l” ，矢印は ”a”） 初期設定は直線\n矢印の大きさの倍率を指定するときは，”a0.5”のようにする。\nまた，矢印のスタイルは Setarrowで指定する。\n2. 横軸名 初期設定は \"x\"\n3. 横軸名の位置 初期設定は \"e\"\n4. 縦軸名 初期設定は \"y\"\n5. 縦軸名の位置 初期設定は \"n\"\n6. 原点名 初期設定は \"O\"（文字として書かれる）\n7. 原点名の位置 初期設定は \"sw\"\n8. 線種\n9. 線の色\n10. ラベルの色\nそれぞれダブルクォートでくくる。色は，色名が使える。”red” など。\n10の引数のうちn番目だけを指定する場合は，[n,”内容”]で指定できる。\nまた，後方は省略できる。\n【例】座標軸の先端を矢印にし，原点の北西にOを書く。\nSetax([\"a\",\"\",\"\",\"\",\"\",\"\",\"nw\"]);\n【例】原点の北西にOを書く。\nSetax([7,\"nw\"]);\n【例】軸を赤の点線にする。\n5", "tags": []}
{"title": "Page 6", "content": "Setax([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"do\",\"red\"]);\n【例】先端を矢印にし，横軸をθ，縦軸をxにして矢じりの左側に書く。\nSetax([\"a\",\"\\theta\",\"\",\"x\",\"w\"]);\nx\nθ\nO\n関数 Drwxy(), Drwxy(options)\n機能 指定する手順で座標軸を描く\n説明 座標軸は 初期設定では最後に描かれるが，座標軸上に白抜きの点を表示するなど，先に描くことが必要な場合\nに用いる。描画面には座標軸は表示されない。\noptions は次のリストである。\n[”Origin=”, ”Xrng=”, ”Yrng=”]\n【例】点(−π, 0)と(π, 0)を白抜きの点で表示する。\ny\nSetax([7,\"se\"]);\nSetpt(5);\nPointdata(\"1\",[[-pi,0]],[\"Inside=white\"]); O x\nDrwxy();\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"dr\",\"Num=200\"]);\nPointdata(\"2\",[[pi,0]],[\"Inside=white\"]);\nこのスクリプトでは， Pointdata(\"1\",[[-pi,0]],[\"Inside=white\"]);を実行したのち座標軸を描き，次\nに，y = sinx のグラフを描いてから，再び [\"Inside=white\"]);にして実行するので，点(−π,0) の上を\n座標軸が通り，点(π,0)は座標軸とグラフの上を通るので白抜きになる。\n⇒関数一覧\n関数 Definecolor(色名 , 定義のリスト)\n機能 色名を定義する\n説明 ユーザー命名の色名を定義する。定義リストは RGBまたはCMYKのリスト\n各色０〜１の範囲で指定する。定義した色名は，Setcolor(color,options)で使うことができる。\nなお，KETCindyでは，68色を色名で使うことができる。色の名称はカラーコード一覧 参照。\n【例】暗い紫色を darkmaz の名称で定義して使う。\nDefinecolor(\"darkmaz\",[0.8,0,0.8]);\nSetcolor(\"darkmaz\");\n関数 Setcolor(color,options）\n機能 描画色の設定\n説明 引数colorはカラーコードまたは色の名称。\nカラーコードはRGBまたはCMYKをリストで与える。各色０〜１。\n色の名称はカラーコード一覧 の68色が指定できる。\n6", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 7", "content": "【例】Cを大きさがBと一致するようにとり，Anglemarkと矢印を描く\nC.xy=|B.xy|/|C.xy|*C.xy;\nListplot([B,A,C]);\nSetcolor(\"red\");\nAnglemark(\"1\",[B,A,C],[3]); //size=3\nArrowhead(1,\"ag1\",[2]); //position=1,size=2\n座標軸を描く場合は，このあと Setcolor(\"black\") で黒に戻しておかないと，座標軸が赤で表示されてしま\nうので要注意。\ny\nx\nO\n⇒関数一覧\n7", "tags": []}
{"title": "Page 8", "content": "関数 Deffun(関数名 , 定義のリスト)\n機能 関数を定義する\n説明 関数定義は，CindyScript の関数定義 f(x):=式 でもできるが，Deffun()を使うことにより，Rでこの関数を\n利用することができる。目的に応じて使い分けるとよい。\n式のリストには if文を用いた場合分けの関数式を記述することもできる。\n1\n【例】f(x)= を定義し，グラフを描く。\nx2+1\nDeffun(\"f(x)\",[\"regional(y)\",\"y=1/(x^2+1)\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\");\ny\nx\nO\n{\n1 (x≥0)\n【例】f(x)= を定義してグラフを描く。\n−1 (x<0)\nDeffun(\"f(x)\",[\"regional(y)\",\"if(x>=0,y=1,y=-1)\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Dis=1\",\"Num=100\"];\ny\nx\nO\nif 文はネストすることができる。\nDeffun(\"f(x)\",[\"regional y\",\"if(x>1,y=1,if(x>-1,y=x,y=-1))\",\"y\"]);\ny\nx\nO\n関数 Defvar(文字列)\n機能 変数を定義する\n説明 変数の定義をRと共有する。\n【例】Defvar(\"const=3\");\n複数の変数を定義するときはリストにする。\n【例】Defvar([“a”,3,”b”,1]);\n8", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 9", "content": "関数 Fontsize(記号)\n機能 フォントサイズを設定する\n説明 次に Fontsize() を実行するまで有効\n記号は，”t” , ”ss” , ”f”, ”s” , ”n” , ”la”,”La”, ”LA”, ”h” , ”H”\n【例】作図ツールの「点を加える」で，A〜Gの点をとっておく。小さい方からいくつか表示する。\nPointdata(\"1\",[A,B,C,D,E,F,G],[\"Size=2\"]);\nFontsize(\"t\"); Letter([A,\"s2\",\"A\"]);\nFontsize(\"ss\"); Letter([B,\"s2\",\"B\"]);\nFontsize(\"s\"); Letter([C,\"s2\",\"C\"]);\nFontsize(\"la\"); Letter([D,\"s2\",\"D\"]);\nFontsize(\"La\"); Letter([E,\"s2\",\"E\"]);\nFontsize(\"h\"); Letter([F,\"s2\",\"F\"]);\nFontsize(\"H\"); Letter([G,\"s2\",\"G\"]);\nA B C D E F G\n関数 Ptsize(n) , Setpt(n)\n機能 表示する点の大きさを設定する。\n説明 Ptsize() と Setpt() は同じである。 初期設定は１\n全体の点の大きさを設定する。点の大きさを個々に変えたい場合は，sizeオプションを用いる。\n【例】１から4までの点の大きさ\nあらかじめ，Cinderellaの作図ツールで点A,B,C,Dを作図しておく。\nPointdata(\"1\",A,[\"Size=1\"]);\nPointdata(\"2\",B,[\"Size=2\"]);\nPointsize 1 2 3 4\nPointdata(\"3\",C,[\"Size=3\"]);\nPointdata(\"4\",D,[\"Size=4\"]);\n⇒関数一覧\n関数 Setmarklen(数)\n機能 座標軸の目盛の長さを設定する\n説明 Htickmark() , Vtickmark() で座標軸に目盛を入れるとき，その長さを設定する。\n関数 Setorigin(座標）\n機能 描画する座標軸の原点を設定（移動）する。座標系は変化しない。\n説明 描画する座標軸の原点を引数の座標とする。座標は点の識別名でもよい。\n【例】原点を (3,2) として座標軸を描く。\nSetorigin([3,2]);\n原点を点Aの位置にして座標軸を描く。\nSetorigin(A);\n【例】原点は(3,2)に移動するが，スクリプトではもとの座標系を使う。\nSetorigin([3,2]);\nListplot([A,B,C,A]);\nPointdata(\"1\",[1,1],[\"Size=3\"]);\n9", "tags": []}
{"title": "Page 10", "content": "Letter([[1,1],\"s2\",\"P\"]);\n左が実行時のCinderellaの画面，右がTEXの結果。\ny\nx\nO\nP\n関数 Setpen(数）\n機能 線の太さの初期値を設定する\nListplot() などの描画関数のオプション dr で，個々の太さは指定できる。\n関数 Setscaling(倍率)\n機能 縦方向の倍率を設定する。倍率は実数またはリスト。実数の場合は縦方向，リストの場合は[横方向，縦方向]\nの指定となる。\n説明 2次関数の応用問題などでは，グラフが縦に大きくなる場合があり，y 軸方向のスケーリングを変えたいこと\nがよくある。次のスクリプトは，f(x)=−x2+10x のグラフを縦軸方向を半分にして描くものである。\ny\nSetscaling(0.5); 25\nA.xy=[0,25/4]; 2\nB.xy=[5/2,25/4];\nC.xy=[5/2,0];\nListplot([A,B],[\"do\"]);\nListplot([C,B],[\"do\"]);\nPlotdata(\"1\",\"-2*x^2+10*x\",\"x\");\nLetter([[5,0],\"s2w\",\"5\",[0,25/2],\"w2\",\n\"$\\frac{25}{2}$\",C,\"s4\",\"$\\frac{5}{2}$\"]);\nx\nO 5 5\n2\nここで，点A,Bの座標が\nA.xy=[0,25/4];\nB.xy=[5/2,25/4];\nとなっていることに注意されたい。y座標をあらかじめ半分にしている。すなわち，Cinderellaで作図した幾\n何要素に対してはSetscalingは無効である。これは，Putpoint関数を用いて点の位置を決めても同じである。\nたとえば，次のスクリプトでは，Cinderellaの画面上では2本の線分が点Bでつながるが，書き出されたTEX\nの図では離れてしまう。\nSetscaling(0.5);\nPutpoint(\"A\",[0,2]);\nPutpoint(\"B\",[2,2]);\nListplot([A,B]);\nListplot(\"1\",[[0,0],[2,2]]);\n関数 Setunitlen(文字列)\n機能 単位長を設定する。 初期設定は 1cm。\nこの関数は，スクリプトの初めの方に書くのがよい。\n【例】Setunitlen(”8mm”)\n10", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 11", "content": "関数 Unscaling(plotdata)\n機能 scalingされたデータを論理値化する。\n関数 Setwindow(xの範囲, yの範囲)\n機能 出力する描画領域を設定する。\n説明 出力する描画領域は，通常は2点SWとNEを対角とする矩形領域である。\nこの2点をドラッグすることによりビジュアルに描画領域を決められる。\nしかし，これとは別に出力範囲を設定したい場合にこの関数を用いる。\nまた，表を作成したときは，表の範囲が出力範囲として優先される（Tabledata()を実行したとき）ので，表\n外に図を描いた場合は，最後にこの関数で出力範囲を指定して書き出す。\n【例】Setwindow([-5,5],[-1,3]);\n⇒関数一覧\n1.2 描画\n1.2.1 書式とオプション\n描画関数は曲線などを作図する関数である。\n基本的な書式は次の通り。\n関数名(name , 点リストなど , options);\nname は，プロットデータの名称で，関数ごとに決められた頭部のあとに付けられる。たとえば，線分を描く\nListplot() でできるプロットデータは，頭部が”sg”であり，nameを”1”とすれば，”sg1” という名称のプロットデー\nタができる。name指定は不要の場合もあり，その場合は KETCindyが自動的に名称を作成する。なお，name に演\n算記号は使えないので，番号として負の数は使えない。\n点リストなどには，点の座標，点の識別名，複数の点のリスト，複数の点を示す文字列などがあり，関数によって\n異なる。点はCinderellaで作図した幾何要素の点を利用できる。\noptionsは，線種・表示する文字列・解像度・出力の有無などを指定するオプション群。\n線種はつぎの4通り。 初期設定は実線。\n”dr, n” 太さnの実線で描く。\n”da,m,n” 破線を描く。\nmは破線の長さ，nは破線の間隔(m,nは省略可)\nm,n オプションはCinderellaの描画面には反映されない。\n”id,m,n” ギャップからはじまる破線を描く。\n”do,m,n” 点線で描く。\nmは点の間隔，nは太さ(m,nは省略可)\n描画色指定は，RGBまたはCMYKのリストで指定するか，色名を用いる。\n【例】\"Color=[0,0.7,0]\" で暗い緑になる。\n出力の有無は\n11", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 12", "content": "”notex” Cinderella画面上の図形を出力しない\n”nodisp” Cinderella画面上にも出力しない\n”nodisp”は画面上にも，Ｒへのデータにも出力されないが，プロットデータは作成されるので，プロットデータだ\nけを利用したい場合に有効である。\n【例】pdata=Circledata([A,B],[\"nodisp\"]);\nとして，後にプロットデータ pdata を利用する。\nその他，次のようなオプションがある。\n”Size=n” 点の大きさ，線の太さの指定\n”Num=n”曲線の場合の分割数（プロットデータの個数+1）\n1.2.2 点・線分・直線\n関数 Pointdata(name , 点リスト , options)\n機能 点のデータを作成する。\n説明 与えられた座標の点データを作成する。オプションは”Size=”,”Color=”,”Inside=”。\nInside オプションは，点の内部についての指定（n : 内部を塗らない，color：内部色）\n【例】\n(1) 座標指定で2つの点データを作る。\nPointdata(\"1\",[[1,2],[-2,3]]);\n(2) 作図した点A,Bについて，点データを作る。\nPointdata(\"1\",[A,B]);\nA,Bが作図されていない場合は作成されない。\nCinderellaの描画面上では既存の点A,Bに黒の点が重なって表示される。\n(3) Aの位置に大きさ4で点を作る。\nPointdata(\"1\",A,[\"Size=4\"]);\n(4) 点データを作り，オプション（内部を塗らない）で描く\nPointdata(\"1\",[A,B],[\"Inside=n\"]);\n(5) 点データを作り，オプション（内部を白塗り）で描く\nPointdata(\"1\",[A,B],[\"Inside=white\"]);\n(6) 点データを作るが，TeXには出力しない\nPointdata(\"1\",[[3,4],[5,6]],[\"notex\"]);\n(7)点データを作るが，TeXには出力せず画面上にも表示しない。\nPointdata(\"1\",[[3,4],[5,6]],[\"nodisp\"]);\n(7) 節点を明示した木を描く\nPtsize(3);\nPointdata(\"1\",[[1,2],[3,4],[5,2]]);\nListplot(\"1\",[[0,0],[1,2],[3,4],[5,2],[4,0]]);\nListplot(\"2\",[[1,2],[2,0]]);\nListplot(\"3\",[[5,2],[6,0]]);\n注) 幾何点の有無など，付録の「点の作図についての比較表」を参照のこと。\n関数 Putpoint(点名 , 座標１ ,座標2 )\n12", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 13", "content": "機能 点を作る\n説明 識別名が点名の点を，既存でなければ座標１に作る。既存ならば座標2に移動する。Texには出力されない。\n【例】点Aを作る。\n(1,1) に固定点Aを作る。 この点は動かすことができない。\nPutpoint(\"A\",[1,1]);\n(1,1)に自由点を作るには次のようにする。\nPutpoint(\"A\",[1,1],[A.x,A.y]);\nこの点は座標2の効果により，自由点となり，ドラッグして動かすことができる。\n注）点名は半角アルファベットとする。数字や漢字でもCinderellaでは点ができるが，Rでエラーとなる。\n関数 Putintersect(点名 , PD1 , PD2 , [No] )\n機能 2曲線の交点を作る\n説明 PD1,PD2は2曲線のプロットデータ名。作成される点は幾何点。\n描画範囲に交点が１つだけのとき，第4引数がなくても交点が作られる。\n描画範囲に2つ以上の交点がある場合，第4引数を省略するとコンソールに交点の座標のリストと，「Choose\npoint number 」というガイドが表示される。そこで，引数のNoとして，その番号を指定すると，その点が作\nられる。この関数で作成されるのは幾何点だけなので，TEXの図に点として明示するためにはPointdata()で\n書き出す。\n注）交点が存在しない場合は，「No intersect point」がコンソールに表示される。\n13", "tags": []}
{"title": "Page 14", "content": "次の例は，3次曲線と直線の交点を3つとも取ったものである。\ny\nPlotdata(\"1\",\"x^3-4*x\",\"x\",[\"Num=200\"]);\nPlotdata(\"2\",\"1/2*x+1\",\"x\");\nPutintersect(\"P\",\"gr1\",\"gr2\",1);\nPutintersect(\"Q\",\"gr1\",\"gr2\",2);\nx\nPutintersect(\"R\",\"gr1\",\"gr2\",3); O\nPointdata(\"1\",[P,Q,R],[\"size=4\"]);\n関数 Putoncurve(点の名前, プロットデータ, options)\n機能 曲線上に点を乗せる。\n説明 点が存在しない場合は新たに作る。すでにその点が存在する場合は，その点のx座標を使う。初期値のx座標\nの 初期設定は 0。\noptionsは，x座標の範囲をリストで与える。\n【例】アステロイド上の動点P をとる。\nParamplot(\"1\",\"[2*cos(t)^3,2*sin(t)^3]\",\"t=[0,2*pi]\");\nPutoncurve(\"P\",\"gp1\",[-1,1]);\n点Pがアステロイド上にでき，この点はドラッグするとアステロイド上を −1≤x≤1 の範囲で動かすことが\nできる。ただし，-1,1の付近はy座標の判断の関係でぴったりはいかない。\ny\nP\nx\nO\n⇒関数一覧\n関数 Putonline(点名 , 座標１ ,座標2 )\n機能 直線上に点を作る\n説明 座標１，座標2を通る直線上に点名の点を作る。できた点は直線に対してインシデントとなる。\n【例】点A, Bを通る直線上に点Pをとる。\nPutonline(\"P\",A,B);\n関数 Putonseg(点名 , 座標１ ,座標2 )\n機能 線分上に点を作る\n説明 座標１，座標2を端点とする線分上に点名の点を作る。できた点は線分に対してインシデントとなる。指定し\nた点がすでに存在する場合は動かさない。\n【例】\n線分AB上に点Cをとる。\n14", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 15", "content": "Putonseg(\"C\",A,B);\n点(-1,0),(2,2)を通る線分上に点Cをとる。\nPutonseg(\"C\",[[-1,0],[2,2]]);\n関数 Reflectpoint(点，対称点または対称軸)\n機能 点の鏡映の座標を返す。\n説明 点を指定された点または軸に関して対称移動した点の座標を返す。対称軸は[ 点1, 点2 ]で指定\n【例】点A〜Fを作図しておき，C〜FをAの鏡映の位置に配置する。\nＣはBに関してAと対称な点\ny\nＤは点(2,3)に関してAと対称な点\nEは点(1,0) に関して (-1,1) と対称な点\nD\nFは直線CEに関してAと対称な点\n(2,3)\nC\nC.xy=Reflectpoint(A,B);\nD.xy=Reflectpoint(A,[[2,3]]); (-1,1) B\nE.xy=Reflectpoint([-1,1],[[1,0]]); A\nF.xy=Reflectpoint(A,[C,E]); x\nLineplot([C,E],[\"do\"]); O (1,0)\nE\nF\n注）鏡映はCinderellaの作図ツールでも作成することができる。場合によってはCinderellaで作図する方が\n簡明である。\n関数 Rotatepoint(点 ，角度 , 中心)\n機能 点の位置を回転する\n説明 点を，中心で示された点の周りに回転した座標を返す。角度は弧度法で与える\n【例】点A〜Eは作図しておき，C〜Eをそれぞれの位置に配置する。\ny\n2\n点CはAを，Ｂに関して πだけ回転した点\n3\nD\nπ\n点Dは点(5,2)を，Ｂに関して だけ回転した点\n3\nB C\nπ\n点Eは点(3,0)をAに関して − だけ回転した点 (5,2)\n4\nA\nC.xy=Rotatepoint(A,2*pi/3,B); x\nO (3,0)\nD.xy=Rotatepoint((5,2),pi/3,B);\nE.xy=Rotatepoint([3,0],-pi/4,A); E\n注）図の点線は位置関係を示すためのもの。\n点名や座標は，実際にはLetter()関数で記述する。\n関数 Scalepoint(点，比率ベクトル，中心)\n機能 点の位置の拡大・縮小を行う\n説明 点を，指定された中心を原点とする座標系で，比率ベクトルの分だけ拡大・縮小した位置の座標を返す。\n【例】点A〜Fは作図ツールで適当な位置にとっておく。\n点Dを，点Aを原点を中心に横に3倍，縦に2倍した位置に置く。\n点Eを，点Aを点Bを中心に横に3倍，縦に2倍した位置に置く。\n−−→\n点Fを，点Aを原点を中心にベクトルOC で示された比率の位置に置く。\n15", "tags": []}
{"title": "Page 16", "content": "D.xy=Scalepoint(A,[3,2],[0,0]);\nE.xy=Scalepoint(A,[3,2],B);\nF.xy=Scalepoint(A,C.xy,[0,0]);\nArrowdata(\"1\",[[0,0],C]);\nPointdata(\"1\",[A,B,C,D,E,F],[\"size=2\"]);\nLetter([A,\"e2\",\"A(\"+A.x+\",\"+A.y+\")\"]);\nLetter([B,\"e2\",\"B(\"+B.x+\",\"+B.y+\")\"]);\nLetter([C,\"e2\",\"C(\"+C.x+\",\"+C.y+\")\"]);\nLetter([D,\"e2\",\"D(\"+D.x+\",\"+D.y+\")\"]);\nLetter([E,\"e2\",\"E(\"+E.x+\",\"+E.y+\")\"]);\nLetter([F,\"e2\",\"F(\"+F.x+\",\"+F.y+\")\"]);\ny\nE(5,5)\nD(9,4)\nA(3,2) F(12,2)\nC(4,1)\nx\nO\nB(2,-1)\n点A,B,Cをドラッグすると，インタラクティブにD,E,F の位置が変わる。\n関数 Translatepoint(点 , 移動ベクトル)\n機能 点を平行移動する\n説明 点を移動ベクトルで示された分だけ平行移動した点の座標を返す\n【例】点A〜Dは作図しておく。\n点Cを点Aをx軸方向に2 , y軸方向に3だけ平行移動した点にする。\n−−→\n点Dを点AをベクトルOB だけ平行移動した点にする。\nC.xy=Translatepoint(A,[2,3]);\nD.xy=Translatepoint(A,B.xy);\ny\n5 C\n4\n3 D\n2 A\n1 B\nx\nO 1 2 3 4 5\n⇒関数一覧\n関数 Setarrow([arrowsize,angle,position,cut])\n機能 Arrowdata,Arrowheadで描く矢印のスタイルを設定する。\n説明 arrowsize,angle,position,cut,linestyle は，順に大きさ (1)，開き角 (18)，位置 (1)，切り込み (0.2) である。\n（カッコ内はデフォルト値）\n16", "tags": []}
{"title": "Page 17", "content": "関数 Arrowdata(name,[始点 , 終点] , options)\n機能 2点間を結ぶ矢線を描く。\n説明 name はなくてもよい（自動的に通し番号をつける）。\noptionsは矢じりの形状などの指定（リストで与える）。\n数値は， 大きさ, 開き角, 位置,切り込み\n”Line=n(y)”（矢印は線だけ），”Cutend=”（トリミング），”Color=”\n開き角は60分法で与える。2.5未満の時は18°の倍数指定とする。\n矢じり位置は，線分の長さを１とした始点からの距離。\n切り込みのデフォルトは0.2\nトリミング :”Cutend=m” または ”Cutend=[m,n]” で，右辺が数のときは両端をmだけカットする。リスト\nのときは始点をm,終点をnだけカットする。mが負のときは延長する。\n【例】オプションの設定とその結果を示す。\nArrowdata(\"1\",[A,B]);\nArrowdata(\"2\",[[1,0],[2,3]],[2]);\nArrowdata(\"3\",[[2,0],[3,3]],[3,45]);\nArrowdata(\"4\",[[3,0],[4,3]],[3,1,0.5]);\nArrowdata(\"5\",[[4,0],[5,3]],[3,1,1,0]);\nArrowdata(\"6\",[[5,0],[6,3]],[3,\"Line=y\"]);\nArrowdata(\"7\",[[6,0],[7,3]],[3,\"dr,2\"]);\nArrowdata(\"8\",[[7,0],[8,3]],[3,1,1,0.5,\"Color=red\"]);\ny\nx\nO\n【例】２つの円を矢線で結ぶ。\nCircledata(\"1\",[A,A.xy+[0.5,0]]);\nB\nCircledata(\"2\",[B,B.xy+[0.7,0]]);\nArrowdata([A,B],[\"Cutend=[0.5,0.7]\"]);\nLetter([A,\"c\",\"A\",B,\"c\",\"B\"]);\nA\nCinderellaの作図ツールで２点ABをとっておく。\n円A,Bの半径が同じ（たとえば0.5）であれば，Arrowdata([A,B],[\"Cutend=0.5\"]); でよい。\n関数 （１）Arrowhead(点 , 方向 , options)\n（２）Arrowhead(点または位置比 , プロットデータ, options)\n機能 点に矢じりだけを描く（optionはSetarrowと同じ）\n説明 （１）指定された位置に，指定された方向を向いた矢じりだけを描く。\n点は座標または幾何要素名。方向は原点から見て座標[a,b]の方向。\n（２）プロットデータ（曲線）を指定したときは，曲線上の点に矢じりをつける。\n曲線には向きがあり，それによって矢じりの向きが決まる。\n”Invert(曲線名)” とすると反対向きの矢じりになる。\n曲線の向きとは，曲線を描くときの順序で，プロットデータの順序でもある。\n位置比は曲線上の位置を表す比率（0から1）。\n17", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 18", "content": "例えば，分割数が50で位置比が0.3のとき 1+50*0.3=2.5\n2番目と3番目の点の中点\n【例】 A が右図の位置のとき\ny\n(ア) Arrowhead(A,[-1,1]); A\n1\n(イ) Arrowhead([1,1],[-1,1],[2,60]);\n(ウ) Arrowhead(A,[-1,1],[2,30,0.5]]);\nx\nO 1\n(エ) Arrowhead([1,1],[-1,1],[2,20,0.5,\"Line=y\"]);\n(ア) (イ) (ウ) (エ)\ny y y y\n1 1 1 1\nx x x x\nO 1 O 1 O 1 O 1\n曲線 cr1 上の点 A の位置比が0.6のとき\nA\n(オ) Arrowhead(A,\"cr1\");\n(カ) Arrowhead(0.6,\"cr1\",[2,1,0.5,\"Color=red\"]);\n(キ) Arrowhead(1,\"cr1\");\n(ク) Arrowhead(1,\"Invert(cr1)\",[\"Line=y\"]);\nオ) (カ) (キ) (ク)\n関数 Lineplot（name , 2点のリスト , options)\n機能 2点のリストで示された点を結ぶ直線を描く。\n説明 2点のリストは座標または幾何要素の名前で与える。\noptions は次の通り。\n線種”dr, n”, ”da,m,n” , ”do,m,n”\n”+”半直線を描く。\n”dr” , ”da” , ”do” と ”+” はリストにして両方指定することができる。\n点のリストが，座標ではなく幾何要素名のリストの場合は，nameは省略できる。\nいくつか例を示す。\n各座標を結ぶ直線を引く\nLineplot(\"1\",[[0,0],[1,2]])\nCinderellaの描画ツールで2点A,Bをとっておき，直線ABを引く\nLineplot([A,B]);\noptionの働きの例\nLineplot([A,B],[\"dr,0.5\",\"+\"]); Aを端点とする半直線を引く\nLineplot([C,D],[\"dr,2\"]); 直線CDを太さ2で描く\n18", "tags": []}
{"title": "Page 19", "content": "Lineplot([E,F],[\"da\"]); 直線EFを破線で描く\nLineplot([G,H],[\"do\"]); 直線GHを点線で描く\n結果は，次図左上から。\ny\nA\nx\nO\n⇒関数一覧\n関数 Listplot（name , 点のリスト , options)\n機能 点のリストで示された点を結ぶ。\n説明 点のリストは座標または幾何要素名のリストで与える。点が，座標ではなく幾何要素名の場合は，nameは省\n略可\nプロットデータの名前は，”sg” に引数の name を付加したものとなる。\noptions は次の通り。\n線種 ”dr, n”, ”da,m,n” , ”do,m,n”\nトリミング :”Cutend=m” または ”Cutend=[m,n]”\n数のときは両端をmだけカットする。リストのときは始点をm,終点をnだけカットする。mが負のときは\n延長する。\noptionsの使用例\nListplot([A,B]); 線分ABを描く。太さは 初期設定。\nListplot([C,D],[\"dr,2\"]); 線分CDを描く。太さ2\nListplot([E,F],[\"da\"]); 線分EFを破線で描く\nListplot([G,H],[\"da,3,1\"]); 線分GHを破線で描く。線を長く\nListplot([K,L],[\"da,1,3\"]); 線分KLを破線で描く。間隔を空ける\nListplot([M,N],[\"do\"]); 線分MNを点線で描く。\nListplot([O,P],[\"do,3\"]); 線分OPを点線で描く。間隔を空ける\nListplot([Q,R],[\"do,3,3\"]); 線分QRを点線で描く。間隔を空けて太く\n結果は次図左から。\n【例】三角形を描く。\nCinderellaの作図ツールで三角形ABCを描いておく。あるいは，単に3点A,B,Cをとるだけでもよい。\nAddax(0);\nListplot([A,B,C,A]);\n19", "tags": []}
{"title": "Page 20", "content": "点の位置は座標で指定してもよい。\nその場合は name が必要。\nListplot(\"1\",[[0,0],[2,0],[1,2],[0,0]]);\n【例】２つの円を線分で結ぶ。\nCircledata(\"1\",[A,A.xy+[0.5,0]]);\nB\nCircledata(\"2\",[B,B.xy+[0.7,0]]);\nListplot([A,B],[\"Cutend=[0.5,0.7]\"]);\nLetter([A,\"c\",\"A\",B,\"c\",\"B\"]);\nA\nCinderellaの作図ツールで２点ABをとっておく。\n円A,Bの半径が同じであれば，Listplot([A,B],[\"Cutend=0.5\"]); でよい。\nプロットデータは点の座標のリストである。したがって，プロットデータを自作してListplot()で表示するこ\nとができる。\n【例】有限フーリエ級数展開\nπ ∑30 1−(−1)n\n+ sinnx\n2 n\nn=0\n次のようにCindyscriptで関数を定義し，プロットデータpd を作って引数に渡す。\nf(x):=(\ns=pi/2;\nrepeat(30,n,s=s+(1-(-1)|^n)/n*sin(n*x));\n);\npd=apply(0..200,t,\nx=-2*pi+t*4*pi/200;\n[x,f(x)];\n);\nListplot(\"1\",pd);\nExpr([[-2*pi,-0.5],\"s\",\"-2\\pi\",[-pi,-0.5],\"s\",\"-\\pi\",[pi,-0.5],\"s\",\n\"\\pi\",[2*pi,-0.5],\"s\",\"2\\pi\",[0,pi],\"w2\",\"\\pi\"]);\ny\nπ\nx\nO\n−2π −π π 2π\nリストの長さには制限がある。たとえば，タートルグラフィクスを用いたシェルピンスキーのギャスケットで\nは200くらいずつのリストに分割する。\n20", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 21", "content": "⇒関数一覧\n関数 Mksegments()\n機能 すべての幾何線分のPD を作成\n説明 Cinderellaの「線分を加える」ツールで描いたすべての線分をそのままプロットデータとする。たとえば，線\n分ABを作ると，プロットデータsgABが作成される。その後，インスペクタで点Bの識別名を変更（たとえ\nばQに）すると，プロットデータ名も変更される。線分はすでに描かれていてもよい。\n【例】等比数列の例題\n三角形の各辺の中点を結んでできる三角形を次々に作っていく，等比数列の図を描く。\nまず「線分を加える」ツールで三角形ABCを描く。\n「中点を加える」ツールで各辺の中点を取り，「線分を加える」ツールで中点を結ぶ。\nこれを繰り返す。Mksegments() を書いておけば，Listplot([A,B,C] などを書かなくても，作図ができた時\n点で，図のデータができる。\n関数 Framedata(name , リスト,options)\n機能 矩形を描く\n説明 リストの形は2通り。\nその1：[中心 ,横 , 縦] で，矩形を描く。横，縦は中心からの距離。\nその2：2点のリスト。点が座標でなく名称のときはnameは省略できる。\n点の座標は点の名前でもよい。点を座標で与える場合はnameは省略できない。\nリストを省略した場合は，描画範囲と同一の矩形を描く。\nその2のタイプでは，option として，”center” または ”corner” がある。”center” のときは，中心と対角点\n（ 初期設定），”corner” のときは2点を対角点として解釈する。\n以下にいくつか例を示す\nFramedata(\"1\"); 描画範囲(SW,NE)と同一の矩形を描く\nFramedata(\"2\",[[0,0],2,2]); 原点を中心とする縦横幅4の正方形を描く\n21", "tags": []}
{"title": "Page 22", "content": "Framedata(\"3\",[A,1.5,1.2]); 点Aを中心とする横3，縦2.4の矩形を描く。(図左)\nFramedata([B,C]); 点Bを中心,点Cを頂点とする矩形を描く。(図中央)\nFramedata([D,E],[\"corner\"]); 点D,Eを対角点とする矩形を描く。(図右)\nC E\n1:2\nA 1:5 B\nD\n矩形の角を丸めたい場合は，Framedata()ではなく，Ovaldata()を使うとよい。\n関数 Polygonplot(name , 点リスト , 整数,options)\n機能 2点を半径とする円に内接する正多角形を描く。\n説明 点リストを[A,B] とすると，Aを中心とする半径ABの円周上に点をとって正多角形を描く。ただし円は描か\nない。A,B は座標でもよい。\n点リストが座標ではなく作図してある点の名称のとき，オプションに”Geo=y” をつけると，頂点の幾何点を\n作る。幾何点の名称はBに番号を付けたものとなる。整数でない数を指定した場合は，きちんと閉じない折れ\n線が描かれる。\n【例】点リストとoptionの違いによる作図と，TeXの図を示す。\nAddax(0);\nPolygonplot(\"1\",[[-4,1],[-4,3]],7);\nPolygonplot(\"2\",[A,B],7);\nPolygonplot(\"3\",[C,D],7,[\"Geo=y\"]);\n円に内接する形でなく，与えられた線分ABを１辺とする正多角形を描くには次のようにする。\n線分ABは，Cinderellaの作図ツールなどで描かれているものとする。ただし，線分でなく，両端の点が与え\nられているだけでもよい。Cindyscriptで点A,Bが複素平面上にあるものとして，多角形の頂点の位置を計算\nする。\n【例】ABを1辺とする正五角形を描く。\nn=5;\n22\n1", "tags": ["KeTCindy", "構文"]}
{"title": "Page 23", "content": "pti=[complex(A),complex(B)];\nth=2*pi/n;\nrepeat(n-2,s,\nz1=pti_s;\nz2=pti_(s+1);\nz=z2+(z2-z1)*(cos(th)+i*sin(th));\npti=append(pti,z);\n);\npt=apply(pti,gauss(#));\npt=append(pt,A.xy);\nListplot(\"1\",pt);\nptiは，各頂点に対応する複素数のリスト，ptが各頂点の座標のリストである。\n⇒関数一覧\n1.2.3 曲線\n関数 Bezier(名前，節点リスト，制御点リスト，[オプション] )\n機能 ベジェ曲線を描く\n説明 制御点は，各区間に対して，3次の場合2個，2次の場合1個のリストで与える。\nオプションは\n”Num=n”: 節点間の分割数（分点数 −1）を指定できる。 ベジェ曲線とスプライン曲線の関数は節点間が短\nい場合が多いので初期設定は10になっている。Plotdata()などと違い，大きい数（200など）を指定すると，\n全体の分割数が増大して描画時間がかかるようになってしまうので注意。\nC\n【例】\n2次ベジェ曲線\nBezier(\"1\",[A,B],[C]);\nA\nB\nC D\n3次ベジェ曲線\nBezier(\"2\",[A,B],[C,D]);\nA\nB\n節点を増やす。2次と3次。 D E F\nBezier(\"3\",[A,B,C],[[D],[E,F]]);\nA B\nC\n全て同じ次数の場合，次のようにしてもよい。\nBezier(\"4\",[A,B,C,D],[E,F,G,H,K,L] );\nH\nK\nG\nE F L\nB C D\nA\nオプションの例\nBezier(\"5\",[A,B,C],[[D],[E,F]],[\"Num=3\"]);\n23", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 24", "content": "D\nC\nA B\nE F\nBezier(\"6\",[A,B,C],[[D],[E,F]],[\"Num=40\",\"da\"]);\nD\nC\nA B\nE F\nNumを（ベクトルとして）区間ごとに与えることもできる。\nBezier(\"1\",[A,B,C,D],[E,F,G,H,K,L],[\"Num=[2,3,4]\"]);\nH\nK\nG\nE F L\nB C D\nA\n関数 Beziersmooth(名前，節点リスト，[オプション] )\n機能 節点間を3次ベジェ曲線でスムーズに結んだ曲線を描く\n説明 節点をはさむ制御点は１直線上にとる（したがって，１つは半自由点で，直線上しか動けない）。制御点は自動\n的に配置される。その後，節点や制御点を動かして，描きたいものにする。\n【例】\nBeziersmooth(\"1\",[A,B,C,D]);\nB C2p\nC1q D\nC3q\nC1p\nC2q\nA C C3p\nbz1\nその後，節点や制御点を動かして，描きたいものにする。ただし，C2p は C1q と B を通る直線上しか動けな\nい。C3p は C2q と C を通る直線上しか動けない。\nC2p\nC1q B\nD\nC1p C3q\nA bz1 C2q C\nC3p\n24", "tags": []}
{"title": "Page 25", "content": "関数 Beziersym(名前，節点リスト，[オプション] )\n機能 節点間を3次ベジェ曲線でスムーズに結んだ曲線を描く\n説明 節点をはさむ制御点は節点に関し対称（片方は表示されず，動かせない）。制御点は自動的に配置される。その\n後，節点や制御点を動かして描きたいものにする。\n【例】\nBeziersym(\"1\",[A,B,C,D]); B C2p\nC1q D\nC2p と C3p は表示されない\nC3q\nC1p\nC2q\nA C\nbz1 C3p\nその後，節点や制御点を動かして，描きたいものにする。\nC2p と C3p は表示されず，動かせない。\nC1q\nB D\nC2p\nC1p\nC3q\nA C2q C C3p\n⇒関数一覧\n関数 Mkbeziercrv(名前, [節点リスト,制御点リスト] のリスト,options )\n機能 複数のベジェ曲線を描く\n説明 [節点リスト,制御点リスト] が１つの場合は，Bezier()と同じ。\n【例】ベジェ曲線を2つ描く。\nMkbeziercrv(\"5\",[[[A,B,C],[[D],[E,F]]],[[G,H,K,L],[[M],[N,O],[P]]]]);\nM N O P\nD E F\nH\nA B G K L\nC\n関数 Mkbezierptcrv(節点リストptlist，[オプション] )\n機能 ベジェ曲線を描く\n説明 制御点は，自動的に配置される。\n複数の場合は[ ptlist1, ptlist2.... ]\n名前は，A から順に自動的につける。\nオプション\n\"Deg=...\" 次数指定ができる。（初期設定は3次）\n\"Num=...\" 各区間の区間数（分点数−1）を指定できる。（初期設定は10）\n25", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 26", "content": "B\n【例】\nAq1 Ap2\nMkbezierptcrv([A,B,C]); Ap1 Aq2\nA C\nbzA\nその後，節点や制御点を動かして，\nAq1\n描きたいものにする。\nAp1\nB\nA C\nAp2 Aq2\nbzA\nMkbezierptcrv([A,B,C],[\"Deg=2\"]);\nB\nDeg=2 とすると2次になる。\nAp1 Ap2\n制御点は各区間に１個ずつできる。\nA C\nbzA\n複数の場合は[ ptlist1, ptlist2.... ]\nMkbezierptcrv([[A,B,C],[D,E,F,G]]);\nG\nB E\nAq1\nAp2 Bq1 Bp2\nAp1\nAq2 Bp1 Bq2 Bq3\nBp3\nA\nC\nD F\nbzA bzB\n関数 Bspline(名前，制御点リスト，[オプション] )\n機能 2次B-spline曲線を描く\n説明 節点は自動的に計算され，表示されない\n【例】Bspline(\"1\",[A,B,C,D,E])\nこれは， Bezier(\"1\",[A,(B+C)/2,(C+D)/2,E],[B,C,D]) と同じ。曲線の名前が bz1 ではなく bzb1 と\nなる。\n通常のB-spline曲線の端の制御点の代わりに，端点を動かせるようにしている。\nD\nB\nA\nC E\n26", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 27", "content": "【例】Bspline(\"1\",[A,B,C,D,A]);\nリストの最初と最後が同じ場合は閉曲線になる。\nBezier(\"1\",[(D+A)/2,(A+B)/2,(B+C)/2,(C+D)/2,(D+A)/2],[A,B,C,D]);\nと同じ。\nB C\nD\nA\n参照：Ospline：大島のスプラインを描く\n関数 CRspline(名前，節点リスト，[オプション] )\n機能 単独のCatmull-Rom スプライン曲線を描く\n説明 自由点は，節点のみで，制御点は節点から作られ移動はできない。\nオプションに，通常のオプションのほか，次が使える。\nsize ->n:画面上での線の太さを指定する。\n【例】CRspline(\"1\",[A,B,C,D]);\nD\nB\nA C\n関数 Ospline(名前，制御点リスト，[オプション] )\n機能 大島のspline曲線を描く\n説明 制御点を通るスプライン曲線を描く\nリストの最初と最後が同じ場合は閉曲線になる。\n【例】Ospline(\"1\",[A,B,C,D,E]);Ospline(\"1\",[A,B,C,D,A]);\nD\nC\nA B\nスプライン曲線については次も参照されたい：Bspline：Ｂスプラインを描く\n関数 Circledata(name,リスト,options)\n機能 円または多角形を描く。\n説明 中心の点と，円周上の1点（か半径），または3点をリストで与えて円を描く。\n中心と円周上の点を，座標ではなく幾何要素名で指定する場合は name は省略可。\noptionsは以下のものをリストで与える。省略した場合は実線で円が描かれる。\n27", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 28", "content": "”Rng=[θ ,θ ]” 角θ からθ の範囲の弧を描く。角は弧度法で与える。\n1 2 1 2\n”Num=分割数” 円を描くときの分割数。値が小さい場合は多角形になる。\n線種 ”dr, n”, ”da,m,n” , ”do,m,n”\n【例】いろいろな円を描く。\n原点中心，半径2の円 Circledata(\"1\",[[0,0],[2,0]]);\n（[[0,0],2]でもよい）\nA中心，半径ABの円 Circledata([A,B]);\nA中心，半径2の円 Circledata(\"1\",[A,A+[2,0]]);\n（[A,2]でもよい）\n3点A,B,Cを通る円 Circledata([A,B,C]);\n下図左より，オプションに ”dr,2” , ”da” , ”do” をつけた場合。\nCircledata([A,B,C]);で，3点A,B,Cを通る円を描いたとき，できた円の中心はPointdata(\"1\",[crABCcenter]);\nで作図できる。\n【例】A中心，半径AB，中心角60°の弧を描く。\nCircledata([A,B],[\"Rng=[0,pi/3]\"]);\n【例】A中心，半径AB，中心角60°の扇型を描く。点A,B,Cを適当に取っておく。\nth=arctan2(B-A);\nC.xy=Rotatepoint(B,pi/3,A);\nCircledata([A,B],[Assign(\"Rng=[th,th+pi/3]\",[\"th\",th])]);\nListplot([B,A,C]);\nLetter([A,\"s\",\"A\",B,\"e\",\"B\",C,\"nw\",\"C\"]);\nC\nB\nA\n””\n１行目は，ABがx軸となす角を arctan2 関数 によって求めている。\n【例】弧を太く描く\nCircledata([C,D],[\"dr,3\",\"Rng=[0,pi/3]\"]);\n円はNが大きな値の正N多角形として描いている。optionの [”Num=数値”] によってその細かさを指定で\nきる。Nの値が小さければ正多角形が描けることになる。\n【例】A中心，半径ABの円と，その円に内接する正六角形\n28", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 29", "content": "Circledata(\"1\",[A,B]);\nCircledata(\"2\",[A,B],[\"Num=6\"]);\nここで，同じ[A,B]を使うため，nameを付与して区別する必要がある。(下図左)\nまた，頂点の位置を変えるのであれば，Rng= オプションを使う。（下図右）\nCircledata(\"2\",[A,B],[\"Num=6\",\"Rng=[pi/6,13/6*pi]\"]);\nA A\nB B\n関数 Mkcircles()\n機能 すべての幾何円のPD を作成\n説明 Cinderellaの「円を加える」ツール（3種類いずれでも）で描いたすべての円をそのままプロットデータとす\nる。たとえば，中心A，円周上の点をBとした円を作ると，プロットデータcrABが作成される。その後，イ\nンスペクタで点Bの識別名を変更（たとえばQに）すると，プロットデータ名も変更される。円はすでに描\nかれていてもよい。\n⇒関数一覧\n関数 Ellipseplot(name,点リスト ,定義域, options)\n機能 焦点と通る点を与えて楕円を描く。\n説明 点リストで2つの焦点と通る点を与える。点はCinderellaの幾何点が使える。\nまた，通る点のかわりに，焦点からの距離の和を実数で与えることもできる。\n実際には，媒介変数表示x=acosθ,y =bsinθ を，回転・平行移動して描いている。定義域はこのときのtの\n定義域で，省略も可能。省略したときの初期値は[-5,5]\n【例】点A,Bを焦点とする楕円を描く。\nEllipseplot(\"1\",[A,B,C]); 点Cを通る楕円を描く。\nEllipseplot(\"1\",[A,B,4]); 焦点からの距離の和が4である楕円を描く。\nEllipseplot(\"1\",[A,B,C],\"[0,pi]\"); 楕円の半分を描く。\n【例】Cinderellaの作図ツールを使う\n作図ツールに，焦点と通る点で楕円を描くもの，点の極線を描くツールがある。（モードメニュー / 直線 / 点\nの極線）これを利用すると，楕円上にとった点をインシデントにできるので，インタラクティブに図を変更す\nることができる。このCinderellaの作図機能と合わせて，一方の焦点から出た光が楕円上で反射して他方の焦\n点に至る，という図を次のようにして描くことができる。\nまず，3つの点，焦点A,Bと通る点Cを適当な位置に作図する。次に「焦点と通る点で決まる楕円」ツールを\n選び，点A,B,Cを順に指定すると，楕円が描かれる。\nモードメニューの「直線」から「点の極線」を選び，点Cと楕円を順に指定すると接線が引かれる。\n「垂線を加える」ツールを用いて，点Cで垂線，すなわち法線を引く。（下図）\n「点を加える」ツールを用いて，接線，法線上に適当に点を取る。(D,Eとなったとする)\n次のスクリプトを書いて実行すると，楕円に関して入射角と反射角が等しくなるように光が反射する様子を図\n29", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 31", "content": "Ellipseplot(\"1\",[A,B,C]);\nLineplot([C,D]);\nLineplot([C,E]);\nArrowdata([A,C]);\nArrowdata([C,B]);\nAnglemark([A,C,B]);\nExpr([A,\"s2\",\"F_1\",B,\"s2\",\"F_2\"]);\ny\nx\nF O F\n1 2\nまた，接線，法線を描かず，この楕円上に点D,E,・・をとり（個数は任意）次のスクリプトを書けば，何本か\nの光線が一方の焦点を出て他方の焦点に集まる様子を描くことができる。\nEllipseplot(\"1\",[A,B,C]);\nListplot([A,C,B]);\nListplot([A,D,B]);\nListplot([A,E,B]);\nExpr([A,\"s2\",\"F_1\",B,\"s2\",\"F_2\"]);\ny\nx\nF O F\n1 2\n関数 Hyperbolaplot(name,点リスト ,定義域, options)\n機能 焦点と通る点を与えて双曲線を描く。\n説明 点リストで2つの焦点と通る点を与える。点はCinderellaの幾何点が使える。\nまた，通る点のかわりに，焦点からの距離の差を実数で与えることもできる。\n実際には，ハイパボリック関数を用いた媒介変数表示 x=cosht,y =sinhtを回転・平行移動している。\noptionとして，”Asy=線種”を与えると，漸近線を指定した線種で表示する。 初期設定では漸近線は非表示。\n【例】点A,Bを焦点とする双曲線を描く。\nHyperbolaplot(\"1\",[A,B,C]); 点Cを通る双曲線を描く。\nHyperbolaplot(\"1\",[A,B,2]);焦点からの距離の差が2の双曲線を描く。\nHyperbolaplot(\"1\",[A,B,C],[\"Asy=do\"]); 漸近線を点線で描く。\n31", "tags": []}
{"title": "Page 32", "content": "y\nC\nx\nA O B\n⇒関数一覧\n関数 Parabolaplot(name，点リスト ,定義域, options)\n機能 点リスト[A,B,C]で示された焦点，準線で決まる放物線を描く。\n説明 焦点Aと準線BCで決定する放物線を描く。\n実際には，2次関数 y =x2 のグラフを回転・平行移動して描いており，定義域は，y =x2 での定義域と考え\nてよい。定義域は省略することもできる。省略したときの初期値は[-5,5]\n【例】点Aを焦点，直線BCを準線とする放物線を描く\nParabolaplot(\"1\",[A,B,C]);\n定義域を −4≤x≤4 とする。\nParabolaplot(\"1\",[A,B,C],\"[-4,4]\");\n点(0,1)を焦点，直線y =−1を準線とする放物線を描く\nParabolaplot(\"1\",[[0,1],[-1,-1],[1,-1]]);\n【例】放物線上の2点で引かれた接線と放物線で囲まれた領域を斜線で描く。\nCinderella の作図ツールに，焦点と準線で放物線を描くものがある。また，点の極線を描くツールがある。\n（モードメニュー/直線/点の極線）これを利用すると，放物線上にとった点をインシデントにできるので，イ\nンタラクティブに図を変更することができる。このCinderellaの作図機能と合わせて，次の手順で図を描く。\nまず，焦点A(0,1)と準線y =−1：BCを作図する。次に「焦点と準線で決まる放物線」ツールを選び，点A\n1\nと直線BCを指定すると，放物線が描かれる。方程式ではy = x2の放物線である。\n4\n次に，放物線上に点D,Eをとる。Cinderellaの作図機能を用いているので，この2点は放物線上だけを動かす\nことができる。（インシデント）\nモードメニューの「直線」から「点の極線」を選び，点Dと放物線，点Eと放物線を順に指定すると接線が引\nかれる。その交点に点を取る。\n32", "tags": []}
{"title": "Page 33", "content": "以上で作図ができたので，次のスクリプトを書いて実行する。\nParabolaplot(\"1\",[A,B,C]);\nLineplot([D,F]);\nLineplot([E,F]);\nHatchdata(\"1\",[\"iii\"],[[\"gr1para\",\"s\"],[\"lnEF\",\"n\"],[\"lnDF\",\"n\"]]);\nこれで，次図ができる。このあと，文字などは適当に追加する。\ny\nx\nO\nなお，Cinderellaの作図ツールで放物線を描かず，焦点Aと準線上の点B,Cだけを用意して，次のスクリプ\nトで描くこともできる。\nParabolaplot(\"1\",[A,B,C]);\nPutoncurve(\"D\",\"gr1para\");\nPutoncurve(\"E\",\"gr1para\");\nTangentplot(\"1\",\"gr1para\",\"x=\"+D.x);\nTangentplot(\"2\",\"gr1para\",\"x=\"+E.x);\nHatchdata(\"1\",[\"iii\"],[[\"gr1para\",\"s\"],[\"lntn1\",\"n\"],[\"lntn2\",\"n\"]]);\n関数 Ovaldata(name, 点リスト,options)\n機能 角を丸くした矩形を描く\n説明 中心と対角の１点を指定し，角を丸くした矩形を描く\noptionsは，角の落とし具合と線種など。 初期設定は0.2\n【例】いくつかの例を示す。\nOvaldata(\"1\", [A,B]);\nOvaldata(\"2\", [C,D],[0]);\nOvaldata(\"3\", [E,F],[1,\"dr,3\"]);\nOvaldata(\"4\", [G,H],[1.5,\"da\"]);\nB F\nH\nA C E G\nD\n1.2.4 関数のグラフ\n関数 Plotdata(name , 式 , 変数と定義域 , options)\n機能 関数のグラフを描く。プロットデータの名前は，gr\n説明 式で表された関数のグラフを，指定された定義域で描く。\n式，定義域は ” ” でくくって文字列とする。定義域はx=に続いてリストで指定。\noptions は次の通り。\n33", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 34", "content": "線種 ”dr, n”, ”da,m,n” , ”do,m,n”\n”Num=数値” 描画時の分割数\n”Dis=数値” 値が指定数値以上ジャンプする場合は不連続点とみなす。\n”Exc=数値リスト リストで示された点は除外する。\n”Exc=関数” 関数の零点は除外する。\n”Color=RGB” 色指定。RGBはCMYKでもよい。\n【例】2次関数 f(x)=x2−2x のグラフを定義域指定なしで描く。\nPlotdata(\"1\",\"x^2-2*x\",\"x\");\ny\nx\nO\nPlotdata(\"1\",\"x^2-2*x\",\"x\",[\"Color=[1,0,0]\"]);\nとすると赤で描かれる。\n( )\nπ\n【例】三角関数 2sin 2x− のグラフを，定義域 0≤x≤2πで描く。\n4\nPlotdata(\"3\",\"2*sin(2*x-pi/4)\",\"x=[0,2*pi]\");\ny\nx\nO\nCindyScript では，plot( 式 , 定義域 ); で描くが， KETCindyを用いるときは，CindyScript のplot 関数の\nかわりに，このPlotdata を使えばよい。\n軸に数字を入れるのであれば，Letter() を用いる。\noptionsの使用例\nPlotdata(\"1\",\"sin(x)+3\",\"x\"); 初期設定\nPlotdata(\"2\",\"sin(x)+2\",\"x\",[\"dr,2\"]); 同じく，太さ2で描く\nPlotdata(\"3\",\"sin(x)+1\",\"x\",[\"da\"]); 同じく，破線で描く\nPlotdata(\"4\",\"sin(x)\",\"x\",[\"do\"]); 同じく，点線で描く\n結果は次図上から。\ny\nx\nO\n34", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 35", "content": "Num=分割数の指定\nグラフの描画は，区間を分割して関数値をとり，各点を結ぶという通常の方法によっている。Nの指定はこの\n分割数の指定である。 初期設定は50。思うような結果が得られない場合はこの値を大きく指定するとよい。\n下図左は 初期設定，右は Num=200。\ny\nx\nO\n不連続点の指定\nDis オプションにより，値がジャンプする不連続点を線で結ばないようにする。Numオプションと合わせて使\nうと効果が上がる。\n【例】f(x)=tanx のグラフは，そのままではあたかも漸近線が描かれたようになるが，これは，不連続点の前\n後をそのまま結んでいるためである。（下図左）\nPlotdata(\"1\",\"tan(x)\",\"x\",[\"Num=200\",\"Dis=50\"]);\nのように，”Dis” オプションを使えば余分な線が描かれなくなる。（下図右）\ny y\nx x\nO O\n【例】ガウス記号 [x] で表される関数（床関数 : floor()）のグラフ。\nPlotdata(\"1\",\"floor(x)\",\"x\",[\"Num=100\",\"Dis=0.9\"]);\nDrwxy();\nrepeat(7,s,start -> -2,\nPointdata(text(s+3),[s+1,s],[\"Inside=0\",\"Size=3\"]);\n);\ny\nx\nO\n35", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 36", "content": "なお，ここで，Pointdata() のname を text(s+3) としているのは，s が −2 から始まるので，負の数が使え\nない name を 1 から始まるようにするためである。\n関数に文字係数がついており，文字係数の値を変化させながらグラフを描くには，Assign を使うか，Defvar\nで変数を定義する。\n【例】直線 y =bx−b2 の係数bを変化させて描き，包絡線をうかびあがらせる。\ny\nrepeat(50,t,\ncb=t/5-5;\nPlotdata(text(t),Assign(\"b*x-b^2\",\"b\",cb),\"x\");\n);\nまたは\nx\nO\nDefvar(\"b\");\nrepeat(50,t,\nb=t/5-5;\nPlotdata(text(t),\"b*x-b^2\",\"x\");\n);\n関数 Implicitplot(name,式,xの定義域,yの定義域, options)\n機能 陰関数のグラフを描く。\n説明 陰関数の式を与えてグラフを描く。式，定義域とも文字列。\noptions は，”r”,”m”,”Wait=n” が指定できる。Wait の初期値は10。\n”r”,”m”に関しては，オプションなしのとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n”m”のとき，強制的にデータファイルを作り直す。\n”r” のとき，すでにあるデータファイルを読み込む。\n【例】楕円を描く。\nImplicitplot(\"1\",\"x^2-x*y+2*y^2=4\",\"x=[-3,3]\",\"y=[-2,2]\");\ny\nx\nO\n関数 Deqplot(name,式，変数名，初期値，options)\n機能 微分方程式の解曲線を描く\n説明 微分方程式と初期値を与えて解曲線を描く。\n【例】y′′ =−yで，初期値がx=0のときy =1,y′ =0 の解曲線\nDeqplot(\"1\",\"y''=-y\",\"x\",0, [1,0]);\n注） 微分記号のプライムは，シングルクォートまたはバッククォート。\n36", "tags": ["LaTeX", "中級者向け", "図形描画", "外部連携", "数式描画", "関数"]}
{"title": "Page 37", "content": "y\nx\nO\n【例】y′ =y∗(1−y)で，x=0のとき，y =0.5の解曲線\nDeqplot(\"2\",\"y'=y*(1-y)\",\"x\",0, 0.5,[\"Num=100\"]);\ny\nx\nO\n【例】[x,y]′ =[x(1−y),0.3y(x−1)]で，変数はt，t=0（区間の左端）のときのx,yの値が1と0.5 である\nときの解曲線\nDeqplot(\"3\",\"[x,y]'=[x*(1-y),0.3*y*(x-1)]\",\"t=[0,20]\",\n[1,0.5],[\"Num=200\"]);\ny\nx\nO\n関数 Paramplot(name , 式 , 変数と定義域,options)\n機能 媒介変数表示の曲線を描く。\n説明 式は””でくくった媒介変数表示のリストで与える。\n定義域も ” ” でくくって文字列とし，t=に続いてリストで指定する。\noptions は線種が有効\n【例】サイクロイド曲線を描く。\nParamplot(\"1\",\"[t-sin(t),1-cos(t)]\",\"t=[0,2*pi]\");\ny\nx\nO\n【例】optionsの使用例。左から， 初期設定，太線，破線，点線の楕円\nParamplot(\"1\",\"[2*cos(t)-5,sin(t)]\",\"t=[0,2*pi]\");\nParamplot(\"2\",\"[2*cos(t),sin(t)]\",\"t=[0,2*pi]\",[\"dr,2\"]);\nParamplot(\"3\",\"[2*cos(t)+5,sin(t)]\",\"t=[0,2*pi]\",[\"da\"]);\nParamplot(\"4\",\"[2*cos(t)+10,sin(t)]\",\"t=[0,2*pi]\",[\"do\"]);\n37", "tags": []}
{"title": "Page 38", "content": "関数 Polarplot(name , 式 , 変数と定義域,options)\n機能 極座標表示r =f(θ)の曲線を描く。\n【例】カージオイド曲線を描く。\nPolarplot(\"1\",\"2*(1+cos(t))\",\"t=[0,2*pi]\",[\"Num=200\"]);\ny\nx\nO\n関数 Periodfun(定義式,周期,options)\n機能 周期関数のグラフを描く。戻り値はMaxima形式の式とperiodのリスト。\n説明 周期関数の式を定義してグラフを描く。定義式は，関数式（文字列），区間，分割数のリスト。\nこの関数固有のオプションは ”Con=” で，不連続点を線で結ぶか否かと，その時の色。初期設定は破線。結ば\nない場合は ”Con=n”，色指定は線種に続いてコンマで区切って指定する。たとえば，”Con=do,Color=red”。\n周期（描画回数）は，数またはリストで指定する。周期がmのとき，2m+1周期分描かれる。\n注意）関数は左右対称な定義域 [-a,a] で定義すること。\n【例】矩形関数のグラフ\ndefL=[\"0\",[-1,0],1,\"1\",[0,1],1];\nPeriodfun(defL, 2,[\"dr,2\"]);\nmemori=apply(-5..5,x,[x,text(x)]);\nmemori=flatten(remove(memori,[[0,\"0\"]]));\nHtickmark(memori);\nVtickmark([1,\"1\"]);\ny\n1\nx\n−5 −4 −3 −2 −1 O 1 2 3 4 5\n一方を放物線にした場合\ndefL=[\"0\",[-1,0],1,\"x^2\",[0,1],50];\nPeriodfun(defL, 2, [\"Con=n\",\"dr,2\"]);\nmemori=apply(-5..5,x,[x,text(x)]);\nmemori=flatten(remove(memori,[[0,\"0\"]]));\nHtickmark(memori);\nVtickmark([1,\"1\"]);\n38", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 39", "content": "y\n1\nx\n−5 −4 −3 −2 −1 O 1 2 3 4 5\n関数 Fourierseries(name,係数,周期,項数)\n機能 フーリエ級数のグラフを描く。\n∑∞\n説明 a + (a cosnx+b sinnx) を描く。係数は a ,a ,b のリストで，それぞれの要素は文字列とする。\n0 n n 0 n n\nn=1\nこの関数固有のオプションは ”Con=y/n” で，不連続点を破線で結ぶか否か。 初期設定は y。\n矩形波のフーリエ近似のような場合は，オプションとして，[”Num=200”]（100以上の値を指定）をつけると\nよい。\n【例】矩形波のフーリエ近似\nFourierseries(\"1\",[\"1/2\",\"0\",\"(1-(-1)^n)/(pi*n)\"],2,6,[\"Num=200\"]);\ny\nx\nO\n関数 Tangentplot(name , PD , 位置 , options)\n機能 接線を描く。プロットデータの名前は，lntn\n説明 曲線PDの指定した位置での接線を描く。位置は ”x=n” で指定する。\n使用例はParabolaplotの例を参照。\n⇒関数一覧\n1.2.5 文字\n関数 Expr([座標 , 位置 , 文字列],option)\n機能 TEX記法の文字列を与えて数式を書く。\n説明 Letterで文字列の前後に$ $をおくのと同じ。\n導関数の記号は，′（シングルクォート）を用いる。\n複数の箇所に文字を書く場合は，Letter() と同様，引数をリストにして与える。\noptionは サイズの倍率(”Size=”, Cinderraのみ)と色(”Color=”)。\n1 1\n【例】f(x)= x2とその導関数 f′(x)= x の式，軸上に必要な数を入れる。\n4 2\nExpr([[-3,3],\"e\",\"f(x)=\\frac{1}{4} x^2\",[3,1.5],\"s2e2\",\n\"f‘(x)=\\frac{1}{2}x\",[2,0],\"s\",\"2\",[0,1],\"w\",\"1\"]);\n39", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 40", "content": "y\nf(x)= 1x2\n4\n1 f′(x)= 1x\n2\nx\nO 2\n【例】対数関数の定積分の記号および積分値を図に書き込む。\nExpr([Q+[0.2,0],\"ne\",\"\\displaystyle \\int_a^b \\log x\\,dx=\"+\ntext(L.x*(log(L.x)-1)-G.x*(log(G.x)-1)) ]);\nL.x*(log(L.x)-1)-G.x*(log(G.x)-1) は，点L,G(図のa,b)をドラッグして\n積分範囲を決めるようにしているので，そこから計算した値。\n矢線は Arrowdata(Q,P); で表示している。矢線の始点がQ\n∫\nb\ny\nlogxdx=3.55\na\n(a=0.46, b=4.8)\n1\na\nx\nO 1 e b\n関数 Exprrot(座標 , 向き , 移動，文字列，option)\n機能 TEX記法の文字列を与えて傾いた数式を書く。\n説明 「座標」の位置に，指定された向きで数式を書く。\n向きはベクトルで与える。\n移動（オプション）は t (接線方向の移動) ， n (法線方向の移動) ，反転 (r)。\n座標，向きとも，Cinderellaで作図した幾何点を用いることができる。\noptionは サイズの倍率(”Size=”, Cinderraのみ)と色(”Color=”)。\nExprrot([3,2],[2,-1],\"t0n1\",\"\\sqrt{3}\");\nExprrot(C,B-A,\"t0n0r\",\"\\frac{2}{3}\");\ny\n√\n3\n2 3\nx\nO\n⇒関数一覧\n関数 Letter([位置, 方向, 文字列],option)\n機能 文字列を表示する\n説明 「位置（座標）」と方向で指定された場所に文字を書き込む。\n40", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 41", "content": "位置（座標）は点の名前で指定することもできる。\n場所は上下左右を東西南北で表し， n/s/w/e/c の方向で表す。cは中央。\n指定位置からの距離を，数値で与えることもでき，e2, e3 は e より少し離して置く。\n複数の文字列をリストの形にして渡すことができる。\n注）導関数の記号′は，数式モード（$ ではさむ）で′（シングルクォート）を用いる。\noptionは サイズの倍率(”Size=”, Cinderraのみ)と色(”Color=”)。\n文字列が一つのときは，\nLetter(位置, 方向, 文字列,option)\nにできる。\n【例】\n座標 (2,1) の南東にＰを表示\nLetter([[2,1] ,\"se\",\"P\"]);\n点Ｃを中央としてＣを表示\nLetter([C ,\"c\", \"C\"]);\n点Aの南西にA，Eの南に数式を表示\nLetter([A,\"sw\",\"A\",E,\"s\",\"$ f(x)=\\frac{1}{4} x^2 $\"]);\n関数 Letterrot(座標, 方向ベクトル,移動, 文字列, option)\n機能 文字列を回転して表示する\n説明 座標で示された位置に，方向ベクトルで指定された向きに回転して文字を書き込む。\n移動（オプション）は t (接線方向の移動) ， n (法線方向の移動) ，反転 (r)。\noptionは サイズの倍率(”Size=”, Cinderraのみ)と色(”Color=”)。\nLetterrot(C,B-A,\"t2n5\",\"AB\");\n移動を略して\nLetterrot(C,B-A,\"AB\");\nとすることもできる。この場合は，微小な移動はされない。\n⇒関数一覧\n1.2.6 マーキング\n関数 Anglemark(name,点リスト , options)\n機能 点リストで示された角に弧の形状の角の印をつける。\n説明 Listplot() などと同様，点リストが点名の場合はnameは省略できる。弧を描かず文字だけを入れる場合は\noptions に ”nodisp” を指定する。\noptionsは次の通り。\n数値角の印の大きさ。 初期設定は１\n線種”dr, n”, ”da,m,n” , ”do,m,n”\n”Expr=文字” または ”Letter=文字” : 文字を入れる\n”Expr=位置 , 文字”: 位置を指定して文字を入れる。位置は頂点からの距離。\n【例】三角形の内角に印をいれ，文字を書き込む。（下図左）\nListplot([A,B,C,A]);\nLetter([A,\"n1\",\"A\",B,\"w1\",\"B\",C,\"e1\",\"C\"]);\nAnglemark([B,A,C]);\n41", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 42", "content": "Anglemark([C,B,A],[\"Expr=\\theta\"]);\nAnglemark([A,C,B],[2,\"dr,3\",\"Expr=2,\\alpha\"]);\n【例】三角形の内角に弧を描かず，◦ だけ書き込む。（下図右）\nListplot([A,B,C,A]);\nLetter([A,\"n1\",\"A\",B,\"w1\",\"B\",C,\"e1\",\"C\"]);\nAnglemark([C,B,A],[\"Expr=\\circ\",\"nodisp\"]);\nA\nA\nα\nθ\n◦\nB C\nB C\n※角の印には平行四辺形の形状のものもある。Paramark()を参照のこと。\n関数 Paramark(name,点リスト , options)\n機能 点リストで示された角に平行四辺形の形状の角の印をつける。\n説明 Listplot() などと同様，点リストが点名の場合はnameは省略できる。\noptionsは次の通り。\n数値角の印の大きさ。 初期設定は1\n線種”dr, n”, ”da,m,n” , ”do,m,n”\n”Expr=文字”: 文字を入れる\n”Expr=位置 , 文字”: 位置を指定して文字を入れる。位置は頂点からの距離。\nA\n【例】三角形の内角に印をいれ，文字を書き込む。\nListplot([A,B,C,A]);\nParamark([A,B,C]); α\nParamark([C,A,B],[3,\"Expr=\\alpha\"]);\nParamark([B,C,A],[\"dr,2\",\"Expr=2,\\theta\"]); θ\nC\nB\n※角の印には弧の形状のものもある。Anglemark() を参照のこと。\n関数 Bowdata(name,点リスト , options)\n機能 弓形を描く\n説明 点リストで与えられた2点を結ぶ弓形を描く。\n2点を反時計回りに回る方向に弓形を描く。\noptionsは，[曲がり , 空白サイズ, 文字, 線種]\n曲がりは弧の曲がり具合の指定。 初期設定は1\n空白サイズは中央にあける空白の大きさ\n文字は，”Expr=文字”\nまた，”Expr=微小移動 , 文字”で位置を指定して文字を入れる。\n微小移動は t,n。移動量は数字をつける（正負が可）。\n42", "tags": []}
{"title": "Page 43", "content": "t は線分方向の微小移動，n は線分と垂直方向の微小移動\n微小移動の最後にr をつけると，上下反転する。\n【例】三角形ABCの各辺に弓形マークをつけ記号を入れる。\nA\nListplot(\"1\",[A,B,C,A]);\nLetter([A,\"n1\",\"A\",B,\"w1\",\"B\",C,\"e1\",\"C\"]);\n10\nBowdata(\"1\",[A,B]);\nBowdata(\"2\",[B,C],[1,\"Expr=t0n3,a\"]);\nBowdata(\"3\",[C,A],[2,1.2,\"Expr=10\",\"da\"]);\nB C\na\nこれに加え，文字を回転して表示する方法がある。ただし，Cinderellaの画面には反映されない。文字をを回\n転するには次のように書く。\n”Exprrot=微小移動 , 文字”\n以下にいくつか例を示す。\nBowdata([B,A],[1,1,\"Exprrot=a\"]);\nBowdata([D,C],[1,1,\"Exprrot=t3n0,a\"]);\nBowdata([F,E],[1,1,\"Exprrot=t-3n0,a\"]);\nBowdata([H,G],[1,1,\"Exprrot=t0n3,a\"]);\nBowdata([L,K],[1,1,\"Exprrot=t0n0r,a\"]);\nBowdata([N,M],[1,1,\"Exprrot=t3n0r,a\"]);\na a a a a a\nno t3n0 t-3n0 t0n3 t0n0r t3n0r\noption\n関数 Segmark(name,リスト,options）\n機能 線分に印をつける\n説明 リストで与えられた2点を端点とする線分に印をつける。\nオプション\nType=印の種類 ”seg(,n)”,”cir”,”poly(,n)”\nWidth：線の幅，Size：大きさ\n【例】四角形ABCDを描き線分に印をつける。\nListplot([A,B,C,D,A]); A\nD\nSegmark(\"1\",[A,B],[\"Type=seg,1\"]);\nSegmark(\"2\",[B,C],[\"Type=seg,2\",\"Width=1.2\"]);\nSegmark(\"3\",[C,D],[\"Type=cir\"]);\nSegmark(\"4\",[D,A],[\"Type=poly,4\",\"Size=1.5\"]);\nB C\n関数 Htickmark([横座標 , 方向 , 文字])\n機能 横軸に目盛と文字を書く。\n説明 引数は位置（横座標），方向，文字。複数点の情報を[ ]内にまとめて記入できる。方向を省略すると ”s1”に\nなる。微調整は描画面には反映されないので，PDFにして確認する。目盛の長さは Setmarklen() で設定で\nきる。\n【例】 方向指定の例：Htickmark([1,\"1\",2,\"n1\",\"2\",3,\"se\",\"3\",4,\"4\"]);\n43", "tags": []}
{"title": "Page 44", "content": "y\n2\nx\nO 1 3 4\n【例】-5から5までの目盛を打つ。Cindyscriptのリスト処理を使って，次のように引数のリストを作って渡す。\nmemori=apply(-5..5,x,[x,text(x)]);\nmemori=flatten(remove(memori,[[0,\"0\"]]));\nHtickmark(memori);\n１行目，apply のカッコ内の -5..5 でリスト[-5,-4,-3,-2,-1,0,1,2,3,4,5] ができる。それを用いて，applyで[数,\n数の文字] からなるリストができる。text(x) はxを文字にする関数。2行目で，このリストから，[0,”0”]を除\nき，リストを平滑化する。 結果は次のようになる。\ny\nx\n−5 −4 −3 −2 −1 O 1 2 3 4 5\n関数 Vtickmark([横座標 , 方向 , 文字])\n機能 縦軸に目盛と文字を書く。\n説明 Htickmarkと同様。縦軸に目盛を書く。方向を省略すると ”w1”になる。\n【例】点(0, 1), (0, 2)の西側に1, 2を表示する。\nVtickmark([1,\"1\",2,\"2\"]);\n関数 Rulerscale(始点 ，横軸目盛 , 縦軸目盛)\n機能 目盛を打つ\n説明 始点の位置を縦横の起点として目盛りを打つ。目盛はリストで与える。[”r”,a,b,c,d]の形式では，aからbま\nでc間隔で，倍率dの目盛を打つ。[”f”,n1,”str”,n2,”str”,・・] の形式では，nと”str”がセットで，nの位置\nに”str”を書く。ただし，位置はCinderellaの描画面の原点を0とする。\nListplot() とともに用いると，座標軸とは異なる線分に目盛を打つことができる。\nFramedata() とともに用いると矩形に目盛を打つことができる。\n【例】x軸上の (2,1) から (9,1) まで線分を引き，1目盛を10として目盛を打つ。\nListplot(\"1\",[[2,1],[9,1]]);\nRulerscale([2,1],[\"r\",2,9,1,10],[]);\ny\n20 30 40 50 60 70 80 90\nx\nO\n【例】Aを原点に置いた矩形枠を描き，横に0,1,2,3,4,5，縦に d1，d2 の目盛を打つ。\nFramedata(\"1\",[A,B],[\"corner\"]);\nRulerscale(A,[\"r\",0,5,1],[\"f\",1,\"d1\",3,\"d2\"]);\n44", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 45", "content": "d2\nd1\n0 1 2 3 4 5\n⇒関数一覧\n1.3 プロットデータの操作\n関数 Drawfigures(or Drwfigs)(name ,データリスト,オプションリスト)\n機能 複数のプロットデータのスタイル（オプション）をリストで与えて描画する\n説明 複数のプロットデータをまとめて扱う。たとえば，円と，円周上の点の2つのプロットデータをまとめて扱え\nば，平行移動や回転で，それらのプロットデータをまとめて平行移動や回転ができる。\n【例】サイクロイドの図を描く。\nopcr=[\"dr\"];\noppt=[\"Size=2\",\"Color=red\"];\nCircledata(\"1\",[[0,1],[0,0]],opcr);\nPointdata(\"1\",[0,0],oppt);\nad1=[\"cr1\",\"pt1\"];\ndt=2*pi/32;\nopcr=[\"dr,0.3\"];\nnn=32;\nforall(1..nn,\nt=dt*#;\nRotatedata(2,ad1,-t,[[0,1],\"nodisp\"]);\nTranslatedata(2,\"rt2\",[t,0],[\"nodisp\"]);\nDrawfigures(text(#),[\"tr2_1\",\"tr2_2\"],[opcr,oppt]);\n);\ny\nx\nO\n最初に，まとめて平行移動や回転をするデータをリスト化しておく。また，各データのオプションをリストと\nして与えていることに注意。こうすることで，サイズや色などのスタイルを元のスタイルに合わせることがで\nきる。\n⇒関数一覧\n関数 Changestyle(PDリスト, options)\n機能 描画オプションを変更する\n説明 複数の図形の描画オプションを一括して変更する。\n【例】線分AB，円ABの線を破線にしてTEXに書き出さないようにする。\n45", "tags": ["LaTeX", "中級者向け", "初心者向け", "図形描画", "基本操作", "数式描画", "関数"]}
{"title": "Page 46", "content": "Changestyle([\"sgAB\",\"crAB\"],[\"da\",\"notex\"]);\n関数 Invert(PD)\n機能 プロットデータを逆順にする\n関数 Joincrvs(name, プロットデータのリスト, options)\n機能 隣接する曲線プロットデータ のリストを繋いで1本の曲線を作る。\n説明 曲線のリストは隣接する順番で指定する。\noptionsは線種”dr, n”, ”da,m,n” , ”do,m,n”\n√ √\n【例】線分y =x (− 2≤x≤ 2)と半円で得られる閉曲線を描いて黄色で塗る。\n点Aは原点に，点Bは適当なところに作図しておく。\ny\nPlotdata(\"1\",\"x\",\"x=[-sqrt(2),sqrt(2)]\");\nB.xy=[sqrt(2),sqrt(2)];\nCircledata(\"2\",[A,B],[\"Rng=[pi/4,pi/4*5]\"]);\nJoincrvs(\"1\",[\"gr1\",\"cr2\"]);\nShade([\"join1\"],[\"Color=yellow\"]);\nx\nO\n関数 Partcrv(name, A, B, プロットデータ, options)\n機能 曲線プロットデータ上の点A, B の間の部分曲線を描く。\n説明 2点A, Bの順序は曲線の向きと同一であること。曲線の向きは，y = f(x)のグラフではx座標が増加する\n向き。\noptionsは線種”dr, n”, ”da,m,n” , ”do,m,n”\n【例】放物線を点線で描き，一部を実線で描く。\nPlotdata(\"1\", \"x^2\", \"x\", [\"do\"]);（プロットデータの名前はgr1となる）\nPartcrv(\"1\", [0,0], [1,1], \"gr1\");\ny\nx\nO\n【例】円の一部を実線で描く。円のプロットデータは指定した円周上の点から反時計回りの順にできる。点A\nは円の中心，Bは円周上の点とする。点P,Qは適当な位置に作図しておく。\nCircledata([A,B], [\"do\"]);\nPlotdata(\"1\", \"x^2\", \"x\", [\"do\"]);\ntmp=Intersectcrvs(\"crAB\",\"gr1\");\nP.xy=tmp_1;\nQ.xy=tmp_2;\nPartcrv(\"1\", P, Q, \"crAB\");\nPartcrv(\"2\", Q, P, \"crAB\");\n46", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 47", "content": "y y\nP P\nQ Q\nx x\nO O\npart1 の図 part2 の図\n【例】放物線y =x2が円で切り取られる部分を実線で描く。 y\nCircledata(\"1\",[[0,2],[0,0]],[\"da\"]);\nPlotdata(\"1\",\"x^2\",\"x\",[\"do\"]);\ntmp=Intersectcrvs(\"cr1\",\"gr1\");\nPartcrv(\"2\",tmp_2,tmp_1,\"gr1\",[\"dr,2\"]);\nx\nO\n関数 Enclosing(name , PDリスト , [開始位置, 交点計算の許容限界1, 2])\n機能 複数の曲線から閉曲線を作る。\n説明 開始位置は，最初と最後の曲線の交点が複数あるときに指定する。\n開始点は近くに取ればよい。許容限界は，通常は指定しなくてよい。\n【例】放物線と直線で囲まれる領域に色を塗るために Shade() を使う。\nPlotdata(\"1\",\"x^2\",\"x\");\nLineplot(\"1\",[[0,0],[1,0]]);// axis x\nLineplot(\"2\",[[2,0],[2,1]]);\nEnclosing(\"1\",[\"Invert(gr1)\",\"ln1\",\"ln2\"],[\"nodisp\"]);\nShade([\"en1\"],[\"Color=red\"]);\ny\nx\nO\n注）閉曲線のとりかたでは，出発点を原点にした反時計回りまたは時計回りにすると\n反時計回りでEnclosing(\"1\",[\"ln1\",\"ln2\",\"Invert(gr1)\"]);\n時計回りでEnclosing(\"1\",[\"gr1\",\"Invert(ln2)\",\"Invert(ln1)\"]);\n⇒関数一覧\n47", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 48", "content": "関数 Hatchdata(name , 方向リスト , プロットデータ , options)\n機能 閉曲線の内部に斜線を引く。\n説明 引数は，曲線名，内部外部のパターンを与える”i”，”o”の文字列，閉曲線を与える曲線と領域の内部を定める\n方向のリストとオプション。\nオプション（カッコ内はデフォルト値）\n角度(45)，間隔(1)，\"Max=(20)\" 斜線の最大本数，\n\"No=点リスト\" 点リストの点が選ばれているときは実行しない\n\"File=y/m/n (n)\" データファイルを作るか\n\"Check=点リスト\" 点リストの点が変更されていたら，ファイルを作り直す\n【例】円の内部。(次図左)\nCircledata([A,B],[\"dr\"]);\nHatchdata(\"1\",[\"i\"],[[\"crAB\"]],[\"dr,0.7\"]);\n【例】3つの閉曲線の内側・外側のパターンが同一である領域（次図右）\nCircledata([A,B],[\"dr\"]);\nParamplot(\"1\",\"[4*cos(t),2*sin(t)]\",\"t=[0,2*pi]\");\nParamplot(\"2\",\"[2*cos(t),4*sin(t)]\",\"t=[0,2*pi]\");\nHatchdata(\"1\",[\"ioi\"],[[\"crAB\"],[\"gp1\"],[\"gp2\"]],[\"dr,0.7\"]);\nHatchdata(\"2\",[\"iio\"],[[\"crAB\"],[\"gp1\"],[\"gp2\"]],[\"dr,0.7\"]);\ny y\nx x\nO O\n【例】複数の領域。\nPlotdata(\"1\",\"2*sin(x)\",\"x=[-pi,3*pi]\",[\"Num=100\"]);\nListplot([A,B]);\nListplot([A,C]);\nHatchdata(\"1\",[\"ii\"],[[\"sgAB\",\"n\"],[\"gr1\",\"s\"]],[\"dr,0.7\"]);\nHatchdata(\"2\",[\"ii\"],[[\"sgAC\",\"s\"],[\"gr1\",\"n\"]],[\"dr,0.7\"]);\ny\n2\nx\nO\n−2\n【例】複数の領域その2。\n48", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 49", "content": "Plotdata(\"1\",\"2*sin(x)\",\"x=[-pi,3*pi]\",[\"Num=100\"]);\nListplot([A,B]);\nListplot([A,C]);\nHatchdata(\"1\",[\"iio\"],[[\"sgAB\",\"s\"],[\"sgAC\",\"n\"],[\"gr1\",\"n\"]]);\ny\n2\nx\nO\n−2\n【例】3次曲線と接線で囲まれた領域\n点Aを原点付近に作図しておく。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-2*x\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Num=100\"]);\nPutoncurve(\"A\",\"gr1\");\ncoef=Derivative(\"f(x)\",\"x\",A.x);\nDefvar([\"coef\",coef]);\nDeffun(\"g(x)\",[\"regional(y)\",\"y=coef*(x-A.x)+A.y\",\"y\"]);\nPlotdata(\"2\",\"g(x)\",\"x\",[\"Num=1\"]);\nif(!Isptselected(A),\nEnclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[A,\"nodisp\"]);\nHatchdata(\"1\",[\"i\"],[[\"en1\"]]);\n);\ny\n点Aをドラッグして曲線上を動かすと，\nif(!Isptselected(A),・・・の効果により，\nその間は領域の斜線は引かれない。\n点A以外の画面上の適当な位置をクリックして，\n点Aが選択状態でなくなると斜線が引かれる。\nx\n引かれる斜線の向きや間隔を変えることもできる。 O\n間隔は実数で指定できる。\n【例】円の内部または円と直線で区切られた図形\nCircledata([A,B]);のプロットデータ crAB を用いて，下図左から\nHatchdata(\"1\",[\"i\"],[[\"crAB\"]]); 円内に傾き45◦の斜線を引く\nHatchdata(\"2\",[\"i\"],[[\"crAB\"]],[-40,2]); 傾き−40◦，間隔を2倍に\nHatchdata(\"3\",[\"i\"],[[\"crAB\"]],[\"dr,0.5\"]);線の太さを0.3倍に\nHatchdata(\"4\",[\"i\"],[[\"crAB\"]],[-45,2,\"dr,0.3\"]);\n円のオプションに ”notex”をつけた場合と，破線で描いた場合。\nCircledata([A,B],[\"notex\"]);\nCircledata([A,B],[\"da\"]);\n49", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 50", "content": "直線で分けられた領域を作り，対角の上下にハッチをかける。線を描き分ける。\nCircledata([A,B]);\nLineplot(\"1\",[A,B]);\nLineplot(\"2\",[A,C]);\nHatchdata(\"1\",[\"iii\"],[[\"crAB\"],[\"ln1\",\"n\"],[\"ln2\",\"n\"]]);\nHatchdata(\"2\",[\"iii\"],[[\"crAB\"],[\"ln1\",\"s\"],[\"ln2\",\"s\"]],[90,0.5]);\n⇒関数一覧\n関数 Dotfilldata(name , 方向リスト , プロットデータ , options)\n機能 領域を点で敷き詰める。\n説明 Rとデータの授受をおこなって描画する。書式はHatchdata()と同様。\nオプションは，ドットの密度で 0.1〜0.8 程度。 初期設定は0.3。\n【例】円グラフ\nPartcrv() と Enclosing() で閉曲線を作って点を敷き詰める。\nr=3;\np0=r*[cos(pi/2),sin(pi/2)];\np1=r*[cos(-pi/6),sin(-pi/6)];\np2=r*[cos(-3*pi/4),sin(-3*pi/4)];\nCircledata(\"1\",[[0,0],[r,0]]);\nListplot(\"1\",[[0,0],p0]);\nListplot(\"2\",[[0,0],p1]);\nListplot(\"3\",[[0,0],p2]);\nPartcrv(\"1\",p1,p0,\"cr1\");\nEnclosing(\"1\",[\"sg2\",\"part1\",\"Invert(sg1)\"],[[0,0]]);\nPartcrv(\"2\",p2,p1,\"cr1\");\nEnclosing(\"2\",[\"sg3\",\"part2\",\"Invert(sg2)\"],[[0,0]]);\nDotfilldata(\"1\",[\"i\"],[[\"en1\"]]);\nDotfilldata(\"2\",[\"i\"],[[\"en2\"]],[0.1]);\n関数 Shade((”名前”), プロットデータのリスト , options)\n機能 閉曲線で囲まれた領域を塗りつぶす。\n説明 第１引数には，閉曲線を与える曲線分のプロットデータ名を並べる。\nデフォルトでは，Joincrvs を使って閉曲線を作っている。ただし，プロットデータのリストに”Invert()”が\n50", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 51", "content": "入っていれば，Enclosingを使う。\noptionの Color は，Cinderellaの画面上での描画色をリストで与える。濃さを指定したい場合は色名やRGB\nではなくCMYKにする。\noptionsには，他に，次のものがある。\n・Enclosingを使うかどうか：”Enc=y/n”（初期値は n）\n”Enc=y”のとき，複数のShadeを使うときは，名前をつける。\n・Enclosingのときの開始点，描画色\n・描画領域のトリミング：”Trim=y/n” （初期値は n ）\n・TeXへの書き出しで，先頭に配置するか：”First=y/n” （初期値は n ）\n”First=n” のときは，使われているGdataの書き出しの直前におく．\n【例】y =2sinxのグラフと直線y =1 とで囲まれた部分に黒0.2の濃さで色を塗る。\nSetax([7,\"nw\"]);\nPlotdata(\"1\",\"2*sin(x)\",\"x\",[\"Num=100\"]);\nLineplot(\"1\",[[0,1],[1,1]]);\nEnclosing(\"1\",[\"ln1\",\"Invert(gr1)\"],[[2,1],\"nodisp\"]);\nShade([\"en1\"],[\"Color=[0,0,0,0.2]\"]);\ny\nO x\n正弦曲線と直線の交点は簡単に計算できるので，次のように Partcrv() で部分曲線を求め，Enclosingで閉曲\n線を求めずにShadeを使ってもよい。\nPlotdata(\"1\",\"2*sin(x)\",\"x\",[\"Num=100\"]);\nLineplot(\"1\",[[0,1],[1,1]]);\nPartcrv(\"1\",[5*pi/6,1],[13*pi/6,1],\"gr1\");\nShade([\"ln1\",\"Invert(part1)\"],[[2.5,1],\"Color=0.2*[1,0,0,1]\"]);\n【例】2つの放物線で囲まれた部分を赤で塗る。\nPlotdata(\"1\",\"x^2-1\",\"x=[-3,3]\");\nPlotdata(\"2\",\"x^2/2\",\"x=[-3,3]\");\nShade([\"gr2\",\"Invert(gr1)\"],[[-1.5,1],\"Color=[1,0,0]\",\"alpha->0.4\"]);\nここで，alpha->0.4 は画面上の色濃度指定。\ny\nx\nO\n【例】描画領域（NE,SWの矩形領域）からはみ出した部分は表示しないようにする。\n51", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 52", "content": "Plotdata(\"1\",\"x^2\",\"x\");\nPartcrv(\"1\",[-1,1],[3,9],\"gr1\");\nListplot(\"1\",[[3,9],[-1,1]]);\nJoincrvs(\"1\",[\"sg1\",\"part1\"]);\nShade([\"join1\"],[\"Color=[0,0,0.2,0]\",\"Trim=y\"]);\nSW,NE を動かしてみると，白枠内だけが色塗りされる。\n【例】同心円をリング状に塗る。\n下図右のように，同心円をリング状に塗るが，円2つだけでは閉曲線はできない。そこで，左図のように，円\nの描き始めを線分で結んで閉曲線を作る。このとき，向きを考えて，Joincrvsで結ぶように，”Enc=n”をつ\nける。線分は非表示にしたいので，\"nodisp\"オプションをつけておく。なお，点Aを適当な位置に作図して\nおく。\nr1=2;\nr2=1.5;\nCircledata(\"1\",[A,A+[r1,0]]);\nCircledata(\"2\",[A,A+[r2,0]]);\nListplot(\"1\",[A+[r1,0],A+[r2,0]],[\"nodisp\"]);\nShade([\"cr1\",\"sg1\",\"Invert(cr2)\",\"Invert(sg1)\"],[\"Enc=n\",\"Color=green\"]);\ncr1\ncr2\nA\nsg1\nその他，Joincrvs() の例も参照のこと\n関数 Reflectdata(name , プロットデータ , 対称点または対称軸,options)\n機能 プロットデータの鏡映を作成\n説明 プロットデータを指定された点または軸に関して対称移動する。\n対称点は座標または，点の識別名。ただし，対称点を座標で示すときは要素がひとつのリストにする。\n対称軸はリスト[ 点1, 点2 ]で指定。\n【例】中心A , 半径ABの円を描き，そのプロットデータを用いて鏡映を描く。\n点Cに関して対称な円を実線\n点(-1,2)に関して対称な円を太い実線\n直線DEに関して対称な円を破線\nCircledata([A,B]);\nReflectdata(\"1\",\"crAB\",[C]);\nReflectdata(\"2\",\"crAB\",[[-1,2]],[\"dr,2\"]);\nReflectdata(\"3\",\"crAB\",[D,E],[\"da\"]);\n52", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 53", "content": "y\n(-1,2) C D\nB\nA\nx\nO\nE\n関数 Rotatedata(name , プロットデータ ，角度 , [中心 , options])\n機能 プロットデータの位置を回転する\n説明 図形を，中心で示された点の周りに回転する。角度は弧度法で与える\n中心とoptionsはまとめてリストで与える。\n【例】中心A , 半径ABの円を描き，次のように回転して線種を変えて描く。\nπ π π\n点Cを中心に ，点(1,5)を中心に ， 点Dを中心に −\n2 3 3\nCircledata([A,B]);\nRotatedata(\"1\",\"crAB\",pi/2,[C]);\nRotatedata(\"2\",\"crAB\",pi/3,[[1,5],\"dr,2\"]);\nRotatedata(\"3\",\"crAB\",-pi/3,[D,\"da\"]);\ny\nD (1,5)\nB C\nA\nx\nO\n⇒関数一覧\n関数 Scaledata(name , プロットデータ，x方向比率 , y方向比率 , [中心 , options])\n機能 図形の位置を拡大・縮小する\n説明 図形の位置をプロットデータを用いて指定された比率で拡大・縮小する\n比率は [x方向比率 , y方向比率] のリストで与えてもよい。\n中心とoptionsはまとめてリストで与える。optionsは線種\n【例】点A(2,1)，B(1,1)，C(-1,-1)，D(3,-1) を作図しておく。\nAを中心とする半径ABの円のプロットデータを作り，\n原点中心にx軸方向に3，y軸方向に2拡大する。\n53", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 54", "content": "Ｃを中心にx軸方向に3，y軸方向に2拡大し，実線で太く描く。\n−→\n原点中心にベクトルODだけ拡大し，破線で描く。\nCircledata([A,B]);\nScaledata(\"1\",\"crAB\",3,2,[[0,0]]);\nScaledata(\"2\",\"crAB\",3,2,[C,\"dr,2\"]);\nScaledata(\"3\",\"crAB\",[D.x,D.y],[[0,0],\"da\"]);\ny\nB A\nx\nO\nC D\n関数 Translatedata(name , プロットデータ , 移動ベクトル , options)\n機能 プロットデータを平行移動する\n説明 プロットデータを移動ベクトルで示された分だけ平行移動する。\n【例】点A,B,C,Dを作図ツールでとっておく。\nCircledata([A,B]); でできる円（crAB）をx軸方向に2，y軸方向に3だけ平行移動して実線で描く。\n−→\nベクトルOCだけ平行移動し，実線で太く描く。\n−→\nベクトルODだけ平行移動し，破線で描く。\nCircledata([A,B]);\nTranslatedata(\"1\",\"crAB\",[2,3]);\nTranslatedata(\"2\",\"crAB\",C,[\"dr,2\"]);\nTranslatedata(\"3\",\"crAB\",D,[\"da\"]);\ny\nD (2,3)\nB A\nx\nO\nC\n関数 Intersectcrvs(プロットデータ1, プロットデータ2)\n機能 2曲線の交点リストを取得する。\n説明 オプションとして，共有点があるかどうかを判断するための限界値があるが，通常は使わない。\n【例】円と曲線の交点をP,Qとする。 y\nPlotdata(\"1\", \"sin(x)\", \"x\", [\"Num=100\"]); Q\nx\n54 O\nP", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 55", "content": "Circledata([A, B]);\ntmp=Intersectcrvs(\"gr1\",\"crAB\");\nP.xy=tmp_1;\nQ.xy=tmp_2;\nこの関数は，交点のデータのリストを返すので，tmp＝[ [ -0.37, -0.36 ], [ 2.13, 0.85 ] ] のように値が返って\nくる。交点の順序は PD1, PD2 の順序と曲線の向きによって決まる。曲線の向きは，y =f(x)のグラフでは\nx座標が増加する向きで，パラメーター表示曲線ではパラメータの増加する向き。また，PD1 上から探し始め\nて PD2 との交点を拾っていく。\n交点がひとつの場合も tmp ＝ [ [ 2.45, 0.63 ] ] と 2 重のリストに入っているので，点として取出すには\nP.xy=tmp_1; とする。\n注）交点の算出は，数式処理によるのではなく，プロットデータからの数値探索のアルゴリズムによっている。\n関数 Intersectcrvspp(プロットデータ1, プロットデータ2)\n機能 2曲線の交点のパラメータリストを取得する。\n説明 2曲線の交点の座標とパラメータのリストを返す。\nIntersectcrvs() との違いは，パラメータがあるかどうかである。\n【例】放物線と直線の交点のパラメータを求める。\n2点A(-1,1),B(2.4) を作図しておく。\nPlotdata(\"1\",\"x^2\",\"x\");\nLineplot([A,B]);\np1=Intersectcrvs(\"gr1\",\"lnAB\");\np2=Intersectcrvspp(\"gr1\",\"lnAB\");\nprintln(\"p1=\"+p1);\nprintln(\"p2=\"+p2);\nとすると，コンソールには\np1=[[-1,1],[2,4]]\np2=[[[-1,1],17.68,1],[[2,4],42.66,1]]\nと表示される。\n関数 Intersectcurves(プロットデータ1, プロットデータ2)\n関数 Intersectcurvespp(プロットデータ1, プロットデータ2)\n機能 2曲線の交点リストを取得する。接点があるとき，時間はかかるがより精密な値を返す。\n関数 Nearestpt(PD1，PD2)\n機能 2曲線に対し，最も近い点とそのパラメータ，距離のリストを返す\n説明 戻り値は，それぞれの曲線上の点の座標とプロットデータ中の位置，その距離からなるリスト。\ny\n【例】2つの放物線上の点の最短距離とその位置を求める。\n点A,Bを作図ツールでとっておく。\nA\nPlotdata(\"1\", \"x^2+2\", \"x=[-2,2]\");\n1.78\nPlotdata(\"2\", \"-(x-2)^2+1\",\"x=[0,4]\");\nplist=Nearestpt(\"gr1\",\"gr2\");\nA.xy=plist_1; B\nx\nB.xy=plist_3; O\n55", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 56", "content": "Listplot([A,B],[\"do\"]);\nPointdata(\"1\",[A,B],[\"Size=2\"]);\nLetter([A,\"n2w\",\"A\",B,\"s2e\",\"B\",(A+B)/2,\"e\",text(plist_5)]);\nここで plistに代入されたリストは次のようになっている。\n[[0.4,2.16],31,[1.58,0.82],20.73,1.78]\nなお，距離 1.78 は小数点以下第3位を四捨五入して表示されている。\n関数 Nearestptcrv(座標, プロットデータ)\n機能 点に最も近いプロットデータの点を求める\n説明 第１引数の座標に最も近い曲線プロットデータ上の点の座標を返す。\n【例】点(3,0)に最も近い y =x2 上の点を求める。\ny\n点Aは(3,0)に，点Bは適当な位置に作図しておき，次のスクリプトを実行すると点Bが求める点となる。\nPlotdata(\"1\", \"x^2\", \"x\");\nB.xy=Nearestptcrv(A.xy,\"gr1\");\nListplot([A,B],[\"do\"]);\nPtsize(2);\nPointdata(\"1\",[A,B]); B\nLetter([A,\"ne\",\"A\",B,\"nw\",\"B\"]);\nA\nx\nO\n注）第１引数は座標なので，A ではなく A.xy としなければならない。\n⇒関数一覧\n関数 Numptcrv (プロットデータ)\n機能 プロットデータの個数を返す\n説明 Cindyscript で length(PD)とするのと同じ\n【例】 Implicit() と Paramplot() でそれぞれ楕円を描いたときのプロットデータの順序を比較する。ただし，\nTeXには書き出さない。\nSlider(\"A-C-B\",[0,-2],[6,-2]);\nImplicitplot(\"1\",\"x^2+4*y^2=4\",\"x=[-2,2]\",\"y=[-2,2]\",[\"do\"]);\nParamplot(\"1\",\"[2*cos(t)+5,sin(t)]\",\"t=[0,2*pi]\",[\"do\",\"Num=140\"]);\nprintln([Numptcrv(imp1),Numptcrv(gp1)]);\nn=floor(C.x*2);\nrepeat(n,s,start->0,\nt=s*10+1;\ndraw(imp1_t,color->hue(s/10));\ndraw(gp1_t,color->hue(s/10));\n);\n4行目で，２つのプロットデータの個数が同じであることを確かめている。\n56", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 57", "content": "スライダを動かすと，10個おきのプロットデータに対応する点が描かれる。\n関数 Paramoncrv(点の座標, 曲線の名前)\n機能 曲線上の点のパラメータ値を返す。\n説明 曲線は折れ線として描かれ，曲線上の各点はこの折れ線の節点を基準としたパラメータ値を持つ。パラメータ\n値は整数部分が節点の番号，小数部分が節間の位置を表す。\n【例】図のような点PからQに至る円周上の5等分点を節点とする折れ線cr1において，n番目の線分上の点\nはn≤t≤n+1の範囲のパラメータ値を持つ。\nたとえば，図の点Aは2番目の線分上にあり，この値は\nprintln(Paramoncrv(A.xy,\"cr1\"));\nによってコンソールに表示される。（たとえば2.45）。\n点Aの位置を動かすとパラメータ値は変わる。\ny\nA\nx\nQ O P\n⇒関数一覧\n関数 Pointoncrv(点のパラメータ値, PD)\n機能 曲線上のパラメータ値を持つ点の座標を返す。\n説明 曲線（折れ線）上の節点を基準としたパラメータ値により点の位置が定まる。\n【例】図のような点PからQに至る半円周上の5等分点を節点とする折れ線cr1において，パラメータ値4.5\nを持つ点Aは4番目の線分の中点である。したがって\nCircledata(\"0\",[[0,0],[2,0]],[\"do\"]);\nCircledata(\"1\",[[0,0],[2,0]],[\"Num=5\",\"Rng=[0,pi]\"]);\ntmp=Pointoncurve(4.5,\"cr1\");\nPointdata(\"1\",tmp,[\"Size=3\"]);\nLetter([tmp,\"nw\",\"A\",[2,0],\"se\",\"P\",[-2,0],\"sw\",\"Q\"]);\nによって，点Aを中点に置くことができる。\ny\nA\nx\nQ O P\n57", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 58", "content": "関数 Ptcrv(n,プロットデータ)\n機能 曲線プロットデータのn 番目の節点を返す\n説明 Cindyscript の PD n と同じ\n【例】楕円上の点で分割する。あからじめ必要な点を作図しておく。\ny\nCircledata([O,P],[\"do\",\"Num=100\",\"notex\"]);\nScaledata(\"1\",\"crOP\",4/3,1); B\nF.xy=[-sqrt(7),0];\nA=Ptcrv(9,sc1); A\nB=Ptcrv(16,sc1);\nListplot(\"1\",[A,F,B],[\"da\"]);\nPartcrv(\"1\",A,B,\"sc1\",[\"dr,3\"]); x\nF O\nShade([\"part1\",\"sg1\"],0.1);\nArrowhead(B,\"sc1\",[1.5]);\nLetter([A,\"ne\",\"A\",B,\"ne\",\"B\",F,\"s2\",\"F\"]);\n関数 Ptstart(プロットデータ) , Ptend(プロットデータ)\n機能 プロットデータの最初の点，最後の点を取得する。\n説明 プロットデータの最初の点，最後の点の座標を返す。\n【例】定義域を限定したグラフの両端の点を取得し線分ABを引く。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^2\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"do\"]);\nPlotdata(\"2\",\"f(x)\",\"x=[-1,2]\");\nLineplot(\"1\",[Ptstart(gr2),Ptend(gr2)],[\"do\"]);\nListplot(\"1\",[Ptstart(gr2),Ptend(gr2)]);\nLetter([A,\"w2\",\"A\",B,\"e2\",\"B\"]);\ny\nB\nA\nx\nO\n関数 ReadOutData(ファイル名）\n機能 外部データをプロットデータとして読み込む\n説明 CやRなどで作成したKeTCindy形式のデータファイルを読み込む。\n引数を省略した場合は，Fheadで定義したファイル名のテキストファイルから読み込む。\nファイル名にはコンマで区切ってパスを与えることができる。たとえば，\nReadOutData(\"/datafolder\",\"file.txt\");\nKeTCindy形式のデータとは\n変数名//\nstart//（リストの始まり）\n[ , , ], …. // （個々のデータ２か３次元）\n58", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 59", "content": "…\nend// （リストの終わり）\nstart// （次のリストの始まり）\n…\nend//\n変数名//\nstart//\n…\nend//\nの形式のテキストファイル。\n関数 Readcsv(path,filename,option)\n機能 csvファイルを読む。\n説明 csvファイルを読みこむ。戻り値は読み込んだデータのリスト。\n第１引数の path は，ファイルを作業フォルダ（ 初期設定は fig ）に置いた場合は省略することができる。そ\nうでない場合は，フルパスで指定する。たとえば，”/Users/Hoge/Desktop”\noption は，”Flat=” で，”Flat=y” の場合は，読み込んだデータをリスト化したときに平滑化（１次元のリス\nト）にする。 初期設定は ”Flat=n”\n【例】次のようなCSVファイル sample.csvを読み込むとする。\n12,14,15,18,13\n9,13,17,21\nつまり，２行分のデータである。\ndata=Readcsv(\"sample.csv\");\nとすると，\ndata=[[12,14,15,18,13],[9,13,17,21]]\nとなる。\nしたがって，１行目のデータだけ取り出したい場合は\ndt1=data_1;\nとする。\n⇒関数一覧\n関数 Readlines(path,filename,option)\n機能 テキストファイルを1行ずつ読む。\n説明 テキストファイルを1行ずつ読みこむ。戻り値は読み込んだ文字列のリスト。\n第１引数の path は，ファイルを作業フォルダ（ 初期設定は fig ）に置いた場合は省略することができる。そ\nうでない場合は，フルパスで指定する。たとえば，”/Users/Hoge/Desktop”\n関数 WriteOutData(ファイル名,PDリスト）\n機能 外部データに書き出す\n説明 プロットデータをKeTCindy形式のデータファイルに書き出す。出力先の 初期設定は作業フォルダ。\n【例】 放物線と円のプロットデータを書き出す。\nPlotdata(\"1\", \"x^2\",\"x\");\n59", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 60", "content": "Circledata(\"1\",[[0,0],[1,0]]);\nWriteOutData(\"figdata.txt\",[\"gr1\",gr1,\"cr1\",cr1]);\n書き出されたファイルの中身は次のようになっている。\ngr1//\nstart//\n[[-2.68843,7.22765],[-2.51807,6.34067],・・,[-2.00698,4.02798]]//\n[[-1.83662,3.37318],[-1.66626,2.77642],・・,[-1.15518,1.33443]]//\n以下，同様にプロットデータが続く\n[[5.82965,33.98479]]//\nend//\ncr1//\nstart//\n[[1,0],[0.99211,0.12533],[0.96858,0.24869],・・,[0.80902,0.58779]]//\n以下，同様にプロットデータが続く\n[[0.87631,-0.48175],[0.92978,-0.36812],・・,[1,0]]//\nend////\n関数 Extractdata(データ名,属性）\n機能 ReadOutData() で読み込んだデータに属性をつける。\n説明 ReadOutData() で読み込んだデータには，線種などの属性がついていないので，そのままでは表示されない。\nそこで，この関数により属性をつけて表示する。\nReadOutData(\"figdata.txt\");\nExtractdata(\"gr1\",[\"da\"]);\n⇒関数一覧\n1.4 計算\n関数 Derivative(関数式 , 変数 , 値)\n機能 関数の微分係数を求める\n説明 関数式で与えられた関数の，「変数＝値」における微分係数を求める。\n値は，点の座標を用いることができる。点Aのx座標であれば， A.x とする。\n【例】3次曲線上の点Aで接線を引く。点A,Bは作図ツールで適当にとっておく。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-4*x\",\"y\"]);\ncoef=Derivative(\"f(x)\",\"x\",A.x);\nA.y=f(A.x);\nB.y=coef*(B.x-A.x)+A.y;\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Num=200\"]);\nLineplot([A,B]);\nLetter([A,\"ne\",\"A\"]);\ny\nA\nx\nO\nなお，曲線のプロットデータを用いて，微分係数を求めることもできる。\n60", "tags": ["LaTeX", "中級者向け", "図形描画", "外部連携", "数式描画", "関数"]}
{"title": "Page 61", "content": "書式は，Derivative(PD ,値) で，次のように使う。（上の例と同じ図ができる）\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-4*x\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Num=200\"]);\ncoef=Derivative(\"gr1\",\"x=\"+A.x);\nA.y=f(A.x);\nB.y=coef*(B.x-A.x)+A.y;\nLineplot([A,B]);\nLetter([A,\"ne\",\"A\"]);\nまた，曲線の接線については，Tangentplotも参照されたい。\n⇒関数一覧\n関数 integrate(関数式 , 変数=範囲 , options)\n関数 integrate(PD , 範囲 , options)\n機能 関数式またはプロットデータで与えられた関数（データ）の数値積分の値を求める。\n説明 optionsは次の通り。\n”Rule=s”：シンプソン法による。 初期設定は大島ベジェ公式。\n”Num=数値”：分割数の指定。初期値は 100\n【例】f(x)=x3−2x2+2 について，0から3までの定積分の値を求める。\nf(x):=x^3-2*x^2+2;\nval=Integrate(\"f(x)\",\"x=[0,3]\");\nprintln(val);//8.25が表示される\n【例】上の例と同じ関数をプロットデータで指定する。\nplotdata(\"1\",\"x^3-2*x^2+2\",\"x\");\nprintln(Integrate(\"gr1\",[0,3]));\n数値積分ではなく，数式処理として定積分の値を求める場合は，Maxima を利用する。CalcbyM を参照。\n関数 Inversefun(関数 , 範囲 , 値)\n機能 関数の逆関数値を求める\n説明 関数は文字列で，関数式もしくは定義された関数名とする。\n指定された範囲の中で逆関数値を求める。存在しない場合は一方の端点を戻り値とし，コンソールに「not\nfound」と表示される。\n数式処理ではなく数値探索のアルゴリズムを使っているので，単調関数でない場合は範囲をできるだけ狭くと\nるとよい。値が複数ある場合は，小さいほうが返される。\n【例】x=Inversefun(\"sin(x)\",\"x=[0,pi/2]\",0.5);\n実行すると x=0.5236 となる。\n⇒関数一覧\n1.5 値の取得と入出力\n計算値やプロットデータの値を取得したり，R用とのデータのやりとりをする。\n61", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 62", "content": "関数 Asin(実数）,Acos(実数)\n機能 逆三角関数の値を求める。\n説明 CindyScriptの組み込み関数に，arcsin(x),arccos(x) があるが，xの絶対値が１より大きい場合は虚数を返す。\nこのことがＲではエラーになるので，計算誤差により１よりわずかに大きくなる場合のために用意した関数。\n関数 Sqr(実数）\n機能 平方根を求める。\n説明 CindyScriptの組み込み関数に，sqrt(x) があるが，xが負の場合は虚数を返す。これに対し，xが負の場合は\n０を返すようにした関数。計算誤差により１よりわずかに大きくなる場合のために用意した。\n関数 BBdata(ファイル名,option）\n機能 画像ファイルのサイズを求める\n説明 TeX 文書において，inputgraphics コマンドで画像を貼り込むときの BB サイズを求める。TeX 処理系の\nextractbb を用いて画像ファイルからBBデータを作り，テキストファイルとして作業ディレクトリに書き出\nす。これを読んで，コンソールに ingludegarphics のコマンドを書き出す。これをそのままコピーすればよい。\nなお，bbの値は整数値ではなく，高精細の値を小数点以下2桁に四捨五入して示される。画像ファイルは，\nPDFに限らず，PNG，JPGなどでもよい。\noptionは，幅または高さの指定。\n”w=40mm” でwidth=40mm が，”h=40mm”で height=40mm が付加される。\n【例】\n⇒関数一覧\n関数 Cindyname()\n機能 作図中のファイル名を取得する。\n説明 たとえば，現在作図しているファイル名が 「polygon.cdy」のとき，”polygon” を返す。\n関数 Crossprod(リスト，リスト)\n機能 2つのベクトルの外積を求める。\n説明 Cindyscriptの組み込み関数 cross(リスト，リスト)と同じ。\n【例】Crossprod([1,0,0],[1,1,1]);\n結果は[0,-1,1]\n関数 Dotprod(リスト，リスト)\n機能 2つのベクトルの内積を求める。\n説明 Cindyscriptでは，積の演算で内積が求められる。\n62", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 63", "content": "【例】Dotprod([1,2,3],[1,-1,1]);\n結果は2\n[1,2,3]*[1,-1,1] でも同じ結果を得る。\n関数 Findarea(プロットデータ)\n機能 プロットデータで囲まれる部分の面積を求める。\n説明 閉曲線をなすプロットデータで囲まれる部分の面積を求める。大島のベジェ公式を用いている。\n【例】楕円の面積を求めて表示する。\nParamplot(\"1\",\"[3*cos(t),2*sin(t)]\",\"t=[0,2*pi]\");\narea=Findarea(\"gp1\");\nprintln(Sprintf(area,6));\nコンソールに面積 18.849536 が表示される。\n関数 Findlength(プロットデータ)\n機能 プロットデータの曲線の長さを求める。\n説明 プロットデータが描く曲線の長さを求める。大島のベジェ公式を用いている。\n【例】円周の長さを求めて表示する。\nCircledata(\"1\",[[0,0],[2,0]]);\nlen=Findlength(\"cr1\");\nprintln(Sprintf(len,6));\nコンソールに 12.558097 が表示される。\n⇒関数一覧\n63", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 64", "content": "1.6 作表\n関数 Tabledata(横データ，縦データ, 除外線 , options)\n機能 表の枠を作成し，表のデータlist を返す\n説明 Cinderellaの描画面上に左下を原点とする表を作成する。\n除外線がない場合は空リストを指定する。（必須）\noptionsのうち，Tabledataに特有なものは\nラベルのスキップ幅，”Setwindow=n”，”Geo=n”，”Move=[0,0]”\nである。\n”Setwindow=n” をつけると，NE,SWによる出力領域指定が有効になり，NE,SWをドラッグして出力領域を\n変更できる。（初期状態は，表の右上と左下）つけない場合は，表の部分だけが出力される。\n縦横データは，次のように，間隔の幅で与える。ただし，幅はCinderellaの描画面の0.1を単位とする。\nYoko=[20,20,20,20];\nTate=[10,10,10,10,10];\nTabledata(Yoko,Tate,[]);\n”Geo=y”とすると，作成された表には，行，列の制御点がつく。画面上では，横罫線の番号 r0,r1,・・・縦罫\n線の番号 c0,c1,・・・と見ることもできる。また，縦幅，横幅が数字で示される。ただし，これらはTEXには\n出力されない。また，作表はCinderellaの描画面上では座標平面上に置かれるが，TEXへの出力は座標平面\n上には置かないことが多いので，座標軸は非表示としている。\n描画面 TeX\n”Geo=y”の場合は，表のサイズ・行幅・列幅は，作成後にそれぞれの制御点をドラッグすることにより任意に\n変えることができる。\n除外線は，除外するセルの罫線を，rとc で位置指定する。\n横罫線の場合，横罫線の番号，範囲（から，まで）\n縦罫線の場合，縦罫線の番号，範囲（から，まで）\nとする。\nラベルのスキップ値は，いくつおきにラベルをつけるかの設定である。0とするとラベルが表示されない。た\nだし，ラベルはCinderellaの画面上だけの問題。\n”Move=点の座標”とすると，指定された点が左下になるように平行移動される。\n【例】4つの罫線を非表示にする\nRmv=[\"r1c0c1\",\"c3r0r1\",\"c3r3r5\",\"r4c2c4\"];\nYoko=[20,20,20,20];\nTate=[10,10,10,10,10];\nTabledata(Yoko,Tate,Rmv);\n64", "tags": []}
{"title": "Page 65", "content": "で，次の表ができる。\n＜補足＞\n”Geo=y”の場合，制御点r0,r1,・・・,c0,c1,・・・がなければ新しく作り，すでに存在する場合はそのままと\nする。したがって，一度表を作成したのち，行数・列数を修正して作り直す場合は，一度既存の点を消去する\n必要がある。そのためには，「すべての点を選択する」ツールをクリックして点を消去するのがよい。クリック\nすると，消去後すぐに新規作成される。(誤って「すべての要素を選択する」を選ばないこと)\n他の点が描画されている場合は，表の部分だけドラッグで選択するか，表示メニューの「式による表示」で一\n覧表を出して，制御点を選択して消去する。\n”Geo=n”（デフォルト）の場合，幾何点を生成しない。幾何点を作成しないメリットは，スクリプトだけで全\n体の縦横幅を変更できること。デメリットはインタラクティブな微調整ができないこと。\n【例】１つおきにスキップして，r1,r3,c1,c2 を非表示とする。\nYoko=[20,20,20,20];\nTate=[10,10,10,10,10];\nTabledatalight(Yoko,Tate,[],[2]);\n関数 Changetablestyle(罫線リスト, 変更オプション)\n機能 Table の罫線の描画オプションを変更\n説明 罫線の部分的に指定して描画オプションを変更できる。\n【例】\nTabledatalight([10,20,10,20],[10,10,10],[]);\nChangetablestyle([\"r1c0c4\"],[\"da\"]);\nChangetablestyle([\"r2c0c2\",\"c1r0r3\"],[\"nodisp\"]);\n複数の表を描くこともできる。\n⇒関数一覧\n65", "tags": []}
{"title": "Page 66", "content": "関数 Findcell(列番号, 行番号)\n機能 セルの情報list（中心，横幅／2，縦幅／2）を返す\n説明 列番号，行番号は左上のセルを１列１行として数える。\n【例】Tabledata(Tate,Yoko,[]);\nprintln(Findcell(2,1));\nとすると，2列１行のセルの中心の座標と横幅の半分，縦幅の半分の値がリストとしてコンソールに表示さ\nれる。\n関数 Putcell (列番号, 行番号, 位置, 文字データ)\n機能 セルに文字列を入れる\n説明 複数のセルにまたぐ位置指定の場合，列番号，行番号は，セル左上と右下の制御点の名称で指定する。\n位置はc, r, l, t, b （中央center , 右right , 左left , 上top , 下bottom ）\n位置の例を以下に示す。\nyoko=[20,20,20,20,20];\ntate=[20,20];\nTabledata(yoko,tate,[\"c1r1r2\",\"c4r1r2\"]);\nPutcell(1,1,\"c\",\"A\");\nPutcell(2,1,\"r\",\"B\");\nPutcell(3,1,\"l\",\"C\");\nPutcell(4,1,\"t\",\"D\");\nPutcell(5,1,\"b\",\"E\");\nPutcell(\"c0r1\",\"c2r2\",\"c\",\"F\");\nPutcell(\"c2r1\",\"c3r2\",\"lb\",\"G\");\nPutcell(\"c3r1\",\"c5r2\",\"rt\",\"H\");\nc0 c1 c2 c3 c4 c5\nr0\nD\nA BC\nE\nr1\nH\nF\nG\nr2\n※数式の場合は，Putcellexpr を用いる。\n⇒関数一覧\n関数 Putcol (列番号, 文字位置，文字列リスト)\n機能 １列に順に文字を書き入れる\n説明 列番号で指定した列に，第１行から順に文字列リストの文字を書き入れる\n数の場合はダブルクォートでくくらなくてもよい。\nセルを飛ばす場合は，ヌル文字列 ”” を書く。\n関数 Putcolexpr (列番号, 文字位置，文字列リスト)\n機能 １列に順に文字を書き入れる\n説明 文字列にTEX書式を使うことができる\n関数 Putrow (行番号, 文字位置，文字列リスト)\n66", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 67", "content": "機能 １行に順に文字を書き入れる\n説明 行番号で指定した行に，第１列から順に文字列リストの文字を書き入れる。\n関数 Putrowexpr (行番号, 文字位置，文字列リスト)\n機能 １行に順に文字を書き入れる\n説明 文字列にTEX書式を使うことができる\n文字を入れる例を示す。\nTate=[20,20,20,20,20];\nYoko=[15,15,15];\nTabledata(Tate,Yoko,[\"c1r1r2\",\"r1c2c3\",\"r2c2c3\"]);\nPutcol(3,\"c\",[\"A\",\"B\",\"C\"]);\nPutcolexpr(4,\"l\",[\"x^2\",\"y=\\sqrt{x^3}\"]);\nPutrow(1,\"c\",[1,\"二\"]);\nPutrowexpr(3,\"c\",[\"\",\"\\frac{\\pi}{2}\",\"\",\"\",\"\\sum{x^2}\"]);\nc0 c1 c2 c3 c4 c5\nr0\n1 二 A x2\nr1\n√\nB y = x3\nr2\n∑\nπ C x2\n2\nr3\n※ r0,c0,・・は画面に表示される番号。\nグラフや文を入れた表の作成例\nPutcolexpr(),Putrowexpr() では，数式だけでなく，一般のTEXの文を入れることができる。また，グラフの\n位置を適当に合わせて描画することにより，表のセルの中にグラフを入れることができる。\n【例】2次関数のグラフと2次方程式の判別式の関係\nセルの中にグラフを描く例。実際には，セルの位置にグラフを描く。\nx軸を描くための点A〜Fは作図ツールでとっておく。\nスクリプトを実行して表ができたら，制御点をドラッグしてサイズを調整し，点A〜Ｆもドラッグして軸と放\n物線の共有状況を示すようにする。\nTate=[40,40,40];\nYoko=[20,20,20];\nTabledata(Tate,Yoko,[],[\"dr,2\"]);\nChangetablestyle([\"r1c0c3\"],[\"dr\"]);\nChangetablestyle([\"r2c0c3\"],[\"da\"]);\nPlotdata(\"1\",\"(x-2)^2+0.5\",\"x=[0.5,3.5]\");\nPlotdata(\"2\",\"(x-6)^2+1\",\"x=[4.5,7.5]\");\nPlotdata(\"3\",\"(x-10)^2+1.5\",\"x=[8.5,11.5]\");\nListplot([A,B]);\nListplot([C,D]);\nListplot([E,F]);\nPutrowexpr(1,\"c\",[\"D>0\",\"D=0\",\"D<0\"]);\nPutrow(2,\"c\",[\"2点で交わる\",\"接する\",\"共有点なし\"]);\n67", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 68", "content": "判別式とx軸の交点\nD>0 D=0 D<0\n2点で交わる 接する 共有点なし\n【例】増減表とグラフ\n関数の増減表とグラフを１つの表の中に入れた例。\nTate=[6,6,10,6,10,6,40];\nYoko=[30,6,6,6];\nRmv=[\"c1r0r1\",\"c2r0r1\",\"c3r0r1\",\"c4r0r1\",\"c5r0r1\", \"r1c6c7\",\n\"r2c6c7\",\"r3c6c7\"];\nTabledata(Tate,Yoko,Rmv,[\"dr\"])\nTlistplot(\"23d\",[\"c1r2\",\"c2r3\"]);\nTlistplot(\"23u\",[\"c1r3\",\"c2r2\"]);\nPutrowexpr(2,\"c\",[\"x\",0,\"\\cdots\",\"\\tfrac{1}{4}\",\"\\cdots\",4]);\nPutrowexpr(3,\"c\",[\"y`\",\"\",\"-\",0,\"+\"]);\nPutrowexpr(4,\"c\",[\"y\",0,\"\\searrow\",\"-\\tfrac{1}{4}\",\"\\nearrow\",2]);\nPutcell(1,1,\"l2t2\",\"{\\small\\begin{minipage}{44mm}$y=x-\\sqrt{x}$\\\\$y`=\n\\dfrac{2\\sqrt{x}-1}{2\\sqrt{x}}=0$|より\\vspace{1mm}\\\\\\hspace*{2zw}$x=\n\\dfrac{1}{4}$\\vspace{1mm}\\\\増減表は次のようになる\\end{minipage}}\" );\nPlotdata(\"1\",\"x-sqrt(x)\",\"x=[0,3]\",[\"do\",\"notex\"]);\nListplot(\"2\",[[0,0],[3,0]],[\"do\",\"notex\"]);\nListplot(\"3\",[[0,-0.5],[0,3]],[\"do\",\"notex\"]);\nTranslatedata(\"1\",\"gr1\",[4.9,1],[\"dr\"]);\nTranslatedata(\"2\",\"sg2\",[4.9,1],[\"dr\"]);\nTranslatedata(\"3\",\"sg3\",[4.9,1],[\"dr\"]);\nLetter(Ptend(tr2),\"e1\",\"\\small{$x$}\");\nLetter(Ptend(tr3),\"n1\",\"\\small{$y$}\");\nLetter(Ptstart(tr2),\"w1\",\"\\small O\");\nExpr(Ptend(tr1),\"nw-2\",\"y=x-\\sqrt{x}\");\n√\ny=x− √ x\ny′ = 2 x √ −1 =0より y\n2 x\n1\nx=\n4\n√\n増減表は次のようになる． y =x− x\nx 0 ··· 1 ··· 4\n4\ny′ − 0 + O x\ny 0 ↘ −1 ↗ 2\n4\n【例】凹凸を含めた増減表\nTate=apply(1..8,20);\nYoko=[apply(1..4,10);\nTabledata(Tate,Yoko,[]);\nPutrowexpr(1,c,[\"x\",\"\\cdots\",\"-1\",\"\\cdots\",\"0\",\"\\cdots\",\"1\",\"\\cdots\"]);\nPutrowexpr(2,c,[\"y`\",\"+\",\"+\",\"+\",\"0\",\"-\",\"-\",\"-\"]);\nPutrowexpr(3,c,[\"y``\",\"+\",\"0\",\"-\",\"-\",\"-\",\"0\",\"+\"]);\nPutrowexpr(4,c,[\"y\",\"\\nelarrow\",\"\\frac{1}{\\sqrt{e}}\",\"\\nerarrow\",\n\"1\",\"\\serarrow\",\"\\frac{1}{\\sqrt{e}}\",\"\\selarrow\"]);\n68", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 69", "content": "x ··· −1 ··· 0 ··· 1 ···\ny′ + + + 0 − − −\ny′′ + 0 − − − 0 +\ny √1 1 √1\ne e\nここで，凹凸を示す矢印は，ketpic.sty で定義されているものである。\nnelarrow,nerarrow,selarrow,serarrow,NELarrow,NERarrow,SELarrow,SERrarrow がある。先頭のne,seで\n北東・南東（右上・右下）次の r,l は回転の向き（r：right：反時計回り，l：left：時計回り）の矢印(arrow)と\n覚えるとよい。直線系の矢印は NEarrow,SEarrrow。 少しずつ違うので試されたい。\nなお，これらの矢印はCindyTeXにはないので，Cinderellaの描画面には表示されない。\n関数 Tgrid(セルラベル)\n機能 表のセルの座標を返す\n説明 指定されたセルの左上の座標を返す。実際には，セルラベルは罫線を示しているので，指定した罫線の交点\n（格子点）ということもできる。\n関数 Tlistplot(セルラベル1,セルラベル2)\n機能 指定された2つの格子点を線分で結ぶ\n説明 セルに斜線を引くのに用いる。\n【例】Tlistplot([\"c0r1\",\"c1r2\"]);\n⇒関数一覧\n1.7 ファイル操作\n以下で，小文字から始まるコマンドはKeTCindyplugin.jarで定義されているものである。\n関数 isexists(dir,file)\n機能 dirにfileが存在するか\n関数 makedir(path,dirname)\n機能 pathにdirnameのdirを作成する。\n関数 Filelist([mainpath,]dirname)\n機能 (mainpathにある)dirnameのファイル一覧をリストとして返す。\n関数 Readlines([path,]filename)\n機能 (pathにある)filernameの各行を読み込みリストとして返す。\n説明 pathのデフォルトはDirwork。\n関数 gethome()\n機能 ユーザホームを返す。\n69", "tags": ["KeTCindy", "中級者向け", "初心者向け", "基本操作", "外部連携", "構文"]}
{"title": "Page 70", "content": "関数 ismacos()\n機能 Mac OSか。\n関数 ismacos()\n機能 Windows OSか。\n関数 islinux()\n機能 Linux OSか。\n1.8 Tikzコマンドの利用\nTikzはKETCindyにはない豊富なコマンドを持っている。これらを利用するには，TexcomでTEXのコマンド列\nに追加すればよい。\n【例】\nUsegraphics(\"tikz\");\nSetwindow([-1,5],[-1,3]);\nHtickmark([1,\"1\",2,\"2\"]);\nVtickmark([1,\"1\",2,\"2\"]);\nCircledata(\"1\",[[4,2],1]);\nTexcom(\"\\shadedraw (1,1) rectangle +(2,2);\");\ny\n2\n1\nx\nO 1 2\n関数 Tikzptseq(点リスト）\n機能 KETCindyの点リストをTikzの点列に変換して，文字列として返す。\n【例】A.xy=[-4,-3], B.xy=[4,3]のとき\nTikzptseq([A,B,[4,-3]]);\n⇒ (-4.00000,-3.00000)--(4.00000,3.00000)--(4.00000,-3.00000)\n関数 Tikzline(点リスト, [オプション]）\n機能 Tikzのlineコマンドを用いて線分をかく。\n説明 \"cycle\"は閉多角形, \"Join=round/bevel/miter\"(コーナーの形状)\n【例】A.xy=[-4,-3], B.xy=[4,3], C.xy=[4,-3]のとき\nListplot(\"1\",[A,B,C,A],[\"dr,6\"]);\nChangestyle([\"sg1\"],[\"notex\"]);\nTikzline([A,B,C,\"cycle\"],[\"Width=6\",\"Join=round\"]);\n70", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 71", "content": "1.9 その他\n関数 Assign(文字列，文字，文字）\n機能 文字列の中のある文字を他の文字で置き換える\n説明 第１引数の文字列中の第2引数の文字を，第3引数の文字で置き換える。\n第3引数が数値の場合，文字列に変換される。\n第2引数と，第3引数をリストにして，複数の置き換えをすることができる。\n【例】a*x を1.3*x とした文字列を返す。次のいずれも同じ結果になる。\nAssign(\"x^2+a*x\",\"a\",\"1.3\");\nAssign(\"x^2+a*x\",\"a\",1.3);\n【例】直線 y =bx−b2 の係数bを変化させて描き，包絡線をうかびあがらせる。\nrepeat(50,t,\ncb=t/5-5;\nPlotdata(text(t),Assign(\"b*x-b^2\",\"b\",cb),\"x\");\n);\ny\nx\nO\n【例】文字で表された x と y の係数をまとめて数値で置き換える。\nAssign(\"a*x^2+b*x\",[\"a\",1,\"b\",2]);\n⇒関数一覧\n関数 Colorcode(種別1,種別2, カラーコード)\n機能 種別1から種別2へカラーコードを変換する。戻り値は変換されたコード。\n説明 種別は，”rgb”,”cmyk”,”hsv”のいずれか。\n【例】変換例をいくつか示す。\nRGBの[1,0,0]をCMYKに変換したコードをコンソールに表示する。\n71", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 72", "content": "col=Colorcode(\"rgb\",\"cmyk\",[1,0,0]);\nprintln(col);\nCMYKの[0,1,1,0]をRGBに変換したコードをコンソールに表示する。\ncol=Colorcode(\"cmyk\",\"rgb\",[0,1,1,0]);\nprintln(col);\nRGBの[1,0,0]をHSVに変換したコードをコンソールに表示する。\ncol=Colorcode(\"rgb\",\"hsv\",[1,0,0]);\nprintln(col);\n関数 Dqq(文字列)\n機能 文字列の前後に\"をつける。\nstr=\"abc\";\nstr2=Dqq(str);\nprintln([str,str2]);\n関数 Factorial(n)\n機能 正の整数nの階乗を計算する。\n関数 Binomial(n,r)\n機能 2項係数 C を計算する。\nn r\n【例】Binomial(60,30) ⇒ 118264581564861424\n関数 Gcdl(numberlist)\n機能 numberlistの最大公約数を計算する。\n【例】Binomial(60,30) ⇒ 118264581564861424\n関数 Norm(ベクトル), Norm(ベクトル1, ベクトル2)\n機能 ベクトル（2つのベクトルの場合は差の大きさ）の大きさを計算する。\n関数 Figpdf(option）\n機能 出力枠サイズのPDFを作る。\n説明 KETCindyでは，通常，出力された fig.tex ファイルを閲覧するPDFをA4サイズで作成する。これに対し，\nFigpdf()を実行すると，出力サイズのPDFを作成する。閲覧用だけではなくワープロなどにに貼り込むとき\nにそのまま使用できる。ただし，そのための親子プロセスを生成して実行するため，次の手続き(1)(2)が必要\nとなる。\n(1) Setparent(filename)で，出力するPDF用のファイル名を設定する。\n(2) 出力は，「Parent」のボタンを押す。\nたとえば，fig.cdy で作図しているとき，\nSetparent(\"pic\");\n72", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 73", "content": "とすると，fig.tex を表示した pic.pdf が作成される。pic.pdf が目的のPDF。\nこのファイル名は 作図しているCinderellaのファイル名，または Setfiles() で指定したファイル名とは異なる\nものにする。\noptionは，マージン（余白）と平行移動量。指定しない場合は 初期設定値。\n余白は，左右上下の順に4つの数をコンマで区切る。\n平行移動量は，右方向，下方向をリストで与える。\n余白指定と平行移動指定は同時に行うことができる。\n【例】余白の設定\nFigpdf([5,5,10,10]); 左右に5mm，上下10mmの余白\nFigpdf([[5,10]]); 右に5mm，下に10mm平行移動して表示\nFigpdf([5,8,10,10,[5,-5]]); 左5mm，右8mm，上下10mmの余白，\n右に5mm，上に5mm平行移動して表示\nなお，座標軸を表示する場合，右側は最低3mmの余白を設定しないと軸の文字が入らない。\n⇒関数一覧\n関数 Help(文字列）\n機能 関数の使用例を取得する\n説明 文字列で始まる関数の使用例をコンソールに表示する。\nprintln(Help(\"L\"));\nのようにすると，コンソールに，次のように「L」で始まる関数の使用例が表示される。\nLetter([C,\"c\",\"Graph of $f(x)$\"]);\nLetter([C,\"c\",\"xy\"],[\"size->30\"]);\n文字を書き込む\nLetterrot(C,B-A,\"AB\");\nLetterrot(C,B-A,\"t0n5\",\"AB\");\nLetterrot(C,B-A,0,5,\"AB\");\n傾いた文字を書き込む\n・・・・\n関数 Helpkey(文字列）\n機能 関数の使用例をキーワードで検索する\n説明 文字列に与えたキーワードで関数の使用例を検索し，コンソールに表示する。\n【例】Helpkey(\"直線\");とすると，コンソールに次のように表示される。\nIntersectsgpL(\"\",[p1,p2],[p3,p4,p5],\"draw\");\nIntersectsgpL(\"R\",\"P-Q\",\"A-B-C\");\nIntersectsgpL(\"R\",\"P-Q\",\"A-B-C\",\"put\");\n空間の直線と平面の交点\nLineplot(\"1\",[[2,1],[3,3]]);\n・・・・\n関数 Indexall(str1,str2);\n機能 文字列 str1 から str2 を検索しその位置をすべて返す\n説明 Cindyscriptの indexof() の拡張版。indexof() が最初に見つかった位置を返すのに対し，Indexall()は存在す\n73", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 74", "content": "る位置をすべてリストにして返す。\n【例】str=”abcabcabc” から ”b”を検索する。\nindexof(str,\"b\") では，2 が返る。\nIndexall(str,\"b\") では，[2,5,8]が返る。\n関数 Bracket(str [,bracketpair]);\n機能 文字列 strから bracketpair を検索しその位置と階層レベルのリストを返す。\n説明 bracketpairのデフォルトは”()”。\n【例】Bracket(”(abc(de)fg)”)では，[[1,1],[5,2],[8,-2],[11,-1]]が返る。\n関数 Getlevel(str [,poslistまたはsep,key]);\n機能 文字列 strから sepの位置と階層レベルのリストを返す。\n説明 sep, keyのデフォルトはコンマと()。sepを与えたとき，poslistはsepのindexlistになる。\n【例】Getlevel(”(a,(b,c),d)”では，[[3,1],[6,2],[9,1]]が返る。\n関数 Isptselected(点名）または Ptselected(点名)\n機能 点が選択されていれば true,そうでなければ false を返す。\n説明 点名はリストで与える。引数はなしにすることも可能で，その場合はすべての点が対象。\nKeTCindyの関数の中には処理に時間がかかるものがある。その場合，点をドラッグするなど，画面上で操作\nをするとその都度再計算されるために，動きが非常に遅くなる。そこで，ドラッグする点をこの関数で指定す\nれば，ドラッグしている間は処理されないようにすることができる。\n【例】点Aを原点近くにとっておき，次のスクリプトを実行する。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-2*x\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Num=100\"]);\nPutoncurve(\"A\",\"gr1\");\ncoef=Derivative(\"f(x)\",\"x\",A.x);\nDefvar([\"coef\",coef]);\nDeffun(\"g(x)\",[\"regional(y)\",\"y=coef*(x-A.x)+A.y\",\"y\"]);\nPlotdata(\"2\",\"g(x)\",\"x\",[\"Num=1\"]);\nif(!Ptselected(A),\nEnclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[A,\"nodisp\"]);\nHatchdata(\"1\",[\"i\"],[[\"en1\"]]);\n);\n点Aをドラッグ中（選択状態） 点A以外をクリックして選択状態を解除\n74", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 75", "content": "関数 Reparse(文字列か文字列のリスト)\n機能 評価(parse)してから実部をとる(re)。\n説明 CindyJSでは，実数の演算でも虚数の項が出ることがあり，その対応である。\n【例】str=\"(0-1)^2\"; Reparse(str);\n注）CindyJSでformat(parse(str),0)を実行すると1-i*0になる。\n関数 Slider(名称，位置1,位置2)\n機能 スライダを作成する\n説明 名称は ”A-C-B” の形で，端点をA,B，スライダ点をCとしたスライダを作る。\n端点A,Bの位置を，位置1，位置2で指定する。単に”C”としたときは端点をとらない。スライダにより取得\nしたい値は，点Cの座標（たとえば C.x）を利用する。\n点A,B,Cはあらかじめ作図しておく必要はない。既にある場合はその点を使う。\n【例】2つのスライダを用意し，y =asin(x−b) のa,b を変化させる。\nSlider(\"A-C-B\",[-5,-2],[5,-2]); // C is movable.\nSlider(\"D-F-E\",[-6,-2],[-6,2]); // F is movable.\nPlotdata(\"1\",Assign(\"y=a*sin(x-b)\",[\"a\",F.y,\"b\",C.x]),\"x\");\n関数 Sprintf(実数,長さ)\n機能 小数点以下の長さを固定した文字列に変換\n説明 実数を，小数点n位までの数とした文字列に変換する\n【例】円周率\nSprintf(pi,2) は 3.14 を返す\nSprintf(pi,7) は 3.1415927 を返す\n注）pi は Cindyscriptの予約変数で，円周率を表す。\n関数 Textformat(数，桁数)\n機能 小数点以下の桁数を指定して数を文字列化する。\n説明 第１引数は数のリストでもよい。数のリストの場合は，戻り値は，対応する数値を指定係数にした後，リスト\nを文字列化する。Cindyscriptの組み込み関数にも，format()という同様の関数があるが，format() は文字列\nのリストを返す。\n【例】円周率を小数点以下5位までで文字列化する。\nTextformat(pi,5); format(pi,5);\n戻り値は，いずれも \"3.14159\"\n【例】第１引数がリストのときの，format() との戻り値の違い。\ndt=[1/6,0.5];\n75", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 76", "content": "Textformat(dt,4); // 戻り値は ”[ 0.1667 , 0.5 ]”\nformat(dt,4); // 戻り値は [ ”0.1667” , ”0.5” ]\n関数 Texcom(TEXコード）\n機能 TEXのコードを書き出す\n説明 任意のTEXのコードを書き出す\nTikz参照\n関数 Windispg()またはWindisp(データのリスト）\n機能 定義されているプロットデータをCinderella画面に黒線で描く\n説明 Windispg()は，スクリプトの最後に置くことで，出力される部分だけが黒で描かれるので，出力図を確認する\nことができる。ただし，Letter()関数で表示した点の名称などがCinderellaで作図したラベルと重なって表示\nされて見にくくなることもある。この関数を実行しなくても出力には影響しない。\nWindisp(データのリスト）は，Rから KETCindy用に出力されたファイルを ReadOutData()関数で読み込\nんだときに，必要なプロットデータ列だけを表示するのに用いる。\nReadOutData(”filename.txt”) でデータを読み込むと，そのデータに含まれるプロットデータ列が，コンソー\nルに\nOutdata of filename.txt : [Gfn,Gdfn,Gh]\nのように表示される。\nこのうち，GfnとGhだけを表示するのであれば\nWindispg([Gfn,Gh]);\nとする。引数なしで\nWindispg();\nとすればすべてのプロットデータ列が表示される。\nなお，いずれの場合も，作図したプロットデータも同時に表示される。\n作図した図を全てではなく選択して表示する場合は，それらのプロットデータ名をリストにして引数とする。\nたとえば，sg1, gr1, crABが定義されているとき，\nWindispg([\"sg1\",\"gr1\"]);\nとすれば，sg1,gr1のみが表示される。\n関数 Viewtex()\n機能 TEXのソースファイルを書き出す。引数なし。\n説明 グローバル変数Fheadで定義したファイル名に ”main” を付加したTEXのソースファイルとバッチファイル\n（Macの場合はシェルファイル）を作成する。\n関数 Workprocess(）\n機能 作図の経過を取得する\n説明 作図ツールを用いた作図の経過を取得する。\nprintln(Workproccess());\nとすると，コンソールに作図手順が表示される。\n関数 Op(n,list or str)\n機能 リストまたは文字列から要素を抜き出す\n説明 第2引数のリストまたは文字列のn番目の要素（文字）を返す。\n76", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 77", "content": "Cindyscriptの アンダーバーの演算子 (list n , str n) と同様。\n関数 Strsplit(文字列 , 文字)\n機能 文字列を分解する。\n説明 第１引数の文字列を第2引数の文字の位置で分解したリストを返す。\n【例】文字aで区切って分解する。\nstr=\"abcadeaf\";\nstrL=Strsplit(str,\"a\"); //[” ”,”bc”,”de”,”f”] を返す。\n同様の関数に，Cindyscriptの tokenize(文字列,文字列)がある。tokenize() の第２引数は文字列や，文字のリ\nストでもよい。\n⇒関数一覧\n関数 Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数(5)])\n機能 分母リストの1つを分母とする近似分数と誤差を返す。\n説明 戻り値は，簡易TeX-like書式の文字列，誤差，分子，分母。\n【例】Fracform(0.33,1..100); => [fr(33,100),''err=0',1,3]\n【例】Fracform(pi,200)); => [fr(355,113),err=0.0000002668,355,113]\n【例】Fracform(0.33,1..100); => [fr(33,100),''err=0',1,3]\n⇒関数一覧\n関数 Tonormalform(簡易TeX-like文字列)\n機能 *を省略した文字列に*を補った文字列を返す。\n【例】Tonormalform(\"fr(1,3)xsin(x)\")); => \\verbfr(1,3)*x*sin(x)—\n⇒関数一覧\n関数 Addasterisk(文字列)\n機能 数式文字列に*を追加する。\n【例】Addasterisk(\"fr(1,2)x^2+3sin(x)\"); =¿ \"fr(1,2)*x^2+3*sin(x)\"\n⇒関数一覧\n関数 Sla2fra(文字列)\n機能 文字列の中の / を簡易TeX-like書式の分数に直す。\n【例】Slat2fra(\"pi/3\"); =¿ ”frapi,3”\n⇒関数一覧\n77", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 78", "content": "関数 Totexform(簡易TeX-like書式)\n機能 TeX書式の文字列を返す。\n【例】Totexform(\"fr(1,3)\"); => frac{1}{3}\n⇒関数一覧\n関数 Tocindyform(簡易TeX-like書式)\n機能 Cindy書式の文字列を返す。\n⇒関数一覧\n78", "tags": []}
{"title": "Page 79", "content": "2 他の数式処理ソフトなどとの連携\n2.1 Rとの連携\nRは主に統計解析のためのソフトウェアで，binorm（二項分布），pois（ポアソン），unif（一様分布），chisq（カイ\n2乗），f（F分布），t（t分布）など，多くの確率分布をサポートしている。\nKETCindyでは，kc.bat/command/sh によってコマンドをRに渡し，結果をテキストファイルで受け取る。この\nとき，Rとのやりとりで，次のようなファイルが作業ディレクトリに作成される。\n拡張子 r ：r用のファイル\n拡張子 dat，拡張子 txt：データファイル\nこのデータのやり取りに関する次のオプションがある。\nオプションなしまたは，”” のとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n”m”のとき，強制的にデータファイルを作り直す。\n”r” のとき，すでにあるデータファイルを読み込む。\n注）\\は\\\\と書く。\n2.1.1 Rの関数の利用\n関数 Boxplot(名前,データ,垂直位置,箱の高さ,option)\n機能 箱ひげ図を描く\n説明 データは，リストで渡す場合とファイル名を渡してファイルから読み込む場合がある。データファイルは csv\n形式とする。\n【例】乱数で作成した5未満の実数のデータを箱ひげ図にする。\ndt1=apply(1..100,5*random());\nBoxplot(\"1\",dt1,1,1/2);\ny\nx\nO\n【例】外部ファイルとして用意したデータを読み込んで箱ひげ図にする。\nBoxplot(\"2\",\"datafile.csv\",3,1/2);\n複数列から成るcsvファイルを読み込むには，Readcsvを使う。csvファイルは，作業フォルダ（ 初期設定は\nfig ）に入れておく。戻り値は読み込んだファイル。\nデータの値を画面に入るように調節するには，dt1/20 のようにしてリサイズする。\nまた，Framedata()，Rulerscale() を併用することで目盛を入れることができる。Framedata() のために，表\n示領域の対角点A,BをCinderellaの作図ツールで作図しておく。\ndata=Readcsv(\"datafile.csv\");\n79", "tags": ["KeTCindy", "LaTeX", "中級者向け", "外部連携", "数式描画", "構文"]}
{"title": "Page 80", "content": "dt1=apply(data,#_1);\ndt2=apply(data,#_2);\nBoxplot(\"1\",dt1/20,1,1/2);\nBoxplot(\"2\",dt2/20,3,1/2);\nFramedata(\"1\",[A,B],[\"corner\"]);\nRulerscale(A,[\"r\",0,6,1],[\"f\",1,\"\\mbox{dt1}\",3,\"\\mbox{dt2}\"]);\ndt2\ndt1\n0 1 2 3 4 5 6\n注）一度実行した後，データを書き直すと，図が更新されないので，”m” オプションをつけて Box-\nplot(”1”,dt1/20,1,1/2,[”m”]); とすると，図が更新される。データを書き出すときは，もう一度 ”m” オ\nプションをはずして実行してから Figure ボタンを押す。これは，データの作成タイミングの関係。\n⇒関数一覧\n関数 Rfun(name,コマンド, 引数, option)\n機能 Rの1つのコマンドを実行して結果を返す\n説明 バッチファイル kc.bat / シェルファイル kc.sh を利用してRとデータをやり取りし，計算結果を取得する。\n結果は，変数 R+name に入り，コンソールにも表示される。\n【例】Rを用いて標準正規分布から10個の乱数を発生し，戻り値から平均値と標準偏差を求めてコンソールに\n表示する。\nRfun(\"1\",\"rnorm\",[10]);\nnx=length(R1);\nmx=sum(R1)/nx;\nsx=sqrt(R1*R1/nx-mx^2);\nprintln(\"平均：\"+format(mx,4)+\"標準偏差：\"+format(sx,4));\n関数 CalcbyR(変数名,コマンド列，option)\n機能 Rのコマンドを実行して結果を返す\n説明 バッチファイル kc.bat / シェルファイル kc.sh を利用してRとデータをやり取りし，計算結果を取得する。\nコマンド列は，”戻り値=コマンド”，[引数] の2つをセットとして並べる。\n最後の行の結果が戻り値として第１引数の変数名に代入される。”戻り値1::戻り値2・・”,[]の形（戻り値1，\n戻り値2・・は各コマンドの戻り値）でコマンドを書くと，戻り値1,・・のリストとなる。戻り値が一つの場\n合は実数。”=値”,[] の形の場合，「値」がそのまま戻り値となる。\n【例】Rを用いてN(50,52)から10個の乱数を発生し，平均と不偏分散もRで計算してその結果をコンソール\nに表示する。\ncmdL=[\n\"tmp1=rnorm\",[10,50,5],\n\"tmp2=mean\",[\"tmp1\"],\n80", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 81", "content": "\"tmp3=var\",[\"tmp1\"],\n\"tmp1::tmp2::tmp3\",[]\n];\nCalcbyR(\"rd\",cmdL);\ndt=rd_1;\nmx=rd_2;\nvx=rd_3;\nprintln(\"データ：\"+dt);\nprintln(\"平均：\"+format(mx,4)+\"不偏分散：\"+format(vx,4));\nCalcbyR()によって，データと平均，不偏分散からなるリストが作成されるので，mxに平均，vxに不偏分散\nを代入している。rd_(-1) は，リスト rd の末尾の要素。\n【例】Ｒでポアソン分布から200個の乱数をとり，標本平均の分布の様子＝分散が小さくなって，正規分布に近\nづいている様子＝をヒストグラムで見る。分散はＲで求めた不偏分散に (n-1)/n をかけて再計算してコンソー\nルに表示する。\ncmdL=[\n\"tmp1=rpois\",[200,5],\n\"tmp2=mean\",[\"tmp1\"],\n\"tmp3=var\",[\"tmp1\"],\n\"=c(tmp2,tmp3,tmp1)\",[]\n];\nCalcbyR(\"rd\",cmdL);\ndt=rd_(3..length(rd));\nn=length(dt);\nmx=rd_1;\nvx=rd_2*(n-1)/n;\nsx=sqrt(vx);\nprintln(dt);\nprintln([\"m=\"+format(mx,4),\"v=\"+format(vx,4)]);\nSetscaling(1/5);\nHistplot(\"1\",dt,[\"Breaks=seq(0,14,1)\",\"dr,0.5\"]);\ny\nx\nO\n【例】ポアソン分布で乱数を2000個発生させ，10個ずつの平均をＲで計算し，ヒストグラムを作る。\ncmdL=[\n\"tmp1=rpois\",[2000,5],\n\"tmp2=c()\",[],\n\"for(k in 1:200){\",[],\n\"tmp=tmp1[(10*(k-1)+1):(10*k)]\",[],\n\"tmp2=c(tmp2,mean(tmp))\",[],\n\"}\",[],\n\"=tmp2\",[]\n];\nCalcbyR(\"rd2\",cmdL);\n81", "tags": []}
{"title": "Page 82", "content": "Setscaling(1/10);\nHistplot(\"2\",rd2);\n⇒関数一覧\n関数 Histplot(name,data,option)\n機能 Rを利用してヒストグラムを描く\n説明 dataはリストにして作成するか，外部ファイルからReadcsv()で読み込む。戻り値は，階級境界値と，対応す\nる度数のリスト。\n階級境界値（ブレークポイント）は，自動的に設定される（スタージェスの公式による）が，オプションで，\n\"breaks=[0,10,20,30,40,50,60,70,80,90,100]\"\nなどと指定することもできる。\nこの他のオプションは\n”Den=yes/no”：密度の指定（初期値は no）\n”Rel=yes/no”：相対度数にする/しない（初期値は no）\n【例】csvファイル（datafile.csv）を読み込み，ヒストグラムを作る。Framedata() と Rulerscale()を併用し\nて，目盛付きの枠の中に表示する。表示枠の対角点A,BはCinderellaの作図ツールで作図しておく。\nAddax(0);\nSetscaling(5);\nSetunitlen(\"0.6mm\");\ndata=Readcsv(\"datafile.csv\");\nHistplot(\"1\",data,[\"\"]);\nFramedata(\"1\",[A,B],[\"corner\"]);\nRulerscale(A,[\"r\",0,100,10],[\"r\",0,15,5]);\n15\n10\n5\n0\n0 10 20 30 40 50 60 70 80 90 100\n2行目と3行目は，データに合わせて縦方向を5倍にし，TeXの単位長を0.6mmにしている。\nDen,Rel オプションをyes にしたときは，Setscaling(100)くらいにするのがよい。\ncsvファイルが複数のデータからなる場合は，\ndt1=data_1; として，リストの第１要素を取得する。第2要素のヒストグラムであればdata_2 とする。\n⇒関数一覧\n関数 PlotdataR(name,式,変数)\n機能 Rの関数のグラフを描く\n説明 Cindyscriptの組み込み関数にはない関数のグラフをRを利用して描く。\n【例】平均5, 標準偏差2の正規分布の密度関数と分布関数のグラフを描く。\n82", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 83", "content": "PlotdataR(“1”, “dnorm(x,5,2)”, ”x=[0,10]”);\nPlotdataR(“2”, ”pnorm(x,5,2)”, ”x=[0,10]”);\ny\nx\nO\n【例】標準正規分布のグラフ上の点とx軸を結んだ線分を描く。\n点A,BはCinderellaの作図ツールで作図しておき，点Aをグラフ上のおよその位置に置いてから実行する。\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\");\nPutoncurve(\"A\",\"grR1\",[-3,3]);\nPutpoint(\"B\",[A.x,0]);\nListplot(\"1\",[A,B]);\n2行目の最後の引数の[-3,3]は，その範囲を動かすことを意味する。\nAはグラフ上を動かすことができて，Bはそれに伴って動く。ただし，少し動かす度に バッチ/シェル ファイ\nルを実行するので，煩雑な場合は，Plotdata() の行をコメント化してから点Aを動かしたあと再実行すると\nよい。\n【例】上と同様で，x軸上の点を自由点Aとし，曲線上にBを置く。\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\");\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\");\nA.xy=[A.x,0];\nLineplot(\"1\",[A,A+[0,1]],[\"nodisp\"]);\nPutintersect(\"B\",\"grR1\",\"ln1\");\nListplot(\"1\",[A,B]);\n【例】前の例のグラフで，ABの左側にShadeをかけ，Shadeの部分の面積を求める。Pの値を表示する位置\nに，Cinderellaの作図ツールで点Cをとっておく。\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\",[\"Num=100\"]);\nPutpoint(\"A\",[0,0],[A.x,0]);\nLineplot(\"1\",[A,A+[0,1]],[\"nodisp\"]);\nPutintersect(\"B\",\"grR1\",\"ln1\");\nListplot(\"1\",[A,B]);\nListplot(\"2\",[[-5,0],[5,0]],\"nodisp\");\nEnclosing(\"1\",[\"Invert(grR1)\",\"sg2\",\"sg1\"],[B,\"notex\"]);\nShade([\"en1\"],[\"Color=[0.2,0,0,0]\"]);\ntmp=0.5+Integrate(\"grR1\",[0,A.x]);\nExpr([A,\"s\",text(A.x),C,\"e\",\"P=\"+text(tmp)]);\ny\nP =0.65\nx\nO 0.37\n⇒関数一覧\n83", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 84", "content": "関数 PlotdiscR(name,式,変数)\n機能 Rを利用して離散型のグラフを描く\n説明 dbinom （二項分布），dpois（ポアソン分布），dgeom（幾何分布）など離散型確率分布のグラフを描く。\n【例】二項分布のグラフと正規分布のグラフを比較する。\nSetscaling(20);\nPlotdiscR(\"1\",\"dbinom(k,10,0.4)\",\"k=[0,10]\");\nPlotdataR(\"1\",\"dnorm(x,10*0.4,sqrt(10*0.4*0.6))\",\"x=[0,10]\",[\"do\"]);\ny\nx\nO\n【例】ポアソン分布および幾何分布のグラフ。\nPlotdiscR(\"2\",\"dpois(k,4)\",\"k=[0,10]\");\nPlotdiscR(\"3\",\"dgeom(k,0.3)\",\"k=[0,10]\");\n⇒関数一覧\n関数 Scatterplot(name,filename/datalist,option1,option2)\n機能 2次元データを読み込み，散布図を描く\n説明 外部ファイル filename（csv形式）を読み，散布図を描く。\n外部ファイルの２次元データとは，次の形のcsvファイル。（行末はLFまたはCR）\n2.3, 4.5 (LF)\n3.2, 7 (LF)\n2.0, 6.8 (LF)\ndatalistの場合は，次の形。\ndata=[[2.3,4.5],[3.2,7],[2.0,6.8], ・・・ ];\n第１オプションは，回帰直線を描くかどうかと点のスタイル。\n”Reg=no” : 回帰直線を描くかどうか（yes/no) 初期値は yes\n第２オプションは，相関係数と回帰直線の式を表示する位置と，回帰直線のスタイル。\n位置は，幾何点の名称でもよい。\n【例】data.csv を読んで散布図を描き，回帰直線を引く。\nScatterplot(\"1\",\"data.csv\");\nだけで描ける。オプションをつけた例は次。\n点Aを相関係数と回帰直線の式を表示する点としてCinderellaの作図ツールで取る。\n84", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 85", "content": "点を青で大きさ2とし，回帰直線を緑で表示する。\nScatterplot(\"1\",\"data.csv\",[\"Size=4\",\"Color=blue\"],[A,\"Color=green\"]);\nListplot(\"1\",[[0,7],[0,0],[7,0]]);\nRulerscale([0,0],[\"r\",0,7,1],[\"r\",1,7,1]);\n7\nr =0.535, y =1.009x−0.545\n6\n5\n4\n3\n2\n1\n0 1 2 3 4 5 6 7\n⇒関数一覧\n2.1.2 TEXのコマンド書き出し（メタコマンド）\nWfile=’ファイル名’ 書き出しファイル名を設定\ncat(”,file=Wfile,append=FALSE)\n書き出しファイルを初期化\nTexcom(”コマンド”) TEXコマンドのコードを書き出す\n例) Texcom(”\\\\begin{minipage}{3cm}”)\n※ ”newline” のとき，空白行を挿入\nOpenphr(ユーザーコマンド名)，Closephr()\n\\defのコマンド定義を始める\n例) Openphr(”\\\\p”)\nTexcom(”\\\\begin{array}{cc}”)\nTexcom(”5 & 3\\\\\\\\”)\nTexcom(”8 & 7”)\nTexcom(”\\end{array}$”)\nClosephr()\nOpenpar(ユーザーコマンド名，幅 {, 位置 }), Closepar()\nminipage環境を含む\\def コマンド定義を始める\n※ 位置のデフォルトは ”c”\n例) Openpar(”\\\\s”,”5cm”)\nTexcom(”\\\\input{rei}”)\nClosepar()\nLetter(c([2,3),”se”,”\\\\s”)\n85", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 86", "content": "Texletter( 点(list形式), 方向, 文字列 ，・・・)\n点の位置の「方向」に文字列をかく（複数可）\n例) Texletter(list(4,”#1”),”n”,”文字”)\n※ 位置は”n”, s”, ”e”, ”w”, ”ne”, ”nw”, ”se”, ”sw”, ”c”\n※ 点の位置はリスト形式で，TEXの形式で渡される。\nTexnewctr(番号または番号のベクトル)\nKETpicで使うカウンタ(ketpicctra,...)を定義\nTexctr(番号またはカウンタ名)\n番号のカウンタ名またはカウンタ名を返す\nTexthectr(番号) \\the+カウンタ名の文字列を返す\nTexvalctr(番号) \\value{カウンタ名}の文字列を返す\nTexsetctr(番号，文字列) カウンタに値をセットするTEXコマンド列を出力\n例) Texsetctr(2, ”1*2/3”);\n例) Texsetctr(2, ”(-#1)+2”);\nTexletter(位置（list），方向，文字列)\n位置listで表される点に文字列をかくTEXコマンド列を出力\n例) Texletter(list(10,paste(”-”,Texvctr(2),sep=””)),”ne”,”\\content”);\n例) Texletter(list(0, ”#1”), ”c”, ”A”);\nTexnewcmd(コマンド名，引数の個数，オプション値)\n\\newcommand を始めるTEXコマンドを出力\nTexrenewcmd(コマンド名，引数の個数，オプション値)\n\\renewcommand を始めるTEXコマンドを出力\nTexend() TEXのコマンド定義を終わるTEXコマンドを出力\nTexfor(カウンタ番号，初期値，終了値)\nTEXのループ構造を始める．\n※ 初期値，終了値は文字列で与える．\n例) Texfor(1,”1”,”#1”);\nTexendfor(カウンタ番号) TEXのループ構造を終える．\n例) Texendfor(1);\nTexforinit() TEXのループ構造を初期化\nTexif(数値条件 { ,1 }) TEXのif構造を始める．（ifnumまたは ifdim）\n※ 条件は文字列で与える．\n※ 1を追加したときは ifdim\n例) Texif(”Texctr(1)<#2”);\nTexelse() TEXのelseブロック．\nTexendif() TEXのif構造を終える．\n2.2 KETCindyでのメタコマンドの利用例\n(1) 次のコマンドを実行すると，マクロファイル hdash.tex ができる。\ncmdL=[\n\"Wfile='hdash.tex'\",[],\n\"cat('',file=Wfile,append=FALSE)\",[],\n\"Texnewcmd\",[\"'\\\\hdash'\",2],\n\"Texcom\",[\"'{\\\\unitlength=1mm'\"],\n\"Texcom\",[\"'\\\\begin{picture}(#1,#2)(0,0)'\"],\n\"Texsetctr\",[1,\"'#1/2'\"],\n\"Texfor\",[2,1,\"Texthectr(1)\"],\n86", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 87", "content": "\"Texsetctr\",[3,\"'2*Texctr(2)-2'\"],\n\"tmp1=Texthectr(3)\",[],\n\"tmp=paste('\\\\put(',tmp1,',#2){\\\\line(1,0){1}}',sep='')\",[],\n\"Texcom(tmp)\",[],\n\"Texendfor\",[2],\n\"Texcom\",[\"'\\\\end{picture}}'\"],\n\"Texend()\",[]\n];\nCalcbyR(\"ans\",cmdL,[\"Out=n\"]);\n注）上の例ではpict2eのコマンドを使っている．\n(2) 親ファイル（例えばdashtest.tex）を作っておく。\n\\documentclass{ujarticle}\n\\usepackage{ketpic,ketlayer}\n\\usepackage{pict2e} % pict2eの読み込み\n\\input{hdash.tex}\n\\begin{document}\n\\hdash{20}{14}\n\\end{document}\n(3) CindyScriptに\nSetfiles(”dashtest”);\nを追加して，Parentボタンを押す．\n87", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 88", "content": "2.3 Maximaとの連携\nMaximaは数式処理ソフトで，KETCindyにおいては微積分の計算など，Cindyscriptでは不十分な点を補うこと\nができる。\nKETCindyでは，kc.bat/shによってコマンドをMaximaに渡し，結果をテキストファイルで受け取る。このとき，\nMaximaとのやりとりで，次のようなファイルが作業ディレクトリに作成される。\n拡張子 max ：Maximaに渡すコマンドを記述したファイル\n拡張子 txt：Maximaが出力したデータファイル\nこのデータのやり取りに関する次のオプションがある。\nオプションなしまたは，”” のとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n”m”のとき，強制的にデータファイルを作り直す。\n”r” のとき，すでにあるデータファイルを読み込む。\nこのとき，ファイルの読み書きで不具合があると，数秒の後「==> file.txt not generated (5 s ) 」のようなエラー\nメッセージがコンソールに表示される。このような場合は作業ディレクトリの設定などを確認していただきたい。こ\nの待ち時間については，Waitオプションで設定することもできる。\n関数 CalcbyM(name，コマンド，option)\n機能 Maximaのスクリプトを実行する\n説明 第2引数はMaximaで実行するコマンドを記述したスクリプト。\nコマンドと引数リストの繰り返しからなるスクリプトをリストとして作り，一度に実行する。\n戻り値はない（未定義値）。実行結果は，コマンドリストの最後に記述した変数（引数は空リスト）の値が，\nnameで指定された変数に代入される。複数の結果を戻すときは，:: で区切って記述するとリストにしてname\nに代入される。\n【例】sinx とその導関数を表示する。\ncmdL=[\n\"f:sin(x)\", [],\n\"df:diff\",[\"sin(x)\",\"x\"],\n\"f::df\",[]\n];\nCalcbyM(\"fdf\",cmdL);\nprintln(fdf);\n実行すると，結果の f とdf のリストが変数 fdf に代入され，コンソールに，[sin(x),cos(x)] と表示される。\n【例】2次方程式 x2−x−4=0の解を求める。\ncmdL=[\n\"ans:solve\",[\"x^2-x-4\",\"x\"],\n\"ans\",[]\n];\nCalcbyM(\"ans\",cmdL);\nprintln(\"ans=\"+ans);\nコンソールには\nans=[x = -(sqrt(17)-1)/2,x = (sqrt(17)+1)/2]\nが表示される。\n88", "tags": ["KeTCindy", "LaTeX", "中級者向け", "外部連携", "数式描画", "構文"]}
{"title": "Page 89", "content": "応用例１：曲線の接線を引く\nex+e−x\nf(x)= の，x=aにおける接線の方程式を作る。\n2\nfx=\"(exp(x)+exp(-x))/2\";\ncmdL=[\n\"df:diff\",[fx,\"x\"],\n\"c:ev\",[\"df\",\"x=a\"],\n\"b:ev\",[fx,\"x=a\"],\n\"eq:c*(x-a)+b\",[],\n\"eq\",[]\n];\nCalcbyM(\"tn1\",cmdL);\nprintln(tn1);\nコンソールには\n(%e^a-%e^-a)*(x-a))/2+(%e^a+%e^-a)/2\nが表示される。\nこの，CalcbyMの戻り値 tn1 を用いて，曲線上の１点Aにおける接線のグラフを描く。以下のスクリプトを\n追加する。なお，点AをCinderellaの作図ツールで適当なところにとっておく。\ntn1=Assign(tn1,[\"%e^a\",\"exp(a)\",\"%e^-a\",\"exp(-a)\"]);\nPlotdata(\"1\",fx,\"x\");\nPutoncurve(\"A\",\"gr1\");\ntmp=Assign(tn1,[\"a\",A.x]);\nplotdata(\"2\",tmp,\"x\",[\"Num=2\"]);\n１行目ではMaximaで作成した式を，Cindyscriptでプロットできる式にしている。\ny\nA\nx\nO\nなお，接線の方程式を求めるだけであれば，Mxfun()を使うこともできる。Mxfun()の解説を参照のこと。\n応用例2：パラメトリックの場合の接線\n媒介変数の値を決めるために，点AをCinderellaの描画面のx軸上にとっておき，そのx座標を媒介変数t\nの値とする。スライダを作ってもよい。\nfn=\"3*cos(t)^2*[cos(t),sin(t)]\"; y\ncmdL=[\n\"f:\",[fn],\n\"df:diff\",[\"f\",\"t\"],\nx\nO\n89", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 90", "content": "\"df:trigsimp\",[\"df\"],\n\"tn:f+s*df\",[],\n\"tn\",[]\n];\nCalcbyM(\"tn2\",cmdL);\nParamplot(\"1\",fn,\"t=[0,2*pi]\",[\"Num=100\"]);\ngn=Assign(tn2,[\"t\",A.x]);\nParamplot(\"2\",gn,\"s=[-3,3]\");\ncmdLで定義しているMaximaのコマンド（trigsimp など）については，Maximaの解説書などを参照され\nたい。\n【例】定積分の値を求める。\n∫\n2\n(−x3+3x+2)dx の値を求める。結果は val で受け取り，Mxtex() に渡して，TeX書式にして表示する。\n−1\ncmdL=[\n\"val:integrate\",[\"-x^3+3*x+2,x,-1,2\"],\n\"val\",[]\n];\nCalcbyM(\"val\",cmdL);\nMxtex(\"1\",val);\nExpr([[2,2],\"e\",\"S=\"+tx1]);\n関数 Mxbatch(ファイル名)\n機能 Maximaのライブラリを使うバッチファイルを作成\n説明 ketcindy/ketlib/maximaL にあるライブラリを用いるコマンドでバッチファイルを作成する。\nketcindy/ketlib/maximaL には，fourier sec.max , matoperation.max , poincare.mac の3つのファイルが\nあり，関数を定義したライブラリが入っている。それぞれ次のような内容である。各ファイルをテキストエ\nディタで開いて参照されたい。\nfourier sec.max ：フーリエ級数の計算を行う。\nmatoperation.max ： 行列の計算を行う。\npoincare ： ハミルトニアンシステムに関する計算を行う。\n【例】cmd=Mxbatch(\"fourier_sec\")\nを実行すると，cmdに，たとえば\n[batch,[\"/Applications/ketcindy/ketlib/maximaL/fourier_sec.max\"]]\nが代入される。（Mac/Windows および KeTCindyの設定によって異なる）\nそこで，次のように利用する。\nSetax([\"a\"]);\nSlider(\"A-C-B\",[-5.5,-1.5],[4.5,-1.5]);\ndefL=[\"1\",[-3,-2],1,\"0\",[-2,-1],1,\"-x\",[-1,1],1,\"0\",[1,2],1,\"-1\",[2,3],1];\nDrwxy();\ntmp=Periodfun(defL,1,[\"dr,2\",\"Color=red\"]);\nfun=tmp_1;\nper=tmp_2;\nHtickmark([1,\"n\",\"1\",2,\"n\",\"2\",3,\"nw\",\"3\"]);\nHtickmark([-1,\"-1\",-2,\"-2\",-3,\"-3\"]);\ncmdL=Concat(Mxbatch(\"fourier_sec\"),[\n\"Ffun(x):=\"+fun,[],\n\"c:fourier_sec_coeff\",[\"Ffun(x)\",\"x\"],\n\"c[1]::c[2]::c[3]\",[]\n]);\n90", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 91", "content": "CalcbyM(\"ans\",cmdL,[]);\nnterm=round(4*(C.x-A.x));\nFourierseries(\"1\",ans,per,nterm,[\"Num=400\"]);\nMxtex(\"2\",ans_3);\nExpr([[-5,-2],\"e\",\"s_n=\"+tx2,[4,-2],\"e\",\"n=\"+text(nterm)]);\ny\n1 2 3\nx\n−3 −2 −1 O\ns\n=−2(πncos(2π\n3\nn)+3sin(π\n3\nn)−πncos(π\n3\nn)−πn(−1)n)\nn=15\nn π2n2\n関数 Mxfun(name，式，リスト，option)\n機能 Maximaの関数を実行する\n説明 第2引数の「式」はMaximaの関数名。第3引数のリストは関数に渡す引数のリスト。\n戻り値は，第１引数の式に１つでも文字があると文字列となる。すべて数字（+,-, . を含む）の場合は16桁以\n下であれば数，それ以上の場合は文字列となる。また，戻り値は，変数 mx+name にも代入される。\nオプションに ”Disp=no” をつけると，結果をコンソールに表示しない。\n【例】10!を求める。\nMxfun(\"1\",\"10!\",[]);\nを実行すると，コンソールにmx1 is 3628800 と表示される。この値は変数 mx1 に代入されているので，\nLetter([[0,1],\"e\",mx1]);\nとすればCinderellaの描画面上に表示される。mx1ではなく，戻り値を変数に代入して使うこともできる。\nfact10=Mxfun(\"1\",\"10!\",[]);\nLetter([[0,1],\"e\",fact10]);\n【例】文字列の連結\n文字列を引数とする場合，例えば，Maximaの文字列を連結するコマンドconcatでは，\nconcat(\"a\",\"b\")\nとするが，中にダブルクォートが入っているため，全体を文字列にすることができない。\nこのような場合は，第2引数を使って\nMxfun(\"1\",\"concat\",[\"a\",\"b\"])\nとすればよい。\n＜参考＞ CindyScript の unicode(code) 関数を用いてダブルクォートを表し，次のようにすることもできる。\ndq=unicode(\"22\");\ncomm=\"concat(\"+dq+\"a\"+dq+\",\"+dq+\"b\"+dq+\")\";\nMxfun(\"1\",comm,[]);\n【例】f(x)=sinx を微分する\nMxfun(\"1\", \"diff\",[\"sin(x)\",\"x\"])\nとすると\ndiff(sin(x),x)\n91", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 92", "content": "というコマンドをMaximaに渡して，戻り値をCindyの変数mx1に代入する。\nMxfun(\"1\", \"diff(sin(x),x)\",[]])\nと，第１引数にまとめても同じ結果になる。ただし，この場合，第2引数は空リストとする。\n＜参考＞Cindyscriptの微分との違い\nCindyscriptでも微分はできる。たとえば，\nf(x):=sin(x);\ng(x):=d(f(#),x);\nplot(g(#));\nとすると，cos(x)のグラフが描かれる。\nしかし，Cindyscriptの微分が，微分の定義による数値計算であるのに対し，Maximaでは数式処理として微\n分ができる。\nその意味の違いは，次のスクリプトで確かめられる。\nf(x):=sin(x);\ng(x):=d(f(#),x);\nprintln(g(x));\nでは，コンソールに表示されるのは未定義値（ ） である。\n一方，\nMxfun(\"1\", \"diff\",[\"sin(x)\",\"x\"]);\nprintln(mx1);\nでは，コンソールに cos(x) と表示される。\nmx1は文字列であるので，Plotdata(\"1\",mx1,\"x\") でグラフが描ける。\nまた，Cindyscriptの微分では，3階か4階までの導関数が計算上の限度であるのに対し，Maximaなら何階\nでも微分ができるので，テイラー展開などで有利である。\n【例】sinx の テイラー展開による近似のグラフを表示する。\nMxfun(\"1\",\"taylor\",[\"sin(x)\",\"x\",0,7],[\"\"]);\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"da\"]);\nPlotdata(\"2\",mx1,\"x\");\ny\nx\nO\nなお，Mxtex() を用いれば，Mxfun()の結果の mx1をTeX書式にして表示できる。\nExpr([[1,2],\"e\",Mxtex(\"1\",mx1)]);\nを追加すれば[1,2]の位置に式が表示される。\n【例】接線の方程式を作る\n92", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 93", "content": "ex+e−x\nf(x)= の，x=aにおける接線の方程式を作る。\n2\n関数式を文字列にしておき，Assign() を用いて変数xをaに変えれば，f(a)の式を作ることができる。導関\n数についても同様にする。\nfx=\"(exp(x)+exp(-x))/2\";\ngx=Mxfun(\"1\",\"diff\",[fx,\"x\"]);\nfa=Assign(fx,[\"x\",\"a\"]);\nga=Assign(gx,[\"x\",\"a\"]);\ntf=ga+\"*(x-a)+(\"+fa+\")\";\nprintln(tf);\nコンソールには\n(%e^a-%e^-a)/2*(x-a)+((exp(a)+exp(-a))/2)\nが表示される。\n同様の例を CalcbyM() で例示しているので参照されたい。\n関数 Mxtex(name,式)\n機能 式をTeX書式にする\n説明 第2引数の式は，直接書いた式もしくはMxfunの戻り値。これをTeXの書式にする。\n戻り値は，変数 txname にも代入される。\n【例】部分分数への分解\nx3\n部分分数 の分解をMaximaで行い，その結果をTeX書式にして画面に表示する。画面に表示\n(x+1)(x+2)\nされた結果はそのままKETCindyで出力できる。\nMxfun(\"1\",\"partfrac\",[\"x^3/((x+1)*(x+2))\",\"x\"]);\nMxtex(\"1\",mx1);\nExpr([0,1],\"e\",tx1);\nここで，mx1，tx1はそれぞれMxfun(”1”,・・) , Mxtex”1”,・・) の結果（戻り値）である。mx1，tx1 はコ\nンソールにも表示され，tx1は次のようになっている。\n\\frac{8}{x+2}-\\frac{1}{x+1}+x-3\nCindyscript は TeX 書式をサポートしているのでこれで描画面に分数式が表示されるが，Tex の文書では，\n\\frac{}{} ではなく，\\dfrac{}{}を使うことが多い。そこで，Assign()を用いて，”frac” を ”dfrac” に変え\nれば，そのままTex文書で使える。ただし，Cindyscriptは \\dfrac{}{} をサポートしていないので，画面上\nでは分数表記にならない。そのあたりの事情を次のスクリプトで示す。\nfx=\"x^3/((x+1)*(x+2))\";\npfx=Mxfun(\"1\",\"partfrac\",[fx,\"x\"]);\nform=Mxtex(\"1\",fx)+\"=\"+Mxtex(\"2\",pfx);\ndform=Assign(form,[\"frac\",\"dfrac\"]);\nLetter([0,5],\"e\",\"部分分数への分解$\"+form+\"$\");\nLetter([0,3],\"e\",\"部分分数への分解$\"+dform+\"$\");\nCinderellaの描画面では次のように表示される。\n93", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 94", "content": "出力したTeX挿入図では次のようになる。\nDecomposition into partial fractions\nx3 8 1\n= − +x−3\n(x+1) (x+2) x+2 x+1\nなお，文字列を置換するのに，Assign(form,[\"frac\",\"dfrac\"]) ではなく，\nCindyscriptの文字列の関数 replace を用いて，\ndform=replace(form,\"frac\",\"dfrac\");\nとしてもよい。\n【例】2次関数のグラフを表示し，x軸との交点のx座標を表示する。\ny\nfx=\"x^2-x-3\";\ncmdL=[\n\"ans:solve\",[fx,\"x\"],\n\"ans\",[]\nx\n]; √ O √\n1− 13 13+1\nCalcbyM(\"ans\",cmdL); 2 2\np1=indexof(ans,\"[\");\np2=indexof(ans,\",\");\np3=indexof(ans,\"]\");\ns1=substring(ans,p1,p2-1);\ns2=substring(ans,p2,p3-1);\ns1=replace(s1,\"x =\",\"\");\ns2=replace(s2,\"x =\",\"\");\nMxtex(\"1\",s1);\nMxtex(\"2\",s2);\nPlotdata(\"1\",fx,\"x\");\nExpr([-2,-0.5],\"e\",tx1);\nExpr([2,-0.5],\"e\",tx2);\nここで，CalcbyM(\"ans\",cmdL); で得られるansは，次のような文字列である。\n\"[x = -(sqrt(13)-1)/2,x = (sqrt(13)+1)/2] \"\nそこで，ここから2つの式だけを抽出する作業を行ったのち，Mxtex() でTeXの式を得ている。\nさらに応用として，点AをCinderellaの作図ツールで作図し，\nif(A.y<0,\nfx=\"(x-\"+text(A.x)+\")^2\"+guess(A.y),\nfx=\"(x-\"+text(A.x)+\")^2+\"+guess(A.y);\n);\nとすると，点Aを頂点とする放物線と軸との交点の座標が描かれる。Maximaとのデータのやり取りをするた\nめのタイムラグがあるが，インタラクティブに放物線の位置を変えることができる。\n＜参考＞\n2次関数のような簡単な関数であれば，Cindyscriptの roots() 関数を用いて2次方程式が解けるので，次のス\n94", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 95", "content": "クリプトでほぼ同じ動作をするものを作ることができる。「ほぼ」というのは点Aの位置によっては，guess()\nで解釈しきれないことがあるためである。Maximaを使えば数式処理で解を求めるので，Aがどこにあっても\nきれいに表示できる。\nfx=\"x^2-2*A.x*x+A.x^2+A.y\";\ncf=[A.x^2+A.y,-2*A.x,1];\nsol=roots(cf);\ns1=guess(sol_2);\ns2=guess(sol_1);\nMxtex(\"1\",s1);\nMxtex(\"2\",s2);\nPlotdata(\"1\",fx,\"x\");\nExpr([-2,-0.5],\"e\",tx1);\nExpr([2,-0.5],\"e\",tx2);\n⇒関数一覧\n95", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 96", "content": "2.4 Wolfram Engine との連携\n2019年5月，Wolfram ResearchはMathematicaのコアであるWolfram Engineを開発者や個人ユースのために\n無償開放した。\nインストール・ライセンスは https://www.wolfram.com/engine/\nただし，Wolfram IDを取得する必要がある。\n関数 CalcbyW(name，コマンド，option)\n機能 Wolfram 言語(Wl)のスクリプトを実行する\n説明 第2引数はWolfram Engineで実行するコマンド。\nコマンドと引数リストの繰り返しからなるリスト（例えばcmdL）を作って，一度に実行する。結果は，コマ\nンドリストの最後に記述した変数（引数は空リスト）の値がwl+name で指定された変数に代入される。複数\nの結果を戻すときは，:: で区切って記述するとリストにして代入される。\n関数 Wlfun(name，式，リスト，option)\n機能 Wlの1つの関数を実行する\n説明 第2引数の「式」はWlの関数名。第3引数のリストは関数に渡す引数のリスト。\nオプションに ”Disp=no” をつけると，結果をコンソールに表示しない。\n関数 Wltex(name,式)\n機能 式をTeX書式にする\n説明 第2引数の式は，直接書いたWlの式もしくはWlfunの戻り値。これをTeXの書式にする。\n戻り値は，変数 wl+name にも代入される。オプションに ”Disp=no” をつけると，結果をコンソールに表示\nしない。\n⇒関数一覧\n2.5 Risa/Asirとの連携\n関数 CalcbyA(name，コマンド，option)\n機能 Risa/Asirのスクリプトを実行する\n説明 第2引数はRisa/Asirで実行するコマンド。\nコマンドと引数リストの繰り返しからなるリスト（例えばcmdL）を作って，一度に実行する。\n戻り値はない。（未定義値）結果は，コマンドリストの最後に記述した変数（引数は空リスト）の値がname で\n指定された変数に代入される。複数の結果を戻すときは，:: で区切って記述するとリストにして代入される。\n関数 Asirfun(name，式，リスト，option)\n機能 Risa/Asirの関数を実行する\n説明 第2引数の「式」はRisa/Asirの関数名。第3引数のリストは関数に渡す引数のリスト。\n戻り値は，第１引数の式に１つでも文字があると文字列となる。すべて数字（+,-, . を含む）の場合は16桁以\n下であれば数，それ以上の場合は文字列となる。また，戻り値は，変数 asname にも代入される。\nオプションに ”Disp=no” をつけると，結果をコンソールに表示しない。\n⇒関数一覧\n96", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 97", "content": "2.6 FriCAS(Axiom) との連携\n関数 CalcbyF(name，コマンド，option)\n機能 FriCASのスクリプトを実行する\n説明 第2引数はFriCASで実行するコマンド。\nコマンドと引数リストの繰り返しからなるリスト（例えばcmdL）を作って，一度に実行する。\n戻り値はない。（未定義値）結果は，コマンドリストの最後に記述した変数（引数は空リスト）の値がname で\n指定された変数に代入される。複数の結果を戻すときは，:: で区切って記述するとリストにして代入される。\n関数 Frfun(name，式，リスト，option)\n機能 FriCASの関数を実行する\n説明 第2引数の「式」はFriCASの関数名。第3引数のリストは関数に渡す引数のリスト。\n戻り値は，第１引数の式に１つでも文字があると文字列となる。すべて数字（+,-, . を含む）の場合は16桁以\n下であれば数，それ以上の場合は文字列となる。また，戻り値は，変数 friname にも代入される。\nオプションに ”Disp=no” をつけると，結果をコンソールに表示しない。\n⇒関数一覧\n2.7 MeshLabとの連携\nMeshLabは，3Dデータ（objデータなど）を読み込んでレイトレーシングで表示・編集するソフトウェアであ\nる。レイトレーシングで3Dグラフィクスを描くには，Cinderellaと親和性の高い Cindy3D を利用するのがよいが，\nMeshLabを使うメリットは3Dプリンタ用のSTLファイルを出力できることである。また，KETCindyで描いた\n3Dの図がレイトレーシングでどのようになるのかを見ることも比較的簡単にできる。\nMeshLabとの連携は，KETCindyから Obj 形式のデータを書き出すことで行う。Mkobj**() 関数でデータを作\nり，Mkviewobj() 関数でMeshLabを呼び出して表示を行う。\nなお，Mkviewobj() 関数でMeshLabを呼び出して表示を行う場合，これをDrawスロットに書くと頻繁に呼び出\nしが行われるため非効率となる。そこで，if(1==0,・・・) で・・・の部分にMeshLabの呼び出し関係のスクリプト\nを書いて，実際に呼び出すときに if(1==1,・・・)とする方法と，呼び出し関係のスクリプトを関数化してボタンに\n割り当てる方法がある。ketcindyパッケージに含まれる sample にボタンをつけたものがある。\nなお，3Dであるので，Initialization スロットに\nKetinit(); Ketinit3d(); を記述しておく。\n関数 Mkobjcmd(name，式，option)\n機能 厚みを持たない曲面のobjファイルのためのコマンドを作成する\n説明 オプションは [分割数1，分割数2，表側の方向の指定]\n表側の方向は，変数に対して，右手系の方向が”+”\n作成されるデータは”oc”+name のファイル名の obj データである。この名称は，Mkviewobj() で用いる。\n（以下，Mkobj**()関数では同様）\n【例】：サドル面\nfd=[ \"z=x^2-y^2\", \"x=[-1,1]\",\"y=[-1,1]\",\" \"];\nSf3data(\"1\",fd);\nWindispg();\nMkobjcmd(\"1\",fd,[40,40,\"-\"]);\nMeshlab():=(\nMkviewobj(\"saddle\",oc1, [\"m\",\"v\"]);\n97", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 98", "content": ");\nこのうち，Sf3data(\"1\",fd); はCinderellaの画面に表示するためであって，なくてもよい。\n次図で，左が option + の場合，右が - の場合である。\n⇒関数一覧\n関数 Mkobjcrvcmd(name，PD，option)\n機能 空間曲線（直線）のobjファイルのためのコマンドを作成\n説明 オプションは [太さ，断面の形状（正多角形）の辺の数，断面の正面]\n曲線は紐のようなもので表す。その断面は正多角形で， 初期設定は正 6 角形である。断面の正面\nは”xy”,”yz”,”zx”のいずれかで指定する。太くなった時に形状の差が現れる。\n例太さ0.03で螺旋を描く\nSpacecurve(\"1\",\"[(6*pi-t)/(6*pi)*cos(t),(6*pi-t)/(6*pi)*sin(t),0.1*t]\",\n\"t=[0,6*pi]\",[\"Num=200\"]);\nWindispg();\nMkobjcrvcmd(\"1\",\"sc3d1\",[0.03]);\nMeshlab():=(\nMkviewobj(\"spiral\",oc1,[\"m\",\"v\"]);\n);\nMkobjcrvcmd(\"1\",\"sc3d1\",[0.1,8,\"yz\"]); としたのが下図右。\n⇒関数一覧\n関数 Mkobjnrm(name，式)\n機能 法線ベクトルのデータを作成\n説明 式は曲面を表す式。これに対し，法線ベクトルを表す式を求める。\n関数 Mkobjplatecmd(name，面データ，options)\n98", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 99", "content": "機能 面を描く\n説明 面データを渡して面を描く。\noptions は，面の厚みの指定。厚みは中心線に対し，両側につけることができる。\nたとえば，[0.05] はプラス側に 0.05 の厚み，[0.05,-0.04] はマイナス側にも0.04の厚みをつける。\n【例】三角形のプレートを描く\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\np1=[2,0,0];\np2=[0,2,0];\np3=[0,0,2];\nplane=[[p1,p2,p3],[[1,2,3]]];\nMkobjplatecmd(\"1\",plane,[0.05]);\nMkobjcrvcmd(\"2\",\"ax3d\");\nMkviewobj(\"plane\",Concatcmd([oc1,oc2]),[\"m\",\"v\"]);\n関数 Mkobjpolycmd(name，PD，options)\n機能 多面体を描く\n説明 VertexEdgeFace() の戻り値を PDとして渡して多面体を描く。\n関数 Mkobjsymbcmd(PD, 実数，実数，ベクトル, ベクトル)\n機能 文字等のobjデータのためのコマンドを作成\n説明 引数のPDを描く。第2引数は大きさ，第3引数は回転角，第4引数は正面方向のベクトル，第5引数はPD\nの中心の位置。\nPDは，平面の描画コマンドによるプロットデータが使える。また，PD に半角アルファベットを文字として\n与えることができる。この場合，文字は n,p,q,r,t,x,y,z で，該当するフォントが data フォルダの fontF フォ\nルダに用意されている。この中にないフォントは使えない。\n関数 Mkobjthickcmd(name，式)\n機能 厚みを持つ曲面のobjファイルのためのコマンドを作成\n説明 オプションは [分割数1，分割数2，厚み，表側の方向の指定，条件] 表側の方向は，変数に対して，右手系の方\n向が”+”。厚みを持つため，nsew のそれぞれについて，”+n+s-e-w” のように指定する。\n条件として，\"Assume(R>0)\" をつけると，Rが0以下になるための不具合を回避できる。\nまた，”ratsimp” をつけると有理関数について，”trigsimp”をつけると三角関数について，処理を速くするこ\nとができる。\nなお，この関数はMaximaを使うので，Maximaをインストールしていることが前提。\n【例】回転放物線\n0\nfd=[\n10\n\"z=(x^2+y^2)\",\n\"x=R*cos(T)\",\"y=R*sin(T)\",\n\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"\n20\n0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150\n99", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 100", "content": "];\nMkobjthickcmd(\"1\",fd,[40,40,0.2,\"+n+s-e-w+\",\"assume(R>0)\"]);\nMkviewobj(\"pala\",oc1,[\"m\",\"v\",\"Wait=5\"]);\n関数 Mkviewobj(name，PD, options)\n機能 objファイルを作成。optionにより MeshLab を立ち上げて表示する。\n説明 第2引数に複数のプロットデータを与えるときは，Concatcmd() により１つにまとめる。オプションは\n”m”または”make” データを作る（指定しない場合もデータがなければ作る）\n”v”または”view” MeshLabを立ち上げて表示する\n”W=n” 作成するための待ち時間。ｎ秒。これを過ぎると終了する\n”Unit=mm” Setunitlen()と連動して3Ｄプリンタの数値の単位をmmで指定する\n3Dプリンターがインチで認識する場合は ”Unit=in” とする。\n⇒関数一覧\n2.8 表計算ソフトとの連携\n表計算ソフトでは，複数のセルを選択してコピー（Windowsでは Crtl+ C ，Macでは Command+C）すると，\nセルの内容はtab区切りのテキストデータとしてクリップボードにコピーされる。これをCindyscriptエディタに\nペーストすることで表計算ソフトのデータをKETCindyで利用できる。逆に，Cindyscriptのコンソールへの出力を\n表計算ソフトのシートにコピーすることもできる。\nまた，表計算ソフトから書き出したCSVファイルについても同様にしてCSV形式のデータを扱うことができる。\n関数 Tab2list(str，option)\n機能 str の内容をリストに変換する\n説明 tabやコンマ区切りになっている文字列 str をリストに変換する。\noptionは，次の通り。\nBlank=a：NULLのセルをaに置き換える。\nSep=b：セパレータ（区切り文字）を b とする。 初期設定は tabコード\n次のような手順で表計算ソフトやCSVファイルからデータをKETCindyに移すことができる。\n(1) Cindyscriptエディタで，適当な文字変数を用意する。\nたとえば，data=””;\n100", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 101", "content": "(2) 表計算ソフトで，適当な範囲を指定しクリップボードにコピーする。\nWindowsなら Ctrl+C，Macなら Command+C\n(3) data=””; のダブルクォートの間にペーストする。\n最後の行は右図のように，” の前で改行されていてもよい。\n(4) この文字変数 data に対し，Tab2list(data) を実行すると，行列を表すリストが返される。\nこれを適当な変数に代入し，作表コマンドで表にするなど，目的に応じて利用する。\n数値だけなら行列として計算もできる。\n空文字のセル(NULL)が含まれる場合， 初期設定ではそのまま空文字になるが，アンケート処理などで無回\n答を０にしたいような場合は\ndlist=Tab2list(data,[\"Blank=0\"];\nとする。\nCSVファイルからCSV形式（コンマ区切り）のデータをコピーした場合は\ndlist=Tab2list(data,[\"Sep=,\"];\nとする。\nなお，文字列をセパレータで区切ってリスト化するCindyscriptの関数に tokenize()がある。上の例で，\ndlist=tokenize(data,[unicode(\"000a\"),unicode(\"0009\")]);\nとすると，改行コード(000a)とtabコード(0009)で切り分けてリスト化する。このとき，リストの各要素は\nつぎのようになる。\n文字列→文字列\n数値形式の文字→実数【例】 14 → 整数1412.3 → 実数12.3\n101", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 102", "content": "計算式の形→文字列【例】 437-0023 →437-0023 (文字列)\nこれに対し，Tab2list()では，計算式の形の文字列は数値と見なして計算結果を取得する。\n【例】 437-0023 →414 (数値)\nしたがって，郵便番号や日付(28/12/5)のようなものは計算されてしまうので，tokenize() を用いるのがよい。\nなお，tokenize()の場合，空行は空リストになるので，最後の行でダブルクォートの前で改行されていると空\nリストが入る。\n関数 Dispmat(list)\n機能 リストを行列の形でtab区切りにしてコンソールに表示する。\n説明 行列を表すリスト （たとえば dlist) を引数としてDispmat(dlist) を実行すると，コンソールに行列型で内容\nが表示される。\n実際にはTAB区切りの文字列。（println としなくても直接コンソールに表示される）\nこれを表計算ソフトのシートにコピーする。\n関数 Writecsv(namelist, data, filename, option)\n機能 data の内容をCSVファイルに出力する\n説明 ベクトルまたは行列となっている data を、filenameのファイル名としてCSVファイルに書き出す。\noptionは，次の通り。（省略できる）\nCol=nn：自然数nnで指定した列数のCSVファイルとして書き出す。\nnamelistは，CSVファイルの1行目に追加される項目名。省略すると”C1,C2,...”という項目名が付く。\nなお，列数の指定を省略するとdataが行列の場合は、その列数をdataがベクトルの場合はnamelistの項目\n数を利用する。\n⇒関数一覧\n102", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 103", "content": "3 アニメーション PDF\n3.1 概要\nアニメーションのできるPDFを作る。\nCinderellaの作図機能とCindyscriptを用いてアニメーションができるが，PDFにすることでCinderellaがなく\nてもPDFビュアーがあればアニメーションを実行できるので，プレゼンテーションや教材の受け渡しなどに便利で\nある。\n次の画面は，samplesフォルダにある「s06animation」の「s0601cycloid」のものである。これをひな形として使\nうのがよい。すでにあるスライダなどが邪魔であれば，消去ボタンで消去するか，template2allbuttons.cdy をひな\n形として用いる。\n画面上方のボタンには，次のようなスクリプトが割り当てられている。\nFigure ： Viewtex(); 現在の画面のPDFデータを作る\nParent ：複数のスクリプト Figpdf() を使うときに使用する。\nParaF ： Parafolder(); アニメーションのフレームデータを作る\nAnime ： Mkanimation(); アニメーションPDFを作る\nFlip ： Mkflipanime(); パラパラ動画PDFを作る\nアニメーションPDFを作るには，フレームを定義する関数を記述し，「ParaF」ボタンでフレームデータを作り，\n「Anime」または「Flip」ボタンでPDFを作成する。\nAnime ボタンを押すと，\\usepackage[dvipdfmx]{animate} でパッケージを読み込み，animateinline 環境のア\nニメーションを作る。\nFlip ボタンを押すと，animateinline 環境ではなく，フレームに分割したPDFが生成される。\nなお，アニメーションPDFでアニメーションを行うにはAdobe Acrobat Reader など，アニメーションに対応し\nたPDFリーダーが必要である。WindowsのSumatraPDF，Macの プレビューではアニメーションができない。\n3.2 関数\n関数 Setpara(fname,funcstr,range,options1,options2)\n機能 アニメーションの設定をする\n説明 fname は出力するファイル名，funcstrは定義した動画関数名，rangeは範囲\n「Anime」ボタンを押すと，animate+fname.pdf が作られる。再生はコントローラか，画面クリックで行う。\n「Flip」ボタンを押すと，flipanime+filename.pdf が作られる。再生（コマ送り）は，Acrobat Reader のペー\n103", "tags": ["KeTCindy", "アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "外部連携", "構文", "環境構築"]}
{"title": "Page 104", "content": "ジ送りボタンで行う。\noptions1 はアニメーションのデータを作るための設定。\nm/r データの作成 / 既存データがある場合の読み込み（ 初期設定は r ）\nDiv=n フレーム数。初期値は25。\noptions2 はアニメーションについての設定で，次の通り。\nFrate=n １秒間のフレーム数。初期値は20。\nTitle=str タイトル。指定しない場合は fname と同じ。\nScale=n 図の大きさの拡大率\nopA=[option] animateinline 環境のためのオプション\n初期設定は[loop,controls,buttonsize=3mm]。\nloop：繰り返し再生する。\ncontrols：コントローラを表示する\nbuttonsize：コントローラのサイズ\npalindrome：反転して繰り返し再生する\nstep：コマ送りモードにする。コントローラもコマ送り仕様。\n\"OpA=[controls,buttonsize=5mm]\" のように記述する。\n+をつけると初期設定のものに追加することができる。\nたとえば \"OpA=+step\" で\n\"OpA=[loop,controls,buttonsize=3mm,step]\" となる。\n\"OpA=[]\" とすると，オプションなしとなり，\n画面をクリックすると繰り返しなしで再生される。\n記述例\nSetpara(\"cycloid\",\"mf(t)\",\"t=[0,60]\",[\"Div=60\"],\n[\"Frate=30\",\"Title=\"サイクロイド\",\"Scale=1.5\",\"OpA=[controls]\"]);\n関数 Parafolder(funcstr,fname,range,options)\n機能 アニメーションのフレームデータを作成する\n説明 funcstrは動画関数名，fname は出力するフォルダ名，rangeは範囲\n作業フォルダ(fig)内に，フレームデータを格納した fname フォルダを作る。ひな形（s0601cycloid）にある\nParaF ボタンに割り当てられており，通常はそのまま使えばよい。\n関数 Mkanimation(path,folder)\n機能 アニメーションのPDFを作る\n説明 作業フォルダ(fig)内に，フレームデータを格納した fname フォルダを作り，ここからアニメーションのPDF\nを作る。Setpara() で設定したファイル名を fname とすると，生成する TeX ファイルは，animatefname.tex\n（PDF作成のTeXファイル）と animfname.tex （動画データ）で，PDFの名称は，animatefname.pdf と\nなる。\nひな形（s0601cycloid）にある Anime ボタンに割り当てられており，通常はあらためて設定せずそのまま使え\nばよい。\n関数 Mkflipanime(path,folder)\n機能 パラパラ動画のPDFを作る\n104", "tags": ["アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 105", "content": "説明 作業フォルダ(fig)内に，フレームデータを格納したfnameフォルダを作り，ここからパラパラ動画のPDFを\n作る。Setpara() で設定したファイル名を fname とすると，生成する TeX ファイルは，flipanimefname.tex\n（PDF作成のTeXファイル）で，PDFの名称は，flipanimefname.pdf となる。\nひな形にある Flip ボタンに割り当てられており，通常はあらためて設定せずそのまま使えばよい。\n⇒関数一覧\n3.3 制作例\n【例】定円上を動く点Pと，定点Aを結ぶ線分の中点をQとして動きを見る。\nアニメーション（フレーム）を定義する関数は，時刻を t として， t における図を定義すると考える。時刻は単な\nる媒介変数であるので，t でなく s などでもよい。関数名は，たとえば mf(movie frame) とする。\nSetax([\"\",\"\",\"sw\",\"\",\"sw\"]);\nSlider(\"A-C-B\",[0,YMIN-1],[2*pi,YMIN-1]);\nCircledata(\"1\",[[0,0],[0,2]]);\nmf(t):=(\npt=2*[cos(t),sin(t)];\nmp=(pt+[4,0])/2;\nListplot(\"1\",[[4,0],pt]);\nPointdata(\"1\",[mp,pt],[\"Size=2\"]);\nif(t==0,\nptlist=[mp];\n,\nptlist=append(ptlist,mp);\n);\nLetter([[4,0],\"s\",\"A\",pt,\"en\",\"P\",mp,\"ne\",\"Q\"]);\nPointdata(\"2\",ptlist,[\"Size=2\",\"Color=red\"]);\n);\nmf(C.x);\nSetpara(\"middle\",\"mf(t)\",\"t=[0,4*pi]\");\nこの例の場合，mf(C.x) を実行するとスライダを動かすことでインタラクティブに軌跡を表示できる。アニメー\nションを作る上では mf(C.x) やスライダはなくてもよい。\nCinderellaの画面は次のようになる。\nアニメーションを作成するときは //mf(C.x) とコメントアウトしてから 「ParaF」「Anime」 ボタンをクリック\nする。次の図は，でき上がった animatemiddle.pdf の始めの画面である。\n105", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 106", "content": "また，次のようにオプションを指定すると，5秒間のアニメーションとなる。\nSetpara(\"middle\",\"mf(t)\",\"t=[0,4*pi]\",[\"Div=30\"],[\"Frate=6\"]);\n[\"Div=150\"],[\"Frate=30\"]とすると，やはり5秒間のアニメーションとなるが，1秒間のフレーム数が多いた\nめ，なめらかな動きとなる。これは標準的なビデオのフレームレートである。ただし，ファイルサイズは約5倍と\nなる。\n⇒関数一覧\n106", "tags": ["アニメーション", "上級者向け", "中級者向け", "外部連携"]}
{"title": "Page 107", "content": "4 KeT スライド\n4.1 概要と制作手順\nKETCindyで作成した図とテキストを統合してプレゼンテーション用のスライドPDFを作成する。必要なファイ\nルは，スライドの内容を記述したテキストファイル（ここではコンテンツファイルと呼ぶ）と，タイトルや図を作成\nし，コンテンツファイルと統合する KETCindyのファイルである。この2つのファイルは，拡張子が txt と cdy で，\nファイル名は同一とする。たとえば，コンテンツファイルを makeslide.txt ， KETCindyファイルを makeslide.cdy\nとしたときの，制作イメージを次の図に示す。\nmakeslide.txt\nTitle\nText1\nfig1\nText2\nfig1.tex ...\nfig2.tex\nmakeslide.cdy Slide.pdf\nmovie.tex\nmakeslide.cdy\nひな形として，サンプルとして提供されている samples フォルダの中の s0701basic.cdy をコピーし，適当にリ\nネームして使うのがよいだろう。必要なボタンと，最低限のスクリプトが記述されている。\n以下では，KETCindyのファイルを makeslide.cdy , コンテンツファイルを makeslide.txt として説明を進める。\n制作手順は次の通り。\n(1) makeslide.cdy に Settitle コマンドでタイトルを書き，「Titile」ボタンで書き出す。\nタイトルスライドが作業フォルダに，makeslide.txtがmakeslide.cdyと同じフォルダに作成される。makeslide.txt\nがすでにある場合には上書きはされず，タイトルスライドだけが上書きされる。\n(2) makeslide.txt に，スライドの各ベージごとの内容を記述する。\n(3) 必要な図やアニメーションのコードを書き，ボタンをクリックしてファイルを作る。\nFigure : 図を挿入するとき\nParaF : アニメーションやパラパラスライドを挿入するとき\n107", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "外部連携", "構文"]}
{"title": "Page 108", "content": "(4) Slide ボタンでスライドPDFを作成する。\nPDFと，関連する中間ファイルは，作業フォルダではなく，makeslide.cdyのあるフォルダに作成される。また，\nスライドPDFはアニメーションと同様，Windows，MacではAdobe Reader で開く必要がある。Linux(Ubuntu)\nでは Evince でプレゼンテーションができる。\n4.2 コンテンツファイル\nコンテンツファイルは次のような構成にする。\ntitle::slide0 タイトルスライド。title はコマンド。\nmain::三角比と三角関数 セクション1のタイトル。main はコマンド。\n直角三角形と三角比 1ページ目の表示内容。\n・・・・\nnew::角の概念の拡張 新しいページとタイトル。new はコマンド。\nenumerate::[(1)] 2ページ目の表示内容。enumerate はコマンド。\n・・・・\nnew::負の角 新しいページとタイトル。\n・・・・\nmain::三角関数のグラフ セクション2のタイトル。\nf(x)=sinx 以下同様\nnew::振幅と周期\n・・・・\n注）urlの指定で // を用いるときは，|||| とすれば // に変換される。\n・ページの内容は，コマンドでレイアウトなどを指定し，表示する文をテキストで書く。\nコマンド\nコマンドにおいて，各ブロックの引数の区切りは :: とし，各行の終わりには必ず//をつける。\n【タイトルと壁紙】\nタイトルスライドをつけるときは，\ntitle::slide0\nを１行目に置く。タイトルスライドは makeslide.cdy で作る。slide0は 初期設定のタイトルスライドのファイル\n名。このファイル名を変更(たとえば”start”)したときは，makeslide.cdyで，Settile()のオプションに”Title=start”\nをつけて，ファイル名が一致するようにしておく。\nタイトルスライドをつけないときはスライド名をつけないでおく。\ntitle::\n注）title コマンドは必須で，これを１行目に書かないとスライドは作成されない。\n壁紙（背景）を表示するときは，タイトルコマンドに続けて壁紙ファイル名を書く。\ntitle::slide0::wallpaper\nwallpaper は壁紙のファイル名。壁紙ファイルはTeXのファイルで，作業フォルダ（fig）に入れておく。\n壁紙ファイルの一例\n{\\color[cmyk]{0.6,0.2,0.8,0}\\huge\\rm\\normalsize\n\\newpage\n\\begin{layer}{120}{0}\n108", "tags": ["アニメーション", "上級者向け", "中級者向け", "外部連携"]}
{"title": "Page 109", "content": "\\lineseg{0}{2}{125}{0}\n\\lineseg{0}{88}{125}{0}\n\\putnotese{0}{90}{\\ketcindy}\n\\end{layer}\n}\n【セクションタイトル】\nmain::セクションタイトル名\nセクションを分けないときはなくてもよい。\n【新しいページ】\nnew(::行下げ)::タイトル((::位置)::読み込みファイル)\n例）new::[10]::はじめに::{50}{20}::figure\n読み込みファイルの表示サイズを変更するときは\nnew::[10]::はじめに::{50}{20}::figure,0.8\nのようにする。\n読み込みファイルがなければ，figure は省略。\n【箇条書き】\n番号つき箇条書きは\nenumerate\nで，enumerate環境の始まりを示す。\n番号にかっこをつけるなど，番号の形式を変えるには，\nenumerate::[(1)]\nのように，::で区切って形式を示す。 初期設定は，かっこなしの番号。\n記号つき箇条書きは\nitemize\nで itemize環境の始まりを示す。記号は中黒。\nenumerate，itemizeのいずれも\nitem::文\nで itemを記述する。\n環境の終わりは，\nend\nで示す。\n【項目の順表示】\n1枚のスライド内で，項目を段階的に表示するときは，new の次の行に\n%repeat=m(,para)\nを書く。mは段階数で，たとえば，そのスライドの内容を3段階で表示したい場合は\n%repeat=3\nとする。実際には３枚のスライドが作られる。\npara をつけると，右下にコントローラが表示され，前後に進めやすくなる。\n%repeat=3,para\n段階的に表示したい行の先頭に，表示する順番を，2番目以降から\n%[2,-]::text\n%[3,-]::text\n109", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "外部連携", "構文", "環境構築"]}
{"title": "Page 110", "content": "のように書く。\n番号指定を [-, 3] とすると，3番目まで表示する。\n[1..3,5 ] とすると，1番目から３番目までと5番目に表示する。（4番目をスキップ）\n【薄文字】\n順表示したい項目の全体像を見せておいて，そのうちの現在までの項目を示すような場合に用いる。番号指定の前\nに thin をつけ，\n%thin[2,-]::text\n%thin[3,-]::text\nのように書くと，現段階の項目よりあとは薄文字で表示される。\n薄文字の濃さは，\n\\setthin{alpha}\nで指定できる。alphaは0から1までの数で， 初期設定は0.1。\n\\setthin{0} のとき，指定段階以降の項目は非表示になる。\n初期設定の薄文字の濃さは，makeslide.cdy の Setslidebodyの第３引数で設定できる。たとえば，\nSetslidebody([\"\",\"\",0.2]);\nとする。\nitem とともに用いるときは，%thin[n,-] を先に書く。\n【例】項目の順表示\n図は，３番目のJavaまで進んだところである。右下にコントローラがある。\nnew::プログラミング言語\n%repeat=6,para\n\\slidepage\nitemize\nitem::Python\n%thin[2,-]::item::Ruby\n%thin[3,-]::item::Java\n%thin[4,-]::item::JavaScript\n%thin[5,-]::item::CindyScript\n%thin[6,-]::item::C\nend\n【図ファイルの順表示】\n作業フォルダ（fig）の中にあるサブフォルダ（例えばsubfig）の図ファイルすべてを順に表示する。\nパラパラ動画のときに用いる。パラパラ動画では，ParaFボタンをクリックすると，作業フォルダ(fig)の中に，動\n画のフレームファイルが入ったフォルダが作られる。そのフォルダのファイルをアルファベット順に表示する。もち\nろん，パラパラ動画以外のファイルの順表示に使ってもよい。\nnew の次に\n%repeat=\n%para=subfig:{0}:s{60}{10}:input(:倍率)\nを書く。TeXのソースには，\nlayer{120}{0}, \\putnotes{60}{10 初期設定put...}\nの形で書き入れられる。\nまた，２行に分けずに\n%repeat=,para=... と続けて書いてもよい。\n110", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 111", "content": "【レイヤー】\nketlayerの\\begin{layer}・・\\end{layer} として書き出す。本来の記述より簡素になっている。\nlayer::{範囲}{0}\nで layer環境の始まりを示す。layer環境の終わりは\nend\nレイヤーの中に作業フォルダ（fig）にある図を表示するには\nputnote::方向と位置::読み込みファイル\nとする。\n例） figure.texを(30,10)の位置の南東（原点は左上）に表示する。\nputnote::se{30}{10}::figure\n例） figの中のfigure.texを0.8倍にして表示する。\nputnote::se{30}{10}::figure,0.8\n例）includegraphics で figure.pdf を表示する。\nputnote::se{30}{10}::include[width=5cm]::figure.pdf\n注）KeTpicStyle.pdfを参照。文字などは本来の書式を用いて次のように入れる。\n\\putnotee{30}{10}{文字}\n【テキストと動画】\nコマンド以外のテキストはそのまま TEX に書き出される。行末には をつける。\nテキストを途中で改行するには，TEX の 強制改行マーク \\\\をつける。\n動画の場合は，動画の設定をして（アニメーションの節を参照）ファイルを作る。\nパラパラ動画の場合は，ParaFボタンをクリックすると，figフォルダ内に動画のフレームファイルが入ったフォ\nルダ（たとえば sincurve）が作られる。これを，\n%repeat=\n%para=sincurve:{0}:s{60}{10}:input(:倍率)\nで表示する。\nアニメーションの場合は，スライドのために，makeslide.cdyのスクリプトに，Addpackage([\"[dvipdfmx]{animate}\"]);\nを追加しておく。\nAnimeボタンをクリックすると，パラパラアニメと同様に動画のフレームファイルが入ったフォルダが作られ，動\n画用のTEX ファイルができる。Setpara() で設定したファイル名が ”sincurve” のとき，動画用のTEX ファイルは\n”animsincurve.tex” となるので，%repeat ではなく \\input{fig/animsincurve} で表示する。\n【コメント行】\nコマンドや文をコメントアウトするときは，%% とする。\n【空白行】\n空白行を入れたいときは，... とする。\n【タブ】\n\\Ltab{長さ}{文１}文２\nとすると，文１が行頭から，文２が長さ分の字下げをした位置から表示される。長さは 20mm のように指定。\n【ページ番号】\npage番号を表示するときは次のようにする。\nmainの場合は \\slidepage[m]\n111", "tags": ["アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 112", "content": "それ以外の場合は %repeatの後に \\slidepage\n注）総ページ数を取得するため，TeXを２度コンパイルすることが必要である。そのため，Slideボタンを２度ク\nリックすると総ページ数が表示される。\nmp3/mp4ファイルの追加\nmakeslide.txtのタイトルコマンドの後に，以下を追加する。\ntitle::slide0(::wallpaper)\n::\\usepackage{ketmedia}\n::\\usepackage[dvipdfmx]{media9}\nmp3ファイルを追加するときは，\\inputsoundまたは\\inputsoundclickを用いる。\n\\inputsountclik[90]{フォルダ/}{ファイル}\n\\inputsoundは「自動再生」，\\inputsoundclickは「クリック再生」である。最初の引数は，ボタンの水平位置\n（単位mm）でデフォルトは90である．またフォルダには/をつける。\nmp4ファイルを追加するときは，\\inputmovieを用いる。\n\\inputsountclik[90]{1}{0.4}{フォルダ/}{ファイル}\n2番目と3番目の引数は，幅と高さの\\linewidthからの倍率である。\n【余白などの編集】\nスライドの上側余白として，初期状態で \\vspace*{18mm} が設定される。次のページにはみ出してしまうような\n場合は，出力された tex ファイルで調整すればよい。\nその他，適宜編集して，kc.command(bat/sh) を実行すれば，細かい部分を修正した PDF を作成することがで\nきる。\n4.3 関数\nmakeslide.cdy で使う，KETCindyの関数。\n関数 Setslidebody(bodycolor,bodystyle,density)\n機能 全体の文字スタイルと薄文字の濃さ(0-1)の設定\n説明 引数の意味は次の通り。\nbodycolor 文字色 :初期設定は ”blue”\nbodystyle フォントタイプ :初期設定は \"\\Large\\bf\\boldmath\"\ndensity 薄文字の濃さ :初期設定は 0.1\n引数がない場合や（ Setslidebody()）この関数を書かない場合は初期値が使われる。\nある引数だけを指定したい場合は，それより前は空にする。\n【例】Setslidebody(,\"\\large\")\n関数 Setslidehyper(”dvipdfmx”,options)\n機能 順表示でページ送りのコントローラを設定する。\n説明 順表示しないときもこの関数の記述は必須と考えてよい。\nパッケージ hyperref.styを読み込み，かつ，options の値を与える。\nSetslidehyper(); は無効。初期設定で使う場合は Setslidehyper(\"\"); とする。\n第１引数は hyperref.sty の第１パラメータ。初期設定は ”dvipdfmx”\noptions は [”cl=bool,lc=col,fc=col”,”Pos=[x,y]”,”Size=n”]\n112", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 113", "content": "cl colorlinks : リンクに色をつけるかどうか。true / false で指定。 初期設定は true\nlc linkcolor : コントローラの色。色名で指定。 初期設定は blue\nfc filecolor リンクの色。色名で指定。 初期設定は blue\n以上３つは，セットで指定。一部初期値を使う場合はlc=, のように右辺を空にする。\nPos コントローラの位置。 初期設定は [125,73] （左上が原点）\nSize コントローラの大きさ。 初期設定は1\n関数 Setslidemain([letterc,boxc,boxd,framec,xpos,size])\n機能 メインスライド（セクション区切り）の設定\n説明 引数の一部を 初期設定値とする場合は [,,,,3] や [,”red”] などとする。\nletterc 文字の色。 初期設定は CMYKで [0.98,0.13,0,0.43]\nboxc ボックスの色。 初期設定は [0,0.32,0.52,0]\nframe フレームの色。 初期設定は [0,0.32,0.52,0]\nxpos タイトルの水平位置。 初期設定は 62\nsize タイトルの倍率。 初期設定は 2\n関数 Setslidepage([letterc,boxc,boxd,framec,shadowc,xpos,size])\n機能 ページの設定をする。\n説明 引数の一部を 初期設定値とする場合は [,,,,3] や [,”red”]などとする。\nletterc 文字の色。 初期設定は CMYKで [0.98,0.13,0,0.43]\nboxc ボックスの色。 初期設定は [0,0.32,0.52,0]\nframe フレームの色。 初期設定は [0,0.32,0.52,0]\nshadowc影の色。 初期設定は [0,0,0,0.5]\nxpos タイトルの水平位置。 初期設定は 6\nsize タイトルの倍率。 初期設定は 1.3\n関数 Setslidemargin([leftmarginchange,topmarginchange])\n機能 スライドの左上マージンをデフォルトから変更する場合の値。\n説明 Setslidemargin([+5,-10]);（横方向に+5mm，縦方向に−10mm変更）\n関数 Settitle(タイトルリスト,options)\n機能 タイトルスライドを作る\n説明 タイトルリストはコンマ区切りで位置と文を文字列で与える。例を参照。「Title」ボタンをクリックすると，\nコンテンツファイルがない場合は新たに作る。すでにある場合は上書きせずタイトルスライドのみを作る。\nSettitleのオプションは次をリストで与える。\n”Title=” タイトルスライドのファイル名。 初期設定は ”slide0”。\n”Layery=” タイトルの縦位置。 初期設定は0。0でないときは方眼を表示。\n”Color=” 文字の色。 初期設定は blue。\n【例】タイトルの設定\nSettitle([\n\"s{60}{20}{メインタイトル}\",\n113", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 114", "content": "\"s{60}{50}{名前}\",\n\"s{60}{60}{所属}\",\n\"s{60}{70}{情報}\"\n] ,\n[\"Title=SlideA\",\"Color=[1,1,0,0]\"]);\n出力する TEX ファイルに，\\begin{layer} の設定をする。 s は，東西南北のs。\n例のように，タイトルリストは改行すると見やすい。\n⇒関数一覧\n114", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 115", "content": "5 K TCindy3D\nE\n5.1 概要\nKETCindy3Dの画面は次のように構成される。\nCinderellaの描画面に，白の矩形で囲んだ領域が2つできる。NE,SWを対角とする左側の領域を主画面，右側の\n領域を副画面という。\n主画面は平面の場合と同様，TeXに出力される範囲を示し，NE,SWの2点をドラッグすることにより変更できる。\n主画面の下方のスライダで視点が移動でき，主画面上では軸が回転する。副画面は，xy平面上に視点を置いたものと\n考えればよい。\n主画面上にCinderellaの作図ツールで点や線分を作図すると，副画面に対応する点が作図される。主画面上の点を\nドラッグするとx,y座標を変更でき，副画面上の点をドラッグするとz座標を変更できる。\nKeTCindy3Dでは，線や面についての陰線処理を行う。陰線処理はＣ言語との連携により処理を速めている。C\n言語を使う環境整備が必要であるが，現在はこれを標準としている。C言語が使えない場合はRで計算する関数を用\nいることになるが，その場合はかなり時間がかかる。（場合にもよるが2分程度）\n115", "tags": ["KeTCindy", "インストール", "初心者向け", "構文", "環境構築"]}
{"title": "Page 116", "content": "5.2 設定\n関数 Ketinit3d()\n機能 KeTCindy3Dの使用宣言\n説明 Cinderellaの画面を3Ｄモードにする。\nCinderellaの描画面に，視点移動のための2つのスライダを作る。スライダは初期位置が左端になる。スライ\nダTHで角THETAを，スライダFIで角PHIを内部変数として定義する。\n引数に0を入れて Ketinit3d(0) とすると，副画面を表示しない。\n＜重要＞\nこの関数は Initialization スロットに置く。Ketinit() も，平面の場合と異なり Initialization スロットに置く。\nKeTCindy3Dにおける変数の初期化などを行う，Start3d()はDrawスロットに書く。\n関数 Setangle(TH,FI)\n機能 回転角の指定\n説明 スライダで設定できる回転角（視点の位置）TH と FI を度数法で指定する。たとえば，Setangle(70,40) と\nすると，TH,FIがその位置になる。スライダは固定されるので，再度スライダを有効にしたい場合は，コメン\nト化して再実行する。\n初期状態だけを決めたい場合は\nif(!Ptselected(),Setangle(70,40));\nまたは\nif(!Isangle(),Setangle(70,40));\nとすると，スライダは有効となり，スライダのいずれかの点を選択した状態であれば Figure ボタンも有効で\nある。画面上のなにもないところをクリックして，点の選択状態を解除するともとに戻る。\n回転角の取得については，回転角の取得を参照のこと。\n関数 Start3d(option)\n機能 3Ｄの画面設定と空間点の認識\n説明 副画面を作り，幾何点を3Ｄの点として認識する。この関数は必須で，Drawスロットの先頭に書く。\nCinderellaの作図ツールで，点・線分を作図すると，内部関数の Ptseg3data() によってそれらを空間の点と\nして認識し，副画面上に対応する点をとる。ただし，始めはz座標を０とする。点の名前がAであれば，副画\n面上の点はAzとなる。点をポイントして選択すると副画面の上に座標が表示される。\n作図した点の名称をインスペクタで変更した場合，新しい名称に対応する点を副画面上に作成するが，以前の\n点は消えないので要注意。たとえば，点Aを作図した後，主画面上の点Aをインスペクタで点Dに変えた場\n合，副画面上に新たにDzができるが，以前のAzも残る。残ったAzは，選択しておいて作図ツールの消去ボ\nタン で消すことができる。\noptionに，除外点のリストを与えると，その点は空間点としない。（スライダで視点を移動しても位置は変わ\nらない）\n関数 Startsurf(options)\n機能 曲面描画の初期化と定数の設定\n説明 options で定数を設定する。定数としては，分割数，Cのサイズ，誤差の限界を設定する。\noptionsがないときは，以下の 初期設定を用いる。\n[50,50],[1500,500,200],[0.01,0.1]\n設定後に初期値にリセットするときは，文字列 ”reset” を引数に与える。\nこれにより，陰線処理をともなう面の描画の手順は，次のようになる。\n116", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 117", "content": "(1)Startsurf(); で面描画の宣言をする。\n(2) 描画関数でプロットデータを作る。\n(3) ExeccmdC(); で，C言語を用いてまとめて描画する。\n⇒関数一覧\n関数 Xyzax3data(name，ｘの範囲，yの範囲，zの範囲,options)\n機能 座標軸を描く\n説明 描画面に座標軸を描き，プロットデータ ax3dを作成する。nameは空文字列でよい。option は次の2つ。\n矢じり：”a[size],angle”：sizeは数字で矢じりの大きさ（デフォルトは1）。angleは開き角（デフォルトは18◦）\n原点O：”Onesw”：neswは微小位置。数字も付けられる。neswをつけない場合の初期値はsw。\n【例】 初期設定の座標軸\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n矢じりをつける\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",[\"a\"]);\n矢じりを大きくする\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",[\"a2\"]);\n原点のOを表示する。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",[\"O\"]);\n原点のOの位置を調整して右上に表示する。やじりもつける。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",[\"a\",\"Oe2n2\"]);\n【注意】Putaxes3d() で点を取ると原点に点Oが作成される。この点名Oと表示が重複するのが煩わしい場合\nは，作図後にこのoptionをつけてから出力するとよい。\n5.3 描画\n5.3.1 点・線\n関数 Pointdata3d(名前,点リスト,options)\n機能 点の3Dデータと2Dデータを作成し，画面とTEXに出力する。\n説明 optionsはPointdata()と同様。\n【例】\nPointdata3d(\"1\",[[1,1,1],[0,1,0]],[\"Size=2\",\"Color=red\"]);\n関数 Putpoint3d(リスト,option)\n機能 空間に幾何点を作図する\n説明 点の名称と座標を与えて点を作図する。複数の点を一度に作図できる。\noptionは，”fix”( 初期設定) または ”free”。リスト [”free”] にしてもよい。\n”fix” では，固定点（ドラッグで移動できない点）とする。同じ名称の点がすでに存在する場合は，指定した位\n置に移動して固定点とする。\n”free” では，自由点（ドラッグで移動できる）とする。同じ名称の点がすでに存在する場合はなにもしない。\n【例】いくつか記述例を示す。\nPutpoint3d([\"A\",[2,1,3]]);\n117", "tags": []}
{"title": "Page 118", "content": "Putpoint3d([\"A\",[1,1,1],\"C\",[1,0,1]],\"fix\");\nPutpoint3d([\"A\",[2,1,3]],\"free\");\nなお，この関数は幾何点を作るものであり，TeXには出力されない。TeXに点を出力するには，Pointdata()\nを併用する。\n空間における点の座標は，点名に”3d”を付加した名前の変数に代入される。たとえば，点Aの座標はA3dで\nある。これにより，点の座標を取得できる。\n関数 Putaxes3d([x,y,z])\n機能 軸上に幾何点を作る。\n説明 引数のリスト [x,y,z] に対し，点X(x,0,0) ,Y(0,y,0) , Z(0,0,z) および 原点Oを主画面上にとり，副画面上に\n対応する点Xz，Yz，Zz，Oz を作る。すでに同じ名称の点がある場合は，指定された位置に移動する。\n引数は，実数にすることもでき，Putaxes3d(a) は，Putaxes3d([a,a,a]) と同じになる。\n【例】\nPutaxes3d(5);原点と，x(5,0,0),y(0,5,0),z(0,0,5) を作る。\nPutaxes3d([1,2,3]);原点と，x(1,0,0),y(0,2,0),z(0,0,3) を作る。\n関数 Putoncurve3d(点名，PD)\n機能 空間曲線上に点をとる\n説明 プロットデータPDの曲線上に，点名の点をとる。\nとった点は固定点ではなく，曲線上にインシデントとなる。したがって，ドラッグして曲線上を動かすことが\nできる。例は Partcrv3d() を参照のこと。\n関数 Putonseg3d(点名，点1，点2)\n機能 線分上に点を作る\n説明 点１と点2の中点に，指定された名前の点を取る。点１と点2が線分として結ばれていなくてもよい。とった\n点は線分にインシデントとなる（線分が描かれていなくても）。点１と点2はリストにすることもできる。指\n定した点がすでに存在する場合は動かさない。\n点1，点2は幾何点の名称または座標で指定する。\n【例】A(1,-1,0)とB(0,2,2) の中点に点Cをとる。つぎのいずれでもよい。\nPutonseg3d(\"C\",A,B);\nPutonseg3d(\"C\",[A,B]);\nPutonseg3d(\"C\",[[1,-1,0],[0,2,2]]);\n関数 Spaceline(name,list)\n機能 折れ線を描く\n説明 点の名称または座標のリストを与えて折れ線を描く。平面での Listplot() にあたる。\noptions は線種（dr,da,do）\n【例】いくつか示す。\n・Spaceline(”1”,[[2,5,1],[4,2,3]]); 指定された2点を結んだ線分を描く。\n・Spaceline(”2”,[A,B,C,A]);作図されている2点A,B,Cを結んだ三角形を描く。\n・節点を表示する場合は，Pointdata3d() で描画する。\n118", "tags": []}
{"title": "Page 119", "content": "pt=[[2,0,0],[2,0,2],[2,2,2],[0,2,2],[0,4,2],[0,4,4]];\nSpaceline(\"1\",pt);\nPointdata3d(\"1\",pt,[\"Size=3\"]);\n点の名前が必要であれば\npname=apply(1..6,\"P\"+text(#));\nのようにして，名前リストを作ることができる。\nz\nO\nx\ny\n関数 Spacecurve(name,式,定義域,options)\n機能 空間曲線を描く\n説明 媒介変数で表された曲線を描く。optionは解像度 Num\n【例】螺旋を描く\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=100\"]);\nz\nO\nx\ny\n関数 Bezier3d(name,リスト1,リスト2)\n機能 空間ベジェ曲線を描く\n説明 引数はリスト1が端点リスト，リスト2が制御点リスト\n１組の端点につき，2つの制御点を使う。\n【例】いくつかの点をベジェ曲線で結ぶ\n端点A,Bに対し，制御点をD,Eとする。\nBezier3d(\"1\",[\"A\",\"B\"],[\"D\",\"E\"]);\n端点A,Bに対し，制御点をD,Eとし，端点BCに対し制御点をE,Fとする。\nBezier3d(\"1\",[\"A\",\"B\",\"C\"],[\"D\",\"E\",\"E\",\"F\"]);\n端点A,Bに対し，制御点をD,Eとし，端点BCに対し制御点をF,Gとする。（図）\nBezier3d(\"1\",[\"A\",\"B\",\"C\"],[\"D\",\"E\",\"F\",\"G\"]);\n119", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 120", "content": "z\nC\nF\nD\nG\nO\nB\nA\nx\ny\nE\n⇒関数一覧\n関数 Mkbezierptcrv3d(点リスト)\n機能 制御点を自動的にとる空間ベジェ曲線\n説明 リストで与えた点に対し，制御点を自動的に生成してベジェ曲線を描く。\n制御点は，2つの点に対して，その点を端点とする線分上に2つ作られる。これを適宜移動して任意の曲線に\nすることができる。空間ベジェ曲線 Bezier3d() を参照のこと。\n【例】Mkbezierptcrv3d([\"A\",\"B\",\"C\",\"D\"]);\n線分AB上に2点a1p,a2p，線分BC上に2点a2p,a2q，線分CD上に2点a3p,a3qができる。\n関数 Skeletonparadata(name,PDリスト,PDリスト,option)\n機能 陰線処理（スケルトン処理）をおこなう\n説明 描画されている線と軸について陰線処理をおこなう。\n第2引数の線（プロットデータ）が，第3引数の線（プロットデータ）によって隠される部分を消去する。第\n2，第3引数を省略した場合は，すべての線について，互いの陰線処理をおこなう。optionで消去する部分の\n長さを指定できる。\n他のオプション\n\"No=点リスト\" 点リストの点が選ばれているときは実行しない\n\"File=y/m/n (n)\" データファイルを作るか\n\"Check=点リスト\" 点リストの点が変更されていたら，ファイルを作り直す\n【例】螺旋と線分，座標軸の陰線処理\n次のように螺旋と線分，座標軸を描いておく。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,4]\",\"z=[-5,3]\");\nPutpoint3d([\"A\",[0,-2,-2]]);\nPutpoint3d([\"B\",[-1,1,3]]);\nSpaceline([A,B]);\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=100\"]);\n座標軸のプロットデータは ax3d，線分は AB3d，螺旋は sc3d1 である。これに対し，\nSkeletonparadata(\"1\");\n描画されている線と軸について陰線処理をおこなう。（図左）\nSkeletonparadata(\"1\",[2]);\n重なった部分の空きを2にする。（図中央）\nSkeletonparadata(\"1\",[\"AB3d\",\"ax3d\"],[\"sc3d1\"]);\n螺旋によって隠れる部分だけ消去する。（図右）\n120", "tags": ["アニメーション", "上級者向け", "中級者向け", "外部連携"]}
{"title": "Page 121", "content": "z z z\nx x x\ny y y\nこのほか，次も可能。\nSkeletonparadata(\"1\",[\"AB3d\",\"ax3d\"],[\"sc3d1\"],[2]);\nSkeletonparadata(\"1\",[\"AB3d\"],[\"ax3d\",\"sc3d1\"]);\n⇒関数一覧\n5.3.2 多面体\n多面体の描画について，四面体の場合を例にして説明する。\n四面体は4つの面からなっている。 A\n頂点をA,B,C,Dとすると，4つの面は\n△ABC，△ABD，△ACD，△BCD\nである。\n頂点のリスト[A,B,C,D] に対し，Aから順に番号を D\nB\nつけると，各面の頂点の順番は\n[1,2,3],[1,2,4],[1,3,4],[2,3,4]\nC\nと表現できる。\n頂点のリストと，この面リストを組にして [[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]] としたものを「面データ」\nという。この面データを使って，多面体を描画するのが VertexEdgeFace() である。\n多面体の陰線処理は２通りある。ひとつは，多面体を線画と考えて，隠れる部分だけを処理する方法で，Skeleton-\nparadata() を用いる。Concatobj() の例を参照のこと。\nもうひとつは，面と考えて，面に隠れる部分を点線で描いたり，非表示にしたりする方法で，Phparadata() を用\nいる。 Phparadata()の例を参照のこと。\n関数 Concatobj(リスト,option)\n機能 いくつかのobjデータを結合する\n説明 多面体の各面の頂点リストから面データ（頂点リストと面リスト）を作る。\nたとえば，Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);とすると，面データ[[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]]\nが返される。\n【例】4点A,B,C,Dを幾何点として作り，これを頂点とする四面体を描く。\nPutpoint3d(\"A\",2*[0,0,sqrt(3)]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[-1,-1/sqrt(3),0]);\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nVertexEdgeFace(\"1\",phd);\nSkeletonparadata(\"1\");\nLetter3d([A3d,\"ne\",\"A\",B3d,\"sw\",\"B\",C3d,\"se\",\"C\",D3d,\"e\",\"D\"]);\n121", "tags": []}
{"title": "Page 122", "content": "A\nD\nB\nC\n＜参考１＞\n幾何点を作らないで四面体を描くのであれば，\na=2*[-1,-1/sqrt(3),0];\nb=2*[1,-1/sqrt(3),0];\nc=2*[0,sqrt(3)-1/sqrt(3),0];\nd=2*[0,0,sqrt(3)];\nphd=Concatobj([[a,b,c],[a,b,d],[a,c,d],[b,c,d]]);\nとしてもよい。\n＜参考２＞四面体のような凸型多角形の場合は，CindyScriptの convexhull3d() 関数を用いて次のようにす\nることができる。面リストではなく頂点リストを与えるだけなので手間を省くことができる。\na=2*[0,0,sqrt(3)];\nb=2*[1,-1/sqrt(3),0];\nc=2*[0,sqrt(3)-1/sqrt(3),0];\nd=2*[-1,-1/sqrt(3),0];\nphd=convexhull3d([a,b,c,d]);\n⇒関数一覧\n関数 VertexEdgeFace(name,面データ,options)\n機能 面データを用いて多面体を描く\n説明 面データは，たとえば四面体ABCDの場合は，[[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]] である。\n4点A,B,C,Dをとっておき，このリストを引数に与えると，四面体が描かれる。\n生成されるプロットデータは，\nphv3d：頂点のリスト\nphe3d：辺のリスト\nphf3d：面リスト\nなお，それぞれ末尾にnameが付加される。\n【例】4点A,B,C,Dを取り，正四面体ABCDを描く\nPutpoint3d(\"A\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[0,0,sqrt(3)]);\nphd=[[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]];\nVertexEdgeFace(\"1\",phd);\n122", "tags": ["KeTCindy", "構文"]}
{"title": "Page 123", "content": "面リストは，Congatobj() を使って作ることができる。陰線処理して描く場合も含め，Concatobj() の例を参\n照のこと。\n関数 Phparadata(name,name2,options)\n機能 多面体を陰線処理して描く\n説明 多面体のプロットデータをVertexEdgeFace() で作る。このプロットデータに対し，隠れている面（辺）を陰\n線処理して表示する。第1引数は通常のname，第2引数のname2は，VertexEdgeFace() で与えたnameと\n同じものとする。\noptionsは，全体の線種（”dr,2”など）と，陰線の線種を”Hidden=線種” で指定できる。 初期設定では陰線は\n表示しない。\n【例】四面体を描く。\nPutpoint3d(\"A\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[0,0,sqrt(3)]);\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nVertexEdgeFace(\"1\",phd);\nPhparadata(\"1\",\"1\",[\"Hidden=do\"]);\nなお，VertexEdgeFace() で四面体が描かれるが，Phparadata() により非表示になる。Figureボタンで描き\n出せば正しく出力されるので，Phparadata() を実行する前に画面上に表示して確認してからPhparadata()\nを実行するとよい。\n【例】切頂二十面体を描く。\n小林・鈴木・三谷による多面体データpolyhedrons_objを用いて，s06の切頂二十面体（サッカーボール型）\nを描く。 polyhedrons_obj は KeTCindyシステムの data ディレクトリにあるので，Setdirectory() でカレ\nントディレクトリを作業ディレクトリと切替ながら出力する。\nSetdirectory( Dirhead+\"/data/polyhedrons_obj\");\nphd=Readobj(\"s06.obj\",[\"size=3\"]);\nSetdirectory(Dirwork);\nVertexEdgeFace(\"s06\",phd);\nPhparadata(\"1\",\"s06\");\nVertexEdgeFace() の name は通常の ”1” でもよい。その場合は，Phparadata(\"1\",\"1\"); とするが，わか\nりにくいので上のようにした。\n実行すると，Cinderellaの描画面は次のように頂点だけが描かれる。\n123", "tags": ["KeTCindy", "構文"]}
{"title": "Page 124", "content": "全体の線種と，陰線の線種を\nPhparadata(\"1\",\"s06\",[\"dr,2\",\"Hidden=do\"]);\nで指定したのが下図右である。\n【注意】\npolyhedrons obj のデータを使って，続けて異なる多面体を描きたい場合は注意が必要である。Readobj()だ\nけを変更して別のデータを読めばよさそうであるが，前のデータが残っていてうまくいかない。VertexEdge-\nFace() のname を（したがって，Phparadata()の第2引数も）書き換えるか，作業フォルダ(fig) の中身を\n削除してから実行する。たとえば，上のコードで切頂二十面体を描いた後，正八面体（r02）を描こうとするな\nらば，\nSetdirectory( Dirhead+\"/data/polyhedrons_obj\");\nphd=Readobj(\"r02.obj\",[\"size=3\"]);\nSetdirectory(Dirwork);\nVertexEdgeFace(\"2\",phd);\nPhparadata(\"1\",\"2\");\nのようにする。\n⇒関数一覧\n関数 Nohiddenbyfaces(name,PD1,PD2,option1,option2)\n機能 面に対し曲線を陰線処理する\n説明 PD2で与えられた面に対し，曲線PD1の面に隠れている部分を陰線処理する。\n引数PD1を省略するとすべての曲線が対象となる。陰線処理された線は初期設定では点線で表される。この\n線種はoption2で変更できる。たとえば，[”da”] とすると破線になる。[”nodsip”] とすると，陰線は表示され\nない。option1は曲線全体のoptionであるので，option2 だけを指定する場合は，option1 として空リスト[ ]\nが必要である。option2では，”Eps=” で，陰線処理時の許容限界を設定できる。陰線処理がうまくいかない\nときは，この値を Eps=10^(-4) のように変えてみるとよい。初期設定は Eps=10^(-2)。\n【例】座標平面上に正四面体を描き，各軸と正四面体の辺を陰線処理する。（下図左）\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nPutpoint3d(\"A\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[0,0,2*sqrt(6)/3]);\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nVertexEdgeFace(\"1\",phd);\nNohiddenbyfaces(\"1\",\"phf3d1\");\nVertexEdgeFace(\"1\",phd); によって，辺，頂点，面のプロットデータが作られる。phf3d1 は，面のプロッ\nトデータである。\nここで，Nohiddenbyfaces(\"1\",\"phe3d1\",\"phf3d1\",[\"dr,2\"],[\"da\"]); とすると，座標軸は陰線処理\nされず，正四面体の辺（phe3d1）だけが陰線処理されて破線で描かれる。四面体は太く描かれる。（下図右）\n124", "tags": []}
{"title": "Page 125", "content": "z z\nx y x y\n同様に，\nNohiddenbyfaces(\"1\",\"ax3d\",\"phf3d1\",[],[\"da\"]);\nとすれば，座標軸だけが陰線処理されて破線で描かれる。\n5.3.3 曲面\n曲面の描画には，ワイヤーフレームモデルとサーフェスモデルがある。ワイヤーフレームモデルは，曲面を編目で\n表すものであり，サーフェスモデルは編目のない面として，その輪郭線を描くものである。\nワイヤーフレームモデル サーフェスモデル\nKeTCindyでは，それぞれ次の関数を用いて描画する。\n陰線処理をしないワイヤーフレームモデル Sf3data(name,form,options)\nサーフェスモデル Sfbdparadata(name,form,options)\nサーフェスモデルにワイヤーを描く Wireparadata(name,PD,form,n1,n2,options)\nワイヤーフレームモデルで陰線処理をするためには，面のデータが必要なので，Sfbdparadata() で描画した後，\nWireparadata()で描画する。\nまた，サーフェスモデルの描画では，陰線処理に時間がかかるため，Ｃ言語の使用を前提としている。したがって，\nＣ言語を用いて描画を行う ExeccmdC() を併用する。\n引数の form は，方程式 と，変数の定義域を文字列のリストにしたものである。方程式のパターンは次の3通りが\nある。\n(1) z =f(x,y)\n【例】式：z =x2−y2\n定義域：x=(−2,2),y =(−2,2)\n(2) z =f(x,y),x=g(r,t),y =h(r,t)\n【例】式：z =4−(x2+y2),x=rcost,y =rsint\n定義域：r =(0,2),t=(0,2π)\n(3) x=f(u,v),y =g(u,v),z =h(u,v),\n【例】式：x=2sinucosv,y =2sinusinv,z =2cosu\n定義域：u=(0,π),v =(0,2π)\nここで，(2)と(3)は媒介変数型で，x,y,z それぞれの式と，媒介変数２つの定義域からなっている。そのままでは\n125", "tags": ["KeTCindy", "構文"]}
{"title": "Page 126", "content": "区別がつかないので，引数として与えるときは，(3) の型には，識別文字として ”p” を先頭に付加する。\nまた，定義域については，開区間でとる場合と閉区間でとる場合がある。その区別を境界指定として”ewsn”で表す\n（ともに閉区間）。”ewsn” の意味は次のように考える。\n変数が u,v のとき，u,v 平面において，a ≤ u ≤ b,c ≤ v ≤ d の矩形を考え，境界値を東西南北(ewsn)で示す。\nそれぞれの文字が書かれたときは境界値を含む。\nv\nn\nd\nw e\nc\ns\nu\na b\nこの境界指定を最後に付加するが，省略することもでき，省略した場合は初期値の ”ewsn” （閉区間）とする。と\nもに開区間とする場合は，”” とする。ただし，陰線処理をしない Sf3data() では，境界にも線を引くので，この指定\nは無効となる。\n具体的な例を示そう。\n次は，円錐の form である。（formは form data を短縮した fd がよく使われる）\nfd=[\"p\",\"x=r*cos(t)\",\"y=r*sin(t)\",\"z=2*(2-r)\",\"r=[1,2]\",\"t=[0,2*pi]\",\"ew\"]\n”ew” は 1≤r ≤2 であることを示す。したがって，円錐台の上面と底面が表示される。\nこれを ”e” とすると 1<r ≤2 となり，上面が表示されない。\nまた，これを ”w” とすると 1≤r <2 となり，底面が表示されない。\nさらに，”ewn” あるいは ”ews” としたり，指定を略して初期値の ”ewsn” とすると，t=(0,2π) の左右いずれか\nの値が含まれることになり，不要な境界線が現れる。\n”ew” ”e” ”w” ”ewn”\n球面を描く場合はこの点で留意することがある。球面をサーフェスモデルで描くと単に円にしか見えないので，多\nくの場合はサーフェスモデルで描いた球面に Wireparadata() で陰線処理したワイヤーを入れることになるだろう。\nその場合，Wireparadata() では境界線には線を引かないので，境界指定を ”s” として，境界線を引く必要がある。\n境界指定を ”” とすると，経線が1本足りなくなるので注意されたい。具体例は，Wireparadata() に例示してある。\n関数 Sf3data(name,リスト,options)\n機能 陰線処理なしの曲面をワイヤーフレームモデルで描く\n説明 optionsは，メッシュの密度と解像度（各変数に対応する分割数）。\nメッシュ密度は，縦横で ”Wire=[a,b]” で指定。初期値はa,bとも20。\n解像度は，”Num=[a,b]” で指定。初期値はa,bとも25。\n126", "tags": []}
{"title": "Page 127", "content": "【例】 z =f(x,y) 型\nz\nz =x2−y2を定義域x=[−2,2],y =[−2,2] で描画する。\nfd=[\"z=x^2-y^2\",\"x=[-2,2]\",\"y=[-2,2]\"];\nSf3data(\"1\",fd);\nメッシュの数を縦横とも10，解像度をx,yとも10にすると\nx\nメッシュ密度，解像度とも下げるので粗い描画となる。 y\nSf3data(\"1\",fd,[\"Num=[10,10]\",\"Wire=[10,10]\"]);\n【例】z =f(x,y),x=g(r,t),y =h(r,t)型\n次図左\nfd=[\"z=4-(x^2+y^2)\",\"x=r*cos(t)\",\"y=r*sin(t)\",\"r=[0,2]\",\"t=[0,2*pi]\"];\nSf3data(\"1\",fd);\n次図右\nfd=[\"z=sin(sqrt(abs(x^2+y^2)))\",\"x=r*cos(t)\",\"y=r*sin(t)\",\n\"r=[0,3]\",\"t=[0,2*pi]\"];\nSf3data(\"1\",fd);\nz z\nx x\ny y\n(3) x=f(u,v),y =g(u,v),z =h(u,v), 型\nこの場合，(2)と区別するために，”p” を先頭につけておく。\n【例】球面\nfd=[\"p\",\"x=2*sin(u)*cos(v)\",\"y=2*sin(u)*sin(v)\",\"z=2*cos(u)\",\n\"u=[0,pi]\",\"v=[0,2*pi]\",\"\"]; Sf3data(\"1\",fd);\nz\nx\ny\n⇒関数一覧\n関数 Sfbdparadata(name,式,options)\n機能 サーフェスモデルの輪郭線を描く\n127", "tags": []}
{"title": "Page 128", "content": "説明 この関数はデータを作るだけなので，表示するには ExeccmdC() を併用する。\noptionsは，”Wait=n”,”r”,”m”,および線種。Wait の初期値は30。\n”r”,”m”に関しては，\nオプションなしまたは，”” のとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n”m”のとき，強制的にデータファイルを作り直す。\n”r” のとき，すでにあるデータファイルを読み込む。\nこの処理は時間がかかるため，この関数を実行した状態で画面上のスライダやその他の点を動かそうとすると\n反応が悪くなる。そこで，Isangle() または Isptselected() を用いて，スライダの点を選択しているときはワイ\nヤフレームモデルを描画するようにするとよい。\nなお，C言語の環境がない場合は，ExeccmdC()が使えないので，SfbdparadataR(name,式,optons1,optons2)\nを使う。options2 には陰線の表示方法について ”nodisp” または線種 を指定する。 初期設定は”nodisp” 。\noptions2のみ指定するときは，options1に [””] （空文字）を書いておく。\n作図例は 次の ExeccmdC を参照のこと。\n関数 ExeccmdC(name,options1,options2)\n機能 曲面を表示する。戻り値は，対象にしたプロットデータのリスト。\n説明 データが作成された曲面を表示する。\noptions1 には”r”,”m”, ”Wait=n” と輪郭線の線種が指定できる。\noptions2 には 軸の陰線について ”nodisp” または線種が指定できる。 初期設定は ”do”。\noptions2だけを指定したい場合は，options1 を空リスト [ ] にする。\n【例】サドル面\n陰線を消去して表示\nfd=[\"z=x^2-y^2\",\"x=[-2,2]\",\"y=[-2,2]\"];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nExeccmdC(\"1\",[],[\"nodisp\"]);\n);\n全体を実線で太めにして，陰線は初期設定の\n点線で表示。\nExeccmdC() を変更する。\nExeccmdC(\"1\",[\"dr,2\"]);\n【例】放物面： 式を変更する。\nfd=[\"z=4-(x^2+y^2)\",\"x=R*cos(T)\",\"y=R*sin(T)\",\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"];\n陰線を消去（下図左）：ExeccmdC(\"1\",[],[\"nodisp\"]);\n陰線を破線で表示（下図右）：ExeccmdC(\"1\",[],[\"da\"]);\n128", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 129", "content": "【例】曲面を２つ表示するときは，Sfbdparadata()のnameは”1”と”2”にするが，まとめてExeccmdC(\"1\")\nで表示できる。\nfd=[\n\"p\",\n\"x=r*cos(t)\",\"y=r*sin(t)\",\"z=2*(2-r)\",\n\"r=[1,2]\",\"t=[0,2*pi]\",\"ew\"\n];\nfd2=[\n\"p\",\n\"x=r*cos(t)-3\",\"y=r*sin(t)+3\",\"z=2*(2-r)\",\n\"r=[0,2]\",\"t=[0,2*pi]\",\"ew\"\n];\nif(!ptselected(),\nStartsurf();\nSfbdparadata(\"1\",fd);\nSfbdparadata(\"2\",fd2);\nExeccmdC(\"1\");\n);\nz\nx\ny\n【例】トーラスを描く：軸は非表示にしておく。\nfd=[\"p\",\"x=(2+cos(u))*cos(v)\",\n\"y=(2+cos(u))*sin(v)\",\"z=sin(u)\",\n\"u=[0,2*pi]\",\"v=[0,2*pi]\",\"s\"];\nif(Ptselected(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nWireparadata(\"1\",\"sfbd3d1\",fd,12,12,[],[\"nodisp\"]);\nExeccmdC(\"1\",[],[\"nodisp\"]);\n);\n⇒関数一覧\n関数 Wireparadata(name,PD,式,整数,整数,optons)\n機能 Sfbdparadataで作成した曲面について，陰線処理したワイヤーを描く\n129", "tags": []}
{"title": "Page 130", "content": "説明 PDは，第3引数の式を用いてSfbdparadata()で描いたサーフェスモデルのプロットデータ名。第4，第5引\n数は分割線の数。\noptions には ”r”,”m”,”Wait=n” が指定できる。\nSfbdparadata() とペアで使い，そのあとに ExeccmdC で描画する。\nC 言語の環境がない場合は，ExeccmdC() が使えないので，WireparadataR(name,PD, 式, 整数, 整数,op-\ntons1,optons2) を使う。options2には陰線の表示方法について ”nodisp” または線種 を指定する。 初期設定\nは”nodisp” 。options2のみ指定するときは，options1に [””] （空文字）を書いておく。\n【例】\nz\nサドル面\nfd=[\"z=x^2-y^2\",\"x=[-2,2]\",\"y=[-2,2]\"];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\ny\nSfbdparadata(\"1\",fd);\nx\nWireparadata(\"1\",\"sfbd3d1\",fd,4,5);\nExeccmdC(\"1\");\n);\nz\n回転放物面：次を変更\nfd=[\"z=4-(x^2+y^2)\",\"x=r*cos(t)\",\n\"y=r*sin(t)\",\"r=[0,2]\",\"t=[0,2*pi]\",\"e\"];\nWireparadata(\"1\",\"sfbd3d1\",fd,5,7);\ny\n球面 x\nfd=[\"p\",\"x=sin(u)*cos(v)\",\"y=sin(u)*sin(v)\",\"z=cos(u)\",\n\"u=[0,pi]\",\"v=[0,2*pi]\",\"s\"];\nif(Ptselected(), z\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nWireparadata(\"1\",\"sfbd3d1\",fd,12,12);\nExeccmdC(\"1\");\n);\nx\ny\n関数 Crvsfparadata(name,PD1,PD2,式)\n機能 曲面による曲線の陰線処理を行う。\n説明 曲線PD1と曲面PD2について，PD1はPD2による陰線処理を行う。\nCrvsfparadata() のあとに ExeccmdC() でまとめて描画する。\nC言語が使えない場合は，CrvsfparadataR(name,PD1,PD2,式,options1,options2) を使う。options1 は分割\n数と誤差限界， options2 は陰線の線種。\n【例】回転放物面と座標軸，線分を陰線処理したデータを作って表示する。線分の端点A,Bはあらかじめ作図\nしておく。\nExeccmdC()の 初期設定では陰線は点線で表示される。（下図左）\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,3]]);\nSpaceline([A,B]);\nfd=[\"z=4-(x^2+y^2)\",\"x=R*cos(T)\",\"y=R*sin(T)\",\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"];\n130", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 131", "content": "Startsurf();\nSfbdparadata(\"1\",fd);\nCrvsfparadata(\"1\",\"AB3d\",\"sfbd3d1\",fd);\nCrvsfparadata(\"2\",\"ax3d\",\"sfbd3d1\",fd);\nExeccmdC(\"1\");\nExeccmdC()の options2を [”nodisp”] にすると，陰線は非表示になる。（下図右）\nExeccmdC(\"1\",[],[\"nodisp\"]);\nz z\nx y x y\n戻り値を使うと，Changestyle3d() を使って陰線のスタイル（線種，色）を変えることができる。戻り値の内\n容は，コンソールに「readoutdata from template3D1.txt : 」として表示されるので，これをテキストエディ\nタで開き，操作対象を決めればよい。たとえば，上の左図で，線分ABの陰線はリストの４番目の crvsfh3d1\nなので，\nret=ExeccmdC(\"1\");\nChangestyle3d(ret_4,[\"da\",\"Color=red\"]);\nとすると，赤の破線にすることができる。\n【例】球面で座標軸を陰線処理し，球面の陰線は非表示で表す。\nz\nfd=[\"p\",\"x=2*sin(u)*cos(v)\",\n\"y=2*sin(u)*sin(v)\",\n\"z=2*cos(u)\",\n\"u=[0,pi]\",\"v=[0,2*pi]\",\"\"];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nx\nSfbdparadata(\"1\",fd);\nWireparadata(\"1\",\"sfbd3d1\",fd,12,12,[],[\"nodisp]); y\nCrvsfparadata(\"1\",\"ax3d\",\"sfbd3d1\",fd);\nExeccmdC(\"1\");\n);\n⇒関数一覧\n5.4 プロットデータの操作\n関数 Datalist2d()\n機能 画面上のプロットデータのリストを取得する\n説明 画面に描かれているすべてのプロットデータのリストを返す。\n空間図形は，Cinderellaの画面上に射影し表示する。そのため，KeTCindy3Dは，空間におけるプロットデー\nタと，画面上に表示するプロットデータの2つを作っている。Datalist2d()では，画面上に表示するプロット\nデータのリストを返す。\n131", "tags": ["KeTCindy", "初心者向け", "基本操作", "構文"]}
{"title": "Page 132", "content": "【例】\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,3]]);\nSpaceline(\"1\",[A,B]);\nprintln(\"PD=\"+Datalist2d());\nとすると，コンソールにPD=[ax2d,AB2d] と表示される。ax2dは座標軸のプロットデータ ax3d に，AB2d\nは線分ABのプロットデータ AB3d に対応している。\n関数 Datalist3d()\n機能 空間のプロットデータのリストを取得する\n説明 空間に描かれているすべてのプロットデータのリストを返す\n【例】\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,3]]);\nSpaceline(\"1\",[A,B]);\nprintln(\"PD=\"+Datalist3d());\nとすると，コンソールにPD=[ax3d,AB3d] と表示される。\n関数 Changestyle3d(リスト,リスト)\n機能 3Dプロットデータの属性を変更\n説明 第１引数のプロットデータの属性を，第2引数に変更する。\nたとえば，補助線など，画面には描いてもTeXに書き出さない線を描画するときは，optionに[”notex”] を\nつけるが，これをあとから付加したい場合に利用する。プロットデータはリストにできるので，複数のプロッ\nトデータの属性をまとめて変更することができて便利である。\n【例】4つの点で四面体の辺を描き，まとめて notex にする。点A,B,C,Dはとってあるものとする。\nSpaceline(\"1\",[A,B]);\nSpaceline(\"2\",[A,C]);\nSpaceline(\"3\",[B,C]);\nSpaceline(\"4\",[A,D]);\nSpaceline(\"5\",[B,D]);\nSpaceline(\"6\",[C,D]);\nedges=apply(1..6,\"sl3d\"+text(#));\nChangestyle3d(edges,[\"notex\"]);\n関数 Intersectcrvsf(name,PD，式)\n機能 曲線と曲面の交点の座標を求める\n説明 PDは曲線のプロットデータ。式は曲面の式。\n曲面は，Sfbdparadata()でデータを作成し，ExeccmdC()で表示しておく。交点の座標は，”intercrvsf”+name\nに代入される。コマンドの実行順序は次の例のようにする。\n【例】回転放物面と線分の交点の座標を表示する。\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,2]]);\nSpaceline(\"1\",[A,B]);\nfd=[\n\"z=4-(x^2+y^2)\",\"x=R*cos(T)\",\"y=R*sin(T)\",\n\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"\n];\n132", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 133", "content": "Startsurf();\nSfbdparadata(\"1\",fd);\nIntersectcrvsf(\"1\",\"sl3d1\",fd);\nExeccmdC(\"1\",[\"\"]);\nprintln(\"Intersect=\"+intercrvsf1);\nPointdata3d(\"1\",intercrvsf1);\n実行すると，コンソールに\nIntersect=[[0,1.57,1.52],[0,-1.91,0.36]]\nのように表示され，画面には交点が表示される。\n⇒関数一覧\n関数 IntersectsgpL(点名，線分，面，描画方法)\n機能 空間の線分（直線）と平面の交点を求める。\n説明 引数の線分は線分の端点を ”A-B” の形もしくは空間座標のリストで与える。\n引数の面は，面内の3点を ”C-D-E” の形もしくは空間座標のリストで与える。\n戻り値は，[pt,flag1,flag2,val1,val2]\npt：直線と平面の交点の座標。直線と平面が平行で交点が存在しない場合は空リスト[]\nflag1 ： 交点が線分内にあれば true ，なければ false\nflag2 ： 交点が面内にあれば true，なければ false\nval1,val2 ： 線分についてのパラメータ値，平面についてのパラメータ値\n描画方法は，”put” または ”i” , ”e” 。\nput ： 幾何点を作る\ni ： 線分内にあれば点を描く\ne :平面で交われば点を描く\n【例】交点の有無と戻り値\n次のスクリプトでp2 を変えたときの戻り値の flag1, flag2\np1=[1,-1,0];\np2=[0,0,1/2];\np3=[0,1,0];\np4=[-1,0,0];\np5=[0,0,1];\nSpaceline(\"1\",[p1,p2]);\nSpaceline(\"2\",[p3,p4,p5,p3]);\nret=IntersectsgpL(\"P\",[p1,p2],[p3,p4,p5],\"put\");\nprintln(\"flag1=\"+ret_2+\": flag2=\"+ret_3);\np2=[0,0,1/2]; p2=[-1,1,1];\nflag1=false : flag2=trueflag1=true : flag2=true\nz z\nx y x y\n133", "tags": []}
{"title": "Page 134", "content": "p2=[1,2,1]; p2=[1,0,1/2];\nflag1=true : flag2=false flag1=false : flag2=false\nz z\nx y x y\n【例】立方体を平面で切った図を描く。\nいろいろな手順が考えられるが，ここでは次の手順で描く。\n(1) 立方体の頂点をとる。１辺の長さをHnとし，軸上の点をPutaxes3d()でとる。\n(2) 切断面を決める点E,F,Gを辺上の自由点としてPutonseg3d()でとる。\n(3) E,F,Gを通る平面と，辺AC,DYとの交点をとり，M,Nとする。\n(4) 全体を多面体として面データを作って描画する。\nHn=3;\nPutaxes3d(Hn);\nPutpoint3d(\"A\",[Hn,Hn,0]);\nPutpoint3d(\"B\",[Hn,0,Hn]);\nPutpoint3d(\"C\",[Hn,Hn,Hn]);\nPutpoint3d(\"D\",[0,Hn,Hn]);\nPutonseg3d(\"E\",X,B);\nPutonseg3d(\"F\",Z,B);\nPutonseg3d(\"G\",Z,D);\nIntersectsgpL(\"M\",\"A-C\",\"E-F-G\",\"put\");\nIntersectsgpL(\"N\",\"D-Y\",\"E-F-G\",\"put\");\nphd=Concatobj([[O,X,A,Y],[X,A,M,E],[A,Y,N,M],[Y,N,G,Z,O],\n[O,Z,F,E,X],[Z,F,G],[E,M,N,G,F]]);\nVertexEdgeFace(\"1\",phd);\nNohiddenbyfaces(\"1\",\"phf3d1\");\nスクリプトを実行後，点E,F,Gをドラッグして適当な位置の断面にする。\nできた図は下図左。これに，次のスクリプトを追加すれば，断面上方の立方体の各辺も点線で描かれる。（下\n図右）\nSpaceline(\"1\",[E,B,F],[\"do\"]);\nSpaceline(\"2\",[B,C,M],[\"do\"]);\nSpaceline(\"3\",[C,D,N],[\"do\"]);\nSpaceline(\"4\",[D,G],[\"do\"]);\n134", "tags": []}
{"title": "Page 135", "content": "⇒関数一覧\n関数 Sfcutparadatacdy(name,面,曲面,options)\n機能 平面と曲面の交線を求める。\n説明 面の方程式はx,y,zの方程式，曲面は媒介変数表示で与える。\n【例】円錐を平面y+2z =3で切った断面を表示する。\nfd=[\n\"p\",\n\"x=r*cos(t)\",\"y=r*sin(t)\",\"z=2*(2-r)\",\n\"r=[0,2]\",\"t=[0,2*pi]\",\"e\"\n];\nStartsurf();\nSfbdparadata(\"1\",fd);\nSfcutparadatacdy(\"1\",\"y+2*z=3\",fd);\nExeccmdC(\"1\");\n関数 Partcrv3d(name，始点，終点，PD)\n機能 部分曲線のプロットデータを作成する\n説明 曲線PDにおいて，始点から終点までのプロットデータを作成する。\n始点と終点は，プロットデータの番号もしくは曲線上にとった点の識別名で示す。\n【例】螺旋を描き一部分を太くする。Putoncurve3d() で螺旋上に点C,Dができるので，ドラッグして適当な\n位置に移動する。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=100\"]);\nPutoncurve3d(\"C\",\"sc3d1\");\nPutoncurve3d(\"D\",\"sc3d1\");\nPartcrv3d(\"1\",C,D,\"sc3d1\",[\"dr,3\"]);\nLetter([C,\"n2\",\"C\",D,\"n2\",\"D\"]);\nここで，\"sc3d1\" は，螺旋，\"part3d1\" は，部分曲線のプロットデータである。\n135", "tags": []}
{"title": "Page 136", "content": "z\nD\nC\ny\nx\n【例】稲妻状の螺旋を点線で描き，その一部を実線にする。位置はプロットデータの番号で示す。小数にすると\n曲線を分割している線分の途中の位置になる。\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=10\",\"do\"]);\nPartcrv3d(\"1\",3.3,8.5,\"sc3d1\");\nz\ny\nx\n⇒関数一覧\n関数 Reflectdata3d(name , PDlist , list , options)\n機能 PDの鏡映を作る\n説明 第3引数のタイプにより，点に関する鏡映，直線に関する鏡映，面に関する鏡映を作る。戻り値は鏡映したプ\nロットデータのリスト。\n【例】点A,B,C,D,Eを空間にとり，三角形ABCの鏡映を作る。\nPutpoint3d([\"A\",[0,-2,0],\"B\",[2,-2,0],\"C\",[1,-2,2],\"D\",[1,0,1],\"E\",[1,0,0]]);\nSpaceline(\"1\",[A,B,C,A]);\nで点をとり，三角形を描いておく。\n点Dに関する鏡映\nReflectdata3d(\"1\",[\"sl3d1\"],[D3d],[\"Color=blue\",\"dr,2\"]);\nz\nC\nD\nA\nB y\nx\n直線DEに関する鏡映\nReflectdata3d(\"1\",[\"sl3d1\"],[D3d,E3d],[\"Color=blue\",\"dr,2\"]);\n136", "tags": []}
{"title": "Page 137", "content": "z\nC\nD\nA\nB E y\nx\n平面BDEに関する鏡映\nReflectdata3d(\"1\",[\"sl3d1\"],[D3d,E3d,B3d],[\"Color=blue\",\"dr,2\"]);\nz\nC\nD\nA\nB E y\nx\n関数 Reflectpoint3d(座標,リスト)\n機能 点の鏡映点を求める\n説明 第2引数のタイプにより，点に関する鏡映，直線に関する鏡映，面に関する鏡映のそれぞれの点の座標を返す。\n【例】点A,B,C,Dを空間にとり，点Aの鏡映点の座標を求める。\n点Bに関する鏡映点Reflectpoint3d(A3d,[B3d]);\n直線BCに関する鏡映点 Reflectpoint3d(A3d,[B3d,C3d]);\n平面BCDに関する鏡映点 Reflectpoint3d(A3d,[B3d,C3d,D3d]);\n⇒関数一覧\n関数 Rotatedata3d(name,PDリスト,vec,角度,options)\n機能 プロットデータを回転\n説明 プロットデータを，原点を始点とするベクトルvec 周りに回転する。複数のプロットデータをまとめて回転す\nることができる。戻り値は回転したプロットデータのリスト。\noptions として，中心点（vecの始点），線種を指定することができる。\n【例】コード例と結果を示す。\nXyzax3data(\"\",\"x=[-5,4]\",\"y=[-5,5]\",\"z=[-5,4]\",[\"a\",\"O\"]);\nPutpoint3d([\"A\",[0,-2,0],\"B\",[2,-2,0],\"C\",[1,-2,2],\"D\",[1,-2,3]]);\nSpaceline(\"1\",[A,B,C,A]);\nSpaceline([C,D]);\nRotatedata3d(\"1\",[\"sl3d1\",\"CD3d\"],[0,0,1],pi/2,[\"dr,2\"]);\nLetter([A,\"s\",\"A\",B,\"w\",\"B\",C,\"ne\",\"C\",D,\"ne\",\"D\"]);\nこれを\nRotatedata3d(\"1\",[\"sl3d1\",\"CD3d\"],[0,0,1],pi/2,[[1,0,0],\"dr,2\"]);\nとした場合が右図である。\n137", "tags": []}
{"title": "Page 138", "content": "z z\nD D\nC C\nB A B A\nO O\nx x\ny y\n関数 Rotatepoint3d(座標, vec , 角度, [点] )\n機能 点の位置を回転する\n説明 点をvecの周りに回転する。角度は弧度法で与える。\n第4引数に点を与えた場合，vecの始点が第4引数の位置になる。デフォルトは原点\n点Aを，(0,−1,0)に置いたときの記述例と戻り値\nPutpoint3d(\"A\",[0,-1,0]);\nRotatepoint3d(A3d,[0,0,1],pi/2); //戻り値は [1,0,0]\nRotatepoint3d(A3d,[0,0,1],pi/2,[1,1,0]); //戻り値は [3,0,0]\n関数 Scaledata3d(name , PDリスト , vec , [中心,options])\n機能 PDを拡大/縮小する。\n説明 点は空間座標，vec は３次元ベクトルで倍率を表す。\n中心とoptionsはリストで与える。\n【例】三角形と円を拡大/縮小する。\nPutpoint3d([\"A\",[0,-2,0],\"B\",[2,-2,0],\"C\",[1,-2,2]]);\nSpaceline(\"1\",[A,B,C,A]);\nSpacecurve(\"1\",\"[cos(t)+1,sin(t)+1,1]\",\"t=[0,2*pi]\",[\"Num=100\"]);\nScaledata3d(\"1\",[\"sl3d1\",\"sc3d1\"],[2,2,2],[[0,0,0],\"dr,2\"]);\nz\ny\nx\n関数 Scalepoint3d(点,vec,中心)\n機能 点の位置を拡大/縮小する。\n説明 点は空間座標，vec は３次元ベクトルで与える。\n【例】コード例と結果を示す。\nPutpoint3d([\"A\",[2,-1,2]]);\npt=Scalepoint3d(A3d,[3,2,4],[1,1,1]);\nPutpoint3d([\"B\",pt]);\n\\vspace{\\baselineskip}\n138", "tags": []}
{"title": "Page 139", "content": "点Bの位置は(4,-3,5)になる。\n関数 Translatedata3d(name,PD,平行移動量)\n機能 空間プロットデータを平行移動\n説明 PDで表される図形を，平行移動する。戻り値は平行移動したプロットデータのリスト。\n【例】曲線 sc3d1 をy軸方向に2だけ平行移動する。\nTranslatedata3d(\"1\",[\"sc3d1\"],[0,2,0]);\n結果として，もとの曲線と平行移動した曲線の2つが描かれる。\n【例】多面体の平行移動\nVertexEdgeFace() で描いた多角形はこの関数では平行移動できないので，面データを直接操作して平行移動\nを行う。\nたとえば，小林・鈴木・三谷による多面体データpolyhedrons objを用いて正八面体を描く場合，次のように\nする。y軸方向に2だけ平行移動する場合である。\nSetdirectory( Dirhead+\"/data/polyhedrons_obj\");\nphd=Readobj(\"r02.obj\",[\"size=2\"]);\nSetdirectory(Dirwork);\ndn=length(phd_1);\nrepeat(dn,s,phd_1_s=phd_1_s+[0,2,0]);\nVertexEdgeFace(\"1\",phd);\nz\nx\ny\n関数 Translatepoint3d(座標，平行移動量)\n機能 空間点を平行移動\n説明 点を平行移動する。\n【例】点A(1,0,0) を(-1,1,1)だけ平行移動した点をBとする。点Aの空間座標は A3d で表される。\nPutpoint3d([\"A\",[1,0,0]]);\npt=Translatepoint3d(A3d,[-1,1,1]);\nPutpoint3d([\"B\",pt]);\n⇒関数一覧\n139", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 140", "content": "5.5 その他\n関数 Perpplane(点名,点,ベクトル，option)\n機能 点を通り線分に垂直な平面上に基準点を2つとる\n説明 引数の点名は，作成する2点で ”A-B” の形\n第2引数は通る点の名称または座標\n第3引数は法線ベクトル\noptionは ”put”で，2つの幾何点を作図する。optionがない場合は幾何点は作らず，無名の点のみを表示す\nる。put以外の文字列を書いたときは無効な命令とし，何も作成されない。\n記述例を示すと\nPerpplane(\"A-B\",\"P\",[1,1,1],\"put\");\n点Pを通り，法線ベクトル(1,1,1)に垂直な平面上に点A,Bをとる。\nPerpplane(\"A-B\",\"P\",P3d-O3d);\n点Pを通り，線分OPに垂直な平面上に点A,Bをとる。これらにおいて，PAとPBは垂直で，PA=PB=1\nとなる。\n【例】ベクトル p⃗=(1,1,1) に垂直で点(1,1,1)を通る平面ABCDを描く。\n点A,B,C,Dは作図ツールで適当に取っておく。正確な位置はスクリプトで決める。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nz\nPutpoint3d([\"O\",[0,0,0]]);\nPutpoint3d([\"P\",[1,1,1]]);\nD\nPerpplane(\"E-F\",\"P\",P3d-O3d,\"put\");\nA\nvec1=2*(E3d-P3d);\nvec2=2*(F3d-P3d);\nPutpoint3d([\"A\",P3d+vec1+vec2]); P\nPutpoint3d([\"B\",P3d+vec1-vec2]);\nx\nPutpoint3d([\"C\",P3d-vec1-vec2]);\nPutpoint3d([\"D\",P3d-vec1+vec2]); C\nSpaceline(\"1\",[A,B,C,D,A]); B y\nArrowdata([O,P],[\"dr,2\"]);\nLetter([P,\"w\",\"P\",A,\"ne\",\"A\",B,\"e\",\"B\",C,\"ws\",\"C\",D,\"nw\",\"D\",]);\nSkeletonparadata(\"1\");\n関数 Perppt(点名，点，点リスト,option)\n機能 平面に下ろした垂線の足を求める\n説明 第2引数の点から，第3引数の点リストで決まる平面に下した垂線の足を，第１引数の名前の点とする。\nオプションは次の通り。 初期設定は ”draw”\ndraw：点を打つ。幾何点は作らない\nput ：幾何点を作る\nnone：計算だけ行い，点は作図しない。\n【例】原点から点ABCを通る平面に下した垂線の足Hの座標を求める。\nPerppt(\"H\",\"O\",\"A-B-C\",\"none\"); 表示はされない。\nPerppt(\"H\",\"O\",\"A-B-C\"); Ｈの位置に緑色の点が表示される。\nPerppt(\"H\",\"O\",\"A-B-C\",\"put\"); 幾何点Hが作図される。\nいずれの場合も，Hの座標は変数H3d に代入される\n作図例\n140", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 141", "content": "Xyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nPutpoint3d(\"O\",[0,0,0]);\nPutpoint3d(\"A\",[3,0,0]);\nPutpoint3d(\"B\",[0,3,0]);\nPutpoint3d(\"C\",[0,0,3]);\nPerppt(\"H\",\"O\",\"A-B-C\",\"put\");\nSpaceline(\"1\",[A,B,C,A]);\nSpaceline(\"2\",[O,H]);\nLetter([A,\"nw\",\"A\",B,\"ne\",\"B\",C,\"ne\",\"C\",O,\"nw\",\"O\",H,\"ne\",\"H\"]);\nz\nC\nH\nO\nB\nA y\nx\n⇒関数一覧\n関数 Projcoordpara(座標)\n機能 投影座標を求める\n説明 空間座標を平面に投影した座標を求める。\n戻り値の第１，第2要素はCinderellaの描画面のx,y座標。第3要素はxy平面に垂直なzの座標で．投影面\nからの（符号付）距離を表す。\n【例】Projcoordpara([3,1,2]);\n戻り値は[-0.65,1.7,3.27] のようになる。（視点によって値は異なる）\n関数 Readobj(ファイル名)\n機能 objファイルを読み込む。\n説明 小林・鈴木・三谷による整面凸多面体のデータは\nhttp://mitani.cs.tsukuba.ac.jp/polyhedron/\nからダウンロードできる。polyhedrons_objを，例えば，ユーザホームのketcindy作業フォルダに入れて\nおく。\nSetdirectory(gethome()+\"/ketcindy/polyhedrons_obj\");\npolydt=Readobj(\"r02.obj\");\nSetdirectory(Dirwork);\nこれで，r02.obj データが，変数 polydt に代入される。\nオプションは ”size=n”で，n倍したデータにする。負の数にすると上下が反転される。\nデータはKeTCindyのdataフォルダの中にある。したがって，次のようなスクリプトを書く。読み込むのは\n一度だけなので， Draw スロットではなくInitialization スロットに置けばよいが，コードの可読性を高める\nには Draw スロットでもよい。\nこの多面体データは，頂点リストと面リストからなっているが，頂点リストは座標のリストなので，読み込ん\nで表示するときには，点の名称を v1,v2,・・・ とする。\n読み込んだあとの使い方を含めて例を示す。\n【例】polydtを用いて正八面体を描く\n141", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "外部連携", "構文", "関数"]}
{"title": "Page 142", "content": "VertexEdgeFace(\"1\",polydt);\nNohiddenbyfaces(\"1\",\"phf3d1\");\n主なデータは次の通り。\n番号 名称 番号 名称 番号 名称\nr01 正四面体 s02 二十・十二面体 s08 斜立方八面体\nr02 正八面体 s03 切頭四面体 s09 斜十二・二十面体\nr03 正六面体 s04 切頭八面体 s10 切頭立方八面体\nr04 正十二面体 s05 切頭立方体 s11 頭切二十・十二面体\nr05 正二十面体 s06 切頭二十面体 s12L/R 変形立方体\ns01 立方八面体 s07 切頭十二面体 s13L/R 変形十二面体\nこの他にn01〜n92まで整面凸多面体がある。\n関数 Xyzcoord(P.x,P.y,Pz.y)\n機能 主副画面で決まる点の座標\n説明 Cinderellaの描画面上の点が表す空間座標を求める\n点Ｐについて，主画面の点Ｐに対応するのが副画面のPzである。点Pの2次元座標はP.x,P.yで，Pzのy座\n標はPz.yで表される。これを引数として与えると，点Ｐの空間座標が返される。\n【例】点Aをドラッグして動かしたとき，Aの座標を求める。\nprintln(Xyzcoord(A.x,A.y,Az.y));\nにより，コンソールに座標が表示される。\n関数 Isangle()\n機能 角度スライダ（視点スライダ）の選択判断\n説明 角度スライダを選択しているときは true ，そうでないときは false を返す。\n曲面の描画・陰線処理には時間がかかるため，角度スライダを動かすと反応が悪くなる。そこで，角度スライ\nダを選択しているときは曲面の描画をしないようにすることで反応がよくなる。\n【例】放物面の描画\n次のようにすると，スライダの点を選んでいる間はワイヤフレームモデルが描かれ，画面上の他の部分をク\nリックして選択状態が解除されると陰線処理された放物面が描かれる。\nfd=[\n\"z=4-(x^2+y^2)\",\n\"x=R*cos(T)\",\"y=R*sin(T)\",\n\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"\n];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nCrvsfparadata(\"1\",\"ax3d\",\"sfbd3d1\",fd);\nExeccmdC(\"1\");\n);\n142", "tags": []}
{"title": "Page 143", "content": "関数 Dist3d(a1,a2)\n機能 空間の2点間の距離を返す\n説明 引数a1,a2 は作図点の名称，空間点の名称のいずれでもよい。\n次の3通りの記法は同じ結果を返す。混在も可\nDist3d(\"A\",\"B\");\nDist3d(A,B);\nDist3d(A3d,B3d);\n関数 Embed(name,PDリスト,式,変数リスト)\n機能 2Ｄ図形の空間内平面へ埋め込む\n説明 第2引数は2Ｄの図形のプロットデータのリスト，式と変数は平面を記述する式と変数。平面は原点voと2\n−→ −→ −→ −→\nつの基本ベクトル vx，vy を用いて，vo+x·vx+y·vy の形で表すことができる。変数（基本ベクトルの係\n数）はx,y でなく，s,t でもよい。式，変数リストともに文字列にする。また，基本ベクトルは直交していな\nくてもよいし，長さが異なってもよいが，縦横同じスケールの直交座標系にするのがわかりやすいだろう。\n【例】正三角形と外接円を空間内の平面に埋め込む\nXyzax3data(\"\",\"x=[-5,4]\",\"y=[-10,4]\",\"z=[-5,5]\",[\"a\",\"O\"]);\nSpaceline(\"1\",[[3,0,0],[3,6,0],[3,6,6],[3,0,6],[3,0,0]]);\nDefvar(\"vo=[3,3,3]\");\nDefvar(\"vx=[0,1,0]\");\nDefvar(\"vy=[0,0,1]\");\nPutpoint3d([\"A\",[3,3,3]],[\"fix\"]);\nCircledata(\"1\",[[0,0],[2,0]],[\"nodisp\"]);\nListplot(\"1\",[[0,2],[-sqrt(3),-1],[sqrt(3),-1],[0,2]],[\"nodisp\"]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"vo+x*vx+y*vy\",\"[x,y]\");\nPointdata(\"1\",[A],[\"Size=3\"]);\nz\nx O\ny\nここで，Embed()で引き渡す vo,vx,vy については，Rでの変数定義が必要なので（KETCindyでは行わない）\nDefvar() によって定義をしている。\n原点，基本ベクトルを，点を作図して次のようにすることもできる。この場合は Defvar() は不要。\nPutpoint3d([\"A\",[3,3,3],\"B\",[0,1,0],\"C\",[0,0,1]]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"A3d+x*B3d+y*C3d\",\"[x,y]\");\n143", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 144", "content": "この場合，点B,Cの座標がそのまま基本ベクトルとなっているが，原点Aに対して描画平面上にはB,Cがな\nいので図がわかりにくい。図をわかりやすくするならば次のようにする。\nPutpoint3d([\"A\",[3,3,3],\"B\",[3,4,3],\"C\",[3,3,4]]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"A3d+x*(B3d-A3d)+y*(C3d-A3d)\",\"[x,y]\");\nまた，平面を記述するのに，平面の原点と法線ベクトルを用いて Perpplane() を用いると，基本ベクトルが生\n成されるので、これを利用することができる。次のスクリプトでは，Skeletonparadata() を用いて陰線処理も\nしている。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-8,5]\",\"z=[-5,5]\");\nPutpoint3d([\"O\",[0,0,0],\"P\",[1,1,2]]);\nPerpplane(\"E-F\",\"P\",P3d-O3d,\"put\");\nvec1=3*(E3d-P3d);\nvec2=3*(F3d-P3d);\nPutpoint3d([\"A\",P3d+vec1+vec2]);\nPutpoint3d([\"B\",P3d+vec1-vec2]);\nPutpoint3d([\"C\",P3d-vec1-vec2]);\nPutpoint3d([\"D\",P3d-vec1+vec2]);\nSpaceline(\"1\",[A,B,C,D,A]);\nCircledata(\"1\",[[0,0],[2,0]],[\"nodisp\"]);\nListplot(\"1\",[[0,2],[-sqrt(3),-1],[sqrt(3),-1],[0,2]],[\"nodisp\"]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"P3d+x*(E3d-P3d)+y*(F3d-P3d)\",\"[x,y]\");\nPointdata(\"1\",[P],[\"Size=3\"]);\nSkeletonparadata(\"1\");\nz\nx\ny\n⇒関数一覧\n関数 Parapt(座標)\n機能 点の投影面での座標\n説明 引数の空間座標に対応するCinderellaの描画面の座標を返す。\n144", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 145", "content": "【例】Parapt([2,1,5]); により，点(2,1,5) が表示されている描画面の座標，たとえば [-0.52,3.27]が返さ\nれる。\n関数 Invparapt(座標，PD)\n機能 描画面上の座標に対応する曲線上の点の座標を返す\n説明 Cinderellaの描画面上の座標を与えて，それに対応する曲線上の3次元座標を返す。\n空間内の曲線を作図すると，曲線の空間内のプロットデータとともに，描画面上に描くためのプロットデータ\nも作られる。これを利用すると，描画面上の位置から曲線上の座標を求めることができる。\n【例】螺旋と線分を描いたとき，描画面上での交点（空間内の交点ではない）に対応する螺旋上の点の座標を求\nめ部分曲線を描く。\nSpaceline(\"1\",[[-1,-1,-1],[1,2,3]]);\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"do\"]);\ntmp=Intersectcrvs(\"sl2d1\",\"sc2d1\");\np1=Invparapt(tmp_1,\"sc3d1\");\np2=Invparapt(tmp_2,\"sc3d1\");\nPartcrv3d(\"1\",p1,p2,\"sc3d1\");\nz\nx\ny\nここで，sl2d1,sc2d1 は線分と螺旋の描画面上での（平面の）プロットデータである。Intersectcrvs() で平面\n上の交点の座標（複数あるのでリストが返る）を求め，Invparapt() で対応する螺旋上の点の座標を求めて部\n分曲線を描いている。実際に交わる点での部分曲線ではないことに注意。\n関数 Projpara(空間曲線)\n機能 空間曲線を投影した平面曲線を返す。\n関数 Expr3d([位置, 方向, 文字列],option)\n機能 文字列を表示する\n説明 Expr() と同じ書式。「位置（座標）」だけ，空間座標にする。\n関数 Letter3d([位置, 方向, 文字列],option)\n機能 文字列を表示する\n説明 Letter() と同じ書式。「位置（座標）」だけ，空間座標にする。\n【例】三角錐ABCDを描いて，BCの中点に点Mを取ってA,Dと結ぶ。\nA\nPutpoint3d(\"A\",2*[0,0,2*sqrt(6)/3]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"M\",(B3d+C3d)/2); D\nB\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nM\nVertexEdgeFace(\"1\",phd); C\n145", "tags": []}
{"title": "Page 146", "content": "Spaceline(\"1\",[A,M,D]);\nNohiddenbyfaces(\"1\",\"phf3d1\");\nLetter3d([A3d,\"ne\",\"A\",B3d,\"w\",\"B\",C3d,\"se\",\"C\",D3d,\"e\",\"D\"]);\nLetter3d(M3d,\"sw\",\"M\",[\"Color=blue\"]);\n⇒関数一覧\n関数 Getangle()\n機能 回転角の取得\n説明 スライダで設定できる回転角（視点の位置）TH と FI を取得する。これは，スライダの左側に表示されてい\nる値である。戻り値は，リスト [TH,FI] で，角は度数法で表される。なお，内部変数は，THETAとPHIで，\n弧度法で表されている。\n回転角の設定については，回転角の設定を参照のこと。\n⇒関数一覧\n146", "tags": []}
{"title": "Page 147", "content": "6 KeTJS\n6.1 CindyJSとKeTJS\nCindyJS は，Cinderellaの作品をHTMLにしてWeb上で動かせるようにしたものである。Cinderellaのファイ\nルメニューには，「HTMLに書き出す」があり，これにより，HTML ファイルができる。できたHTMLファイルを\nそのままダブルクリックすると，JavaScript で記述されたプログラムが走る。\n現在のところはCinderellaと完全互換ではなく，Web上ではMouseスロットなどが使えなかったり，線種が指\n定できなかったりする。それでも，自作のボタンは有効なので，これでWeb上のアプリケーションを作ることがで\nきる。\nKeTJSでは，CindyScriptにはないKeTCindyの関数（コマンド）を使って，作図アプリケーションを作ること\nができる。CindyJSの拡張版ともいえる。\nただし，CindyJSがCinderellaと完全互換でないように，KeTJSもKeTCindyと完全互換ではない。たとえば，\nMaximaの呼び出しなどはできない。それでも，KeTCindyのシステムが入っていない環境でもWebブラウザで教\n材が使えることのメリットは大きいだろう。なお，HTMLなので，TeXのファイルへの書き出し機能はない。\nKeTJSでHTMLを作成するには，いったんCinderellaのファイルメニューから「HTMLに書き出す」を選んで\nHTMLを作成した後，「KeTJS(on,off)」ボタンをクリックする。「HTMLに書き出す」で書き出されたHTMLは，\n実行のための環境設定しか書かれていない。これに，作図プログラムを追加するのが「KeTJSon」「KeTJSoff」ボタ\nンである。この２つのボタンの違いについては，次節「動作環境」を参照のこと。\nまた，ひな形として，template4ketcindyjs.cdy または samplesフォルダの s06, s16 に入っているものを使うとよ\nい。「KeTJSon」「KeTJSoff」ボタンが設定してある。\n6.2 KeTJSの動作環境\nCinderella のファイルメニューから「HTML に書き出す」を選ぶと，CSS とランタイムへのリンク，および\nJavaScriptのコードが書かれたHTMLファイルが書き出される。CSSとランタイムへのリンクは\n<link rel=\"stylesheet\" href=\"https://cindyjs.org/dist/v0.8/CindyJS.css\">\n<script type=\"text/javascript\" src=\"https://cindyjs.org/dist/v0.8/Cindy.js\">\n</script>\nとなっている。つまり，Web上からランタイム Cindy.js をオンラインでダウンロードしてJavaScriptを動かすこ\nとになる。そのため，ファイルをブラウザで開いたときに少し時間がかかる。また，インターネットに接続できない\nと実行できない。\nこのCSSとランタイムは，自分のコンピュータに置くことができ，KeTCindyでは，KeTCindyのライブラリと\nともに，ketcindyjsというフォルダ内に入っている。\nまた，JavaScriptのコードの方は，これだけではKeTCindyのコマンドでの作図はできない。\nそこで，KeTJSon ボタンをクリックすると，リンク先はそのままで，JavaScriptのコードを追加して，ファイル\n名に json を追加したHTMLファイルを作る。\nまた，KeTJSoff ボタン（オフラインで使う）をクリックすると，ランタイムをダウンロードして，Cinderellaの\nファイルと同じフォルダに ketcindyjs フォルダを作る。リンク先は次のように ketcindyjs に変え，JavaScript の\nコードを追加して，ファイル名に jsoffL を追加したHTMLファイルを作る。\n<link rel=\"stylesheet\" href=\"ketcindyjs/CindyJS.css\">\n<script type=\"text/javascript\" src=\"ketcindyjs/Cindy.js\"></script>\nファイル名について\nCinderellaのファイルメニューから「HTMLに書き出す」ときのファイル名は，初期設定では作図中のファイル名\n147", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "外部連携", "構文", "環境構築"]}
{"title": "Page 148", "content": "と同じ。このファイル名は書き出すときに指定できる。\n「KeTJSon」ボタンで書き出すときのファイル名は，Setfiles() でファイル名が指定されていなければ，作図中\nのファイル名と同じ。これが「CindyJS に書き出す」で書き出したときのファイル名で同じでないと，KeTJS の\nHTMLは作成されない。したがって，次のいずれかでファイル名を決める。\n(1) ファイル名は作図中のCinderellaのファイル名と同じにする。\nこのときは，Setfiles() を使わない。\n(2) 作図中のCinderellaのファイル名と別の名前にする。\nこのときは，Setfiles(\"filename\") を使い，CindyJSに書き出すときに\n\"filename\" で書き出す。\n6.3 KeTJSの設定\n関数 Setketcindyjs(options)\n機能 KeTJSの設定\n説明 オプションを設定しない場合（ Setketcindyjs() ）は，デフォルト値が使われる。\nオプションは次の通り。\nScale 実数 拡大・縮小 デフォルト値は 1\nGrid 実数 グリッドサイズ デフォルト値は 1（mm）\nNolabel 点のリスト ラベルを表示しない点を指定する。”No”だけでも可。\n”Nolabel=all”とすると，すべての点のラベルが表示されない。\nLabel 点のリスト ラベルを表示する点を指定する。他は表示されない。\n”Label”か”Nolabel”のいずれかを用いる。\nColor 背景色 背景色の指定。 デフォルト値は offwhite\nFigure y 書き出す範囲をNE,SWの範囲にする。\nAxes false CindyJSが表示している座標軸を非表示にする。\n【例】次のように記述する。\nSetketcindyjs([\"Scale=1.5\",\"Label=[A]\",\"Color=lightgray\"])\n注１）Cinderella の画面に背景の方眼が描かれているとき，「CindyJS に書き出\nす」で，この方眼も表示される。方眼を消したい場合は，画面下の「グリッ\nドを描く」ツールで非表示にしておく。\n注２）HTMLなので，画面に説明文などを表示したい場合は，HTMLファイルを\n開き，下の方の <body> と </body> の間，<div id=\"CSCanvas\"></div>\nの前後に書けば表示される。改行などは，HTMLのタグを用いる。\n関数 Ketcindyjsmain(prependlist,appendlist)\n機能 KeTJSファイルのhtmlを読み込み，前後にスクリプトを追加した親htmlを作成する。\n説明 親ファイル名は，cdyファイル名+main+(on,off) となる。\nタグは，冒頭に<pf5/fbr>などと指定する。\n_;は&emsp; と変換される。\n【例】Ketcindyjsmain([\"<pf10red/fp>_;_;Title\"],[]);\n=> <p><font size=\"10\" color=\"red\">&emsp;&emsp;Title</font></p>\nコメント化 no ketjs\n機能 KeTJSへの書き出しの有無を指定\n148", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 149", "content": "説明 コマンドの末尾に // に続いて書くと，その行はKeTJSに出力しない。ブロック単位で非出力にするには，\nブロックを //no ketjs on，//no ketjs off ではさむ。\n【例】次のスクリプトは，いずれも画面上では四角形ABCDと対角線AD,BCを描いている。\nListplot(\"1\",[A,B,C,D,A]);\nListplot(\"2\",[A,C]);\nListplot(\"3\",[B,D]);// no ketjs\nこの場合，HTMLでは対角線BDは描かれない。\nListplot(\"1\",[A,B,C,D,A]);\n// no ketjs on\nListplot(\"2\",[A,C]);\nListplot(\"3\",[B,D]);\n// no ketjs off\nこの場合，対角線は2本とも描かれない。\nKeTJSだけで有効 only ketjs\n機能 KeTJSだけに書き込む\n説明 コマンドの先頭に // をつけて，行の最後に続けて書くと，その行はKeTJSだけで有効となる。ブロック単\n位で有効化するには，ブロックを only ketjs on，only ketjs off ではさむ。\n【例】KeTJSだけで入力窓を作る。\nstr=\"x^2\";\n//str=Textedit(50); only ketjs\nPlotdata(\"1\",str,\"x\");\n注）TexteditはKeTJSで入力窓からの入力を得るコマンド\n⇒関数一覧\n6.4 KeTJSのコマンド\n関数 Ptpos(幾何点)\n機能 幾何点の現在（直前）座標を返す。\n説明 幾何点を制御可能範囲外に移動した場合に保持されるもとの座標\n【例】Ptpos(A)\n関数 Ketcindyjsdata(変数名と値のリスト)\n機能 KeTJSファイルのscript ”csinit”の最後にデータを書き込む\n説明 Maximaの返り値などKeTJSでは得られないデータを使えるようにする。\n【例】Mxfun(\"1\",\"integrate\",[\"x*sin(x)\",\"x\"]);// no ketjs\nKetcindyjsdata([\"mx1\",mx1]);\nPlotdata(\"1\",mx1,\"x\");\n関数 Animationparam(初期値，速度，範囲)\n機能 アニメーションボタンのパラメータ値を取得する。\n例 ss=Animationparam(0,1,[-60,60]);\n説明\n• ”Play” パラメータ値が初期値にセットされ，変化が始まる。\n• ”Stop” パラメータ値が初期値にセットされ，変化が終わる。\n• 速度 パラメータ値の変化速度（秒速）\n149", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 150", "content": "• 範囲 パラメータ値が端点に達したら停止する。\n関数 Seteditable(識別番号,[初期文字列，”Size=文字サイズ”，”Width=幅”])\n機能 \"Editable Text\"を設定する。\n説明 Editable Textの作り方\n(1) 「モード/特別/文字列入力」を選び，適当な初期値を入れる。\n(2) 「要素を動かす」に戻り，shift-clickすると動かすことができる。\n(3) インスペクトで識別番号を確認（修正）する。\n【例】Setedittext(0,[”y=”,”Size=18”,”Width=100”]);\nText0の表示文字\"y=\"，文字サイズ18pt，幅100pt\n関数 Textedit(識別番号[,デフォルト値])\n機能 KeTJSで入力窓に入れた文字列（＝があるときは，その右側）を返す。\n文字列が空ならデフォルト値を返す。\n【例】\nstr=Textedit(0,\"x^2\");\nPlotdata(\"1\",str,\"x\");\n関数 Subsedit(識別番号,文字列)\n機能 文字列を識別番号の入力窓に入れる。\n【例】\nSubsedit(0,\"x^2\");\n関数 Movetojs(識別番号または要素名,座標,フォントサイズ);\n機能 KeTJSでテキストボタンの位置とフォントサイズを指定\n例 Movetojs(0,[2,-4],15);\n関数 Setplaybuttons(座標,フォントサイズ [,スペース増加量]);\n機能 KeTJSでPlayなどのボタンの位置とフォントサイズを指定\n例 Setplaybuttons([-3,-4.5],15,[1]);\n注）Play,Pause,Rev,Stopの識別番号が71,72,73,74であることを確認しておく。\n注）スペース増加量の単位はmm，リストで個々に指定することもできる。\n⇒関数一覧\n6.5 入力窓の利用\n• 入力窓(Editable Text)の作成\n(1) モード > 特別 > 文字列入力（終わったら「要素を動かす」ボタンに戻しておく）\n(2) Shiftキーを押しながら選択，編集 > インスペクタを開いて，識別番号を取得する。\n(3) コマンドSeteditableで窓の形状を設定する。\nSeteditable(0,[\"=\",\"Size=18\",\"Width=200\"]);\n(4) 位置を動かすには，Shiftキーを押しながら選択する．\n• 入力窓からの文字列の取得\nstr=Textedit(0,空のときまたは=の右辺が空のときに返す文字列);\n• 入力窓に文字列を代入\nSubsedit(0,文字列);\n150", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 151", "content": "7 付録\n7.1 用語解説\nCinderellaで使っている用語に次のものがある。\nインシデント 点が曲線（直線）上に乗っている状態を表す。\n曲線上に点をとるとインシデントになり，ドラッグしたとき曲線上だけを動く。\nインシデントの状態を変えるには，「点の取り付け/取り外し」ツールを使う。\n幾何要素 Cinderellaの作図ツールで作図した点や直線などの要素\nインスペクタ 幾何要素の大きさや色などの属性を管理するウィンドウ。\n幾何点 幾何要素としての点。マウスドラッグで動かすことができる。\nCindyscriptやKeTCindyのスクリプトで取った点は幾何要素にならないことがある。\n自由点 マウスドラッグで任意に動かすことのできる点。\n固定点 マウスドラッグで移動することのできない点\n2曲線の交点などではない単独の点の場合，インスペクタで点を固定できる。\nスナップ マウスポイントが格子点の近くに来ると格子点上にぴったり移動する。\nCinderellaの画面の下方ツールのうち，磁石アイコンによりこのモードになる。\n7.2 Cinderellaの作図ツール\n動かすモードにする ：幾何要素を選択して動かす。これが標準状態\n点を加える ：クリックして点を作る\n直線を加える ：2点間をドラッグする\n線分を加える ：2点間をドラッグする\n中点を加える ：2点間をドラッグする\n交点を加える ：2曲線を順にクリック\n平行線を加える ：直線上から通る点へドラッグ\n垂線を加える ：直線上から通る点へドラッグ\n角の二等分線を加える ：2直線を順にクリック\n円を加える ：中心から半径分ドラッグ\n半径つき円を加える ：中心から半径分ドラッグ\n焦点と通る点で決まる楕円 ：焦点と通る点を順にクリック\n焦点と通る点で決まる双曲線 ：焦点と通る点を順にクリック\n焦点と準線で決まる放物線 ：焦点と準線を順にクリック\n多角形を加える ：多角形の頂点を順にクリック\n角に印をつける ：2直線を順にクリック\n角度を測る ：2直線を順にクリック\n選択した要素を消去する ：選択しておいてツールをクリック\n点をまとめて選択する ：点がすべて選択される\n線分をまとめて選択する ：線分がすべて選択される\n151", "tags": ["KeTCindy", "構文"]}
{"title": "Page 152", "content": "画面ツール（下のツールバー）\n原点を移動する ：画面上の任意の位置でドラッグする\n矩形領域を画面サイズに拡大 ：ドラッグしてできる矩形で領域を選択する\n画面を矩形領域サイズに縮小 ：ドラッグしてで切る矩形で領域を選択する\n格子点にスナップする ：軸と方眼を表示しスナップモードにする\nグリッドを粗く / 細かくする\n7.3 他のテキストエディタの使用\n例えば，cdyファイル名をtemplate.cdyとする．\n(1) template.txtを作成して，template.cdyと同じ場所におく．\n(2) template.cdyのFiguresスロットを以下を記述して実行する．\nKetinit();\nsetdirectory(Dircdy);\nimport(Cdyname()+''.txt'');\nsetdirectory(Dirwork);\nWindispg();\n(3) template.txtにスクリプトを書いて保存する．\n例）Putpoint(\"A\",[0,0],A.xy);\nPlotdata(\"1'',''x^2'',''x'');\n注）template.txtを変更した場合も，cdy画面をクリックすればよい．\n⇒関数一覧\n152", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 153", "content": "7.4 色名とカラーコード一覧\nname CMYK Color name CMYK Color\ngreenyellow [0.15,0,0.69,0] royalpurple [0.75,0.9,0,0]\nyellow [0,0,1,0] blueviolet [0.86,0.91,0,0.04]\ngoldenrod [0,0.1,0.84,0] periwinkle [0.57,0.55,0,0]\ndandelion [0,0.29,0.84,0] cadetblue [0.62,0.57,0.23,0]\napricot [0,0.32,0.52,0] cornflowerblue [0.65,0.13,0,0]\npeach [0,0.5,0.7,0] midnightblue [0.98,0.13,0,0.43]\nmelon [0,0.46,0.5,0] navyblue [0.94,0.54,0,0]\nyelloworange [0,0.42,1,0] royalblue [1,0.5,0,0]\norange [0,0.61,0.87,0] blue [1,1,0,0]\nburntorange [0,0.51,1,0] cerulean [0.94,0.11,0,0]\nbittersweet [0,0.75,1,0.24] cyan [1,0,0,0]\nredorange [0,0.77,0.87,0] processblue [0.96,0,0,0]\nmahogany [0,0.85,0.87,0.35] skyblue [0.62,0,0.12,0]\nmaroon [0,0.87,0.68,0.32] turquoise [0.85,0,0.2,0]\nbrickred [0,0.89,0.94,0.28] tealblue [0.86,0,0.34,0.02]\nred [0,1,1,0] aquamarine [0.82,0,0.3,0]\norangered [0,1,0.5,0] bluegreen [0.85,0,0.33,0]\nrubinered [0,1,0.13,0] emerald [1,0,0.5,0]\nwildstrawberry [0,0.96,0.39,0] janglegreen [0.99,0,0.52,0]\nsalmon [0,0.53,0.38,0] seagreen [0.69,0,0.5,0]\ncarnationpink [0,0.63,0,0] green [1,0,1,0]\nmagenta [0,1,0,0] forestgreen [0.91,0,0.88,0.12]\nvioletred [0,0.81,0,0] pinegreen [0.92,0,0.59,0.25]\nrhodamine [0,0.82,0,0] limegreen [0.5,0,1,0]\nmulberry [0.34,0.9,0,0.02] yellowgreen [0.44,0,0.74,0]\nredviolet [0.07,0.9,0,0.34] springgreen [0.26,0,0.76,0]\nfuchsia [0.47,0.91,0,0.08] olivegreen [0.64,0,0.95,0.4]\nlavender [0,0.48,0,0] rawsienna [0,0.72,1,0.45]\nthistle [0.12,0.59,0,0] sepia [0,0.83,1,0.7]\norchid [0.32,0.64,0,0] brown [0,0.81,1,0.6]\ndarkorchid [0.4,0.8,0.2,0] tan [0.14,0.42,0.56,0]\npurple [0.45,0.86,0,0] gray [0,0,0,0.5]\nplum [0.5,1,0,0] black [0,0,0,1]\nviolet [0.79,0.88,0,0] white [0,0,0,0]\n注）lightgray [0,0,0,0.15], offwhite [0,0,0,0.3], cindycolor [0.66,0,69,0.71]を追加\n153", "tags": []}
{"title": "Page 154", "content": "7.5 点の作図についての比較表\n関数 戻り値を使う 描画する 幾何点を作る TeXに出力\nPointdata - ⃝ - ⃝\nPutpoint - - ⃝ -\nPutintersect - - ⃝ -\nPutonCurve - - ⃝ -\nPutonLine - - ⃝ -\nPutonSeg - - ⃝ -\nReflectpoint ⃝ - - -\nRotatepoint ⃝ - - -\nScalepoint ⃝ - - -\nTranslatepoint ⃝ - - -\nPointdata3d - ⃝ - ⃝\nPutpoint3d - - ⃝ -\nIntersectcrvsf △ - ⃝ -\nIntersectsgpL - ⃝ ⃝ -\nInvparapt ⃝ - - -\nParapt ⃝ - - -\nPerpplane - ⃝ ⃝ -\nPerppt - ⃝ ⃝ -\nPointdata3d - ⃝ - ⃝\nPutonCurve3d - - ⃝ -\nPutonSeg3d - - ⃝ -\nReflectpoint3d ⃝ - - -\nRotatepoint3d ⃝ - - -\nScalepoint3d ⃝ - - -\nTranslatepoint3d ⃝ - - -\n注) Intersectcrvsf は戻り値ではなく，プロットデータを使う。\n154", "tags": []}
{"title": "Page 155", "content": "8 関数一覧\n【目次】に戻る\n【設定・定義】\nAddasterisk(文字列) 数式文字列に*を追加する\nAddax(0/1) 座標軸を描くかどうかを定める\nAddgraph(name ,プロットデータ) ユーザー定義のプロットデータを描画する\nAddpackage(package) プレビュー用のパッケージを追加\nAnglemark(点list, options) 角の印を入れる\nAnimationparam(初期値，速度，範囲) アニメーションボタンのパラメータ値を取得\nArrowdata(name,options) 2点間を結ぶ矢線を描く\nArrowhead(点,方向,options) 点に矢じりだけを描く\nAcos(real) 逆余弦三角関数の値を返す\nAsin(real) 逆正弦三角関数の値を返す\nAtan(real) 逆正接三角関数の値を返す\nAsirfun(name,式,list,option) Risa/Asirの関数を実行する\nAssign(文字列) 文字列中のある文字を値で置き換える\nBBdata(ファイル名) 画像のサイズ(bounding box)を求める\nBezier3d(name, list, list) 空間ベジェ曲線を描く\nBeziersmooth(name , list,options ) なめらかなベジェ曲線を描く。その１\nBeziersym(name , list,options ) なめらかなベジェ曲線を描く。その2\nBezier(name, list,list,options ) 単独のベジェ曲線を描く\nBinomial(n,r) 2項係数を計算する。\nBowdata(点list,options) 弓形を描く\nBoxplot(名前,データ,位置,高さ,option) 箱ひげ図を描く\nBracket(str) strから bracketpair を検索し位置と階層レベルのリストを返す\nBspline(name，list，options ) 2次 Bスプライン曲線を描く\nCalcbyA(name,list,option) Risa/Asirのスクリプトを実行する\nCalcbyF(name,list,option) FriCASのスクリプトを実行する\nCalcbyM(name,list,option) Maximaのスクリプトを実行する\nCalcbyW(name,list,option) Wolfram 言語のスクリプトを実行する\nCalcbyR(変数名,コマンド列, option) Rのコマンド列を実行して結果を返す\nChangestyle3d(list, list) 空間プロットデータの属性を変更\nChangestyle(PD list, options) 描画オプションを変更する\nChangetablestyle(罫線list, options) Table の罫線の描画オプションを変更する。\nChangework(パス) 作業ディレクトリを変更する\nCindyname() 作図しているファイル名を取得する。\nCircledata(name,点list,options) 円または正多角形を描く\nColorcode(文字1，文字2,color) カラーコードの変換\nColorname2cmyk(文字1，文字2,color) カラー名のcmykを返す\nCom0th(コマンド) RのOpenfileの前に置くコマンドを定義する\nCom1st(コマンド) RのOpenfileの前に置くコマンドを定義する\nCom2ndpre(コマンド) RのOpenfileのあとに置くコマンドを定義する\nCom2nd(コマンド) RのOpenfileのあとに置くコマンドを定義する\n155", "tags": ["LaTeX", "アニメーション", "上級者向け", "中級者向け", "図形描画", "外部連携", "数式描画", "関数"]}
{"title": "Page 156", "content": "Concatobj(list,option) いくつかのobjデータを結合\nCrossprod(list,list) ベクトルの外積を計算する\nCRspline(name，list，options ) 単独のCatmull-Rom スプライン曲線を描く\nCrv2onsfparadata(name,PD,PD2,式,opt,opt曲)面上の曲線(媒介変数)の陰線処理\nCrv3onsfparadata(name,PD,PD2,式,opt,opt曲)面上の曲線の陰線処理\nCrvsfparadata(name,PD,PD2,式,opt,opt) 曲線の曲面による陰線処理\nDatalist2d() 画面に描かれているすべてのプロットデータ\nDatalist3d() 画面に描かれているすべての空間プロットデータ\nDeffun(関数名 , 定義list ) Rと共有する関数を定義する\nDefinecolor(色名 , 定義list ) ユーザー定義色の設定\nDefvar(文字列) Rと共有する変数を定義する\nDeqplot(name,式,変数名,初期値,options]) 微分方程式の解曲線を描く\nDerivative(関数式,変数,値) 関数の微分係数を求める\nDispmat(list) listの内容を行列型にコンソールに表示する\nDist3d(点名,点名) 空間の2点の距離\nDotfilldata(name , 方向, PD , options) 領域に点を敷き詰める\nDotprod(list,list) ベクトルの内積を計算する\nDqq(文字列) 文字列の前後に\"をつける。\nDrawfigures(name ,figlist,optionlist) 複数のデータのスタイルをリストで与えて描画する\nDrawpoint3d(座標) 空間点を描く\nSegmark(name,list,options) 線分に印をつける\nDrwxy() Addax(0のとき座標軸を先に描く\nEllipseplot(name,list,str,options) 楕円を描く\nEmbed(name,PD,式) 埋め込みデータ作成\nEnclosing(name , [位置，方向，数式]) 複数の曲線から閉曲線を描く\nExeccmdC(name,options1,options2) C言語で命令実行\nExpr3d([座標,位置,文字列],options) 空間の数式文字列を表示する\nExprrot(位置，向き，文字列) 傾いたTEX数式を書く\nExpr([座標,位置,文字列],options) TEX数式を書く\nExtractdata(データ名,属性) ReadOutDataで読み込んだデータに属性をつける。\nFactorial(n) nの階乗を計算する。\nFigpdf(option) 出力枠サイズのPDFを作る\nFilelist(mainpath,dirname) (mainpathにある)dirnameのファイル一覧をリストとして返す\nFindarea(PD) プロットデータで囲まれる部分の面積を求める\nFindcell(列番号, 行番号) セルの情報listを返す\nFindlength(PD) プロットデータで描く曲線の長さを求める\nFontsize(記号) フォントサイズを設定する\nFourierseries(name,係数,周期,項数) フーリエ級数を描く\nFracform(数,分母リスト) 簡易TeX-like書式の文字列を返す\nFramedata(name , list) 矩形を描く(空のときは描画領域)\nFrfun(name,式,list,option) FriCASの関数を実行する\nGcd(numberlist) 最大公約数を計算する。\nGetangle() 回転角の取得\ngethome() ユーザホームを返す\nGetlevel(str) strから sepの位置と階層レベルのリストを返す\n156", "tags": ["LaTeX", "中級者向け", "図形描画", "外部連携", "数式描画", "関数"]}
{"title": "Page 157", "content": "Hatchdata(name , 方向, PD , options) 領域に斜線を引く\nHelpkey(str) キーワードで関数を検索する\nHelp(str) コマンドヘルプを表示する\nHistplot(name,data) ヒストグラムを描く\nHtickmark([横座標 , 方向 , 文字]) 横軸に目盛りを描く\nHyperbolaplot(name,list,str,options) 双曲線を描く\nImplicitplot(name,str,,str,str,options) 陰関数のグラフを描く\nIndexall(str1,str2) 文字列 str1 から str2 を検索しその位置をすべて返す\nAddglist() ketlib スロットで定義された描画データを追加する\nInitglist() ketlib スロットで描画データを作るときの初期化\nSetglist() ketlib スロットの描画データを登録する\nIntegrate(関数式,変数,範囲,options) 関数の定積分値を求める\nIntersectcrvs(PD1,PD2) プロットデータの交点のパラメータlistを返す\nIntersectcrvsf(name,PD,式) 曲線と曲面の交点を求める\nIntersectcrvs(PD1,PD2) プロットデータの交点の座標listを返す\nIntersectcurves(PD1,PD2) より精密な交点のlistを返す\nIntersectcurvespp(PD1,PD2) より精密な交点のパラメータlistを返す\nIntersectsgpL(点名,線分,面,描画方法) 空間の直線と平面の交点\nInversefun(関数式,範囲,値) 逆関数値を求める\nInvert(PD) プロットデータの点を逆順にする（reverseと同じ）\nInvparapt(座標,PD) 描画面座標に対応する曲線上の座標\nIsangle() 角度スライダが選択されているか\nisexists(dir,file) dirにfileが存在するか\nislinux() Linux OSか\nismacos() Mac OSか\nIsptselected(点名) 点が選択されていればtrueを返す\nPtselected(点名) 点が選択されていればtrueを返す\niswindows() Windows OSか\nJoincrvs(name, PDlist, options) 2つのプロットデータをつなげたデータを作る\nKetcindyjsdata(変数名と値のリスト) script ”csinit”にデータを書き込む\nKetcindyjsmain(prependlist,appendlist) ketcindyjsのhtmlの前後にスクリプトを追加したhtmlを作成\nKetinit3d() KeTCindy3Dの使用宣言\nKetinit(options) KETCindyを初期化する\nLetter3d([座標,位置,文字列],options) 空間文字列を表示する\nLetterrot(座標,方向,移動量,文字列) 文字列を回転して表示する\nLetter([座標,位置,文字列],options) 文字列を表示する\nLineplot(name,2点のlist,options) 2点を結ぶ直線を描く\nListplot(name,点のlist,options) 点を線分で結ぶ\nmakedir(path,dirname) pathにdirnameのdirを作成する\nMkbeziercrv(name,list,options) 作図した点を使ってベジェ曲線を描く\nMkbezierptcrv3d(点list) 制御点を自動的にとる空間ベジェ曲線\nMkbezierptcrv(list，options ) 制御点を自動配置してベジェ曲線を描く\nMkcircles() 幾何円のすべてのPD を作成する\nMkobjcmd(name,式,option) 厚みを持たない曲面のコマンドを作成\nMkobjcrvcmd(name,PD,option) 空間曲線のコマンドを作成\n157", "tags": ["KeTCindy", "LaTeX", "アニメーション", "上級者向け", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 158", "content": "Mkobjnrm(name,式) 法線ベクトルのデータを作成\nMkobjplatecmd(name,面データ,options) 面を描く\nMkobjpolycmd(name,PD,options) 多面体を描く\nMkobjsymbcmd(PD, 実数,実数,vec,vec) 文字等のコマンドを作成\nMkobjthickcmd(name,式) 厚みを持つ曲面のコマンドを作成\nMksegments() 幾何線分のすべてのPD を作成する\nMkviewobj(name,PD, options) obj ファイルを作成\nMovetojs(要素名,座標,フォントサイズ) Textボタンの位置とフォントサイズを設定\nMxbatch(list) Maximaの外部スクリプト用コマンドを作る\nMxfun(name,式,list,option) Maximaの関数を実行する\nMxtex(num,式) 式をTeX書式にする\nWltex(name,式) 式をTeX書式にする\nNearestptcrv(点,PD) 点に一番近い曲線上の点を取得する\nNearestpt(PD,PD) 2曲線間の最も近い点を取得する\nNohiddenbyfaces(name,PD,PD,opt1,opt2) 多面体と空間曲線を陰線処理\nNorm(ベクトル) ベクトルの大きさを計算する。\nNumptcrv(PD) 曲線PD の節点データの個数を取得する\nOp(n,list) listまたは文字列から要素を抜き出す\nOspline(list，list，options ) 大島のスプライン曲線を描く\nOvaldata(name, 点list,options) 角を丸くした矩形を描く\nParabolaplot(name,list,str,options) 放物線を描く\nParamark(点list,options) 角の印を入れる\nParamoncurve(PD,n,PtL) PD上にある点P のデータを取得する\nParamplot(name,式,変数と定義域,options) 媒介変数で表された曲線を描く\nParapt(座標) 空間点の投影面での座標\nPartcrv3d(name,始点,終点,PD) 空間曲線PDの部分曲線を作る\nPartcrv(name,点1,点2,PD) 部分曲線を描く\nPeriodfun(定義式,周期,options) 周期関数のグラフを描く\nPerpplane(点名, 点, ベクトル,option) 点を通り垂直な平面上の基準点\nPerppt(点名,点,点list,option) 平面に下ろした垂線の足\nPhparadata(name,name2,options) 多面体を陰線処理して描く\nPlotdataR(name,式,変数) Rの関数のグラフを描く\nPlotdata(name,式,変数と定義域,options) 関数のグラフを描く\nPlotdiscR(name,式,変数) 離散型のグラフを描く\nPointdata3d(名前,点list,options) 空間点のデータを作成する\nPointdata(name,点list,options) 点データを作る\nPointoncurve(数,PD) パラメータ値をもつプロットデータ上の点\nPolarplot(name,式,変数と定義域,options) 極座標表示の曲線を描く\nPolygonplot(name,点list,整数,options) 正多角形を描く\nProjpara(空間曲線) 空間曲線を投影した平面曲線を求める\nPtcrv(n,PD) 曲線PD のn 番目の節点を取得する\nPtpos(幾何点) 幾何点の現在（直前）座標\nPtsize(数) 表示する点の大きさを設定する\nPtend(PD) プロットデータの終点を取得する\nPtstart(PD) プロットデータの始点を取得する\n158", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 159", "content": "Putaxes3d([x,y,z]) 空間の軸上に幾何点をとる\nPutcell(列番号, 行番号, 位置, 文字) セルに文字列を入れる\nPutcellexpr(列番号, 行番号, 位置, 文字) セルに数式を入れる\nPutcolexpr(列番号, 位置，文字列list) １列に順にTEX書式の文字を書き入れる\nPutcol(列番号, 位置，文字列list) １列に順に文字を書き入れる\nPutintersect(点名,PD1,PD2) 2曲線の交点を作る\nPutoncurve3d(点名,PD) 空間曲線上に点をとる\nPutoncurve(name,PD,初期値) 曲線上に点を作る\nPutonline(点名,座標1,座標2) 直線上に点を作る\nPutonseg3d(点名,点1,点2) 空間線分上に点をとる\nPutonseg(点名,座標1,座標2) 線分上に点を作る\nPutpoint3d(list,option) 空間点をとる\nPutpoint(点名,座標1,座標2) 点を作る\nPutrowexpr(行番号, 位置，文字列list) １行に順にTEX書式の文字を書き入れる\nPutrow(行番号, 位置，文字列list) １行に順に文字を書き入れる\nReadcsv(name,filename,option) csvファイルを読む\nReadlines(name,filename,option) テキストファイルを1行ずつ読む\nReadlines(path,filename) (pathにある)filernameの各行を読み込みリストとして返す\nReadobj(ファイル名) objファイルを読み込む\nReadoutdata(ファイル名) 外部データをPDとして読み込む\nReflectdata3d(点,PDlist,list,options) 空間PDを鏡映\nReflectdata(name,PD,点list,options) プロットデータの鏡映を作成\nReflectpoint3d(点,list) 空間点を鏡映\nReflectpoint(点,対称点/対称軸) 点の鏡映を作成\nReparse(文字列（リスト） 評価して実数化する\nRfun(変数名,コマンド,引数, option) Rの1つコマンドを実行して結果を返す\nRotatedata3d(name,PD,vec,角度,点) 空間プロットデータを回転\nRotatedata(name,PD,角度,中心,options) プロットデータを回転する\nRotatepoint3d(点 , vec , 角度 , 点) 空間点を回転\nRotatepoint(点,角度,中心) 点の位置を回転する\nRulerscale(点,list,list) 目盛を打つ\nScaledata3d(点, vec, 中心) プロットデータを拡大/縮小\nScaledata(name,PD,x,y,中心,options) 点を拡大・縮小する\nScalepoint3d(点, vec, 中心) 空間点の位置を拡大/縮小\nScalepoint(点,比率ベクトル,中心) 点の位置を拡大・縮小する\nScatterplot(name,filename,option) 2次元データを読み込み，散布図を描く\nSegmark(name,list,options) 線分に印をつける\nSetangle(theta,phi) 回転角の設定\nSetarrow(size,angle,pos,cut,style 矢線の形状を設定する\nSetax(list) 座標軸の書式を設定する\nSetcolor(color,options) Windispgでの描画色を設定する\nSeteditable(識別番号, 文字サイズ, 幅) \"Editable Text\"を設定する。\nSetfiles(filename) 出力するファイル名を設定する\nSetketcindyjs(options) KeTJSの設定\nSetmarklen(数) 軸の目盛の長さを設定する\n159", "tags": ["KeTCindy", "LaTeX", "中級者向け", "外部連携", "数式描画", "構文"]}
{"title": "Page 160", "content": "Setorigin(座標) 表示する座標軸の原点の位置を設定する\nSetpara(str) パラパラ動画のタイトル指定\nSetparent(filename) Parentで出力するファイル名を設定する\nSetpen(数) 線の太さを設定する\nSetplaybuttons(座標,サイズ [, スペース]) Playなどのボタンの位置とフォントサイズを設定\nSetpt(数) 表示する点の大きさを設定する\nSetscaling(数) 縦方向の倍率を設定する\nSettitle(タイトルlist,options) スライドのタイトル設定\nSetunitlen(数) 単位長を設定する\nSetwindow() 描画領域を設定する\nSf3data(name, list,options) 陰線処理なしの空間曲面を描く\nSfbdparadata(name, 式,options) 曲面を陰線処理して描く\nSfcutparadatacdy(name,面,曲面,options) 平面と曲面の交線を求める。\nShade(PDlist , 数) 閉曲線の内部にシェードをかける\nSkeletonparadata(name,PD,PD,options) スケルトン処理のデータ作成\nSla2fra(文字列) 文字列の中の / を簡易TeX-like書式の分数に直す\nSlider() スライダを作る\nSpacecurve(name, 式, 定義域,options) 空間曲線のデータ作成\nSpaceline(name,list) 空間の折線データ作成\nSprintf(実数,長さ) 小数点以下の長さを固定した文字列に変換\nSqr(real) 平方根を返す\nStart3d() 3Dの開始\nStartsurf() 曲面描画の初期化\nStrsplit(文字列,文字) 文字列を分解する。\nTextedit(識別番号,文字列) 文字列を識別番号の入力窓に入れる\nTab2list(str，option) str の内容をlistに変換する\nTabledatalight(”” , 縦横 ,除外 , options) 幾何点を持たない表の枠を作成する\nTabledata(”” , 縦横 ,除外 , options) 表の枠を作成する\nTangentplot(name,PD, 位置) 曲線の接線を引く\nTexcom(コード) TEXのコードを書き出す\nTextedit(識別番号) KeTJSで入力窓に入れた文字列を取得\nTextformat(数,桁数) 小数点以下の桁数を指定して数値を文字列化する\nTgrid(セルラベル) セル（格子点）の座標を返す\nTlistplot(セルラベル1,セルラベル2) セルに斜線を引く\nTocindyform(TeX-like書式 Cindy書式の文字列を返す\nTonoralform(TeX-like書式) TeX書式の文字列に*を補う\nTotexform(TeX-like書式) TeX書式の文字列を返す\nTranslatedata3d(name,PD, 平行移動量) 空間プロットデータを平行移動\nTranslatedata(name,PD,ベクトル,options) プロットデータを平行移動する\nTranslatepoint3d(座標,平行移動量) 空間点を平行移動\nTranslatepoint(点,ベクトル) 点を平行移動する\nUnscaling(プロットデータ) scalingされたデータを論理値化する\nUsegraphics() グラフィクスパッケージを\"pict2e\" に変更する\nVertexEdgeFace(面データ,option) 頂点と面から辺を求め，辺を描く\nViewtex() TEXのソースファイルを書き出す。引数なし\n160", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 161", "content": "Vtickmark([横座標 , 方向 , 文字]) 縦軸に目盛りを描く\nWindispg() 定義されたプロットデータを描画面に描く\nWireparadata(name,PD,式,int,int,opt,opt) 曲面のワイヤフレームを陰線処理\nWlfun(name,式,list,option) Wolfram 言語の1つの関数を実行する\nWorkprocess() 作図の経過を取得する\nWritecsv(namelist,data,option) dataの内容をcsvファイルに書き出す\nWriteOutData() PDデータを書き出す\nXyzax3data(name,文字,文字,文字,options)空間座標軸の表示\nXyzcoord(P.x,P.y,Pz.y) 主副画面で決まる空間点の座標\n161", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 1", "content": "CindyScript / CindyJS Reference\nCinderellaJapan\n2024 年3月26 日\n目次\n1 CindyScript の全般的仕様 6\n1.1 関数型プログラミング言語 . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n1.2 コードの書式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2 制御命令 7\n2.1 繰り返し . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n2.1.1 while . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n2.1.2 repeat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n2.1.3 forall . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n2.2 条件分岐 if . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n2.3 トリガー trigger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n2.4 強制的評価 eval . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n3 変数 10\n3.1 大域的変数と局所変数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n3.2 変数の作成と削除 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n3.3 局所変数の宣言 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n3.4 オブジェクトのキー変数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n4 算術関数 15\n4.1 四則演算と累乗 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n4.2 剰余 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n4.3 角度演算子 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n4.4 絶対値 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n4.5 距離演算子 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n4.6 標準的な算術関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n1", "tags": ["KeTCindy", "構文"]}
{"title": "Page 2", "content": "4.7 四捨五入 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n4.8 床関数と天井関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n4.9 複素数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n4.10 乱数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n4.11 ブール関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n4.11.1 比較 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n4.11.2 ブール代数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n4.12 演算子一覧 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n5 型の判定 21\n6 文字列関数 22\n6.1 文字列の結合 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n6.2 文字列への変換 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n6.3 文字列の長さ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n6.4 文字列の抜き出し . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n6.5 文字列の検索 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n6.6 文字列の分解 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n6.7 文字列の置換 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n6.8 文字列の解析 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n6.9 文字列の比較と並べ替え . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n7 リスト 25\n7.1 リストの作成とアクセス . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n7.2 リストの操作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n7.3 リストの要素の走査 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n7.4 要素の組み合わせ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n7.5 要素の整列 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n7.6 要素の総和・積 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n7.7 最大と最小 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n8 ベクトルと行列 32\n8.1 ベクトルと行列の定義 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n8.2 和と積 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n8.3 ベクトルと行列の演算 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n8.4 線形代数の演算 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n8.5 3 次元の凸多面体を作る . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n2", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 3", "content": "9 幾何学要素へのアクセス 36\n9.1 要素にその名前でアクセスする . . . . . . . . . . . . . . . . . . . . . . . . . 36\n9.2 幾何学要素のリスト . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n9.3 幾何学要素のパラメータ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n9.4 インスペクタの要素 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n9.5 要素の作成と消去 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n9.6 幾何要素の操作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n10 図形の描画 46\n10.1 修飾子 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n10.2 色や大きさの設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n10.3 色の関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n10.4 描画関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n11 関数プロット 51\n11.1 実数関数のグラフを描く . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n11.2 動的な色と透明度 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n11.3 カラープロット . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n11.4 ベクトル場 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n11.5 グリッド . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\n11.6 オシログラフ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n11.7 文字と表 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n12 TeX 記法 Cinderella TeX 67\n13 画像の操作とレンダリング 72\n13.1 メディアブラウザ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n13.2 画像の表示と変換 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n13.3 カスタム画像を作る . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n13.4 キャンバスに描く . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n14 シェイプ 85\n14.1 シェイプの初歩 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n14.2 シェイプの結合 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n14.3 シェイプの使い方 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n15 座標系と基底 88\n15.1 座標変換 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n15.2 射影基底との関係 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n3", "tags": ["アニメーション", "上級者向け", "初心者向け", "基本操作"]}
{"title": "Page 4", "content": "15.3 基底スタック . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\n15.4 レイヤー . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\n15.5 スクリーン境界の決定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n16 幾何学的演算 96\n16.1 リストと座標 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n16.2 基本的な幾何学関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n16.3 有用な線形代数関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n16.4 変換とオブジェクトの型 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n16.5 幾何学変換と基底 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n17 計算 100\n17.1 微分と接線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\n17.2 高度な計算 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\n18 音声出力 Syntherella 102\n18.1 概要 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n18.2 単音 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n18.3 旋律 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n18.4 音色 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n18.5 サウンド関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n19 ファイル管理 111\n19.1 データの読み込み . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n19.2 データの書き出し . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n19.3 HTML との連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n19.4 ネットワーク . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n19.5 コンソールへの出力 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n20 時間とアニメーション 114\n20.1 時間 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n20.2 アニメーションのコントロール . . . . . . . . . . . . . . . . . . . . . . . . . 115\n21 ユーザー入力 115\n21.1 マウスとキーボード . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n21.2 加速度センサにおける AMS データ . . . . . . . . . . . . . . . . . . . . . . . 116\n22 CindyLab との連携 116\n22.1 シミュレーション環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n4", "tags": ["アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "基本操作", "外部連携", "環境構築"]}
{"title": "Page 5", "content": "23 Cindy3D 118\n23.1 設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n23.2 描画関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n23.3 光の当て方と表現 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\n24 CindyJS 132\n24.1 CindyJS のHTML基本構造 . . . . . . . . . . . . . . . . . . . . . . . . . . 132\n24.1.1 CindyJS ランタイムのロード . . . . . . . . . . . . . . . . . . . . . . . . 133\n24.1.2 スクリプトの記述 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n24.1.3 CindyJS の初期化 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n24.2 CindyJS のHTML文書の実例 . . . . . . . . . . . . . . . . . . . . . . . . . 135\n25 索引 138\n5", "tags": ["KeTCindy", "初心者向け", "基本操作", "構文"]}
{"title": "Page 6", "content": "1 CindyScript の全般的仕様\n1.1 関数型プログラミング言語\nCindyScript のすべての計算は関数によって行われる。いろいろな計算は、基本的な関数\nによってなされる。通常の計算のように a+b のようにして計算をすることもでき， 「+」は\n演算子と呼ばれるが，CindyScript では、これを挿入演算子と呼んでいる。同じ計算 が、関\n数 add(a,b) によってもできる。そこで、このマニュアルでは、「演算子」 と「関数」をほ\nぼ同義なものとして使っている。したがって、add(a,b) のような関数も「演算子」 と呼ぶ\nことがある。\nさらに、 if 文のような一見手続き風の命令文が、関数として認識される。例えば、\nif(x<y,print(\"Mine\"),print(\"Yours\"))\nという文は、3 つの引数を持つ if 関数の例である。第 1 の引数 x の条件を評価し，その結\n果により 第 2 または第 3 の結果 print(\"Mine\") または print(\"Yours\") を実行し，戻り\n値とする。これは次の命令文と同じである。print(if(x<y,\"Mine\",\"Yours\"))\n1.2 コードの書式\nCindyScript では，命令文の区切りにセミコロン ; を書く。これは必須である。単なる改\n行は命令文の続きと見なされる。したがって，関数を使うときの括弧をそのままブロックを\n表すものとして，その内部で改行することもできる。ブロック内のインデントは特に必要は\nないが，可読性のためにはつけるとよい。\n命令文の最後にはセミコロンをつけなくてもよい。\n【例】\nrepeat(9,i, j=i*i; draw([i,j])) は，次のようにブロックとして書くことができる。\nrepeat(9,i,\nj=i*i;\ndraw([i,j]);\n)\n6", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 7", "content": "2 制御命令\n2.1 繰り返し\n2.1.1 while\nwhile(<bool>,<expr>)\nwhile 関数は <bool>が真である間，<expr> を評価する。\n【例】：０から４までの和を求める。\nx=0;\nsum=0;\nwhile(x<4,\nx=x+1;\nsum=sum+x;\n);\nprintln(sum);\n参考：while は関数なので戻り値がある。戻り値は最後の評価結果である。上の例では sum\nの値が戻る。\n2.1.2 repeat\nrepeat(<int>,<expr>)\n<expr>を <int> 回繰り返し，最後の評価結果が戻る。 <expr> が評価されている間，実\n行変数 # は繰り返しの回数を数える。\n【修飾子】次の修飾子を任意に組み合わせることができる。\nstart ループの開始の値を設定する。\nstop ループの終了の値を設定する。\nstep ステップの値を設定する。\n【例 】 スクリプト 結果\nrepeat(6, println(#+\" \")) 1 2 3 4 5 6\nrepeat(6, start->4, println(#+\" \")) 4 5 6 7 8 9\n7", "tags": []}
{"title": "Page 8", "content": "repeat(6, stop->2, println(#+\" \")) -3 -2 -1 0 1 2\nrepeat(6, step->3, println(#+\" \")) 1 4 7 10 13 16\nrepeat(6, stop->12,step->4, println(#+\" \")) -8 -4 0 4 8 12\nrepeat(6, start->3,step->2, println(#+\" \")) 3 5 7 9 11 13\nrepeat(6, start->3,stop->4, println(#+\" \")) 3 3.2 3.4 3.6 3.8 4\nrepeat(6, start->0,stop->-3, println(#+\" \")) 0 -0.6 -1.2 -1.8 -2.4 -3\nrepeat(6, start->3,stop->4,step->0.4, println(#+\" \")) 3 3.4 3.8\nrepeat(<int>,<var>,<expr>)\nこの関数は，実行変数が¡var¿に割り当てられるという１点を除いては，repeat(<int>,<expr>)\nと同じ。これは，異なる実行変数を使って，ループを入れ子にすることを考慮している。\n【例】 10×10の点列を描く\nrepeat(10,i,\nrepeat(10,j,\ndraw((i,j));\n);\n)\n2.1.3 forall\nリストを使って繰り返しをする。\nforall(<list>,<expr>)\nこの関数の第１引数はリスト。 <expr> がリストのそれぞれの要素に対して評価される。\n実行変数# はリストのそれぞれの要素になる。\n【例】リストの全要素を改行してコンソールに表示する。\na=[\"this\",\"is\",\"a\",\"list\"];\nforall(a,println(#))\nforall(<list>,<var>,<expr>)\n実行変数が <var> であること以外は forall(<list>,<expr>)と同じ。\n8", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 9", "content": "2.2 条件分岐 if\nif(<bool>,<expr>)\n<bool> が真であれば、<expr> が評価(実行)され，その値が返される。\n【例】\nif(x<0,println(\"xは負です\"))\nこのコードでは、x が負の値であれば、”x は負です”が印字 (表示) され、その文字列がそ\nのまま戻り値として返される。負の値でなければ、何も印字されず、 ___が返される。\nif(<bool>,<expr1>,<expr2>)\n条件 <bool> が真であれば <expr1> が評価され、そうでなければ <expr2>が評価され、\nその値が返される。したがって、この if 文は、if then else に相当する。 この条件分岐\nの典型的な使用法は2つある。まず、条件によって場合分けをするときに使う。\n【例】\nif(x<0,\nprintln(\"x は負です\")\n,\nif (x>0,\nprintln(\"x は正です\")\n,\nprintln(\"x は零です\")\n)\n)\nこのコードでは、 x の値が正か、負か、ゼロかを表示する。\n第2の使い方は、 <bool> の条件により値を返したいときで if 関数の戻り値を利用する。\nこれは関数の定義としてよく使う。\n【例】\nf(x):=if(x>0,x,-x)\nこのコードは、xの絶対値を返す関数 f(x) を定義する。\n9", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 10", "content": "【例】\nA.color=if(A.x>0,(1,0,0),(0,0,1))\nこのコードでは、点 A の色を、そのx座標の正負により赤か青に設定する。\n2.3 トリガー trigger\nt trigger(<bool>,<expr>)\ntrigger は動的意味あいを持つ条件判断である。 <bool> が false から true に変わった\nときに評価される。たとえば、何かの要素をドラッグしているとき、<bool> が false から\ntrue に変化したことを察知して <expr> を評価 (実行) する。 この演算子の目的は、要素\nをドラッグしているときに何らかのイベントが起きたかどうかを判断することである。 次の\nコードはそのような例である。\n【例】\ntrigger(A.x<0,println(\"A はxが負の半平面に入りました\"));\ntrigger(A.x>0,println(\"A はxが正の半平面に入りました\"))\nこのコードでは、点 A が y軸を横切るとメッセージを出す。\n2.4 強制的評価 eval\neval(<expr>,<modif1>,<modif2>,…\nこの関数は，<expr>の内容を強制的に評価する。<expr>内の変数は modifier のリストに\nある変数で置き換えられる。置き換える変数は局所変数。実行後はもとの値に書き戻される。\n【例】次のコードは，評価値を 7 とする。\neval(x+y,x->2,y->5)\n3 変数\nCindyScript の基本的な型は次の通り。\n• 数値 : 数値の型は、整数、浮動小数点数、複素数\n• リスト : 任意の値のリスト。ベクトルや行列はリストで表される\n• 文字列 : 文字列\n• 幾何要素 : 幾何学的要素\n10", "tags": ["KeTCindy", "アニメーション", "上級者向け", "初心者向け", "基本操作", "構文"]}
{"title": "Page 11", "content": "• ブール値 : true または false のブール値\nしかしながら，CindyScript は値の型を明示しない。変数は特定の型を持たず，どんな型\nのどんな値でも変数 に代入することができる。 例えば、関数f(x,y) を定義する次のコード\nf(x,y):=x+y;\nは、整数、複素数、ベクトル、行列のいずれでも使えるが，関数が意味不明なことをする\nと、「意味がない」ことを表す ___印を返す。したがって、上の例で、f([1,2],[3,4]) なら\nばベクトルの和として [4,6]を返すが、 f(4,[3,4]) では意味がなく、 ___を返す。\n3.1 大域的変数と局所変数\n変数に代入した値がどこまで有効かを表すのに，「大域的（global）」と「局所的（local）」\nという概念がある。どこで使われていても変数の値が変化しないのが「大域的」，関数の内部\nや繰り返しループなどの内部だけで有効な場合を「局所的」という。CindyScript の変数は，\n基本的には大域的である。したがって，関数定義などで使用した変数がすでに使われていて\nなんらかの値が代入されていることがありうる。\n【例】\nf(x):=(\nx+y;\n);\nx=1;\ny=1;\nprintln(f(5));\nこの例では，x は引数なので，f(5) を実行すると x=5 が代入される。 y の値は関数内部で\nは代入されていないが，呼び出す前に y=1 としているので，この値が使われる。結果は\n6\n1\nとなる。\n繰り返しの repeat で使う変数は局所的である。\n【例】\nx=5;\nrepeat(2,x,\nprintln(x);\n);\n11", "tags": ["KeTCindy", "初心者向け", "基本操作", "構文"]}
{"title": "Page 12", "content": "println(x);\n結果は\n1\n2\n5\nとなる。\n3.2 変数の作成と削除\n変数の作成: createvar(<varname>)\n変数の削除: removevar(<varname>)\nこれらの関数は，局所変数の生成について手動で管理するのを助ける。\ncreatevar(x) は新しい変数 xを作り，前の値はスタックに入れられる。\nremovevar(x) は局所変数を削除して，スタックの値を書き戻す。\n通常，変数は明示的に作っておく必要はない。それらは，最初に使われるときに自動的に\n作られる。 createvar と removevar は，コードの特定の部分に，ある名前で変数を予約し\nたいときだけ使われる。\n【例】\nx=10;\nprintln(\"x is now \"+x);\ncreatevar(x);\nx=5;\nprintln(\"x is now \"+x);\nremovevar(x);\nprintln(\"x is now \"+x);\nこのコードの実行結果は次の通り。\nx is now 10\nx is now 5\nx is now 10\nclear()\n12", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 13", "content": "引数なしで，すべての変数をクリアする。特定の変数をクリアする場合は clear(<var>)\nと引数に渡す。\n3.3 局所変数の宣言\nregional(name1,name2,...)\n関数内で局所変数を使う。\nこの関数は，ユーザーが定義する関数の最初に使う。引数にある複数の変数を局所変数と\nして定義する。local 関数と似ているが，関数内での処理が終わると自動的に消滅する。し\nたがって，releaseなどで消去する手続きは不要でlocal関数より便利に使える。\n【例】\nf(x):=(\nregional(y);\ny=2;\nx+y;\n);\nx=1;\ny=1;\nprintln(f(5));\nこの例では，y の値は関数内部で 2 が代入されているが，この y は局所変数として扱われる\nので，呼び出す前の y の値は変わらず 1 のままである。\n結果は\n7\n1\nとなる。\n関数を呼び出すことで，その前の y の値が変わってしまうのを防ぐことができる。\n3.4 オブジェクトのキー変数\n<key>=<something> で宣言した <object>のキー変数のリストを得る。\n【例】オブジェクトのキー変数を割り当てる。\nA:\"age\"=34;\n13", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 14", "content": "A:\"haircolor\"=\"brown\";\n割当をした結果はつぎのような構文で利用できる。\nprintln(A:\"age\");\nprintln(A:\"haircolor\");\nkeys 関数は，オブジェクトに割り当てられた変数のリストを取得する。したがって，次の\nコードではリスト [\"age\",\"haircolor\"] が表示される。\nprintln(keys(A));\n14", "tags": []}
{"title": "Page 15", "content": "4 算術関数\n4.1 四則演算と累乗\n四則演算は，数学の基本的な演算子 +, -, *, /, ^ がそのまま使える。これらは，「挿入\n演算子」と呼ばれ，数とリストに適用できるが，演算の意味は，適用されるものによって異な\nる。たとえば， 5+7 の結果は 12 であり， [2,3,4]+[3,-1,5] の結果は [5,2,9] となる。\nこれらの演算子のほかに，関数でも演算ができる。\n演算 演算子 関数\n和 + add(<expr1>,<expr2>)\n差 - sub(<expr1>,<expr2>)\n積 * mult(<expr1>,<expr2>)\n商 / div(<expr1>,<expr2>)\n累乗 ^ pow(<expr1>,<expr2>)\n商については，÷でも演算ができる。（÷ は日本語入力で入力する。Unicode）\n数 (整数，実数，複素数) のべき乗では，指数は整数に限らず，実数，複素数でも可能。正\n式には exp(b*ln(a)) が計算される。(ln(a)は複素変数の対数関数)\nln() は周期 2*pi で定義されるので， a^b は一般には多価関数。 b が整数でない場合に\nは a^b は最初の主要な値を返す。\n【例】 式 結果\n2.3 + 5.9 8.2 実数の和\nadd(5,6) 11 整数の和\n(2+3*i) + (5+9*i) 7+i*12 複素数の和\n(2+3*i) - (5+9*i) -3 - i*6 複素数の差\nsub([3,5)],[1,2]) [2,3] リストの差\n[2,3,6] - [3,2,4] [-1,1,2] リスト（ベクトル）の差\n[2,3,[1,2]] + [3,4,[1,3]] [5,7,[2,4]] リストの和\n[2,3,4] + [3,4,[1,2]] [5,7,___] （第３要素が未定義値となる）\n7 * 8 56 整数の積\n(1+i) * (2+i) 1+3*i 複素数の積\n2 * [5,3,2] [10,2,4] ベクトルの実数倍\n[5,3,2] * 2 [10,2,4] ベクトルの実数倍\n[2,2,3] * [3,4,6] 32 ベクトルの内積\n[[1,2],[3,4]] * [1,2] [5,11] 行列と列ベクトルの積\n15", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 16", "content": "[1,2] * [[1,2],[3,4]] [7,10] 行ベクトルと行列の積\n[[1,2],[3,4]] * [[1,2],[3,4]] [[7,10],[15,22]] 行列の積\n[6,8,4]/2 [3,4,2] ベクトルの実数倍と同じ\nmult(2,[3,4]) [6,8] ベクトルの実数倍\nmult([4,5],[3,4]) 32 ベクトルの内積\n8/2 4 整数の商\n8÷2 4 整数の商\ndiv(8,2) 4 整数の商\n(2-i) / (1+i) 0.5 - i*1.5 複素数の商\n6^2 36 整数の整数乗\npow(6,2) 36 整数の整数乗\n2^(1/2) 1.4142・・ 整数の分数乗\n2^i 0.7692 + i*0.639 整数のi乗\n4.2 剰余\nmod(<expr1>,<expr2>) 関数は，<expr1>を <expr2>で割った余りを求める。\n4.3 角度演算子\n<数>° は，数に pi/180 をかける。度数法 (60 分法) による角度を弧度法に変換する。\n「°」は日本語入力モードで入力する。\n【例】sin(30°) の結果は 0.5\n4.4 絶対値\n| <obj> | 演算子，および関数 abs(obj)は，objの絶対値を求める。objは実数，複素\n数，ベクトルのいずれか。\n| <obj> | 演算子を ||3+|x−2|| のように入れ子にして使うことはできない。入れ子に\nしたい場合は abs() 関数を用いる。\nabs() は，実数，複素数，ベクトルなどのノルムを計算する。\n【例】 abs([1,3,1,2,1]) の結果は 4\n16", "tags": []}
{"title": "Page 17", "content": "4.5 距離演算子\n|<ob1,obj2>| 演算子，および dist(obj1,obj2) 関数は，２つのオブジェクトの距離\nを計算する。オブジェクトは，実数，複素数，ベクトルのいずれかで，２つとも同じ種類の\nものとする。\n【例】 |[1,1],[4,5]| の結果は 5\n|<ob1,obj2j>| 演算子を入れ子にして使うことはできない。入れ子にしたい場合は\ndist() 関数を用いる。\n4.6 標準的な算術関数\n平方根 sqrt(<expr>)\n指数関数 exp(<expr>)\n自然対数: log(<expr>)\n三角関数 sin(<expr>)\n三角関数 cos(<expr>)\n三角関数 tan(<expr>)\nsine の逆関数 arcsin(<expr>)\ncosine の逆関数 arccos(<expr>)\ntangent の逆関数 arctan(<expr>)\nベクトルのなす角 arctan2(<実数1,実数2>)\nベクトルのなす角 arctan2(<vector>)\n三角関数は複素関数なので引数に複素数を与えることができる。\narc は原則として多価だが，関数は −π からπ の間の解をひとつ返す。\n平方根は演算子として √ も使える。√ は日本語入力モードで入力する。\n【例】sin(2+3*i) の結果は 9.1545 - i*4.1689\narctan2(1,1) と arctan2([1,1]) の結果はいずれも 45°\nCinderellaで作図した点をAとしたとき，arctan2(A) はOAがx軸の正の方向となす角\nを返す。(O は原点)\n√2 の結果は 1.412・・・\n17", "tags": []}
{"title": "Page 18", "content": "4.7 四捨五入\nround(<expr>) は，小数点以下を四捨五入する。小数点以下のある桁を指定して四捨五\n入する関数は用意されていないので，たとえば，小数点以下第４位を四捨五入する場合には，\n1000倍して四捨五入したのち10000で割る。\nリストにも適用できる。複素数に対しては，実部と虚部のそれぞれに対して適用される。\n【例】\nround(pi*1000)/1000 結果は 3.142\nround([3.2,7.8,3.1+i*6.9]) 結果は [3,8,3+i*7]\n4.8 床関数と天井関数\n床関数：その数以下の最大の整数: floor(<expr>)\n天井関数：その数以上の最小の整数: ceil(<expr>)\n複素数に対しては，実部と虚部のそれぞれに対して適用される。\n4.9 複素数\n複素数の実部: re(<expr>)\n複素数の虚部: im(<expr>)\n共役複素数: conjugate(<expr>)\n4.10 乱数\nrandom() 0 より大きく 1 未満の一様乱数\nrandom(<数>) 0 より大きく <数> 未満の実数の一様乱数\nrandomint(<数>) 0 以上 <数> 未満の整数の一様乱数\nrandomnormal() (0,1) 正規乱数\nrandombool() ブール値の乱数 true または false\nseedrandom(<数>) 乱数発生器の初期化\nrandom 関数は，負の数や複素数を引数にすることもできる。例えば，random(-5) は -5\nから 0までの乱数を発生する。 randomint(6+i*10) は実部が0から6まで，虚部が0から\n10までの複素数をランダムに発生する。\n疑似乱数は，常に予測不可能な新しい乱数列を発生する。なんらかの理由で，スクリプト\nを実行するたびに，同じ乱数列を発生させたい場合は，seedrandom() 関数を使う。引数に\n18", "tags": []}
{"title": "Page 19", "content": "与えた整数に対し，同じ乱数列が発生する。異なる引数 (seed) を与えれば別の乱数列が発生\nする。\n4.11 ブール関数\n条件付き分岐では真偽の判定が必要になるが，これに関する演算がブール演算である。演\n算子もしくは関数により，true またはfalse が返される。\n4.11.1 比較\n<expr1> == <expr2> ２つの式の評価結果が等しい。\n<expr1> != <expr2> ２つの式の評価結果が等しくない。\n以下は，ともに 実数であれば，通常の大小関係。\nともに 文字列であれば，辞書順に比較。 比較できない値の場合は が返される。\n<expr1> > <expr2> expr1 が，expr2 より大きい。\n<expr1> < <expr2> expr1 が，expr2 より小さい。\n<expr1> >= <expr2> expr1 が，expr2 より大きいか等しい。\n<expr1> <= <expr2> expr1 が，expr2 より小さいか等しい。\nファジー(あいまい)な比較：~=, ~!=, ~<, ~>, ~>=, ~<= (チルダと比較記号)\nCindyScript は，比較を ファジー (あいまい) におこなう演算子を持っている。この演算\n子では，条件がεの限界内かどうかを調べる。したがって，a~=0 は，値 a が + ε から -ε\nの範囲にあるかどうかを調べる。 小さな値 ε は 0.0000000001 に設定される。この演算子\nは，数値計算における誤差を吸収するのに役に立つ。たとえば，x==y が論理的に等しいにも\nかかわらず，if(x==y,・・)が正しく動作しない場合，if(x~=y,・・)とすることにより誤\n差を吸収して動作するようになる。\n4.11.2 ブール代数\n演算子 関数\n論理積 <bool1> & <bool2> and(<bool1>,<bool2>)\n論理和 <bool1> % <bool2> or(<bool1>,<bool2>)\n否定 !<bool> not(<bool>)\n排他的論理和 ー xor(<bool1>,<bool2>)\n引数がブール表現でない場合は___を返す。\n19", "tags": ["KeTCindy", "構文"]}
{"title": "Page 20", "content": "4.12 演算子一覧\n括弧内は優先順位。\n: 自身の定義にアクセスする\n. あらかじめ定義されたデータフィールドにアクセスする\n° 度数法を弧度法に変換する\n_ リスト内の要素にアクセスする\n^ べき乗\n* 乗法 (ベクトル，行列も含む)\n/ 除法(ベクトル，行列をスカラーで割る場合も含む)\n+ 加法 (ベクトル，行列も含む)\n- 減法 (ベクトル，行列も含む)\n! 論理否定\n== 相等\n> より大きい\n< より小さい\n>= 以上\n<= 以下\n!= 等しくない\n~= ほぼ等しい\n~< ほぼ小さい\n~> ほぼ大きい\n~>= ほぼ以上である\n~<= ほぼ以下である\n=:= equals after evaluation\n& 論理積\n% 論理和\n!= 等しくない\n~!= ほぼ等しくない\n.. aからbまでの範囲の数のリスト\n++ リストの連結\n-- リストの差\n~~ ２つのリストの共通要素\n:> リストの後方に要素を追加する\n<: リストの前方に要素を追加する\n= 変数への代入\n20", "tags": []}
{"title": "Page 21", "content": ":= 関数の定義\n:=_ 定義の消去\n-> 修飾子の宣言\n, リストと関数の区切り\n; 命令文の区切り\n5 型の判定\n次の情報関数は，式が特定の種類に属するかどうかを調べる。戻り値はbool 値。\nisinteger(<expr>) 整数かどうかを調べる。\nisreal(<expr>) 実数かどうかを調べる。 なお，整数は実数。\niscomplex(<expr>) 複素数かどうかを調べる。 なお，実数は複素数。\niseven(<expr>) 偶数かどうかを調べる。\nisodd(<expr>) 奇数かどうかを調べる。\nislist(<expr>) リストかどうかを調べる。\nismatrix(<expr>) 行列かどうかを調べる。\nisnumbervector(<expr>) すべて数(実数または複素数)からなるベクトルかどうかを調べる。\nisnumbermatrix(<expr>) 成分がすべて数(実数または複素数)の行列かどうかを調べる。\nisstring(<expr>) 文字列かどうかを調べる。\nisgeometric(<expr>) 幾何学要素かどうかを調べる。\nisselected(<expr>) 選択された幾何学要素かどうかを調べる。\nispoint(<expr>) 幾何の点かどうかを調べる。\nisline(<expr>) 幾何の直線かどうかを調べる。\niscircle(<expr>) 幾何の円かどうかを調べる。\nisconic(<expr>) が幾何の円錐曲線かどうかを調べる。\nismass(<expr>) CindyLab の質点かどうかを調べる。\nissun(<expr>) CindyLab の恒星かどうかを調べる。\nisspring(<expr>) CindyLab のバネかどうかを調べる。\nisundefined(<expr>) 未定義要素( ___)を返すかどうかを調べる。\n21", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 22", "content": "6 文字列関数\n6.1 文字列の結合\n<文字列> + <expr>\n＋演算子は，ひとつの文字列に expr をつけ加える。expr が文字列でない場合も文字列に変\n換する。文字列とexprは逆順でもよい。\n【例】 式 結果\n\"Cindy\"+\"Script\" ”CindyScript”\n\"４たす３は \"+(4+3) ”４たす３は 7”\n\"\"+(4+3) ”7”\n6.2 文字列への変換\ntext(<expr>)\nexprを評価し，結果を文字列に変換する。\nformat(<数>,<整数>)\n第１引数の数の小数点以下を，第２引数で指定された桁まで，文字列として整形する。最高\n15 桁まで可能。引数がリストの場合は，各要素に対して整形がなされる。format() は，出\n力としての整形を行なうだけで，整形された値は文字列として扱われるので計算はできない。\n【例】\n式 結果\ntext(12*3) ”36”\ntext([1,2]*[2,-1]) ”0”\nformat(sqrt(2),4) ”1.4142”\nformat(pi,14) ”3.14159265358979”\nformat([sin(30°),cos(30°)],3) [”0.5”,”0.866”]\n6.3 文字列の長さ\nlength(<文字列>)\n文字列の長さを返す。\n22", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 23", "content": "6.4 文字列の抜き出し\nsubstring(<文字列>,<整数1>,<整数2>)\n<文字列> の <整数1> 文字目の次から <整数2> 文字目までの文字列を抜き出す。\n【例】 substring(\"abcdefg\",3,6) は \"def\"を返す。\n6.5 文字列の検索\nindexof(<文字列1>,<文字列2>)\n文字列 <文字列 2> が <文字列 1> の中にあるかどうかを検索し，最初に見つかった位置を\n返す。なければ 0 を返す。\nindexof(<文字列1>,<文字列2>,<整数>)\n文字列,<文字列2>が <文字列1> の <整数> 文字目以降にあるかどうかを検索し，最初に見\nつかった位置を返す。なければ 0 を返す。\n【例】 式 結果\nindexof(\"CindyScript\",\"i\") 2\nindexof(\"CindyScript\",\"y\") 5\nindexof(\"CindyScript\",\"z\") 0\nindexof(\"CindyScript\",\"i\",1) 2\nindexof(\"CindyScript\",\"i\",3) 9\nindexof(\"CindyScript\",\"i\",10) 0\n6.6 文字列の分解\ntokenize(<文字列>,<expr>)\nこの関数は，引数<文字列> の部分文字列のリストを作成する。2 番目の引数 <expr> は，\n文字列か，文字列のリストでなければならない。もし <expr>が文字列であれば， <文字列>\nからこの文字列を検索する。この文字列は <文字列> を分解するときの標識となる。\nもし <expr> が文字列のリストであれば，このリストを再帰的に使って <文字列> の部分\n文字列のリストを生成する。\n【例】 式 結果\ntokenize(\"one:two--three:four\",\":\") [\"one\", \"two--three\", \"four\"]\n23", "tags": ["KeTCindy", "構文"]}
{"title": "Page 24", "content": "tokenize(\"one:two--three:four\",\"-\") [\"one:two\", \"\", \"three:four\"]\ntokenize(\"one:two--three:four\",\"--\") [\"one:two\", \"three:four\"]\ntokenize(\"one:two--three:four\",[\"-\",\":\"]) [[\"one\", \"two\"], [], [\"three\", \"four\"]]\ntokenize(\"one:two--three:four\",[\"--\",\":\"]) [[\"one\", \"two\"], [\"three\", \"four\"]]\n6.7 文字列の置換\nreplace(<文字列1>,<文字列2>,<文字列3>)\n<文字列 1> の中の <文字列 2> をすべて <文字列 3> で置き換える。L-System の構築に便\n利。replace(<文字列>,<list>)\n<list> は <文字列> に対して，置き換えをする文字列の組合せからなるリスト。リストの\n置き換え規則は１つでもよく，変数に代入して使うこともできる。\n【例 】 式 結果\nreplace(\"one:two--three:four\",\"o\",\"XXX\") \"XXXne:twXXX--three:fXXXur\"\nreplace(\"F\",\"F\",\"F+F\") \"F+F\"\nreplace(\"F+F\",\"F\",\"F+F\") \"F+F+F+F\"\nreplace(\"XYX\",[[\"X\",\"one\"],[\"Y\",\"two\"]]) \"onetwoone\"\ns=\"ABC\"; replace(s,[[\"A\",\"X\"]]) \"XBC\"\ns=\"ABC\"; t= [[\"A\",\"X\"], [\"B\",\"Y\"]];replace(s,t) \"XYC\"\n6.8 文字列の解析\nparse(<文字列>)\n文字列の内容を解析して，その結果を評価する。この関数は，テキストフィールドから入\n力された文字列を処理するのに特に有効。\nguess(<数>)\n浮動小数点で表された数を，高い精度でその浮動小数点数を生み出す数式に変えようと\nする。\n【例 】 式 結果\nparse(\"3+7\") 10\ntext=\"sin(x)+cos(x)\";f(x):=parse(text); f(x)=sin(x)+cos(x) と同じ\nparse(Text0.text); Text0 に入力された文字を解析\n24", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 25", "content": "guess(8.125) \"65/8\"\nguess(0.774596669241483) \"sqrt(3/5)\"\n6.9 文字列の比較と並べ替え\n数と同様，文字列も順序付けができる。したがって，演算子 >, <, >=, <=, ==, !=を\n使って比較ができる。これらの演算子についてはブール関数を参照のこと。\n文字の順序としては，辞書順を使う。たとえば，次のようになる。\n\"a\"<\"abd\"<\"abe\"<\"b\"<\"blue\"<\"blunt\"<\"xxx\"\nリストの並べ替え: sort(<list>), sort(<list>,<expr>), sort(<list>,<var>,<expr>)\n文字列を含むリストを並べ替える。 文字列の順序は常に辞書順。文字列の長さで並べ替え\nるように，ユーザーが順序を定義することもできる。\n【例 】 式 結果\nsort([\"one\",\"two\",\"three\",\"four\"]) [\"four\",\"one\",\"three\",\"two\"]\nsort([\"one\",\"two\",\"three\",\"four\"],length(#)) [\"one\",\"two\",\"four\",\"three\"]\n指標関数: <文字列>_<整数>\nリストの項目にアクセスする挿入演算子 は，文字列内の指定した位置にある文字にアク\nセスするのにも使える。この演算子で，文字を返したり，文字をセットしたりすることがで\nきる。\n【例 】 式 結果\n\"CindyScript\"_5 ”y”\n\"CindyScript\"_12\na=\"CindyScript\";a_5=\"erella\"; ”CinderellaScript”\n7 リスト\n7.1 リストの作成とアクセス\n整数列の作成：<整数1>..<整数2>\n<整数1> から <整数2>までの連続する整数のリストを作る。<整数1> が<整数2>より大\nきい場合は空のリストを返す。\n【例 】 式 結果\n25", "tags": ["KeTCindy", "構文"]}
{"title": "Page 26", "content": "4..9 [4,5,6,7,8,9]\n-2..2 [-2,-1,0,1,2]\nリストの要素へのアクセス\n演算子では <list>_<整数>\n関数では take(<list>,<整数>)\n第２引数のインデックスは 1 から始まる整数。インデックスが 0 か，リストの要素数より\n大きいときは，___が返され，「Index out of range」という Warning メッセージが出る。\nインデックスは計算式で与えることもできる。また，入れ子にしたリストの要素にもアク\nセスできる。インデックスを負の整数にすると，リストの末尾から逆順にアクセスする。\n整数のリストを使って，まとめてアクセスすることもできる。結果はリストで返される。\n【例 】 式 結果\n[2 ,5 ,7 ,3]_3 7\ntake([2 ,5 ,7 ,3],2) 5\n[2 ,5 ,7 ,3]_5 ___\n[[2,[4,5]],1]_1 [2,[4,5]]\n[[2,[4,5]],1]_(7-5) 1\n[[2,[4,5]],1]_1_2 [4,5]\n[[2,[4,5]],1]_1_2_2 5\n[[2,[4,5]],1]_1_2_2_2 ___\n[2 ,5 ,7 ,3]_(-1) 7\ntake([2 ,5 ,7 ,3],(-3) 5\n[[2,6] ,5 ,7 ,3]_(-4)_(-1) 6\n[2 ,5 ,7 ,3]_[2,3] [5,7]\n[2 ,5 ,7 ,3]_[-1,1,1] [3,2,2]\nリストが変数に代入されると，個々の要素は 演算子によってアクセスしたのち，それを\n設定することができる。たとえば，次のスクリプトの結果， a は [[2,[\"B\",5]],\"A\"] に\nなる。\na=[[2,[4,5]],1];\na_2=\"A\";\na_1_2_1=\"B\";\nリストの長さ: length(<list>)\n【例 】 式 結果\n26", "tags": []}
{"title": "Page 27", "content": "length([2 ,5 ,7 ,3]) 4\nlength([2 ,[5, 4, 5] ,7 ,3]_2) 3\nlength(1..1000) 1000\n内容のテスト: contains(<list>,<expr>)\n<list> の中に<expr>があるかどうかで，true または false を返す。\nUnicode の数学記号 ∈ ，∉ を使うこともできる。\nprintln(4 ∈ [1,3,4,5]) の結果はtrue\nprintln(4 ∉ [1,3,4,5]) の結果はfalse\n7.2 リストの操作\nリストの連結\n演算子では <リスト1>++<リスト2> または <リスト1> ∪ <リスト2>\n∪ はUnicode の数学記号。\n関数では concat(<リスト1>,<リスト2>)\n【例 】 式 結果\nconcat([\"a\", \"b\"], [\"c\", \"d\"]) [\"a\", \"b\", \"c\", \"d\"]\n[\"a\", \"b\"] ++ [\"c\", \"d\"] [\"a\", \"b\", \"c\", \"d\"]\n[\"a\", \"b\"] ∪ [\"c\", \"d\"] [\"a\", \"b\", \"c\", \"d\"]\nリストからの要素の削除\n演算子では <リスト1> -- <リスト2>\n関数では remove(<リスト1>,<リスト2>)\n【例 】 式 結果\nremove([1,3,4,5,1,5,6], [1,3,7]) [4,5,5,7]\n[1,3,4,5,1,5,6]--[1,3,7] [4,5,5,7]\nリストの共通部分\n演算子では <リスト1>~~<リスト2> または <リスト1> ∩ <リスト2>\n∩ はUnicode の数学記号。\n関数では common(<リスト1>,<リスト2>)\n【例 】 式 結果\ncommon([1,3,4,5,1,5,6], [1,3,7]) [1,3]\n27", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 28", "content": "[1,3,4,5,1,5,6]~~[1,3,7] [1,3]\n[1,3,4,5,1,5,6] ∩ [1,3,7] [1,3]\n要素の後方追加\n演算子では <list> :> <expr>\n関数では append(<list>,<expr>)\n要素の前方付加\n演算子では <expr> <: <list>\n関数では prepend(<expr>,<list>)\n【例 】 式 結果\n[\"a\", \"b\", \"c\"]:>\"d\" [\"a\", \"b\", \"c\",\"d\"]\nappend([\"a\", \"b\", \"c\"], \"d\") [\"a\", \"b\", \"c\",\"d\"]\n\"d\"<:[\"a\", \"b\", \"c\"] [\"d\", \"a\", \"b\", \"c\"]\nprepend(\"d\",[\"a\", \"b\", \"c\"]) [\"d\", \"a\", \"b\", \"c\"]\n7.3 リストの要素の走査\n全要素走査\nforall(<list>,<expr>) 実行変数は #\nforall(<list>,<var>,<expr>) 実行変数を ver にする\n第１引数の <list> を走査し，それぞれの要素を <expr> で評価する。\n【例】\na=[\"this\",\"is\",\"a\",\"list\"]; のとき，forall(a,println(#)) とすれば，repeat()\nで繰り返しをしなくてもリストのすべての要素がコンソールに表示される。\n式の適用\napply(<list>,<expr>) 実行変数は #\napply(<list>,<var>,<expr>) 実行変数を ver にする\n操作 <expr> をリストのすべての要素に適用し，その結果からなるリストを作成する。\n【例 】 式 結果\napply([1, 2, 3, 4, 5],#*2) [2, 4, 6, 8, 10]\n28", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 29", "content": "apply([1, 2, 3, 4, 5],t,t+5) [6, 7, 8, 9, 10]\napply(1..5, [#,#*2]) [[1, 2], [2, 4], [3, 6], [4, 8], [5, 10]]\nリストの要素の選択\nselect(<list>,<boolexpr>) 実行変数は #\nselect(<list>,<ver><boolexpr>) 実行変数を ver にする\nこの関数は，条件 <boolexpr>を満たすすべての要素を選び出す。この条件は <bool> 値\nをとる。\n【例 】 式 結果\nselect(1..10, isodd(#)) [1, 3, 5, 7, 9]\nselect(0..10, #+# == #^2) [0,2]\n【例】 次のスクリプトはxの約数のリストを得る関数divisorsを定義し，100以下の素数\nのリストを表示する。\ndivisors(x):=select(1..x,mod(x,#)==0);\nprimes(n):=select(1..n,length(divisors(#))==2);\nprintln(primes(100))\n7.4 要素の組み合わせ\nペアを作る: pairs(<list>)\nリストに含まれるすべての要素から２つずつを組み合わせたペアの部分リストを要素とす\nるリストを作る。\nチェーンを作る: consecutive(<list>)\n引数 <list> の連続する２つずつの要素のペアからなるリストを作る。\n輪を作る: cycle(<list>)\nチェーンに加え，最後の要素と最初の要素もつなげる。\n３つの組合せを作る: triples(<list>)\nリストに含まれるすべての要素から 3 つずつを組み合わせた部分リストを要素とするリス\nトを作る。\n２つのリストの直積を作る: directproduct(<リスト1>,<リスト2>)\n29", "tags": []}
{"title": "Page 30", "content": "<リスト 1> の要素を第１成分に， <リスト 2> の要素を第２成分とした，すべてのペアか\nらなるリストを作る。\n【例】 式 結果\npairs([1, 2, 3, 4]) [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\nconsecutive([1, 2, 3, 4, 5]) [[1, 2], [2, 3], [3, 4], [4, 5]]\ncycle([1, 2, 3, 4, 5]) [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]]\ntriples([1, 2, 3, 4]) [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3,4 ]]\ndirectproduct([1,2,3],[\"A\",\"B\"]) [[1,\"A\"],[1,\"B\"],[2,\"A\"],[2,\"B\"],[3,\"A\"],[3,\"B\"]]\n入れ子リストの平坦化: flatten(<list>)\nリストが入れ子になっているときに，第２の入れ子を解除して平坦化したリストを返す。\n修飾子を使うと，再帰的な操作が可能。また，平坦化のレベルを制御できる。\n修飾子 levels は，”all” ですべてを平坦化する。 整数を与えるとその回数だけ再帰的に\n平坦化する。 flatten(...,levels->1) は修飾子を付けない場合と同じ。\n【例 】次のリストを用意する。\nlist=[[1,2],[3,[4,5],[6,[7,8]]],6];\nこのリストに対して平坦化を行なった結果は次の通り。\n式 結果\nflatten(list) [1,2,3,[4,5],[6,[7,8]],6]\nflatten(list,levels->0) [[1,2],[3,[4,5],[6,[7,8]]],6]\nflatten(list,levels->1) [1,2,3,[4,5],[6,[7,8]],6]\nflatten(list,levels->2) [1,2,3,4,5,6,[7,8],6]\nflatten(list,levels->3) [1,2,3,4,5,6,7,8,6]\nflatten(list,levels->\"all\") [1,2,3,4,5,6,7,8,6]\n7.5 要素の整列\n逆順にする: reverse(<list>)\n<list> の要素を逆順にする。\n並べ替え: sort(<list>)\n次の順序で要素を並べる。\nブール値 ¡数 ¡ 文字列 ¡ リスト\n30", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 31", "content": "並べ替え: sort(<list>, <expr>) ：実行変数は #\n並べ替え: sort(<list>, <ver>,<expr>) ：実行変数を ver に指定する\nリストの各要素を <expr> の内容によって評価し，その結果に従って並べ替える。\nリストの要素を単一化した集合(set) を作る: set(<list>)\nリストのすべての要素を分類し，同一のものを取り除いて並べ替える。すなわち，リスト\nをオブジェクトの集合とみなして唯一の表現にする。\n【例 】 式 結果\nreverse([1, 2, 3, 4]) [4, 3, 2, 1]\nsort([4.5, 1.3, 6.7, 0.2]) [0.2, 1.3, 4.5, 6.7]\nsort([\"one\",\"two\",\"three\",\"four\",\"five\"]) [\"five\",\"four\",\"one\",\"three\",\"two\"]\nsort([-4.5, 1.3, -6.7, 0.2], abs(#)) [0.2, 1.3, -4.5, -6.7]\nsort([\"one\",\"two\",\"three\",\"four\"],length(#)) [\"one\",\"two\",\"four\",\"three\"]\nset([3, 5, 2, 4, 3, 5, 7]) [2, 3, 4, 5, 7]\nset([3, 5, 2]++[4, 5, 2]) [2, 3, 4, 5]\n7.6 要素の総和・積\n総和関数\nsum(<list>) 要素の総和を求める。\nsum(<list>,<expr>) 各要素に <expr> を実行した結果の総和を求める。\n実行変数は#\nsum(<list>,<var>,<expr>) sum(<list>,<expr>)で実行変数を<var>とする。\n積関数\nproduct(<list>) 要素をすべて掛け合わせる。要素は数であることが前提。\nproduct(<list>,<expr>) 各要素に <expr> を実行した結果をすべて掛け合わせる。\n実行変数は#\nproduct(<list>,<var>,<expr>) product(<list>,<expr>)で実行変数を<var>とする。\n【例 】 式 結果\nsum(1..10) 55\nsum([4,6,2,6]) 18\nsum([[3, 5], [2, 5], [5, 6]]) [10, 16]\nsum([\"h\",\"e\",\"ll\",\"o\"] ”hello”\nsum(1..100,#^2) 338350\n31", "tags": []}
{"title": "Page 32", "content": "product(1..5) 120\n応用例\naverage(x) := sum(x)/length(x) で平均を計算する関数が定義できる。xはリスト。\nfac(x) := product(1..x) で階乗を計算する関数が定義できる。xは自然数。\n7.7 最大と最小\n最大値関数\nmax(<list>) 要素の最大値を求める。\nmax(<list>,<expr>) <expr> をリストのすべての要素に実行した結果の最大値\n実行変数は#\nmax(<list>,<var>,<expr>) max(<list>,<expr>)で実行変数<var>にする。\n最小値関数\nmin(<list>) 要素の最小値を求める。\nmin(<list>,<expr>) <expr> をリストのすべての要素に実行した結果の最小値\n実行変数は#\nmin(<list>,<var>,<expr>) min(<list>,<expr>)で実行変数を<var>にする。\n8 ベクトルと行列\nベクトルや行列はリストで表現される。幾何学要素の座標もリストで表現される。した\nがって，これらの間での計算は，リストとしての計算で行われる。\n8.1 ベクトルと行列の定義\n数のリストは”数ベクトル” と呼ばれる。あるリストが数ベクトルかどうかは\nisnumbervector 関数によって確かめられる。\nリストの要素がまたリストであり，しかもそれらがすべて同じ長さであれば，そのよう\nなリストは 行列と呼ばれる。あるリストが行列であるかどうかは， ismatrix 関数によって\n確かめられる。さらに，行列の個々の要素がすべて数であれば，この行列は数行列と呼ばれ\nる。ある行列が数行列かどうかは isnumbermatrix関数によって確かめられる。行列の要素\nは同じ長さのベクトルとも考えられ，このようなベクトルは行列の行ベクトルである。した\nがって，行列が n 個の，長さ mの行ベクトルからなるならば， n × m 行列である。\n32", "tags": []}
{"title": "Page 33", "content": "8.2 和と積\nリストが同じ形を持つときは，加法と減法ができる。これは，リストが同じ長さでいくつ\nかの要素がやはり同じようなリストであれば，和・差に対応する要素は同じ形になるという\nことである。\nリストのかけ算は，数学的に意味があれば許される。次の表は，かけ算が許される場合に\nついてまとめたものである。\n要素１ 要素２ 結果 意味\n数 数 数 通常のかけ算\n数 長さ r のベクトル 長さ r のベクトル ベクトルの実数倍\n長さ r のベクトル 数 長さ r のベクトル ベクトルの実数倍\n長さ r のベクトル 長さ r のベクトル 数 ベクトルの内積\nn × r 行列 長さ r のベクトル 長さ n のベクトル 行列×列ベクトル\n長さ n のベクトル n × r 行列 長さ r のベクトル 行ベクトル × 行列\nn × r 行列 r× m 行列 n × m 行列 行列の積\n8.3 ベクトルと行列の演算\n行列の次数 matrixrowcolum(<matrix>)\n行と列の数を，2つの数の要素からなるリストとして返す。\n転置行列 transpose(<matrix>)\n転置行列を返す。\n行列の行抽出 row(<matrix>,<整数>)\n<整数> 番目の行をベクトルとして返す。\n行列の列抽出 column(<matrix>,<整数>)\n<整数> 番目の列をベクトルとして返す。\n小行列 submatrix(<matrix>,<整数1>,<整数2>)\n第<整数1> 列と 第<整数2> 行を削除した小行列を返す。\nベクトルから行列への変換 rowmatrix(<vector>)\nベクトルを１行とする行列を返す。\nベクトルから行列への変換 columnmatrix(<vector>)\nベクトルを１列とする行列を返す。\n零ベクトルの生成 zerovector(<整数>)\n長さが <整数> の零ベクトルを作る。\n零行列の生成 zeromatrix(<整数1>,<整数2>)\n33", "tags": []}
{"title": "Page 34", "content": "<整数1> 行 <整数2> 列の零行列を作る。\n【例 】 式 結果\nmatrixrowcolumn([[1,2],[3,2],[1,3],[5,4]]) [4,2]\ntranspose([[1,2],[3,2],[1,3],[5,4]]) [[1,3,1,5],[2,2,3,4]]\ntranspose([[1],[3],[1],[5]]) [[1,3,1,5]]\ntranspose([[1,3,1,5]]) [[1],[3],[1],[5]]\nrow([[1,2],[3,2],[1,3],[5,4]],2) [3,2]\ncolumn([[1,2],[3,2],[1,3],[5,4]],2) [2,2,3,4]\nsubmatrix([[1,2,4],[3,2,3],[1,3,6],[5,4,7]],2,3) [[1,4],[3,3],[5,7]]\nrowmatrix([1,2,3,4]) [[1,2,3,4]]\ncolumnmatrix([1,2,3,4]) [[1],[2],[3],[4]]\n8.4 線形代数の演算\n正方行列の行列式 det(<matrix>)\nベクトルの大きさ |vec|\n２つのベクトルの距離 |<ベクトル1>,<ベクトル2>|\nベクトルの距離 dist(<ベクトル1>,<ベクトル2>)\nエルミート内積 hermiteanproduct(<ベクトル1>,<ベクトル2>)\n正方行列の逆行列 inverse(<matrix>)\n余因子行列 adj(<matrix>)\n固有値 eigenvalues(<matrix>)\n固有ベクトル eigenvectors(<matrix>)\n１次方程式の解 linearsolve(<matrix>,<vector>)\nまたは linearsolve(<matrix>,<matrix>)\nエルミート内積は内積 <ベクトル 1>*<ベクトル 2>と似ているが，２番目のベクトルは掛\nけられる前に，共役複素数にされる。特に， hermiteanproduct(a,a) は常に非負。\n次のコードは，内積とエルミート内積の違いを示す。\na=[2+3*i,1-i];\nprintln(hermiteanproduct(a,a));\nprintln(a*a);\n結果は次の通り。\n34", "tags": []}
{"title": "Page 35", "content": "15\n-5 + i*10\ninverse(<matrix>)は，逆行列を持たない場合は，未定義のオブジェクトを返す。\neigenvalues(<matrix>) の結果は値のリストとして返される。n 次の正方行列からは n\n個の固有値を返す。実数の行列であっても，固有値は複素数の範囲で求めるのが普通。\n【例】\nm1=[[1,1,0],[0,1,0],[0,0,.5]];\nprintln(eigenvalues(m1));\nm2=[[1,1,0],[-1,1,0],[0,0,.5]];\nprintln(eigenvalues(m2));\n結果は次の通り\n[1,1,0.5]\n[1 + i*1,1 - i*1,0.5]\neigenvectors(<matrix>)は，正方行列の固有ベクトルの基底を計算する。結果としてベ\nクトルのリストを返す。 このリストの順序は， eigenvalues 関数における固有ベクトルの\n順序と同じ。もし，行列が対角化可能でない場合は，この結果は意味がない。\nlinearsolve(A,b) は，方程式 Ax=b の解 x を計算する。 行列 A は正方行列で逆行列を\n持たなければならない。 b は n 次のベクトルか， n 行の行列。 A が逆行列を持たないか，\n次数が合わない場合は未定義値を返す。\n【例】\nm=[[1,1,0],[0,1,0],[0,1,1]];\nx=linearsolve(m,[2,3,4]);\nprintln(x);\nprintln(m*x);\n結果は次の通り。\n[-1,3,1]\n[2,3,4]\n8.5 3 次元の凸多面体を作る\nconvexhull3d(<ベクトルのリスト>)\nこの関数は，３次元ベクトルのリストを与えると凸多面体を作る。戻り値は２つのリスト\n35", "tags": []}
{"title": "Page 36", "content": "からなるペア。第１の要素は凸多面体の頂点リスト，第２の要素は面リスト。それぞれの面\nは第１要素の頂点によって与えられる。\n【例】 次の点のリストは，立方体の頂点と中心を示すリストである。\n[[1,1,1],[1,1,-1],[1,-1,1],[1,-1,-1],[-1,1,1]\n,[-1,1,-1],[-1,-1,1],[-1,-1,-1],[0,0,0]]\nこのリストに convexhull3d 関数を適用すると，次の出力を得る。\n[ [[1,1,1],[1,1,-1],[1,-1,1],[1,-1,-1],[-1,1,1],[-1,1,-1],[-1,-1,1],[-1,-1,-1]],\n[[6,5,1,2],[3,1,5,7],[3,4,2,1],[8,7,5,6],[8,6,2,4],[8,4,3,7]] ]\n9 幾何学要素へのアクセス\n9.1 要素にその名前でアクセスする\nすべての幾何学要素には個々の名前 (識別子) がある。CindyScript において，幾何学要素\nはあらかじめ定義された変数として扱われる。それぞれのパラメータは . (ドット) 演算子に\nよって読み書きできる。例えば，次のコードでは，点 Aの大きさを20に設定する。\nA.size=20\nもし，点や線（の名前）が算術関数に含まれるときは，自動的にその位置を表すベクトル\nに変換される。 点は 2 次元座標で表される [x,y] ベクトルに変換される。直線は，同様に\n同次座標で表される[x,y,z] ベクトルに変換される。しかし，座標を設定する場合は，ドッ\nト演算子を用いて明示的に設定されなければならない。幾何学要素が算術関数で使われない\nのであれば，依然として幾何学的要素として扱われます。この概念が微妙なので，少し例を\n挙げてはっきりさせておこう。\nA と B , C がCinderella の点であると仮定する。次のコードは A を線分 BC の中点に設\n定する。\nA.xy=(B+C)/2\nこの2点B,Cは算術関数に含まれるので，[x,y] ベクトルとして処理される。しかし，点\nA の位置は .xy パラメータによって明示的に設定されなければならない。\n次のコードでは３つの点の色をすべて緑色にする。\npts=[A,B,C];\n36", "tags": ["KeTCindy", "アニメーション", "上級者向け", "構文"]}
{"title": "Page 37", "content": "forall(pts, p, p.color=[0,1,0]);\nこのコードでは，点の名前はリスト pts へのハンドルとしてそのまま扱われる。 forall\n関数で走査されたハンドルは一度変数 p に代入され，そこから色のパラメータにアクセスさ\nれる。\n9.2 幾何学要素のリスト\nCinderella で作図した幾何学要素をリストアップするような場合，次のような要素のリス\nトを返す関数が使える。\nallmasses allsprings\nすべての点のリスト allpoints()\nすべての直線のリスト alllines()\nすべての線分のリスト allsegments()\nすべての円のリスト allcircles()\nすべての円錐曲線のリスト allconics()\nすべての質点のリスト allmasses()\nすべてのバネのリスト allsprings()\n他の要素に付随する要素のリスト allsegments(<幾何要素>)\n【例】 次のスクリプトは，y 軸 の左右で点の色を変える。\npts=allpoints();\nforall(pts,p,\nif(p.x<0, p.color=[1,1,0], p.color=[0,1,0]);\n);\n9.3 幾何学要素のパラメータ\nドット演算子によってアクセスできるパラメータ。以下の表において，パラメータの型は\n次の通り。\nreal：実数\nint：整数\nbool：true または false\nstring：文字列\n2-vector： 2次元ベクトル\n37", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 38", "content": "3-vector： 3次元ベクトル\n3x3-matrix： 3行3列行列\nすべての幾何学要素についてのパラメータ\n名前 読み出し 書き込み 型 目的\ncolor 可 可 3-vector オブジェクトの色 (赤, 緑, 青)\ncolorhsb 可 可 3-vector オブジェクトの色 (色相, 彩度, 輝度)\nisshowing 可 可 bool オブジェクトの表示/非表示\nvisible 可 可 bool オブジェクトの表示/非表示\nalpha 可 可 real オブジェクトの透明度\nlabelled 可 可 bool ラベルの表示/非表示\nname 可 不可 string オブジェクトの名称\ncaption 可 可 string オブジェクトのラベル\ntrace 可 可 bool 軌跡(足跡)の表示/非表示\ntracelength 可 可 int 足跡の長さ\nselected 可 可 bool オブジェクトが選択されているかどうか\nパラメータの書き込みは，時には自由要素に限られることがある。該当する項で ”free” の\n語を使ってそれを表す。\nそれぞれの幾何学要素は個別の識別名を持つ。識別名は.name パラメータによってアクセ\nスできる。たとえば， A.name は文字列 ”A” を返す。その名前は，画面上に表示される ラ\nベル (caption) とは異なる場合がある。ラベルが設定されていなければ A.caption は空の\n文字列。また，ラベルはインスペクタで変更することができる。\nisshowing と visible の違いは，isshowing ではオブジェクトに依存するすべての要素に引\nき継がれるのに対し，visible では従属するオブジェクトからは引き継がれない点。\n直線のパラメータ\n名前 読み出し 書き込み 型 目的\nhomog 可 free 3-vector 直線の同次座標\nangle 可 free real 直線の角度\nslope 可 free real 直線の傾き\nsize 可 可 int 直線の幅 (0 から 10))\n点のパラメータ\n38", "tags": []}
{"title": "Page 39", "content": "名前 読み出し 書き込み 型 目的\nx 可 free real 点のx座標\ny 可 free real 点のy座標\nxy 可 free 2-vector 点のxy 座標\ncoord 可 free 2-vector 点のxy 座標\nhomog 可 free 3-vector 点の同次座標\nangle 可 free real 円周上の点の角度(円周上の点にのみ適用)\nsize 可 可 int 点の大きさ (0 から 40)\nimagerot 可 可 real 点が画像で置き換えられている場合，回転角度\n円と円錐曲線(２次曲線)\n名前 読み出し 書き込み 型 目的\ncenter 可 free real 円の中心\nradius 可 free real 円の半径\nmatrix 可 不可 real 円または二次曲線を記述する行列\nsize 可 可 int 線の幅 (0 から 10)\nテキストのパラメータ\n名前 読み出し 書き込み 型 目的\ntext 可 可 string 文字列の内容\npressed 可 可 boolean 文字列の状態。ボタンならばtrue\nxy 可 可 2-vector 文字列の位置\nアニメーションのパラメータ\n名前 読み出し 書き込み 型 目的\nrun 可 可 bool アニメーションの実行/非実行\nspeed 可 可 real アニメーションの相対的な速さ\n変換のパラメータ\n名前 読み出し 書き込み 型 目的\nmatrix 可 不可 3x3 matrix 変換の同次行列\ninverse 可 不可 3x3 matrix 逆変換の同次行列\n39", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 40", "content": "CindyLab オブジェクトのパラメータ\nすべての CindyLab 要素のパラメータ\n名前 読み出し 書き込み 型 目的\nsimulate 可 可 bool オブジェクトがシミュレーションに加わるかどうか\n質点のパラメータ\n名前 読み出し 書き込み 型 目的\nmass 可 可 real オブジェクトの質量\ncharge 可 可 int オブジェクトの電荷\nfriction 可 可 real オブジェクトの摩擦\nradius 可 可 real 質点を球とみなすときの半径\nposx 可 可 real 質点のx座標\nposy 可 可 real 質点のy座標\npos 可 可 2-vector 質点の位置ベクトル\nvx 可 可 real 速度のx成分\nvy 可 可 real 速度のy成分\nv 可 可 2-vector 速度ベクトル\nfx 可 不可 real 粒子にかかる力のx成分\nfy 可 不可 real 粒子にかかる力のy成分\nf 可 不可 2-vector 粒子にかかる力のベクトル\nkinetic 可 不可 real 粒子の運動エネルギー\nke 可 不可 real 粒子の運動エネルギー\n質点間に力を定義したい場合がある。そのときは Integeration Tick スロットにコードを\n書く。質点の位置が内部的に通常の幾何学要素と異なるタイムスケールで動くときは pos,\nposx および posy によってその位置にアクセスする必要がある。\nバネとクーロン力のパラメータ\n40", "tags": []}
{"title": "Page 41", "content": "名前 読み出し 書き込み 型 目的\nl 可 不可 real バネの現在長\nlrest 可 不可 real バネの自然長\nldiff 可 不可 real 現在の長さと自然長との差\nstrength 可 可 real バネ定数\nf 可 不可 real バネにかかる力\namplitude 可 可 real 振幅\nspeed 可 可 real 運動の速さ\nphase 可 可 real 運動の段階（位相）(0.0 〜 1.0)\npotential 可 不可 real バネのポテンシャルエネルギー\npe 可 不可 real バネのポテンシャルエネルギー\n速度のパラメータ\n名前 読み出し 書き込み 型 目的\nfactor 可 可 real 図で表されている速度と実際の速度との掛け率\n重力のパラメータ\n名前 読み出し 書き込み 型 目的\nstrength 可 可 real 重力場の強さ\npotential 可 不可 real 重力場におけるすべての質点のポテンシャルエネルギー\npe 可 不可 real 重力場におけるすべての質点のポテンシャルエネルギー\n恒星のパラメータ\n名前 読み出し 書き込み 型 目的\nmass 可 可 real 恒星の質量\npotential 可 不可 real 恒星の場におけるすべての質点のポテンシャルエネルギー\npe 可 不可 real 恒星の場におけるすべての質点のポテンシャルエネルギー\n電磁場のパラメータ\n名前 読み出し 書き込み 型 目的\nstrength 可 可 real 電磁場の強さ\nfriction 可 可 real 磁力のかかるフィールドでの摩擦\n41", "tags": []}
{"title": "Page 42", "content": "床と反射壁のパラメータ\n名前 読み出し 書き込み 型 目的\nxdamp 可 可 real x方向の吸収率\nydamp 可 可 real y方向の吸収率\n環境のパラメータ\n環境は内蔵関数の simulation() によって次の項目がアクセスできる。\n名前 読み出し 書き込み 型 目的\ngravity 可 可 real 全体にかかる重力\nfriction 可 可 real 全体にかかる摩擦力\nkinetic 可 不可 real 全体的な運動エネルギー\nke 可 不可 real 全体的な運動エネルギー\notential 可 不可 real 全体的なポテンシャルエネルギー\npe 可 不可 real 全体的なポテンシャルエネルギー\n9.4 インスペクタの要素\ninspect 属性のリスト: inspect(<幾何要素>)\n【例】 点Aが描かれているとき，inspect(A) とすれば，次のようなリストが返される。\n[name,definition,color,visibility,drawtrace,tracelength,traceskip,tracedim,render,isvisible,\ntext.fontfamily,pinning,incidences,labeled,textsize,textbold,textitalics,ptsize,pointborder,\nprintname,point.image,point.image.rotation,freept.pos]\n属性の読み出し: inspect(<幾何要素>,<文字列1>)\n【例】 inspect(A,\"text.fontfamily\") とすれば\nSansSerif\nが返される。\n属性の設定: inspect(<幾何要素>,<文字列1>,<文字列2>)\n変更可能な属性の値を設定する。\n【例】 Aのフォント Serif に設定する。\ninspect(A,\"text.fontfamily\",\"Serif\")\nユーザー属性の設定: attribute(<幾何要素>,<文字列1>,<文字列2>)\n<幾何要素> の属性を <文字列1> と <文字列2>で設定する。\n42", "tags": ["インストール", "中級者向け", "初心者向け", "図形描画", "環境構築", "関数"]}
{"title": "Page 43", "content": "ユーザー属性の取得: attribute(<幾何要素>,<文字列>)\n<文字列> で定義される幾何要素 <幾何要素> のユーザー属性を取得する。\nこの２つのユーザー属性に関する関数はVisage で主に使用する。\n9.5 要素の作成と消去\ncreatepoint 自由点を作る: createpoint(<文字列>,<位置>)\nこの関数は <文字列> を識別名とする点を <位置> に作る。すでに同じ名前の点がある場\n合には新しく作らず，単に指定した位置に移動する。\ncreate 幾何要素を作る: create(<リスト1>,<文字列>,<リスト2>)\nこの関数は，任意の幾何要素を作る。アルゴリズムがいくつか微妙な点を引き起こすので，\n特別な用途に限られる。\n第１引数の <リスト 1>は生成する要素の名前のリスト。第２引数の <文字列> は幾何学的\nなアルゴリズムの内部的な名前。第３引数の <リスト2> は，定義のために必要なパラメータ\nのリスト。\n【例】\ncreate([\"A\"],\"FreePoint\",[[1,1,1]]);\ncreate([\"B\"],\"FreePoint\",[[4,3,1]]);\ncreate([\"a\"],\"Join\",[A,B]);\ncreate([\"X\"],\"CircleMP\",[A,B]);\ncreate([\"Y\"],\"CircleMP\",[B,A]);\ncreate([\"P\",\"Q\"],\"IntersectionCircleCircle\",[X,Y]);\ncreate([\"b\"],\"Join\",[P,Q]);\ncreate([\"M\"],\"Meet\",[a,b]);\nこの一連のコードで，次の図のように幾何要素を作る。６番目の命令で円の交点を作ると\nき，２つの点の名前のリストがなければならない。\n43", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 44", "content": "removeelement 幾何要素の消去: removeelement(<幾何要素>)\n幾何要素を，それに関連するものも含めて消去する。\ninputs 幾何要素を構成する要素: inputs(<幾何要素>)\n幾何要素 を定義するために必要な要素のリストを返す。\nalgorithm 幾何要素の作図手順: algorithm(<幾何要素>)\nこの関数は<幾何要素>の作図手順を文字列で返す。\n【例】次のスクリプトはすべての要素に対してその作図手順を示す。\nels=allelements();\ndata=apply(els,([[#.name],algorithm(#),inputs(#)]));\nたとえば，垂直二等分線の作図手順が次のように出力される。\n[[[\"A\"],\"FreePoint\",[[4,4,-4]]],\n[[\"B\"],\"FreePoint\",[[4,-3,1]]],\n[[\"a\"],\"Join\",[A,B]],\n[[\"C\"],\"Mid\",[A,B]],\n[[\"b\"],\"Orthogonal\",[a,C]]\n]\n9.6 幾何要素の操作\n自由要素を動かす: moveto(<幾何要素>,<位置>)\nこの関数では<幾何要素>に幾何の自由要素を，<位置>にこれを動かしたい位置を記述する。\nこの関数によって自由要素の動きをシミュレートする。\n<幾何要素>が自由点であれば，<位置>は2つの数のリスト [x,y]（ユークリッド座標）か\n44", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 45", "content": "３つの数のリスト [x,y,z] （同次座標）。\n<幾何要素>が自由直線であれば，<位置>は３つの数のリスト[a,b,c] でなければならず，\n直線 ax+by +c = 0 に設定される。\n【例】 次のコードは，幾何の要素をどのように動かせるかをまとめたものである。要素の\nデータに直接アクセスして動かすものも含む。\n// A は自由点\nmoveto(A,[1,4]); //点Aをユークリッド座標(1,4)に置く\nA.xy=[1,4]; //点Aをユークリッド座標(1,4)に置く\nA.x=5; // A のx座標を 5 にする。y座標は変化しない\nA.y=3; //A のy座標を 3 にする。x座標は変化しない\nmoveto(A,[2,3,2]); // A を同次座標 [2,3,2] に置く\nA.homog=[2,3,2]; // A を同次座標 [2,3,2] に置く\n// a は自由曲線\nmoveto(a,[2,3,4]); // a を同次座標 [2,3,4]に置く\na.moveto=[2,3,4]; // a を同次座標 [2,3,4]に置く\n// b は傾きつき直線\na.slope=1; // 傾きを 1 にする\n// C は半径が自由な円\nC.radius=1; // 半径を 1 にする\n動いた要素: mover()\nこの関数は，マウスによって今動かされた要素が何であるか(そのハンドル) を返す。\nマウスのあるところの要素: elementsatmouse()\nこの関数は，現在マウスカーソルの近くにある要素のリストを返す。\n【例】 次のスクリプトを Mouse Move スロットに置いて実行すると，マウスカーソルの近く\nにある要素が消える。マウスカーソルが遠ざかればまた現れる。\napply(allelements(),#.alpha=1);\napply(elementsatmouse(),#.alpha=0);\nrepaint();\nオブジェクトへのインシデント:incidences(<幾何要素>)\n45", "tags": []}
{"title": "Page 46", "content": "この関数は，幾何要素 とインシデントなすべての要素のリストを返す。\n軌跡上の点: locusdata(<軌跡>)\nこの関数は，<軌跡> によって与えられる軌跡上の点の xy 座標のリストを返す。\nその名前の要素を取り出す: element(<文字列>)\nこの関数は， <文字列> の名前の幾何要素を返す。\n【例】element 関数は，要素名が無効であるか，あるいはすでに使われているような場合\nに使われる。たとえば，i という名前の直線の色にアクセスしようとすると，i は虚数単位の\n名前として予約されているので， i.color=[1,1,1] と書くことはできない。このような場\n合，次のように書く。\nelement(\"i\").color=[1,1,1]\n再描画をする: repaint()\nこの関数は描画している図を強制的に再描画する。これは，スクリプトが図の更新を必要\nとするときに実行される。この関数は draw あるいは move スロットにおいてはいけない。\n再描画その２: repaint(<real>)\nrepaint 命令を，パラメータで与えられたミリ秒だけ遅らせて実行する。\n10 図形の描画\n10.1 修飾子\n描画関数では，色や大きさなどをオプションとして与えることができる。これを「修飾子」\nと呼んでいる。次のような修飾子があり，関数によって使えるものは異なる。修飾子はコン\nマで区切って，draw([1,1],size->8,color->[1,1,0] ) のように指定する。\n46", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 47", "content": "修飾子 型 効果\npointsize <real> 点の大きさを設定する。\nlinesize <real> 線の幅を設定する\nsize <real> 点の大きさと線の幅を設定する\npointcolor [R,G,B] RGB 値による点の色を設定する\nlinecolor [R,G,B] RGB 値による線の色を設定する\ncolor [R,G,B] RGB 値による点と線の色を設定する\nalpha <real> 透明度を設定する\nnoborder <bool> true なら点の境界線の表示をしない\nborder <bool> true なら点の境界線の表示をする\ndashtype <real> 破線パターンを０から４で指定する\ndashing <real> 破線を描く。与えた数により細かさが変わる\ndashpattern <list> 個別の破線パターンを指定する\n10.2 色や大きさの設定\n色の設定\n色は，赤/緑/青 (R/G/B) の 3 つの実数のリストで指定する。それぞれの値は 0 から 1 ま\nでで，0が最も暗く1が最も明るくなる。ある実数が色のコードと解釈される場合，0以下の\n数は0に，1以上の数は1に置き換えられる。\n初期状態の色は，\npointcolor(<colorvec>),\nlinecolor(<colorvec>),\ntextcolor(<colorvec>)\nの3つの関数で設定できる。さらに， color(<colorvec>) 関数はすべてのオブジェクト\nの色を同時に設定する。\n個々に色を指定するときは，修飾子 color->[R,G,B] を用いる。\n【例】\npointcolor([0,1,1]); これ以降，点の色を水色（シアン）にする。\ndraw([2,2],color->[1,1,0]); 座標 [2,2]に黄色で点を打つ。\ndrawtext([2,2],\"注意\",color->[1,0,0]座);標 [2,2]に赤で「注意」と表示する。\n透明度の設定\n透明度は 0 から 1 までの実数で指定する。ここで，0 は完全に透明で，1 は完全に不透\n47", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 48", "content": "明になる。 この範囲外の値は 0 か 1 のどちらかに設定される。初期状態の透明度は，関数\nalpha(<数>) によりすべての要素に設定される。個々に設定する場合は，拡張子 alpha->\n数 を用いる。\n【例】\nalpha(0.5); これ以降，透明度を0.5にする。\ndraw([2,2],alpha->0.8); 座標 [2,2]に透明度0.8で点を打つ。\n大きさの設定\n初期状態の大きさは pointsize(<数>), linesize(<数>), textsize(<数>) の３つ\nの関数で設定できる。大きさは，実数で指定する。点と線の大きさは 1 から 20 までの整数\nで，ピクセルのサイズ。\n個々に大きさを指定するときは，修飾子 size->数 を用いる。\n【例】\ntextsize(24); これ以降，文字の大きさを24にする。\ndraw([2,2],size->8); 座標[2,2]に大きさ８の点を打つ。\ndrawtext([2,2],\"文字\",size->36); 座標[2,2]に大きさ36で文字を表示する。\n10.3 色の関数\n次の関数は，指定した輝度の色コード（[R,G,B]）を返す。たとえば，red(0.8) は\n[0.8,0,0]\n赤色： red(<数>)\n緑色： green(<数>)\n青色： blue(<数>)\n灰色： gray(<数>)\n虹色 ：hue(<数>)\nhue は，すべての色のうちの一つを表す色コードを作る。 <数> は 0 から 1 までの数で色\n相環の範囲を表す。1 より大きな値の場合には，色相環を何周かして色を決める。次のコー\nドと実行結果はその例。\nn=360;\nind=(1..n)/n;\nlinesize(2);\nforall(ind,\ncolor(hue(#));\ndraw((0,0),(sin(#*2*pi),cos(#*2*pi)));\n);\n48", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 49", "content": "10.4 描画関数\n点を描く: draw(<expr>)\ndraw([x,y]) は点 [x,y] に点を打つ。draw([x,y,z]) は同次座標が [x,y,z] である点\nを打つ。\n[x,y,z] が点の同次座標であるとき，対応する点は， xy-座標が [x/z,y/z] の点。 z=0\nの点は ”無限遠点” 。この無限遠点は，Cinderella の通常のユークリッド表示では見えない\nが，球面表示や局所的に射影基底が設定されている場合は表示される。\n線分・直線を描く: draw(<expr>,<expr>)\n引数に２点を与えると，線分を描く。この２点はリストにしてもよく，座標はユークリッ\nド座標でも，同次座標でもよい。\n作図した幾何点の識別子を点の座標として用いることもできる。\n直線を描くには同次座標を用いる。3 つの実数 [a,b,c] で表される直線は，方程式\na∗x+b∗y +c = 0 で表されるものと考えることができる。 ユークリッド座標 [x,y] の\n点は，この方程式を満たすときに限りこの直線上にある。同次座標 [x,y,z] の点は，方程式\na∗x+b∗y +c∗z = 0 を満たすときに限りこの直線上にある。\n3つの実数 [a,b,c]が点を表すのか直線を表すのかをCindyScript が知るために，直線が\n引かれた場合には内部フラグが立つようになっている。たとえば， join(A,B) 命令は，2点\nA と B を通る直線を計算して，直線であるという内部フラグを立てる。その結果，直線が引\nかれる。関数 line() を使うことによって，直線のフラグを強制的に立てることもできる。\n【例】２点 A(1,1) と B(4,5) を作図してあるとする。次の描画命令はいずれも２点 [1,1] と\n[4,5]を結ぶ線分を描く。\ndraw([1,1],[4,5]);\ndraw([[1,1],[4,5]]);\ndraw(A,B);\ndraw([A,B]);\n【例】次の２つの描画命令はいずれも直線を描く。\ndraw(line([1,1,0.5]));\ndraw(join([1,2],[2,-1]));\n【例】線分（直線）では，修飾子によって幾つかの線種が扱える。次はその例。\ndraw([0,0],[0,6],dashtype->0);\ndraw([1,0],[1,6],dashtype->1);\n49", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 50", "content": "draw([2,0],[2,6],dashtype->2);\ndraw([3,0],[3,6],dashtype->3);\ndraw([4,0],[4,6],dashtype->4);\ndraw([6,0],[6,6],dashing->4);\ndraw([7,0],[7,6],dashing->6);\ndraw([8,0],[8,6],dashing->8);\ndraw([9,0],[9,6],dashing->10);\ndraw([11,0],[11,6],dashpattern->[0,4,2,4]);\ndraw([12,0],[12,6],dashpattern->[0,2,2,2,4,2]);\ndraw([13,0],[13,6],dashpattern->[0,4,2,4]);\ndraw([14,0],[14,6],dashpattern->[4,2,1,2]);\nリストのオブジェクトを描画する: drawall(<list>)\ndraw() 関数で描画する点・線分をリストにして描画することができる。これにより，\nrepeat()で繰り返しを行うことなく，まとめて描画できる。\n【例】次のコードは，正 17 角形の辺と対角線をすべて描く。２行目で単位円上に点を打つ関\n数を定義する。 ３行目は，変数 steps を単位円を 17 等分する角度のリストとする。これら\nに対応する点が，変数 pts に４行目でリストとして代入され，５行目で，変数 segs を pts の\nすべてのペアのリストとする。最後の２つの行で２つのリストにある点と線分を描く。\nn=17;\nf(x):=[sin(x),cos(x)];\nsteps=2*pi*(1..n)/n;\npts=apply(steps,f(#));\nsegs=pairs(pts);\ndrawall(segs,alpha->0.9);\ndrawall(pts,size->4);\n点をつなげる: connect(<list>)\nこの関数は，点のリストを受け取って，それらを順に結んだ線分を描く。\n多角形を描く: drawpoly(<list>)\nこの関数は，点のリストを受け取り，点を順に結んだ多角形を描く。点のリストは閉じて\nいる必要はなく，自動的に閉じて描く。たとえば，draw([A,B,C]) とすると，A,B,C,A を\nこの順に結んで多角形とする。使える修飾子は color と alpha。size は使えないので，線\nの太さを指定したい場合は，閉じたリストにして connect()を用いる。\n50", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 51", "content": "中を塗った多角形を描く: fillpoly(<list>)\nこの関数は，点のリストを受け取って中が塗られた多角形を描く。使える修飾子は color\nと alpha。\n円を描く: drawcircle(<点>,<半径>)\n<点> を中心とする半径 <半径> の円を描く。点の座標はユークリッド座標か同次座標で与\nえる。\n円盤を描く: fillcircle(<点>,<半径>)\n<点> を中心とする，半径 <半径> の，内部を塗りつぶした円を描く。点の座標はユーク\nリッド座標か同次座標で与える。使える修飾子は color と alpha。\n11 関数プロット\nCindyScript には，数学的な関数をプロットするいくつかの関数がある。簡単な関数のプ\nロットの他に，極値，零点，変曲点に関する情報も表示できる。\n11.1 実数関数のグラフを描く\n関数のプロット: plot(<expr>)\nplot 関数は，関数をプロットするのに使う。 <expr> に関数式を与える。この式は実行変\n数 # を含まなくてはならず，実数の入力値 # に対して，ひとつの実数か2次元ベクトルを計\n算します。一つの実数の場合には， plot 関数は単純な関数のグラフを描く。ベクトルの場\n合には，媒介変数形のグラフを描く。座標系は，幾何の表示画面の座標系に依存する。 # の\n代わりに他の実行変数を使うことができる。自由変数が一つだけあればそれを実行変数と見\nなす。複数の自由変数がある場合は， x, y, t, z の順に探して実行変数とみなす。\n関数を定義しておいてそのグラフを描くこともできる。\nplot(sin(#));\nplot(sin(x)); plot(sin(#))と同じ結果になる\nf(x):=2*sin(x); plot(f(#)); f(x)で定義したグラフを描く\nplot([2*cos(t),3*sin(t)]); 媒介変数表示で楕円を描く\n媒介変数表示の場合，変数の値の初期値は0から100。この範囲は，修飾子 start , stop に\nよって指定できる。\nplot() 系の関数では次の修飾子が使える。曲線の外観に関するもの，定義域や解像度に関\nするもの，特別な点のマーク，線種がある。\n51", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 52", "content": "修飾子 型 効果\n外観の表現\ncolor [R,G,B] 色を設定\nsize <real> 線の幅を設定\nalpha <real> 不透明度を設定\nconnect <real> 関数値の飛んでいるところをつなぐ\n繰り返しの制御\nstart <real> 描き始めの値を設定\nstop <real> 描き終わりの値を設定\nsteps <real> プロットする点の間隔 (媒介変数のみ)\npxlres <real> 曲線をプロットする解像度 (real 関数のみ)\n特別な点\nextrema <bool> すべての極値をマークする\nextrema [R,G,B] すべての極値を指定した色でマークする\nminima <bool> すべての極小値をマークする\nminima [R,G,B] すべての極小値を指定した色でマークする\nmaxima <bool> すべての極大値をマークする\nmaxima [R,G,B] すべての極大値を指定した色でマークする\nzeros <bool> すべての零点をマークする\nzeros [R,G,B] すべての零点を指定した色でマークする\ninflections <bool> すべての変曲点をマークする\ninflections [R,G,B] すべての変曲点を指定した色でマークする\n破線\ndashing <real> 破線パターンの幅 (初期値 5)\ndashtype <int> 特定の破線タイプ ( 値は0から4まで)\ndashpattern <list> 個々の破線パターンを指定する\n定義域\n定義域の左端と右端を決める，start , stop は幾何点で制御することもできる。\n点A,Bをx軸上に置き，次のスクリプトでグラフを表示すれば，点をドラッグしてインタ\nラクティブに定義域を変えることができる。\nplot(f(#),start->A.x,stop->B.x)\n52", "tags": []}
{"title": "Page 53", "content": "プロットの解像度\nグラフのプロットは，定義域を分割して点の座標を計算して線分でつないでいる。媒介変\n数表示の場合は，この間隔を steps で変更できる。分割数が大きくなると解像度が高くなる。\nまた，pxlres 修飾子はこの解像度の指定だが，plot() 関数は解像度を自動的に調整し，特\n異点の近くでは解像度を高めるようになっている。次の例は plot(sin(1/#)*#) の結果を\n示すが，原点付近での解像度が高くなっている。\npxlres 修飾子は，colorplot() 関数で有用になる。\n不連続点を結ぶ\n通常は，関数値が飛んでいるところが発見されても，初期状態ではその点は結ばれない。\nノコギリ波のようにそれらの点を結ぶときには connect->true という修飾子を使う。次の\n例は，plot(x-floor(x),connect->true) で，f(x) = x−|x| のグラフの不連続点を結\nんだもの。\n特異点の表示\n修飾子を用いて，零点，極大値，極小値，変曲点を表示することができる。たとえば，\nextrema->true とすると，すべての極値を点で表示する。点の色を指定する場合は\nextrema->[R,G,B] とする。\n線種\n線分の線種と同様に，関数プロットでも dashtype などの修飾子で線種を指定できる。\n関数のプロット その２: plot(<expr>,<var>)\n53", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 54", "content": "実行変数を指定してプロットする。実行変数として有効な変数を２つ以上含む式のとき，\nどの変数についての関数かを指定できる。\n11.2 動的な色と透明度\n関数プロットの色と透明度は，関数値によって変化させることができる。次の図は\nplot(sin(x),color->hue(x/(2*pi)),size->3)\nの実行例。ここで，周期的な虹色を作るために hue を使っている。\n積分イメージのプロット: fillplot(<expr>)\n積分の説明などで関数のグラフと x 軸の間をハイライトさせたいときに用いる。plot()\n関数と同様な引数（実行変数など）を使う。最も簡単な使い方では，x軸をはさんだ部分をハ\nイライトする。この関数ではグラフそのものは描かない。グラフも描きたい場合は plot() 関\n数と併用するか修飾子graphを用いる。\n【例】\nf(x):=1/(x^2+1)*sin(4*x);\nfillplot(f(x));\nplot(f(x)); または fillplot(f(x),graph->true);\n注意： fillplot(...) における特異点の処理は， plot() 関数ほど精密ではない。その\nため， plot() での修飾子とは使い分ける必要がある。\nこの関数では通常のcolor,alphaのほかに，次の修飾子が使える。\n修飾子 型 効果\npluscolor [R,G,B] 関数値が正のときの色\nminuscolor [R,G,B] 関数値が負のときの色\nstart <real> 定義域の左端\nstop <real> 定義域の右端\ngraph <bool> 関数のグラフも描く\ngraph [R,G,B] 特定の色で関数のグラフを描く\nsize <reall> 関数のグラフの太さ\n54", "tags": ["アニメーション", "上級者向け", "初心者向け", "基本操作"]}
{"title": "Page 55", "content": "【例】fillplot(sin(x),graph->true,pluscolor->(0.5,1,0.5),minuscolor->(1,0.5,0.5));\n積分イメージのプロット: fillplot(<expr>,<expr>)\nこの関数は fillplot(...) と同様だが，2 つの関数のグラフではさまれた部分をハイラ\nイトする。\n【例】sinx とcosxのグラフで挟まれた部分を交互に色を変えて塗る。\nfillplot(sin(x),cos(x),graph->true,pluscolor->(0.5,1,0.5),minuscolor->(1,0.5,0.5))\n11.3 カラープロット\nカラープロットは平面上の各点に，関数によって色を割り当てることができる。\n場の色表現: colorplot(<expr>,<vector>,<vector>)\nこの関数は，関数によって長方形の各々の点に，カラーコードを割り当てる。ここでも\n<expr> の関数の中で実行変数 # が使われるが，この変数は平面上の点である。 <expr> の\n値は，実数か (その場合は灰色)，３つの実数のベクトル (RGB)。２番目と３番目の引数は，\n描画領域の左下と右上の位置を決定する。\n【例】 次のコードと２点Ａ, Ｂは右の図を描く。１行目で２点間の距離の正弦を計算する関\n数を定義する。(値は区間[0,1] に入るように縮小・シフトしている)\ncolorplot 関数の第１の引数は，実行変数 # から計算される色のベクトル。赤はＡからの\n同心円状の波，緑は0，青はＢからの同心円状の波。最後に，ＣとＤは描画領域の長方形の２\nつの頂点。\nf(A,B):=((1+sin(2*dist(A,B)))/2);\ncolorplot((f(A,#),0,f(B,#)),C,D);\n55", "tags": []}
{"title": "Page 56", "content": "実行変数\n通常は # を colorplot の実行変数として使う。しかし，別の変数を用いることもできる。\nどんな変数が実行変数として使えるかは，次の順序で考える。\n・<expr> の中で１つだけの自由変数が使われている場合，その変数が実行変数として解釈さ\nれる。２次元ベクトルの場合もある。\n・<expr> が # を含む場合， # が実行変数とされる。\n・<expr> が x と yを自由変数として含む場合， ベクトル (x,y) として扱われる。\n・１つの自由変数が明確に割り当てられない場合， ベクトル (x,y) が用いられる。\n・上記のいずれでもない場合，点 p と複素数 z が実行変数としてチェックされる。\n修飾子\ncolorplot 関数では3つの修飾子が扱える。 pxlres は，色をプロットする四角形のピク\nセルの大きさを決定する整数。上の図は pxlres->2 の場合で，これが初期値。 pxlres を２\nか１にすると精密な図ができる。 しかしながら，四角形の中のピクセルごとに，colorplot\nが計算されるので，pxlres が１次関数的に減らされても計算は２次関数的に増加する。した\nがって，効率を上げるためにこの修飾子を調整するとよい。\n解像度を動的に変えることもできる。そのために，解像度を段階的に変える startres が\nある。たとえば， startres->16 と pxlres->1 を使うとインタラクティブな動きをする。\n十分な時間があれば最もよい解像度になるように再計算をする。\nさらに colorplot 関数では，透明度をコントロールする alpha 修飾子が使える。 この修\n飾子は，実行変数をパラメータに用いることもできる。\n【例】\nf(A,B):=((1+sin(2*dist(A,B)))/2);\ncolorplot((f(A,#),0,f(B,#)),C,D, pxlres->4, alpha->-abs(#)+5);\n56", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 57", "content": "CindyJS での colorplot\nCindeyJS での colorplot では，矩形領域を示す点を略すと画面全体が対象となる。ま\nた，pxlres は 1 である。Cinderella では矩形領域を示す点を略すことはできない。\n11.4 ベクトル場\nベクトル場の描画: drawfield(<expr>)\ndrawfield 関数は，式 <expr> で与えられるベクトル場を描画するのに用いる。この式は\n実行変数 # を含んだ２次元ベクトルである必要がある。その結果も２次元ベクトル。式を\ndrawfield 関数に適用すると，対応するベクトル場を描く。ベクトル場は動的である。たと\nえば，画面上でマウスをドラッグすると絵が動く。したがって，drawfield 関数を Draw ス\nロットでなく \"timer tick\" スロットに入れるのが有効である。すると，アニメーションコ\nントローラが表示され，アニメーションを走らせると，ベクトル場が自動的に動く。実行変\n数の考え方は colorplot() と同様。特に，自由変数 x と y を２次元ベクトル (x,y) とし\nて使うことができる。\n【例】\n関数 f(x,y)=(y,sin(x)) によって定義されるベクトル場を考える。CindyScript での定\n義のしかたと drawfield 関数の使い方は次の通り。\nf(v):=[v.y,sin(v.x)];\ndrawfield(f(#));\ndrawfield((y,sin(x))) でも同じ図が得られる。\n図を描くのに，針のような図形が画面上に描かれる。これらの針はベクトル場によって配\n置される。アニメーションの間，針はベクトル場によって動く。計算時間はかかるが，針の\nかわりに小さな蛇のような図形でベクトル場の印象を高めることもできる。これは，stream\n修飾子で指定する。\nf(v):=[v.y,sin(v.x)];\ndrawfield(f(#),stream->true);\n57", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 58", "content": "修飾子\ndrawfield 関数は，ベクトル場の生成プロセスを制御する多くの修飾子を備えている。それ\nらの理解を助けるために，どのように図が描かれるかをもう少し詳しく説明する。\n図は，ベクトル場の影響を受けているいくつかのテストオブジェクトの動きを示すことで\n生成される。初期状態では，テストオブジェクトは針状。それらはまず格子状に置かれる。\nこれは通常いくつかの副産物を発生し，格子点の周りにある半径でランダムにゆがめられる。\nアニメーションの間，針は力の場の方向に動く。針の長さは場の強さを表す。\n修飾子 型 効果\nresolution <int> ピクセル単位での最初の格子の大きさ。\njitter <int> テストオブジェクトのゆがみ\nneedlesize <real> 針の最大長\nfactor <reak> 場の強さの拡大要素\nstream <bool> 針状か流体か\nmove <real> オブジェクトを動かす速さ\ncolor [R,G,B] 流体もしくは針の始めの方の色\ncolor2 [R,G,B] 針のあとの方の色\n次の図は最初の格子の様子。 move->0 と jitter->0 を指定した。垂直または水平方向か\nら不自然な配置になっている。\n次の図は， resolution->5 と stream->true で描写したもの。\n複素ベクトル場の描画: drawfieldcomplex(<expr>)\n58", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 59", "content": "この関数は drawfield とよく似ている。しかし，これは入力値を１次元の複素数とする関\n数である。 実部と虚部はベクトル場の x 成分と y 成分とみなされる。それ以外は，drawfield\nと同様。\n【例】 次は，描かれた4点によって零値が決まる複素多項式を使った例。\nf(x):=(x-complex(A))*(x-complex(B))*(x-complex(C))*(x-complex(D));\ndrawfieldcomplex(f(#),stream->true,resolution->5,color->(0,0,0))\n力の場の表示: drawforces()\nこの関数も drawfield とよく似ているが，今度は CindyLab における物理シミュレー\nションに関連している。引数は必要でなく，画面のいろいろな地点にある潜在的な試験電荷\nによる力を示す。試験電荷は，質量 1，電荷 1，半径 1。しかし，他のいかなる粒子もこれと\n相互作用は起こさない。ときどき，力の場を説明するのに， factor 修飾子を使うことが必\n要になる。次の図は4つの荷電粒子間の相互作用を示す。\n点による力の場の描画: drawforces(<mass>)\n固定された質量を持つ粒子に関して力の場を描く他の関数がある。粒子自身は力の計算に\n入らない。こうして，特定の粒子に作用する力を表現することができる。\n59", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 60", "content": "11.5 グリッド\nグリッドは平面から平面への写像を視覚化するのに用いることができる。グリッドで写像\nによる変形が示される。\n正方グリッドのマッピング: mapgrid(<expr>)\nこの関数は，正方グリッドをとって ¡expr¿ による関数で変形する。初期状態ではもとのグ\nリッドはその平面における単位正方形とみなされる。この正方形の境界は修飾子によって変\n更できる。また complex->true 修飾子によって，複素写像を視覚化できる。\n修飾子\n修飾子 型 効果\ncolor [R,G,B] 色\nalpha <real> 透明度\nsize <real> グリッド線のサイズを指定する。\nxrange [<real>,<real>] もとの正方形のxの範囲\nyrange [<real>,<real>] もとの正方形のyの範囲\nresolution <int> 両方向のグリッド線の数\nresolutionx <int> x-方向のグリッド線の数\nresolutiony <int> y-方向のグリッド線の数\nstep <int> 両方向のステップ数\nstepx <int> x-方向のステップ数\nstepy <int> y-方向のステップ数\ncomplex <bool> 複素関数を使う\n【例】次のコードは mapgrid 関数の使い方の例。修飾子 xrange と yrange による効果も示\nす。 x 座標と y 座標をそれぞれ２乗する２次元の関数による効果を示す。\nf(v):=(v_1^2,v_2^2);\nlinesize(1.5);\nmapgrid(f(v),color->[0,0,0]);\nmapgrid(f(v),xrange->[1,2],color->[0.6,0,0]);\nmapgrid(f(v),yrange->[1,2],color->[0.6,0,0]);\n60", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 61", "content": "mapgrid(f(v),xrange->[1,2],yrange->[1,2],color->[0,0.6,0]);\n次の例は，グリッドの線がまっすぐであったり平行であったりしない例。\nf(v):=(v_1*sin(v_2),v_2*sin(v_1));\nlinesize(1.5);\nmapgrid(f(v),xrange->[1,2],yrange->[1,2]);\n次の例は，複素関数による mapgrid の使い方の例。\nmapgrid(z^2,complex->true);\nresolution 修飾子によって生成される格子の密度を指定できる。\n61", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 62", "content": "mapgrid(z^2,complex->true,resolution->4);\n初期状態では mapgrid 関数では直接格子点をつなぐ。これは数学的に正しくない図を作\nるかもしれない。 step 修飾子で格子点の間に段階を追加する。\nmapgrid(z^2,complex->true,resolution->4,step->5);\n以上の３つのコードの結果は左から順に次の図。\n11.6 オシログラフ\n物理的大きさのグラフを描く: drawcurves(<vector>,<list>)\n物理シミュレーションにおいて，大きさが時間とともにどのように変化するかをグラフで\n示したい場合がよくある。このために， drawcurves 関数が作られた。ここで，<vector>\nは表示領域の左下の角の位置を表す２次元ベクトルで， <list> は観察する値のリスト。ア\nニメーションが始まると値が更新され，対応する曲線が描かれる。\n【例】次の図は drawcurves 関数の簡単な使い方を示している。 CindyLab で振り子を作っ\nている。Dは自由質点。重力を加えて振り子が動く。次のコードは，動く点Dの x 座標と x\n方向の速度を曲線で表す。\ndrawcurves([0,0],[D.x,D.vx])\n62", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 63", "content": "修飾子\n修飾子 型 効果\nwidth <real> プロット範囲の幅(ピクセル)\nheight <real> それぞれの曲線の高さ(ピクセル)\nborder <bool> 表の枠を表示する\nback <bool> 背景を表示する\nback [R,G,B] 背景を指定した色で塗りつぶす\nbackalpha <real> 背景の不透明度\ncolors [<色1>,<色2>,<色3>,...] 曲線ごとに色を指定する\ntexts [<文字列1>,<文字列2>,<文字列3>,...] 曲線ごとに表題を付ける\nshowrange <bool> 曲線の最大と最小を表示する\nrange <文字列> 欄外参照\nrange [<文字列1>,<文字列2>,<文字列3>,...] それぞれの曲線の peek/auto\nrange の文字列は\n\"peek\"：絶対値が最大のときの大きさ\n\"auto\" ：現在表示されている部分の大きさ\n次のスクリプトは，修飾子の使い方を示す。連結振動子のエネルギー状態を表す。\nlinecolor((1,1,1));\ntextcolor((0,0.8,0));\ndrawcurves((-7,-3),\n[A.x,B.x,A.ke,B.ke,a.pe+b.pe+c.pe],\nheight->50,\ncolor->(1,1,1),\nback->(0,0,0),\nbackalpha->1,\nrange->\"peek\",width->400,\ncolors->[\n[1,0.5,0.5],\n[0.5,1,0.5],\n[1,0.5,0.5],\n[0.5,1,0.5],\n[0.5,0.5,1]],\n63", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 64", "content": "texts->[\n\"PosA = \"+ A.x,\n\"PosB = \"+B.x,\n\"EnergyA = \"+A.ke,\n\"EnergyB = \"+B.ke,\n\"PotentialEnergy = \"+(a.pe+b.pe+c.pe)\n]\n);\n対応する図は次の通り。\n11.7 文字と表\n文字の表示: drawtext(<vector>,<expr>)\ndrawtext(<vector>,<文字列>) 関数は <文字列> で与えられる文字列を <vector>の指\n定する位置に表示する。この位置ベクトルは， ユークリッド xy座標か，同次座標で与える。\n文字列中に改行コードがあると，文字通りそこで改行される。改行コードは不可視だが，ス\nクリプト中で単に Enter キーで改行するときに入る。これにより，複数行からなる文章を書\nくことができる。\n【例】drawtext([0,0],\"Hello World\") で，文字列 ”Hello World” を[0, 0] の位置から\n書き始める。\n修飾子\n64", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 65", "content": "修飾子 型 効果\nsize <real> 文字の大きさの設定\ncolor [R,G,B] 文字の色を設定\nalpha <real> 文字の透明度を設定\nxoffset <real> 文字と基準点の x 方向のピクセル単位の隔たりを設定\nyoffset <real> 文字と基準点の y 方向のピクセル単位の隔たりを設定\noffset [<real>,<real>] 文字と基準点の xy ピクセル単位の隔たりを設定\nalign <文字列> left,right,mid で文字の配置を設定\nbold <bool> 太字\nitalics <bool> 斜体\nfamily <文字列> フォントの指定\n利用できるフォント: fontfamilies()\nこの関数では，そのコンピュータで利用できるすべてのフォントのリストを作成する。次\nのコードはそれらのフォントの名前をその字体で表示する。\nfamilies=fontfamilies();\nt=0;\nwhile(t<length(families),t=t+1;\ndrawtext((mod(t,5)*7,round(t/5)),families\\_t,family->families\\_t);\n);\nUnicode: unicode(<文字列>)\nCinderella では Unicode が扱える。Unicode で文字を表示するには unicode(<文字列>)\n関数を使う。引数は，16進数のUnicode列。戻り値はそれに対応する文字。修飾子によって\n16進数ではない形式の引数にもできる。\n修飾子 base -> <整数> を用いると，Unicode のコード表現を変更できる。\n【例】unicode(\"0041\") と unicode(65,base->10) はどちらも文字 ”A”を返す。\n文字列の表示可/不可: candisplay(<文字列>)\nこの関数は，与えられた文字列が，現在選択されているフォントで表示できるかどうを調\nべる。戻り値はブール値。\n表を描く: drawtable(<位置>,<list>)\n65", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 66", "content": "リストで表を作る。表の外観のために，修飾子も使える。\n【例】次のコードで表ができる。\nx=1..10;\ntable=apply(x,(#,#^2,#^3,#^4));\ndrawtable([0,0],table);\n修飾子\n修飾子 型 効果\nwidth <int> セル幅をピクセル単位で指定する\nheight <int> セルの高さをピクセル単位で指定する\nflip 行と列を入れ替える\nborder <bool> 背景と線を描くかどうかの指定\nsize <実数> 文字の大きさを設定\ncolor [R,G,B] 文字の色を設定\nalpha <real> 文字の透明度を設定\noffset [<real>,<real>] 文字と基準点の xy ピクセル単位の隔たりを設定\nalign <文字列> セル内での横位置をcenter,right,left の文字で指定\nback <bool> 表の背景を描くかどうかを指定\nback [R,G,B] 表の背景を指定したRGBの色で描くかどうかを指定\nbackalpha <real> 表の背景の透明度\n【例】次のコードは drawtable 関数を用いた例。２番目の表は見出し。\nx=1..9;\ntab=apply(x,(#,#^2,#^3,#^4));\ntab1=(\"x\",\"x^2\",\"x^3\",\"x^4\");\nlinecolor([0,0,.8]);\ndrawtable([0,0],tab,\nwidth->50,\nback->[1,0,0],\nbackalpha->0.1,\nalign->\"right\",\nsize->12\n66", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 67", "content": ");\nlinecolor([0,0,0]);\ndrawtable([0,7.1],tab1,flip->true,\nwidth->50,\nheight->33,\nback->[0,0,1],\nbackalpha->0.4,\nalign->\"mid\",\nsize->16,\ncolor->[1,1,1]\n);\n12 TeX 記法 Cinderella TeX\n現在の Cinderella ではおよそ 95% の Tex 記法が使える。ここでは，いくつかの例と，標\n準的な TeX との違いについて記述する。TeX 記法の詳細については TeX の解説書などを参\n照されたい。また，例については実行画面を示さないものもあるが，適宜実行してみてもら\nいたい。\nTeX 記法は CindyScript の drawtext() で表示する文章と，幾何学要素のラベル，「文字\n列を追加する」ボタンによる文字列に使える。特別メニューの文字列入力による文章には使\nえない。\nTeX 記法の宣言\n通常の文章（文字列）の中で，ドル記号ではさんだ部分が TeX 記法によるものと解釈さ\nれる。\n【例】drawtext([0,2],\"$f(x)=x^3-3x^2-3x+1$\");\nサブスクリプトとスーパースクリプト\nサブスクリプト (上付き文字) とスーパースクリプト（添え字）は，それぞれ と ^ 記号\nを用いる。複雑なサブ・スーパースクリプトを用いたい場合は，波括弧でくくるが，通常の\nTeX スクリプトと異なり，数だけからなるものであれば，括弧はいらない。（つけてもよい）\n【例】\ndrawtext([0,0], \"$A_1$\");\ndrawtext([2,0], \"$A_123$\");\n67", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 68", "content": "drawtext([4,0], \"$A_1^12$\");\ndrawtext([6,0], \"$A_{1_2}^{\\frac{1}{2}}$\");\ndrawtext([8,0], \"$A_{1_2}^{\\sqrt{x^2+y^2}}$\");\n和，積分などの記号\nTeX ではバックスラッシュ\\ を用いて制御コードを書く。 \\sum と \\int では，自動的に\n和の記号や積分記号，上付き文字と下付き文字などを使って式を表現する。\n和，積分記号の結果は添字のつき方が通常のTeXとCinderella TeX では異なる。\ndrawtext([0,0], \"$\\sum_{i=1}^n (i^2+1)$\");\ndrawtext([3,0], \"$\\sqrt{x^2+y^2}$\");\ndrawtext([6,0], \"$\\int_a^b f(x)dx$\");\nを実行すると，通常のTeXでは\n∑ √ ∫\nn (i2 +1) x2 +y2 b f(x)dx\ni=1 a\nとなるが，Cinderella TeX では次のようになる。\n積分記号で，上端下端の位置を調整したい場合は，\\int のあとにスペースをいれ， と^ を\n２重にするとそれらしくなる。\ndrawtext((6,0), \"$\\int _{_a}^{^b} f(x)dx$\");\n括弧\nCinderella TeX では4種類の括弧を式の中で使う。\n丸い括弧 : (....)\n角括弧 : [....]\n波括弧 : \\{...\\}\n縦線 : |...|\n異なる大きさの括弧を使う場合は， \\big, \\Big, \\bigg, \\Bigg に続いて括弧を書\n68", "tags": ["LaTeX", "アニメーション", "上級者向け", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 69", "content": "く。 \\left と \\right を使うと，ちょうどよい大きさの括弧でくくることができる。\n\\left と \\right はちゃんと入れ子状になっている必要がある。\n【例】\ndrawtext([0,0],\"$\\Bigg( \\bigg( \\Big( \\big( (\\ldots) \\big) \\Big) \\bigg) \\Bigg)$\");\ndrawtext([5,0],\"$\\Bigg[ \\bigg[ \\Big[ \\big[ [\\ldots] \\big] \\Big] \\bigg] \\Bigg]$\");\ndrawtext([10,0],\"$\\Bigg\\{\\bigg\\{\\Big\\{\\big\\{\\{\\ldots\\}\\big\\}\\Big\\}\\bigg\\}\\Bigg\\}$\");\ndrawtext([15,0],\"$\\Bigg| \\bigg| \\Big| \\big| |\\ldots| \\big| \\Big| \\bigg| \\Bigg|$\");\ndrawtext([20,0],\"$\\left[\\sum_{i=1}^n \\left({\\sqrt sin(i)\\right)\\right]^2$\");\n分数\n分数のような特殊な形の式は， Cinderella TeX は次の式をサポートしている。\n\\frac,\\over,\\choose,\\binom\n\\cfrac,\\dfrac はサポートしていない。\n【例】\ndrawtext([0,0],\"${1+n^2\\over 1-n^2}$\");\ndrawtext([3,0],\"${2\\choose 3}$\");\ndrawtext([6,0],\"$\\frac{a+b}{x^2}$\");\ndrawtext([9,0],\"$\\binom{a+b}{x^2}$\");\n空白\n空白と改行は，よく式を区切るためだけに使われ，式のレイアウトのためにはあまり使わ\nれない。\\， \\; \\quad \\qquad \\! を使えば，空白の大きさを変えられる。現在のフォ\nントの ”m” の大きさが空白の単位になる。\n\\qquad： 2.0 単位の空白\n\\quad： 1.0 単位の空白\n\\;： 5/18 単位の空白\n\\,： 3/18 単位の空白\n\\!： -5/18 単位の空白（マイナスなので前の文字と重なる）\n【例】 drawtext([0,0],\"$A\\!A A \\,A\\;A\\quad A \\qquad A$\")\n69", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 70", "content": "上線と下線\nCinderella TeX は式の上または下に矢印などの線を引くいくつかの方法をサポートして\nいる。\n\\overline, \\underline, \\overleftarrow, \\overrightarrow, \\vec, \\hat, \\tilde\nこれらの記号のあとに，線を引きたい部分を波括弧でくくる。\n【例】\ndrawtext([0,0],\"$\\overline{A}\\;\\cap\\;\\overline{B}\\;=\\;\\overline{A\\;\\cup\\; B}$\");\ndrawtext([6,0],\"$|\\overrightarrow{(x,y)}|\\;= \\; \\sqrt{x^2+y^2}$\");\ndrawtext([13,0],\"$\\tilde{X}+\\hat{Y}\\;=\\;\\underline{X\\oplus Y}$\");\n色\nCinderella TeX は色名を使って \\color{...} で式に色をつけることができる。現在用意\nされている色の名前は\nwhite, black, red, green, blue, darkred, darkgreen, darkblue, magenta, yellow, cyan,\norange\n色記号とそれに続いて書かれた文全体を波括弧でくくると，それらが指示した色で表示さ\nれる。\n【例】\ndrawtext([0,0],size->20,color->(0,0,0),\n\"Sum formula: $\n\\sum_{\\color{darkgreen}i=1}^{\\color{darkgreen}n} {\\color{darkred}i^2}\n\\quad = \\quad\n{\\color{blue}{ 2\\cdot n^3+ 4\\cdot n^2 +n\\over 6 }}$\"\n);\n通常の文\nTeX では半角スペースは無視される。半角スペースの入った文を表示する場合は，\\mbox\n70", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 71", "content": "を使う。\n【例】\ndrawtext([0,0],\"$\\sum_{\\mbox{All i not equal to j}}(i^2+j^2)$\");\nUnicode\n特定の記号が TeX で表現できないことがある。その場合，Cinderella TeX では Unicode\nを使う方法がある。 \\unicode{...} か \\unicodex{...} という記号を用いて TeX のなか\nで使う。第１の式では，Unicode を 10 進数で指定する。２番目の式では 16 進数で指定す\nる。次の例では，まず sum(...) 関数を用いて Unicode の列を作り，それを TeX で表示し\nている。\nchess=sum(0..11,i,\"\\;\\unicode{\"+(9812+i)+\"}\");\ndrawtext((0,0),size->30,\"$\"+chess+\"$\");\nこのほか，行列の表記，特殊記号，数学記号の表記については，通常のTeXと同様なので，\nTeXの説明書などを参照されたい。\n71", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 72", "content": "13 画像の操作とレンダリング\nPNG または JPG 形式の画像ファイルを読み込み，幾何要素の点や直線を利用して表示す\nることができる。画像は，移動，回転，拡大・縮小，射影変換ができる。\n13.1 メディアブラウザ\nCindyscript では，メディアブラウザを用いて画像を管理する。ファイルメニューの「メ\nディアブラウザ」を選ぶとポップアップウィンドウが出て,＋ボタンを押すと画像ファイルを\n読み込むことができてリストに追加できる。−ボタンを押せばリストから削除される。読み\n込んだ画像は，内部での名前とプレビューが表示される。画像の名前の初期値は読み込んだ\nファイルの名前だが，ダブルクリックして名前を変更することができる。これは内部的な名\n前で，CindyScript ではこの名前を使う。\nなお，以下の画面例では，Cindyscriptのマニュアルのものをそのまま使用している。これ\nらの絵の著作権は Terzio Verlagexternal にある。\n13.2 画像の表示と変換\n画像の表示: drawimage(<位置>,<画像名>)\nこの関数は，メディアブラウザから画像を取り出して，第1引数で示した位置に表示する。\n位置は，座標もしくは幾何要素の点の識別名。初期状態では指定した座標が画像の中心にな\nるが，これは修飾子によって変更することができる。また，画像の拡大縮小と配置も変える\nことができる。\n72", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "外部連携", "構文", "関数"]}
{"title": "Page 73", "content": "【例】\ndrawimage(A,\"myimage\");\ndrawimage(B,\"myimage\",scale->1.5,angle->30°);\ndrawimage(C,\"myimage\",ref->\"lb\");\n参照点\n指定した点に対して画像をどこに置くかを，何通りか指定できる。このとき，この点を「参\n照点」という。修飾子 ref, refx, refy を用いて参照点の位置を指定する。参照情報は３\nつの異なる方法で与えられる。\n・もとの画像の画素数への絶対参照。たとえば，元の画像の画素数が 400 × 800 のとき，修\n飾子 ref->[100,200] により，左下4分の1のところが参照点になる。\n・比率で参照。この場合，百分率で位置を示す。たとえば，ref->[\"25%\", \"25%\"] とすれば\n左下4分の1のところの参照点を置く。\n・2 つの文字で記号的に。ここで x 方向 を l, c, r で，順に 左，中央，右，y 方\n向を letters b, c, t で，下，中央，上とする。すると左下は ref->\"lb\" または\nref->[\"l\",\"b\"] で表される。\n位置情報は２つの方向に分けて指定することもできる。たとえば，refx->\"l\", refx->100\nあるいは refx->\"10%\" のように。次の図はいくつかの参照点を示す。\n73", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 74", "content": "修飾子\n修飾子 型 効果\nalpha 0.0 ... 1.0 画像の透明度\nangle real 参照点周りの回転角\nrotation real angle と同じ\nscale real 拡大縮小\nscale ベクトル それぞれの方向に拡大縮小\nscalex real x軸方向へ拡大縮小\nscaley real y軸方向へ拡大縮小\nflipx bool 垂直方向に反転\nflipy bool 水平方向に反転\nref 上記説明参照 参照点の位置指定\nrefx 上記説明参照 参照点の x 軸方向の位置指定\nrefy 上記説明参照 参照点の y 軸方向の位置指定\nrendering 文字列 fast または nice の文字で表示品質\n画像表示: drawimage(<位置>,<位置>,<画像名>)\n位置と大きさを２つの参照点で指定して画像を表示する。初期状態では２つの参照点は画\n像の下辺の両端となる。この参照点を画像内の他の点にすることもできる。その方法は先ほ\nどのものと同じ。\n74", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 75", "content": "【例】\ndrawimage(A,B,\"MyImage\");\ndrawimage(C,D,\"MyImage\",aspect->1);\ndrawimage(E,F,\"MyImage\",flipx->true);\ndrawimage(G,H,\"MyImage\",refx1->\"20\\%\",refy1->\"50\\%\",ref2->\"rt\");\n修飾子\n修飾子 型 効果\nalpha 0.0 ... 1.0 画像の透明度\nflipx bool 垂直方向に反転\nflipy bool 水平方向に反転\naspect real アスペクト比\nref1 上記参照 １つめの参照点の位置指定\nrefx1 上記参照 １つめの参照点の x 軸方向の位置指定\nrefy1 上記参照 １つめの参照点の y 軸方向の位置指定\nref2 上記参照 2つめの参照点の位置指定\nrefx2 上記参照 2つめの参照点の x 軸方向の位置指定\nrefy2 上記参照 2つめの参照点の y 軸方向の位置指定\nrendering 文字列 fast または nice で表示品質\n75", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 76", "content": "【例】次の例では，変換行列によって2つの参照点を反復的に変化させている。それぞれの\nステップで画像を表示していき，対数螺旋を描く。多くの画像を表示するために一つ問題が\nある。それは表示速度である。場合によってはきれいに表示するか，速く表示するかを選択\nする必要があるだろう。そのための修飾子が rendering で， \"nice\" か \"fast\" を設定す\nる。初期状態では \"nice\" になっている。\na=[1,0];\nb=[2,-1];\nw=30°;\nm=[[cos(w),-sin(w)],[sin(w),cos(w)]]*0.9;\nrepeat(100,\ndrawimage(a,b,\"MyImage\");\na=m*a;\nb=m*b;\n);\n画像の表示: drawimage(<位置>,<位置>,<位置>,<画像名>)\n３つの参照点を用いてアフィン変換をする。初期状態では，画像の底辺の左右と左上の点。\n参照点は修飾子で変更することができる。\nこの関数は，反転や回転のような幾何学的変換をして画像を表示するのに適している。そ\nのためには，あらかじめ参照点を変換した点を用意する。次の例では点 A’ , B’ , C ’ は点\nA,B,C を直線に関して鏡像変換（反転）した点である。\ndrawimage(A,B,C,\"MyImage\"));\ndrawimage(A’,B’,C’,\"MyImage\"))\n76", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 77", "content": "修飾子\nこの関数には次の修飾子が追加される。\n修飾子 型 効果\nref3 上記参照 ３つめの参照点の位置指定\nrefx3 上記参照 ３つめの参照点の x 軸方向の位置指定\nrefy3 上記参照 ３つめの参照点の ｙ 軸方向の位置指定\n画像の表示: drawimage(<位置>,<位置>,<位置>,<位置>,<画像名>)\n４つの参照点を指定して射影変換をする。初期状態では参照点は左下から４つの角の点を\n反時計回りにとられる。\n【例】drawimage(A,B,D,C,\"myimage\")\n次の図ではわかりやすくするために格子を書き加えている。\n77", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 78", "content": "修飾子\nこの関数には次の修飾子が追加される。\n修飾子 型 効果\nref4 上記参照 ４つめの参照点の位置指定\nrefx4 上記参照 ４つめの参照点の x 軸方向の位置指定\nrefy4 上記参照 ４つめの参照点の ｙ 軸方向の位置指定\n画像を変形する: mapimage(<画像名>,<function>)\nこの関数は，引数の関数を用いて画像を変形させる。通常，この関数は，ある関数を用い\nて２次元ベクトルを２次元ベクトルに写すものとする。complex 修飾子を用いて複素数平面\nから複素数平面へ写すこともできる。関数の範囲は x-range と y-range 修飾子で指定する\nが，指定がなければ 0.0 と 1.0 の間とされる。この範囲が画像の長方形の縦横幅に対応する。\nこの範囲ですべての点が写される。この機能は基本的に mapgrid 関数と類似している。\n【例】ここでは，x 軸方向を sin 関数を使って変形する。まず，その関数を定義する。次に\nmapimage 関数で変形する。図では，わかりやすくするために方眼を描いている。\nf(z):=(z\\_1*(sin(z\\_2)+1.3),z\\_2);\nmapimage(\"MyImage\",f(\\verb|#|),\nxrange->(-1,1),\nyrange->(0,pi),resolution->30\n);\nmapgrid(f(\\verb|#|),color->(0,0,0),alpha->0.3,\n78", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 79", "content": "xrange->(-1,1),\nyrange->(0,pi),resolution->30\n);\n次の例は前のものと類似している，関数として複素関数を用いている。\nr=complex(A);\nf(x):=exp(r*x);\nmapimage(\"myimage\",f(\\verb|#|),\ncomplex->true,\nxrange->(0,1),\nyrange->(0,pi),resolution->30\n);\nmapgrid(f(\\verb|#|),complex->true,\nxrange->(0,1),\nyrange->(0,pi),\ncolor->(0,0,0),alpha->0.5,\nresolutiony->30,\nresolutionx->10,\nstep->10,size->1\n);\n修飾子\nこの関数には次の修飾子がある。\n79", "tags": []}
{"title": "Page 80", "content": "修飾子 型 効果\nalpha 0.0 ... 1.0 画像の透明度\nxrange ベクトル x軸方向の範囲\nyrange ベクトル y軸方向の範囲\ncomplex bool 複素関数を用いるフラグ\nresolution int 変換後の画像の解像度\n画像の大きさを取得する: imagesize(<画像名>)\n画像の大きさを返す。戻り値は幅と高さの画素数を示す２つの整数。\n画素情報を取得する: imagergb(<画像名>,<整数>,<整数>)\nimagergb(<画像名>,x,y) で，(x,y) の位置にある画素の色情報を取得する。戻り値は 4\n次元のベクトルで，はじめの3つはRGB値(0〜255)，4番目はアルファ値。\n【例】次のコードでは，まず画像を表示してその大きさを取得する。次に，両方向に標本点を\n取り，その色と透明度で，粗っぽい点からなる画像を作成する。\ndrawimage(A,\"MyImage\",scale->2);\ndim=imagesize(\"MyImage\");\nforall((0..dim\\_1/10)*10,i,err(i);\nforall((0..dim\\_2/10)*10,j,\ncol=imagergb(\"MyImage\",i,j);\ndraw((i,-j)*.03,color->(col\\_1,col\\_2,col\\_3)/255,alpha->col\\_4,border->false);\n);\n)\n80", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 81", "content": "13.3 カスタム画像を作る\nここまでは，メディアブラウザであらかじめ読み込まれた画像についての操作であった\nが，Cinderella の描画面から画像を作ることもできる。いったん画像として作ってしまえば，\nCindyScript の canvas 関係の関数でそれを操作することができる。これにより，描画のた\nめの命令などは見えなくなる。しかし，カスタム画像が作られればそれを描画手順のうちの\n一つとして画面上に描くことができる。画像表示は描画と似て，画面の任意の場所に描くこ\nとができます。この概念はとても強力だが，基本的な使い方を示すだけにする。\nカスタム画像を作る: createimage(<画像名>,<整数>,<整数>)\ncreateimage(<画像名>,width,height) 関数は，指定された画像のイメージバッファを\n作成する。最初はそこには何もない。イメージバッファはメディアブラウザのもとで指定し\nた名前でアクセス可能となり，drawimage(...) 関数で使えるようになる。\n画像の内容を消去: clearimage(<画像名>)\nこの関数は，画像からすべての内容を消去する。消去後も画像は存在するが，描画された\n内容はなく，いわば透明な状態である。\n画像の削除: removeimage(<画像名>)\nこの関数はメディアブラウザから画像を取り除く。これ以降アクセスすることはできなく\nなる。\n13.4 キャンバスに描く\n描画面をキャンバスのようにして，描いた図を CindyScript で画像化することができる。\nできた画像は，読み込んだ画像と同様な変形ができる。ここでは，その手順を例示する。\nまず，図のように点を取る。点 A,B,C,D はできた画像を射影変形して表示するための点，\n矩形EFGHはキャンバスの領域，点Kは作図のための点である。矩形EFGHは，わかりや\nすくするために線分で結んであるが，実際には，３点E,F,G だけがあればよい。\n81", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 82", "content": "initialization スロットに，次のようなコードを書くことによって，キャンバスが用意でき\nる。\"image\" という名称で，400×400のサイズの画像を作ることになる。\ncreateimage(\"image\",400,400);\n次に，Draw スロットで例として同心円を描く。\nlinesize(3);\nrepeat(10,t,drawcircle(K,t*.5));\ndrawtext(K+[-2,2],\"These are\",size->20,color->[1,1,0]);\ndrawtext(K+[-2,-2],\"some circles\",size->20,color->[1,1,0]);\nこの図で，矩形EFGHで囲まれた部分（実際にはE,F,Gの３点で指定した長方形の中）が\n画像化される。図を確かめたら，上の描画スクリプトを，canvas 関数の中に入れる。このと\nき，図は表示されなくなるので，できた画像をdrawimageで表示する。\nclearimage(\"image\");\ncanvas(E,F,G,\"image\",\nlinesize(3);\nrepeat(10,t,drawcircle(K,t*.5));\ndrawtext(K+[-2,2],\"These are\",size->20,color->[1,1,0]);\ndrawtext(K+[-2,-2],\"some circles\",size->20,color->[1,1,0]);\n);\ndrawimage(A,B,C,D,\"image\");\n82", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 83", "content": "この例では４点を指定して射影変換を行っているが，１点だけで表示することももちろん\nできる。また，キャンバスの画像はビットマップであることに注意する。したがって適切な\n解像度を指定しなければならない。上の例で初期値として 80 × 80 のサイズにすると，小さ\nな画像を大きく表示することになり結果として粗い画像になる。\nこの例では，３点でキャンバス領域を指定したが，これらの点を「参照点」といい，１個な\nいし３個の参照点を使うことができる。\nキャンバスに描く (参照点１つ): canvas(<位置>,<画像名>,<drawing code>)\nこの関数は ¡画像名¿ の画像をキャンバスとして用い，１つの参照点に対して画像を作る。\n修飾子は drawimage(<位置>,<画像名>)と同様。\n修飾子\n修飾子 型 効果\nangle real 参照点周りの回転角\nrotation real angle と同じ\nscale real 拡大縮小\nscale ベクトル それぞれの方向に拡大縮小\nscalex real x軸方向へ拡大縮小\nscaley real y軸方向へ拡大縮小\nflipx bool 垂直方向に反転\nflipy bool 水平方向に反転\nref 上記説明参照 参照点の位置指定\nrefx 上記説明参照 参照点の x 軸方向の位置指定\nrefy 上記説明参照 参照点の y 軸方向の位置指定\nキャンバスに描く (参照点２つ): canvas(<位置>,<位置>,<画像名>,<drawing code>)\nこの関数は ¡画像名¿ の画像をキャンバスとして用い，２つの参照点に対して画像を作る。\n83", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 84", "content": "修飾子は drawimage(<位置>,<画像名>)と同様，ref2,refx2,refx2 が追加される。\nキャンバスに描く (参照点３つ): canvas(<位置>,<位置>,<位置>,<画像名>,<drawing code>)\nこの関数は ¡画像名¿ の画像をキャンバスとして用い，２つの参照点に対して画像を作る。\n修飾子は drawimage(<位置>,<画像名>)と同様，ref3,refx3,refx3 が追加される。\n84", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 85", "content": "14 シェイプ\n直線や多角形，円などの基本的な描画に加えて CindyScript によってこれらを結合した図\n形ーシェイプーを描くことができる。シェイプは直接は目に見えないが，充填材やアウトラ\nインの描画，クリッピングとして使える。シェイプは和集合，積集合，補集合といった集合\nの論理演算によって作られる。ここでは，まず基本的な演算について説明し，そのあと，よ\nり精巧な例を示す。\n14.1 シェイプの初歩\n円形のシェイプ: circle(<点>,<半径>)\n円形のシェイプを作る。\n多角形シェイプ: polygon(<list>)\n<list> に頂点のリストを渡して多角形のシェイプを作る。\n半平面シェイプ: halfplane(<直線>,<点>)\n半平面のシェイプを作る。半平面は境界線 <直線> と，点 <点> によって定義される。境界\n線のどちら側であるかがその点で決まり，点が含まれる方がその半平面である。<直線> は３\n次元の同次座標か直線オブジェクト。\nスクリーンのシェイプ: screen()\nすべてのアクティブな描画要素を覆うのに十分に大きい長方形を作る。\n14.2 シェイプの結合\nそれぞれのシェイプは，論理演算によって結合することができる。それには次の３つの演\n算がある。\n<シェイプ1> ++ <シェイプ2> ２つのシェイプの併合\n<シェイプ1> ~~ <シェイプ2> ２つのシェイプの共通部分\n<シェイプ1> -- <シェイプ2> ２つのシェイプの差\n14.3 シェイプの使い方\nシェイプは，充填と境界線描画，クリッピングの３つの方法で使われる。\n85", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 86", "content": "シェイプによる充填: fill(<シェイプ>)\nこの関数ではシェイプを与えられた色で塗りつぶす。使える修飾子は，colorとalpha。\nシェイプを描く: draw(<シェイプ>)\nこの関数はシェイプの輪郭線を描く。この関数は draw 関数の拡張で，draw と同じ修飾子\nが使える。\nクリップパスの設定: clip(<シェイプ>)\nこの関数は，シェイプのクリップパスを設定する。これ以降に描画するものはすべてこの\nクリップバスで止めらる。クリップパスは表現スタックに加えられるが，それは grestore()\nあるいは greset() で取り除くことができる。\n【例】\nまず「点を加える」モードで点 A〜F をとっておく。次のコードで３つの異なるシェイ\nプー１つの正方形と２つの円が定義され，それらが論理演算によって結合されている。小さ\nなシェイプは，細い線でアウトラインが描かれている。\nshape1=circle(E,4);\nshape2=circle(F,4);\nshape3=polygon([A,B,C,D]);\ncolor([0,0,0]);\nshape=shape1++shape2++shape3;\nfill(shape,color->[1,0.8,0]);\ndraw(shape,size->3);\ndraw(shape1);\ndraw(shape2);\ndraw(shape3);\n次の最初の図がこの結果である。ほかの３つの図は，それぞれ図の上に示した演算で作成\nしたシェイプ。\nshape1++shape2++shape3 shape1~~shape2~~shape3\n86", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 87", "content": "shape1++shape2--shape3 shape1++shape2~~shape3\n次のコードはクリップパスの使い方を示す。「点を加える」モードで５つの点 A,B,C,D,E\nをとっておく。スクリプトでは，まず 4 つの円を合併したシェイプを定義する。すると，こ\nのシェイプが，点Ｅを中心とした同心円のクリッピングパスとして働く。\nr=3;\nshape=circle(A,r)++circle(B,r)++circle(C,r)++circle(D,r);\nclip(shape);\nrepeat(60,t,\ndrawcircle(E,t/2,color->[0,.6,0],size->3);\n);\ngreset();\ndraw(shape,color->[1,1,1],size->2);\n87", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 88", "content": "シェイプは，次の例に示すような反復系のオブジェクトにもなる。ただし，あまり複雑に\nすると破綻をきたすので注意。複雑な形はCinderella の動作を遅くしてしまう。\na=complex(A);\nb=complex(B);\nz=complex(C);\nshape=circle([0,0],0);\nrepeat(50,\nshape=shape++circle(gauss(a),|a-b|);\na=a*z;\nb=b*z;\n);\nfill(shape,color->[1,0.7,0]);\ndraw(shape,color->[0,0,0],size->2);\n15 座標系と基底\n通常， CindyScript の座標系は Cinderella の図形描画での座標系と同じである。しかし，\n特殊関数によって座標系を変えることができる。そのあとは，この修正された画面に対して\n描画が行われる。座標変換を行うときは，どこで実際の描画を行っているかを決定するのが\n難しいかも知れない。そこで，変換の関数を使いやすくするために，CindyScript は gsave\nと grestore の関数を用意している。それは，現在の描画エンジンをスタックに push/pop\nする。これは，図形の表現情報の他に，現在の座標変換を含む。\n15.1 座標変換\n座標系の平行移動: translate(<list>)\nこの関数は [<real>,<real>] 型の <list> を与えて，このベクトルにより描画する座標\n88", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 89", "content": "系を移動する。\n座標系の回転: rotate(<real>)\nこの関数は，実数 <real> の角だけ座標系を回転する。角は弧度法。度数法で与えたい場\n合は ° 演算子を使う。たとえば， rotate(30°) とすれば，座標系を 30° 回転する。\n拡大・縮小: scale(<real>)\nこの関数は <real> によって，拡大・縮小を行う。\nこれらの変換は，続けて行うこともできる。変換の順序によって結果は異なる。\n【例】 座標軸と，頂点の座標が [0,0],[0,1],[1,1],[1,0] である正方形を描く関数\ndrawaxis() を定義し，座標変換を行って描画する。座標変換は２倍して，x 軸方向に\n1，y軸方向に1だけ平行移動，30°回転，という順序でおこなう。描画した図形を移動する\nのではなく，座標変換を行ってから描画をすることに注意。\ndrawaxis():=(\ndraw([-2,0],[2,0]);\ndraw([0,-2],[0,2]);\ndrawpoly([[0,0],[0,1],[1,1],[1,0]],color->[1,0,0]);\n);\ndrawaxis();\nscale(2);\ntranslate([2,2]);\nrotate(30°);\ndrawaxis();\n89", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 90", "content": "【例】繰り返して座標変換を行い，正方形を描く。\nrepeat(90,\ndrawall(square);\ntranslate((1,1));\nscale(0.92);\nrotate(30°);\n);\n15.2 射影基底との関係\nsetbasis(<basis>)\nCinderellaの幾何学部分は，すべての描画が関わる基底を定められるようになっている。こ\nれらの基底とは，平行移動，相似，アフィン，射影で，CindyScript でも使える。 setbasis()\n関数は Cinderella で使われる基底を定義する。引数は Cinderella で使われる基底のラベル\nでなければならない。 setbasis 関数を適用したあとは，CindyScript の以前の座標変換は\n使われなくなるが，それらは gsave で保存しておき， grestore で呼び出すことができる。\n【例】まず，図のように４点A,B,C,Dをとり，モードメニューの「特別」ー「基底の定義」を\n選ぶ。ガイドに従って，A,B,C,D の４点をクリックし，選択モードにしてこのモードを抜け\nると，射影基底Bas0が定義され，右上にアイコンができる。\n90", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 91", "content": "これは，一辺の長さが１である正方形(単位正方形)の４頂点 [0,0],[0,1],[1,1],[1,0]\nが，点 A,B,C,D に対応するような基底であることを意味する。実際，次のスクリプトを実行\nすると，単位正方形内の格子を描く。\nsetbasis(Bas0);\nx=(0..10)/10;\ndrawall(apply(x,([\\verb|#|,0],[\\verb|#|,1])));\ndrawall(apply(x,([0,\\verb|#|],[1,\\verb|#|])));\nCindyScript の内部基底を，既存の点に基づく基底に直接関連付けることも可能である。\nすると，Cinderella での基底を変えなくて済む。これは，基底を定義するための点を与えれ\nて，次の関数で実行できる。\n平行移動基底を設定する: setbasis(<点1>)\n相似基底を設定する: setbasis(<点1>,<点2>)\nアフィン基底を設定する: setbasis(<点1>,<点2>,<点3>)\n射影基底を設定する: setbasis(<点1>,<点2>,<点3>,<点4>)\n【例】次のコードはこの性質を示すものである。 sq の部分は正方形の格子を描く関数の定義。\n91", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 92", "content": "この格子をいろいろな基底によって描く。\nsq:=(draw([0,0],[1,0]);\ndraw([0,0.25],[1,0.25]);\ndraw([0,0.5],[1,0.5]);\ndraw([0,0.75],[1,0.75]);\ndraw([0,1],[1,1]);\ndraw([0,0],[0,1]);\ndraw([0.25,0],[0.25,1]);\ndraw([0.5,0],[0.5,1]);\ndraw([0.75,0],[0.75,1]);\ndraw([1,0],[1,1]);\n);\nsetbasis(A);\nsq;\nsetbasis(B,C);\nsq;\nsetbasis(D,E,F);\nsq;\nsetbasis(G,H,L,K);\nsq;\n15.3 基底スタック\n座標系変換は全体的な表示に影響する。一時的に座標系変換を行い，そのあと以前の状態\nに戻したいことはよくある。CindyScript にはそのための関数が用意されている。\n図の状態の一時保存: gsave()\n92", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 93", "content": "図の状態を戻す: grestore()\ngsave 関数は，すべての図形の状態 (座標変換，大きさ，色，透明度) についての情\n報をスタックに保存する。 grestor はこの情報をスタックから引き出す。したがって，\ngsave() ..... grestore() の間は，他のコードの部分に影響を与えることがない。\nグラフの状態を消去する: greset()\nこの関数は，スタックに保存されていた座標系やすべての図形に関する色，大きさなどの\n情報を消去し，初期状態に戻す。\n15.4 レイヤー\nある意味で， Cindy script で描画される図には3番目の次元がある。各々の図は特定の層\n（レイヤー）にある。レイヤーは数で指定される。図が描かれるとレイヤーは付随する番号の\n順に塗られる。レイヤーが指定されなければ，Cindy script で描画される図は背景層すなわ\nち幾何要素のある層で描画される。初期状態では Cindyscript の draw が実行される前にレ\nイヤーは消去される。しかしながら，自動消去されないレイヤーをマークすることも可能で\nある。\n描画レイヤーを設定する: layer()\nこの関数はレイヤーを指定したレベルに設定する。初期状態では描画が行われる前にレイ\nヤーは消去される。通常，Cindyscript で描く図はスクリプトが書かれている順に描かれる\nので，図が重なる場合はあとから書かれた方が上になる。しかし，レイヤーを設定すること\nにより，重ね合わせを変えることができる。\n【例】次のスクリプトでは，通常の描画順で４つにオーバーラップして円盤を描く。（下図左）\ncir(x,y):=(\nfillcircle((x,y),3,color->(1,.8,0));\ndrawcircle((x,y),3,color->(0,0,0),size->3);\n);\ncir(0,0);\ncir(1,1);\ncir(2,2);\ncir(3,3);\nそれぞれの円盤を描画する前にレイヤー関数が呼ばれると，それぞれの円盤を逆順に描画\nすることができる。（下図右）\nlayer(6);cir(0,0);\n93", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 94", "content": "layer(5);cir(1,1);\nlayer(4);cir(2,2);\nlayer(3);cir(3,3);\nレイヤーを空にする: emptylayer()\nこの関数はレイヤーを空にする。\nレイヤーからすべての図を消去する: clrscr()\nこの関数は，スクリーンで実行されたすべての図を消去する。図が本当に消去された状態\nになっているかどうかを確認することは時々役に立つ。特に，他のスクリプトスロットから\nrepaint() 関数が呼ばれているときに必要になるだろう。\nレイヤーの自動消去: autoclearlayer(<整数>,<ブール値>\nレイヤーのフラグの自動消去はこの関数で行なえる。初期状態で，すべてのレイヤーは画\n面の再計算の間に自動的に消去される。この自動消去フラグを false にすることでこれを切\nり替えることができる。\nレイヤーが自動消去されなければすべての描画命令が保存される。Cinderella はビット\nマップを保存しないであらゆるステップで画面を描き直すので，レイヤーのために多くの描\n画命令を使うとパフォーマンスに影響する。\n【例】initialization スロットに次のコードを書くと，消去されないレイヤーを背景あるい\nは前面に描くことができ， draw スロットに書くと，何か操作するたびにレイヤーを書き換\nえる。\nautoclearlayer(-4,false);\nlayer(-4);\nrepeat(1000,\np = [random(20)-5,random(20)-5];\ncolor([random(),random(),random()]);\n94", "tags": ["アニメーション", "上級者向け", "中級者向け", "初心者向け", "図形描画", "基本操作", "外部連携", "関数"]}
{"title": "Page 95", "content": "fillpolygon(apply([[0,0],[1,0],[1,1],[0,1]],p+#),alpha->.2);\n);\nlayer(0);\nこのコードをInitialization スロットに描くと，レイヤー４で背景を描く。自動消去フラグ\nが false なので，次の図のように，他の作業をする間も表示したままになる。これを draw\nスロットに書いて同じ効果を得るためには，乱数によってできる異なる長方形と色をすべて\n保存しておかなければならない。\n15.5 スクリーン境界の決定\nscreenbounds()\nもし射影平面の有限部分だけ使い， 球面表示を使わないのであれば，スクリーン境界を求\nめることに意味がある。この関数は，見える範囲の長方形を定義している４つの同次座標の\nリストを返す。この関数はユークリッド表示においてのみ有効。\n画面解像度の決定: screenresolution()\n双曲表示・球面表示と対照的に，ユークリッド表示はいたるところに同じ画面解像度を持\nつ。この関数は，原点と [0,1] 間の画素数を与える。同じ図に対していくつかのユークリッ\nド表示があるとき，この関数はすべての画面解像度の最大値を返す。\n【例】点に色をつけてチェッカーボードを作ることができる。次のコードは，現在の拡大率に\n関わりなくすべての画素に色をつける。画素単位で色をつけることを勧めているわけではな\nいが，これが必要なことがあるかもしれない。ほとんどの場合，colorplot 関数が使いやす\nく，より高速である。\nupperleft=(screenbounds()\\_1).xy;\nlowerright=(screenbounds()\\_3).xy;\nwidth in pixels=screenresolution()*(lowerright.x-upperleft.x);\n95", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 96", "content": "height in pixels=screenresolution()*(upperleft.y-lowerright.y);\nrepeat(width in pixels/2, x,\nstart->upperleft.x, stop->lowerright.x,\nrepeat(height in pixels/2, y,\nstart->upperleft.y, stop->lowerright.y,\ndraw([x,y],border->false,size->.5,color->[0,0,0]);\n);\n);\n16 幾何学的演算\n16.1 リストと座標\n直線のための座標は常に同次座標である。すなわち，３つの数のリストで， [a,b,c] が，\n方程式 ax+by +c = 0 を表す。 点の座標はユークリッド座標 (２つの数のリスト [x,y])\nか， または同次座標 (３つの数のリスト [x,y,z] で点 [x/z,y/z]) を表す)。戻り値は常に\n同次座標。以下の説明の中では，特に断りなく，点の形式の引数は<点>で，直線の形式の引\n数は <直線> で表す。<点> と <直線> は両方とも３つの数のリストで表現することができる\nので，両者を区別する方法が必要になる。内部的には，リストは，それが幾何学的にどのよ\nうな意味を持つのかというフラグを持っている。その情報は， geotype(<list>) 関数で得\nることができる。この関数は， \"Point\", \"Line\", \"None\" のいずれかを返す。ベクトル\nが持つ幾何学的な意味に応じて， draw 関数は対応する図形を描く。\n16.2 基本的な幾何学関数\n２直線の交点: meet(<直線1>,<直線2>)\nこの関数は２本の直線の交点を計算し，その同次座標を返す。\n２点を通る直線: join(<点1>,<点2>)\nこの関数は，２点を通る直線を計算し，その同次座標を返す。\n平行線を求める: parallel(<点>,<直線>)\n平行線を求める: parallel(<直線>,<点>)\nこの関数では，点と直線を引数として与え (順序は問わない)，その点を通りその直線に平\n行な直線を求める。戻り値は直線の同次座標。 この関数はユークリッド幾何に対して適用さ\nれる。双曲線幾何と楕円幾何はサポートしていない。この関数は， para(...) と略すこと\n96", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 97", "content": "もできる。\nperp 垂線: perpendicular(<点>,<直線>)\n垂線: perpendicular(<直線>,<点>)\nこの関数では，点と直線を引数として与え (順序は問わない)，その点を通りその直線に垂\n直な直線を求める。戻り値は直線の同次座標。 この関数はユークリッド幾何に対して適用さ\nれる。双曲線幾何と楕円幾何はサポートしていない。この関数は， perp(...) と略すこと\nもできる。\n組み合わせた例 次のコードを実行すると図のようになる。それぞれの演算の戻り値が図形\nのタイプ (点か直線か) を内在しているので，drawall 関数によって自動的に正確に描画さ\nれる。\nA=[1,1];\nB=[2,5];\nC=[7,2];\na=join(B,C);\nb=join(C,A);\nc=join(A,B);\nha=perpendicular(A,a);\nhb=perpendicular(B,b);\nhc=perpendicular(C,c);\nX=meet(ha,hb);\ndrawall([a,b,c,d,ha,hb,hc,X,A,B,C]);\n垂直なベクトル: perpendicular(<list>)\nperp 関数の引数が，２つの数からなるリスト１つだけとする。その場合は，リスト [a,b]\nは [-b,a] に変換される。それは，もとのベクトルを 90° 回転したものである。\n三角形の面積: area(<点1>,<点2>,<点3>)\nこの関数は， <点1>,<点2>,<点3>を３つの頂点とする三角形の面積を計算する。点の方\n向が反時計回りならば面積は正，時計回りならば面積は負になる。３点が同一直線上にある\nときは面積はゼロ。\n16.3 有用な線形代数関数\n線形代数で使う次の関数は幾何でも有用である。特に３次元のベクトルに適用できる。 そ\nの状況 (行列の計算，内積など) については，ベクトルと行列の節を参照されたい。\n97", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 98", "content": "3点の位置ベクトルの行列式: det(<ベクトル1>,<ベクトル2>,<ベクトル3>)\nこの関数は，３つの３次元ベクトル <ベクトル 1>, <ベクトル 2>, <ベクトル 3> からな\nる 3 × 3 行列の行列式を計算する。ベクトルと行列の節にある一般的な行列式と異なり，こ\nの方法はパフォーマンスが優れている。\n2点の位置ベクトルの外積: cross(<ベクトル1>,<ベクトル2>)\nこの関数は，２つの３次元ベクトルの外積を計算する。外積は３次元ベクトルで，もとの\n２つのベクトルと垂直。\n16.4 変換とオブジェクトの型\nオブジェクトの型: geotype(<list>)\nこの関数は，オブジェクトが明確な幾何学的意味を持つかどうかを決定する。戻り値は，\n文字列で \"Point\", \"Line\", \"None\" のいずれか。\nこの関数を，２つの数からなるリストに適用した場合は，常に Point—を返す。\n3 つの数からなるリストに適用した場合は，このリストの内部フラグによって\n\"Point\", \"Line\", または\"None\" のいずれかを返す。Cinderella で描画した幾何オ\nブジェクトであれば，常にそのフラグを有している。 meet 関数の戻り値は常に \"Point\" 。\njoin, parallel, perpendicular 関数の戻り値は常に \"Line\"。さらに，幾何学的意味は\nline と point 関数によって明確に設定することができる。\n点の指定: point(<vector>)\nこの関数は，３つの数のベクトルを，はっきりと \"Point\"として位置づける。引数が３つ\nの数からなるベクトルでなければ無効。\n直線の指定: line(<vector>)\nこの関数は，３つの数のベクトルを，はっきりと \"Line\" として位置づける。引数が３つ\nの数からなるベクトルでなければ無効。\n点を複素数に変換:complex(<点>)\nこの関数は点の座標を複素数に変換する。ここで，ユークリッド座標系はガウスの複素数\n平面と同一視され，点 [a,b] は複素数 a+i*bに変換される。\n複素数を点に変換: gauss(<点>)\n複素数 a+i*b を２つの数のリスト [a,b] に変換する。\n98", "tags": []}
{"title": "Page 99", "content": "４点または直線の複比: crossratio(<vector>,<vector>,<vector>,<vector>)\n４点の幾何複比を計算する。４点が共線であれば，通常の実数射影平面における複比が計\n算される。４点が共線でなければ，複素射影直線の対応した点における複比が計算される。\n共線的無限遠点に対しては２つの結果は同等。\n４つの数の複比: crossratio(<数>,<数 >,<数 >,<数>)\n4つの実数または複素数の複比 (A/B)/(C/D) を計算する。\n16.5 幾何学変換と基底\n代数的な方法で幾何の変換を扱うことができる。変換は 3 × 3 行列で表される。実際の変\n換は，点の同次座標に変換行列を掛けて行われる。この変換行列を計算するためにいくつか\nの関数がある。\n線対称: linereflect(<直線>)\n<直線> に関して対称な点をを求める行列を返す。\n【例】次のコードは，作図した直線 a（AB）と点C に対し，対称変換行列を作り，点C の同\n次座標に掛けて対称点を求める。結果は緑色の点。\nm=linereflect(a);\ndraw(m*C.homog);\n点対称: pointreflect(<点>)\n<点> に関する対称点を求める行列を返す。\n平行移動: map(<点1>,<点2>)\n<点1> を <点2> に写す平行移動を表す行列を返す。\n相似変換: map(<点1>,<点2>,<点3>,<点4>)\n<点1> を <点2> に，<点3>を<点4> に写す相似変換を表す行列を返す。\n99", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 100", "content": "アフィン変換: map(<点1>,<点2>,<点3>,<点4>,<点5>,<点6>)\n<点 1>を<点 2>に，<点 3>を<点 4>に，<点 5>を<点 6> に写すアフィン変換を表す行列を\n返す。\n射影変換: map(<点1>,<点2>,<点3>,<点4>,<点5>,<点6>,<点7>,<点8>)\n<点 1>を<点 2>に，<点 3>を<点 4>に，<点 5>を<点 6>に，<点 7>を<点 8> に写す射影変\n換を表す行列を返す。\n17 計算\nCindyScript は純粋に数的言語である。記号的計算は行なわない。にもかかわらず，通常\n記号的システムだけが行えるようないくつかの手続きを行うことができる。たとえば，関数\nの微分や接線を計算することができる。\n17.1 微分と接線\n微分: d(<function>,<var>)\nこの関数は，第１引数 に与えられた関数の導関数を作る。微分は標準的な実行変数 # につ\nいておこなわれるが，変数名を第２引数に指定しする。次のコードが使用例。青の線がもと\nの関数 f(x) ，赤の線が第１次導関数 g(x) ，そして黒の線が第２次導関数 h(x) のグラフ。\nf(x):=(x-3)*(x-2)*(x-1)*x*.4;\ng(x):=d(f(#),x);\nh(x):=d(g(#),x);\nplot(f(x),size->2);\nplot(g(x),color->[0.8,0,0]);\nplot(h(x),color->[0,0,0]);\n第２次導関数は第１次導関数を微分したものである。しかし注意事項がある。微分関数は\n完全に数の原則に基づいている。f(x)が微分可能ならば，導関数はd(f(#),x)で定義される。\nここで，x が微分する変数を示している。導関数の値は，式 (f(x+eps)-f(x-eps))/2eps\nによって計算される。 eps は十分小さい数。これは，この点における実際の微分係数に十分\n近い値になる。しかし，連続して何度かこの関数を使うと，かなり誤差を生じる。5回も微分\nすると結果は使えない。したがって第５次導関数ではもはや理にかなった計算はできない。\n修飾子\n初期値として，上記の式の eps は 0.0001 に設定されている。この値は，高次導関数の信\n頼性と精度のバランス上十分理にかなった値である。この値は修飾子 eps-><数> によって\n100", "tags": ["KeTCindy", "構文"]}
{"title": "Page 101", "content": "変更することができる。\n接線: tangent(<関数>,<値>)\nこの関数は，微分とよく似ている。しかし，微分係数を計算する代わりに，ある点におけ\nる接線の同次座標を計算する。 その点は第２引数で与える。 次のコードでは，放物線のいろ\nいろな接線を計算している。\nf(x):=(x^2)/4;\nrepeat(250,start->-30,stop->30,x,\nt=tangent(f(#),x);\ndraw(t,alpha->.3);\n);\nplot(f(x),size->3,color->[0,0,0]);\ntangent 関数の戻り値は 3 次元ベクトルの同次座標である。加えて，直線の内部フラグが\n立っている。(「幾何学関数」参照) そのため，自動的に直線が引かれる。\n17.2 高度な計算\n実数値を推測する: guess(<数>)\n推測関数は，浮動小数点数から記号的意味を取り戻すのに使われる。guess 関数は入力と\nして数を予想し，文字列を返す。文字列は入力された数を記述する記号的な式。 guess 関数\nは，次の形式の文字列を生み出そうとする。\na+b*sqrt(c)\nここで a, b, c は，約 1000 以下の分母と分子で表される有理数。入力された数が十分な精\n度で表現できるならば，上記の形で表す。 そうでなければ， guess 関数はそのまま入力値\nを返す。\nたとえば，guess(0.25) は \"1/4\" を返す。guess(3.14159) はそのまま \"3.14159\" を\n返す。\nguess 関数の背後で働いているのは，いわゆる PSLQ と呼ばれるアルゴリズムである。実\n数 x,y,z が与えられたときに，整数関係 ax+by +cz = 0 を発見する実に巧妙なアルゴリ\nズムである。実数 x が２次関係式の解であるかどうかを調べたいならば， a+bx+cx2 = 0\nの整数関係を探さなくてはならない。これが， guess 関数が実装しているものである。解は\nその整数係数を使って再構成される。\nn次方程式の解: roots(<list>)\nroots 関数は，１変数の多項式からなる方程式の解を示す。低次の項から高次の項に向\nかって順に係数を与える。結果は複素数のこともある。\n101", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 102", "content": "【例】たとえば，方程式 x2 +1 = 0 の解を求めたい場合は，単に roots([1,0,1]) とする。\n結果は複素数 [-0-i*1,-0+i*1] である。\n次のコードは，３次方程式の解を計算してグラフとともに表示する。\na=0.4;\nb=-0.4;\nc=-3;\nd=-1;\nf(x):=a*x^3+b*x^2+c*x+d;\nplot(f(x),size->2);\nr=roots([d,c,b,a]);\nforall(r,draw((#,0)))\n18 音声出力 Syntherella\n18.1 概要\nSyntherella は，Cindyscript によるMIDI インターフェイスである。\n音を出すには，中央の C を 60 として半音ずつプラス・マイナスし，playtone(60) と\nする。\n音量は，これに velocity 修飾子をつける。値は実数で０〜１。たとえば，\nplaytone(60,velocity->0.5)\n楽器をチャンネルに割り当てるには，midichannel(3, intrument->25) あるいは\ninstruments(25, channel->3) のように記述する。\n残響は音を鳴らす時間（秒）を指定する duration 修飾子を用いる。たとえば，\nplaytone(60,duration->0.1,velocity->1)。\nタイミングを取るには，CindyScript の wait(...) 関数を使うか，MIDI シーケ\nンサを使う。CindyScript でこのシーケンサにアクセスするには playmelody 関数か\nmidiaddtrack,midistart 関数を用いる。\nトラックをシーケンサに追加するには，midiaddtrack 関数を用いる。追加されたトラッ\nクは midistart 関数によって有効になる。\n18.2 単音\n単音を鳴らす: playtone(<整数>)\n単音を鳴らす。修飾子がないとき，初期設定の楽器音が使われ，鳴る時間は 1 秒で，音量\nは 0.5。\n102", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 103", "content": "【例】 playtone(72, duration->4);\nbend 修飾子によって，音程が半音単位で 2 半音まで上下できる。音の長さ duration が\n0 以下のときは stoptone() で止められるまで鳴り続ける。そのほか，修飾子は次の通り\n修飾子 型 効果\nvelocity 0.0 ... 1.0 音量（ピアノの(cid:20276)盤を叩くときの速度）\namp 0.0 ... 1.0 velocity と同じ\nduration <real> 音の長さ。秒単位。\nchannel 0..15 演奏するチャンネル\nreverb 0.0 ... 1.0 残響効果\nbalance −1.0 ... 1.0 左右のバランス\nbend −2.0 ... 2.0 半音の上げ下げ\n音を止める: stoptone(<整数>)\n特定のキーの音を止める。音が鳴り続けるときに有効。\n特定の周波数で鳴らす: playfrequency(<real>)\nこの関数は引数を周波数 (Hz) （実数）で渡す。より物理的な playsin を使う方がよい場\n合もある。\n修飾子は playtone と同様だが bend 修飾子はここでは無効である。\n【例】\nplayfrequency(440) で 440 Hz の音を，現在選択されているチャンネルの楽器で鳴ら\nす。 playfrequency 関数は，インドのラーガやジャワのガムラン音楽のような非ヨーロッ\nパ系の音階をシミュレートするときに使える。\n18.3 旋律\n旋律の演奏: playmelody(<list>)\nplaymelody() はリストをシーケンサに加えてすぐに演奏する。この関数が呼ばれるとき，\n他のトラックはシーケンサから削除される。リストは，音程と長さを表す整数か文字列，楽\n器や音量で構成される。リストの各要素は，音の高さと長さを表す。音の長さは拍で数えら\nれる。初期状態では 1分につき60の速さで演奏される。これは， midispeed 関数の修飾子\nで変更できる。\n【例】ハ長調の音階\n103", "tags": []}
{"title": "Page 104", "content": "playmelody([[\"C\",1],[\"D\",1],[\"E\",1],[\"F\",1],[\"G\",1],[\"A\",1],[\"H\",1],[\"c\",5]])\nまたは\nplaymelody([[60,1],[62,1],[64,1],[65,1],[67,1],[69,1],[71,1],[72,5]])\n単音ではなく和音を演奏することもできる。そのためには，同時に鳴らす音をリストにす\nる。その形式は[[<音程1>,<音程2>,<音程3>,...],<長さ>] 。\n次のコードは，次第に和音を構成する音を増やしながら演奏する。\nplaymelody([[\"C\",1],[[\"C\",\"E\"],1],[[\"C\",\"E\",\"G\"],1],[[\"C\",\"E\",\"G\",\"c\"],5] ] )\n最後に， −1 か ”P” または ”p” を使うことで休符ができる。\nダイナミクスとフレージング\n旋律を演奏するために，次のようなダイナミクス（音の強弱）やフレージングがある。そ\nれぞれ，その文字列だけのリストにする。\n”ppp”: ピアノピアニッシモ\n”pp”: ピアニッシモ\n”p”: ピアノ\n”mp”: メゾピアノ\n”mf”: メゾフォルテ\n”f”: フォルテ\n”ff”: フォルテッシモ\n”fff”: フォルテフォルテッシモ\n”>”: アクセント\n”staccato”: スタッカート\n”st”: スタッカート\n”legato”: レガート\n”le”: レガート\n[\"velocity\",<real>]: 音量を <real> にする。実数は 0.0 から 1.0\n【例】次のコードは，音階の演奏ををピアニッシモ・スタッカートで始めて，フォルテ・レ\nガートで終わる。\nplaymelody([[\"st\"],[\"pp\"],[\"C\",1],[\"D\",1],[\"E\",1],[\"F\",1],[\"le\"],[\"f\"],\n[\"G\",1],[\"A\",1],[\"H\",1],[\"c\",5]])\n位置合わせ\nトラックが加えられたとき，シーケンサの演奏位置を示すポインタは０に設定される。\n104", "tags": []}
{"title": "Page 105", "content": "\"goto\" と \"gorel\" によって，ポインタは絶対位置か相対位置に移動できる。その構文は次\nの通り。\n・[\"goto\",<real>]: ポインタを，最初から測って <real> の位置に置く。\n非負の数とする。\n・[\"gt\",<real>]: \"goto\" と同じ。\n・[\"gorel\",<real>]: ポインタの位置を相対的に計算して<real> の位置に置く。\n負の値も可だが，結果として負になるような数は禁じられている。\n・[\"gr\",<real>]: \"gorel\" と同じ。\n・[\"||:\"]: 繰り返し記号の始め。\n・[\":||\"]: 繰り返し記号の終わり。\n・[\"1.\"]: 第１カッコ。\n・[\"2.\"]: 第２カッコ。\n【例】\nplaymelody([\n[\"c\",.5],[\"d\",.5],\n[\"$||$:\"],[\"e\",1],[\"g\",1],[\"g\",1.5],[\"a\",.5],[\"g\",1],[\"e\",1],[\"c\",1.5],[\"d\",.5],\n[\"1.\"],[\"e\",1],[\"e\",1],[\"d\",1],[\"c\",1],[\"d\",3],[\"c\",.5],[\"d\",.5],[\":$||$\"],\n[\"2.\"],[\"e\",1],[\"e\",1],[\"d\",1],[\"d\",1],[\"c\",4]\n],speed->200\n);\n楽器のコントロール\n・[\"channel\",<整数>]: チャンネルを (0...15) の範囲で変更する。\n・[\"ch\",<整数>]: channel と同じ。\n・[\"instrument\",<整数>]: チャンネルと関連して楽器を(1...128) の範囲で変更する。\n・[\"inst\",<整数>]: instrument と同じ。\n・[<整数>,<整数>,<整数>,<整数>]: 楽器のコントロールにアクセスする。\n最初の数はコントロールコード，2番目はチャンネル，\nあとの２つはデータ。\nトラックが再開されるときは，楽器は初期値にリセットされる。\n修飾子\n105", "tags": []}
{"title": "Page 106", "content": "修飾子 型 効果\nchannel 0..15 演奏するチャンネルの設定\ninstrument 1 ... 123 楽器の選択\nspeed <real> 1分間あたりの拍数を設定\nloop 0,1,2,3,4 ... 旋律の繰り返し\nstart <real> 開始位置 (拍数で)\n修飾子 loop は演奏が終わったあとの巻き戻しを指定する。この修飾子に続く数は巻き戻\nしの回数。したがって，loop->3 とすると，旋律は4回演奏される。 loop->-1 は無限ルー\nプと解釈されまる。これが呼ばれたあとは，新しい旋律（空の旋律 playmelody([]) も可）\nを加えたときにループが終わりる。 あるいは，midistop() 命令を使うこともできる。\nシーケンサにトラックを追加する: midiaddtrack(<list>)\nこの関数はシーケンサに旋律を追加するがすぐに演奏はしない。シーケンサの開始は\nmidistart 命令によって行われる。シーケンサが演奏を始めたら，トラックを追加しても\nシーケンサは演奏をやりなおさない。トラックはそのまま置き換えられる。さらに，シーケ\nンサと比較して追加されたトラックのタイミングを変えていくいくつかの修飾子がある。\n修飾子\n修飾子 型 効果\nchannel 0..15 演奏するチャンネルを選ぶ\ninstrument 1 ... 123 楽器を選ぶ\nspeed <real> 1分間あたりの拍数\ntrack 0..10 シーケンサのトラックを選ぶ\nstart <real> 開始位置(拍)\nmode <文字列> add, replace, append の文字でトラックを追加したときの動作\nstretch <real> 旋律を追加したときの伸縮(シーケンサと関連)\noffset <eral> シーケンサと関連して，旋律を追加したときのシフト量\nrepeat <real> 旋律がどのくらい追加されるか\nシーケンサの開始: midistart()\nシーケンサを開始する。修飾子は playmelody と同様で，speed，loop，start が使える。\nシーケンサの停止: midistop()\n106", "tags": []}
{"title": "Page 107", "content": "MIDI シーケンサを直ちに停止する。\nシーケンサの速度の設定: midispeed(<real>)\n速度は 1 分あたりの拍数を実数で与える。初期値は 60 です。シーケンサがすでに動いて\nいても速度を変えることができる。\nシーケンサの速度を問い合わせる: midispeed()\n現在のシーケンサの速度を返す。\nシーケンサの位置を設定する: midiposition(<real>)\nシーケンサの位置を特定の位置に設定する。\nシーケンサの開始位置を問い合わせる: midiposition()\nシーケンサの現在の位置を返す。シーケンサが動いているとき，この値は連続的に変化\nする。\n18.4 音色\n楽器を選ぶ: instrument(<整数>)\nこの関数によってチャンネルに楽器を割り当てる。チャンネルが指定されなければ初期値\nのチャンネルが使われる。各楽器には， 1 から 128 までのコードが割り当てられている。楽\n器とコードの対応については，次の instrumentnames で説明する。修飾子によってチャン\nネルを指定すれば，そのチャンネルの楽器が変更される。\n修飾子 型 効果\nvelocity 0.0 ... 1.0 音量 (ピアノの(cid:20276)盤を叩く速さ)\nduration <real> 音の長さ\nbend −2.0 ... 2.0 半音単位で上げ下げ\nchannel 0..15 演奏するチャンネル\nreverb 0.0 ... 1.0 残響効果\nbalance −1.0 ... 1.0 左右のバランス\n利用できる楽器を知る: instrumentnames()\nこの関数は，使われているンピュータで利用できる楽器のリストを返す。標準 MIDI では\n次の楽器が使える。\n107", "tags": []}
{"title": "Page 108", "content": "Piano: Bass: Reed: Synth Effects:\n1 Acoustic Grand Piano 33 Acoustic Bass 65 Soprano Sax 97 FX 1 (rain)\n2 Bright Acoustic Piano 34 Electric Bass (finger)66 Alto Sax 98 FX 2 (soundtrack)\n3 Electric Grand Piano 35 Electric Bass (pick) 67 Tenor Sax 99 FX 3 (crystal)\n4 Honky-tonk Piano 36 Fretless Bass 68 Baritone Sax 100 FX 4 (atmosphere)\n5 Electric Piano 1 37 Slap Bass 1 69 Oboe 101 FX 5 (brightness)\n6 Electric Piano 2 38 Slap Bass 2 70 English Horn 102 FX 6 (goblins)\n7 Harpsichord 39 Synth Bass 1 71 Bassoon 103 FX 7 (echoes)\n8 Clavi 40 Synth Bass 2 72 Clarinet 104 FX 8 (sci-fi)\nChromatic Percussion: Strings: Pipe: Ethnic:\n9 Celesta 41 Violin 73 Piccolo 105 Sitar\n10 Glockenspiel 42 Viola 74 Flute 106 Banjo\n11 Music Box 43 Cello 75 Recorder 107 Shamisen\n12 Vibraphone 44 Contrabass 76 Pan Flute 108 Koto\n13 Marimba 45 Tremolo Strings 77 Blown Bottle 109 Kalimba\n14 Xylophone 46 Pizzicato Strings 78 Shakuhachi 110 Bagpipe\n15 Tubular Bells 47 Orchestral Harp 79 Whistle 111 Fiddle\n16 Dulcimer 48 Timpani 80 Ocarina 112 Shanai\nOrgan: Ensemble: Synth Lead: Percussive:\n17 Organ 49 String Ensemble 1 81 Lead 1 (square) 113 Tinkle Bell\n18 Percussive Organ 50 String Ensemble 2 82 Lead 2 (sawtooth) 114 Agogo Bells\n19 Rock Organ 51 Synth Strings 1 83 Lead 3 (calliope) 115 Steel Drums\n20 Church Organ 52 Synth Strings 2 84 Lead 4 (chiff) 116 Woodblock\n21 Reed Organ 53 Voice Aahs 85 Lead 5 (charang) 117 Taiko Drum\n22 Accordion 54 Voice Oohs 86 Lead 6 (voice) 118 Melodic Tom\n23 Harmonica 55 Synth Voice 87 Lead 7 (fifths) 119 Synth Drum\n24 Tango Accordion 56 Orchestra Hit 88 Lead 8 (bass + lead) 120 Reverse Cymbal\nGuitar: Brass: Synth Pad: Sound effects:\n25 Acoustic Guitar (nylon) 57 Trumpet 89 Pad 1 (new age) 121 Guitar Fret Noise\n26 Acoustic Guitar (steel) 58 Trombone 90 Pad 2 (warm) 122 Breath Noise\n27 Electric Guitar (jazz) 59 Tuba 91 Pad 3 (polysynth) 123 Seashore\n28 Electric Guitar (clean) 60 Muted Trumpet 92 Pad 4 (choir) 124 Bird Tweet\n29 Electric Guitar (muted) 61 French horn 93 Pad 5 (bowed) 125 Telephone Ring\n30 Overdriven Guitar 62 Brass Section 94 Pad 6 (metallic) 126 Helicopter\n31 Distortion Guitar 63 Synth Brass 1 95 Pad 7 (halo) 127 Applause\n32 Guitar harmonics 64 Synth Brass 2 96 Pad 8 (sweep) 128 Gunshot\nチャンネルを選ぶ: midichannel(<int>)\nこの関数は， playmelody あるいは playtone で使うチャンネルを選ぶ。修飾子によっ\nて，選択したチャンネルの楽器や音色を変えることができる。\n108", "tags": []}
{"title": "Page 109", "content": "修飾子 型 効果\nvelocity 0.0 ... 1.0 音量(ピアノの(cid:20276)盤を叩く速さ)\nduration <real> 音の長さ\nbend −2.0 ... 2.0 半音単位での音の上げ下げ\ninstrument 0..15 演奏する楽器の指定\nreverb 0.0 ... 1.0 残響効果\nbalance −1.0 ... 1.0 左右のバランス\nチャンネルの音量を設定する: midivolume(<real>)\n引数は0.0から1.0までの実数。通常は初期値のチャンネルが対象になるが，修飾子によっ\nてチャンネルは変更できる。\n修飾子は，channel で 0〜15 （チャンネル番号）あるいは ”all”（すべてのチャンネル）\nチャンネルのコントローラを設定する: midicontrol(<整数>,<整数>)\n第１の引数はコントローラの番号 (0..127) で，第２の引数はコントローラにセットする値\n(0..127) 。コントローラは，残響効果やバランス，楽器に特有の音に影響する。修飾子は，\nmidivolume と同じ。\n18.5 サウンド関数\n周波数を指定して音を鳴らす: playsin(<real>)\nこの関数では一定の振幅で1秒間音を鳴らします。速さや振幅などは修飾子で指定できる。\n修飾子 型 効果\namp 0.0 ... 1.0 全体の振幅\ndamp <real> 指数関数的に減衰する\nharmonics <list> 音のスペクトル\nduration <real> 鳴らす速さ\nstop <real> duration と同じ\nline 数または文字 音を関連付けるライン\n【例】\nplaysin(440,damp->3,stop->5)\nplaysin(440,damp->3,stop->5,harmoics->[0.5,0.3,0.2,0.1])\nフーリエ級数によって指数関数的に減衰する音を鳴らす。\n0.5*sin(440*2*pi*x)+0.3*sin(2*440*2*pi*x)+0.2*sin(3*440*2*pi*x)\n109", "tags": []}
{"title": "Page 110", "content": "+0.1*sin(4*440*2*pi*x)\n関数によって定義された音を鳴らす: playfunction(<funct>)\n波形を入力して音を鳴らす。時間単位は関数の1単位が1秒にあたる。\n修飾子 型 効果\namp 0.0 ... 1.0 全体の振幅\ndamp <real> 指数関数的に減衰する\nstart <real> 開始位置\nstop <real> 終了位置\nduration <real> 鳴らす速さ\nmode 文字列 append または replace で新しい音のハンドル\nline 数または文字 音を関連付けるライン\nsilent <bool> 発音しない\nexport <bool> サンプルデータの書き出し\n【例】440Hzの音 playfunction(sin(440*x*pi*2));\n減衰する雑音 playfunction(random(),damp->8);\n1秒間の正弦波 playfunction(sin(1000*x*2*pi),stop->1/1000,duration->1)\n正弦波の４４の標本点のリストを作成し，再生する。\nsample=playfunction(sin(1000*x*2*pi),stop->1/1000,silent->true,export->true);\nplaywave(sample,duration->1);\nオーディオデータのリストを再生する: playwave(<list>)\nこの関数は，オーディオデータのリストを再生する。データの値は − 1.0 から 1.0 の範\n囲にあるものとする。サンプリングレートは 44100 Hz で，サンプル音は 1 秒間再生され\nる。再生時間は duration 修飾子で指定できる。修飾子は，amp，damp，duration，line\n(playfunctionの修飾子参照)\n【例】 次のコードでは，playwave で再生する３つのデータを作る。 wait関数によって，３\nつの音が同じラインを使うのに時間差を設ける。 playwave 関数を使う前に，オーディオ\nデータの作成は完了している。\nsample0=apply(1..200,sin(\\verb|#|*2*pi/200));\nsample1=apply(1..100,sin(\\verb|#|*2*pi/100));\nsample2=apply(1..50,sin(\\verb|#|*2*pi/50));\n110", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 111", "content": "playwave(sample0,duration->1,line->1);\nwait(400);\nplaywave(sample1,duration->1,line->1);\nwait(400);\nplaywave(sample2,duration->1,line->1);\n再生の停止: stopsound()\nすべての音の再生を停止する。\n19 ファイル管理\n19.1 データの読み込み\nディレクトリを設定する: setdirectory(<文字列>)\nこれ以降のファイルのディレクトリを設定する。ファイルの読み書きをするときは，対象\nとなるディレクトリを設定してから行なう。設定しない場合はエラーとなる。\n【例】\nWindows： setdirectory(C:￥Users￥ユーザー名￥Desktop);\nMacintosh： setdirectory(“/Users/ユーザー名/Desktop\");\nデータの読み込み: load(<文字列>)\nこの関数の引数 はファイル名とする。ディレクトリ名を含んでもよい。 ファイル名が正\nしければ，ファイルに含まれる全情報が文字列として返される。データは setdirectory で\n指定されたディレクトリから読まれる。\nプログラムコードの読み込み: import(<文字列>)\nこの関数の引数 はファイル名とする。ディレクトリ名を含めることはできない。ファ\nイルの内容は CindyScript のコードとして解析され，実行される。こうして，あらかじ\nめ定義された関数ライブラリを読み込むことができる。 import 関数は CindyScript の\n\"Initialization\" スロットに記述する。\n19.2 データの書き出し\nテキストデータの書き出しは次の手順で行われる。\n1. setdirectory 関数を用いてディレクトリを指定する。\n2. ファイルを開く\n111", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 112", "content": "3. ファイルに書く\n4. ファイルを閉じる\nファイルを開く: openfile(<文字列>)\n指定した名前のファイルを開く。戻り値は書き出しに必要な<ファイル名>。\nファイルに書いて改行する: println(<ファイル名>,<文字列>)\nprintln と同様だが， <ファイル名> で指定したファイルに書き出す。\nファイルに書く: print(<ファイル名>,<文字列>)\nprint と同様だが <ファイル名> で指定したファイルに書き出す。\nファイルを閉じる: closefile(<ファイル名>)\nファイルを閉じる。引数のファイル名は，openfile() の戻り値。\n【例】次の例は，ファイルに書き出す一連の手順を示す。\nsetdirectory(\"path\");\nf=openfile(\"myFile\");\nprintln(f,\"ここにいくつかの数があります。\");\nforall(1..15,print(f,\\verb|#|+\" \"));\nprintln(f,\"\");\nclosefile(f);\nカレントディレクトリの取得\nCinderella のファイルを開いたとき，そのファイルのあるディレクトリが，変数\nloaddirectory に入る。たとえば，デスクトップに置いたファイルを開き，\nprintln(loaddirectory)\nを実行すると，コンソールに\n/Users/ユーザー名/Desktop/\nと表示される。\n【注】この内容は，オリジナルのマニュアルには記述されていない。\n19.3 HTML との連携\nWeb ページを開く: openurl(<文字列>)\nブラウザを立ち上げ，<文字列>のWebページを開く。ブラウザは，通常で使っているもの。\n112", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 113", "content": "javascript を呼び出す: javascript(<文字列>)\n書き出されたアプレットにおいて，ブラウザの Javascript 環境での命令を呼び出す。この\n命令の内容は <文字列> に書く。スタンドアロンのアプリケーションでは何もしない。\n【例】次のコードでは，ブラウザ上にポップアップウィンドウを表示してメッセージを出す。\njavascript(\"alert(’Hi from Cinderella!!’)\");\n19.4 ネットワーク\nTCP ポートを開く: openconnection(<文字列>,<int>)\n第１引数で指定されたサーバーへの TCP 接続を行い，第２引数で指定されたポートを開\nく。戻り値は，このネットワーク接続へのハンドル。\nTCP へ書きだす: print(<handle>,<文字列>)\nTCPへ書きだす: println(<handle>,<文字列>)\nprint と println 関数は，ファイルだけでなく openconnectionによって作られるネット\nワークへも書き出しを行なう。\nTCP ポートへの出力と消去: flush(<handle>)\n与えられた接続への出力バッファを消去する。\nTCP 接続からの読み込み: readln(<handle>)\n与えられた接続から行を読む。もしデータがなければ5秒後にタイムアウトする。\nTCP 接続を閉じる: closeconnection(<handle>)\n与えられたハンドルの接続を閉じる。\n【例】次のコードでは，Web サーバを開いて，そこからHTMLコードを読み出す。\nx=openconnection(\"cermat.org\",80);\nprintln(x,\"GET /\");\ny=\"\";\nwhile(!isundefined(y),y=readln(x);println(y));\ncloseconnection(x);\n113", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 114", "content": "19.5 コンソールへの出力\nテキストの印字: print(<expr>)\nこの関数は を評価した結果をコンソールに表示する。\nテキストの印字: err(<expr>)\nこの関数は， <expr> を評価した結果をコンソールに表示する。<expr> が変数であれば\n変数の値が表示される。\nテキストの印字と改行: println(<expr>)\nこの関数は <expr> を評価して画面に表示して改行する。引数がなければ改行だけ行う。\n画面クリア: clearconsole()\nコンソール画面からすべての文字を消去してクリアする。\n条件の印字: assert(<bool>,<expr>)\nこの関数は，エラーメッセージを作って表示するのに用いられる。この関数は\nif(<bool>,println(<expr>)) を実行するのと同じ。条件が満たされるかどうかを調べて，\nエラーメッセージを作成する。\n【例】assert(isinteger(k),\"k is not an integer\");\nステータス行に表示: message(<expr>)\nこの関数は，ステータス行（ツールバーの下），または，Cinderella・アプレットのための\nブラウザのステータス行で<expr> を評価した結果を表示する。\n20 時間とアニメーション\n20.1 時間\ntime 時刻にアクセスする: time()\nこの関数は４つの整数からなるリスト [h,m,s,ms] を返す。４つの数はコンピュータの時計\nで \"hour,\" \"minute,\" \"second,\" \"millisecond\" に相当する。\n日にアクセスする: date()\nこの関数は３つの整数からなるリスト [y,m,d] を返す。 ３つの数は，コンピュータのカ\nレンダーの \"year,\" \"month,\" \"day\" に相当する。\n114", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 115", "content": "時刻表示: seconds()\nこの関数は， resetclock() の実行後に経過した時間を返す。時間は１単位が１秒になるよ\nうに調整される。時計の精度はミリ秒。\n内部時計のリセット: resetclock()\nseconds 関数の値をリセットする。\n待ち時間: wait(<real>)\nパラメータで与えられたミリ秒単位ですべてのスクリプトの実行を止める。\n20.2 アニメーションのコントロール\nアニメーションを始める: playanimation()\nアニメーションを始める。CindyLab の物理シミュレーションも同様。\nアニメーションの一時停止: pauseanimation()\nアニメーションを一時停止する。\nアニメーション停止: stopanimation()\nアニメーションを停止する。幾何学要素などの状態は初めの状態に戻る。\n21 ユーザー入力\nCindyscript に よ り ，マ ウ ス や キ ー ボ ー ド に よ る 入 力 が で き る 。そ の と き ，\n\"Mouse Down,\" \"Mouse Up,\" \"Mouse Click,\" \"Mouse Drag,\" \"Key Typed\" の\n各スロットを使う。また，加速度センサが搭載されていればこれを利用することができる。\n21.1 マウスとキーボード\nマウスの位置: mouse()\nマウスボタンが押されたとき，マウスの位置を表すベクトルを返す。ベクトルは同次座標。\n(無限遠点も考慮する) ２次元のユークリッド座標が必要であれば， mouse().xy によって座\n標が得られる。\nキー入力: key()\nキーボードで打たれた文字列を返す。\nあるキーが押されたか: iskeydown(<整数>)\n115", "tags": ["KeTCindy", "アニメーション", "上級者向け", "構文"]}
{"title": "Page 116", "content": "この関数は，ある特定のキーが押されたならばブール値 true を返す。そのキーは整数の引\n数で与える。キーの番号は，たとえば 65, 66, 66, .... が ’A’, ’B’, ’C’,... に対応する。 ’shift’,\n’crtl’ と ’alt’ は 16, 17, 18 である。\n押されたキーのリスト: keydownlist()\nこの関数は，押されたキーのリストを返す。\n21.2 加速度センサにおける AMS データ\nAMS データの取得: amsdata()\nこの関数は AMS センサの生のデータを取得する。\n調整された AMS データの取得: calibratedamsdata()\nこの関数は， AMS センサの調整されたデータを取得する。調整されたデータは，空間に\nおけるパソコンの位置をベクトルデータとしたもの。\n22 CindyLab との連携\n22.1 シミュレーション環境\nsimulation()\nこの関数はシミュレーション環境へのハンドルを与える。この関数で，たとえば，運動や\n位置エネルギーにアクセスできる。\n・friction シミュレーション全体の摩擦力 (実数, 読み書き可)\n・gravity シミュレーション全体の重力 (実数, 読み書き可)\n・kinetic シミュレーション全体の運動エネルギー (実数, 読み出しのみ)\n・ke 同上 (実数, 読み出しのみ)\n・potential シミュレーション全体の位置エネルギー (実数, 読み出しのみ)\n・pe 同上 (実数, 読み出しのみ)\n力の適用: addforce(<質量>,<vector>)\n力を存在する質点 に適用する。これは， Integration Tick スロットに置かなければなら\nない。\n力の設定: setforce(<質量>,<vector>)\n力 を存在する質点 に設定する。これは， Integration Tick スロットに置かなければな\nらない。\n力の探索粒子: force(<vector>)\nこの関数は，特定の場所で粒子に及ぼす力をテストするのに使うことができる。ベクトル\n116", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 117", "content": "は位置を表す。関数はこの位置での力を２次元ベクトルで返す。修飾子が使われないならば，\n探針となる粒子は，質量が1，電荷が1，半径が1であるとみなされる。\n【注】もとのマニュアルには，ここに例が載っているが，仕様変更のためか，最近の版ではう\nまく動かないようなので割愛する。\n修飾子: 質量と電荷，半径を明示することも可能。これらはその名前の修飾子で設定される。\nこれらのうち少なくとも１つが設定されたならば，残りのものは 0 に設定される。 したがっ\nて， force((0,0),charge->2) は，電荷2，質量0，半径0の粒子で，点 point [0,0] の\n力をテストする。\n117", "tags": []}
{"title": "Page 118", "content": "23 Cindy3D\nCinderella でレイトレーシングを用いた空間図形を描くには，同梱されている Cindy3D\nプラグインを用いる。Initailiazarion スロットの先頭に次の１行を書く。\nuse(\"Cindy3D\");\nこれで Cindy3D の各関数が使えるようになる。スクリプトを書いて実行すると別ウィン\nドウが開いて描画がされる。\n【重要な注意】\nCindy3D は，ファイルメニューの「HTMLに書き出す」でHTMLファイルに書き出して\nも CindyJS では使えない。CindyJS で 3D を扱うには，HTML ファイルを直接編集する必\n要がある。\n23.1 設定\n以下の関数は初期値の設定なので，最初に一度だけ実行すればよく， Initialization スロッ\nトにuse(\"Cindy3D\"); に続いて記述すればよい。\n色の初期設定：color3d([R,G,B])\nすべてのオブジェクトの表示色の初期値をRGB値に設定する。\n【例】 color3d([0.8,0.8,0]); 表示色を少し暗い黄色に設定する。\n点の色の初期設定：pointcolor3d([R,G,B])\n点の表示色の初期値をRGB値に設定する。\n線の色の初期設定：linecolor3d([R,G,B])\n線の表示色の初期値をRGB値に設定する。\n面の色の初期設定：surfacecolor3d([R,G,B])\n面の表示色の初期値をRGB値に設定する。\n透明度の初期設定：alpha3d(<real>) または surfacealpha3d(<real>)\n面の透明度の初期値を設定する。引数は0以上1以下の実数。\n118", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 119", "content": "光沢の初期設定：shininess3d(<real>)\nすべてのオブジェクトの光沢の初期値を<real>に変更する。\n点の光沢の初期設定：pointshininess3d(<real>)\n点の光沢の初期値を<real>に変更する。\n線の光沢の初期設定：lineshininess3d(<real>)\n線の光沢の初期値を<real>に変更する。\n面の光沢の初期設定：surfaceshininess3d(<real>)\n面の光沢の初期値を<real>に変更する。\nサイズの初期設定：size3d(<real>)\n点と線のサイズの初期値を<real>に変更する。\n点のサイズの初期設定：pointsize3d(<real>)\n点のサイズの初期値を<real>に変更する。\n線の太さの初期設定：linesize3d(<real>)\n線のサイズの初期値を<real>に変更する。\n23.2 描画関数\n以下の関数は Draw スロットに記述する。\nCindy3D の描画開始：begin3d()\nCindy3D の描画終了：end3d()\nCindy3D の描画関数の使い始めと使い終わりを宣言する。Cindy3D の描画関数は、\nbegin3d() から end3d() までの間に書かれたものが実行される。\n現在の描画設定の保存：gsave3d()\n現在の描画に関する諸設定をスタックに保存する。\n描画設定の復帰：grestore3d()\nスタックに保存された描画に関する諸設定を呼び出して、その状態に復帰する。\n点を描く：draw3d(<point>)\n119", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 120", "content": "座標 <point> に点を打つ。\n修飾子 値 効果\nsize ＜real ＞ 点の大きさを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\n線を描く：draw3d(<point1>,<point2>)\n線分，反直線，直線を描く。線の種類は type 修飾子で指定する。指定がなければ線分が描\nかれる。２つの引数は、線の種類に応じて解釈される。\n線種 point1 point2\n線分 始めの端点 終わりの端点\n反直線 始点 通る点\n直線 直線上の点 直線上のもう一つの点\n修飾子 値 効果\ntype ＜string ＞ segment,ray,line のいずれか\nsize ＜real ＞ 線の太さを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 線の色をRGB値でを指定する\nshininess ＜real ＞ 光沢を指定する\n【例】次の例は3種類の線を描画する。\n・ (0,0,0) と (1,0,0) を端点とする線分\ndraw3d([0,0,0],[1,0,0],color->[1,0,0])\n・ (0,0,0) と (0,1,0) を端点とする緑色の線分\ndraw3d([0,0,0],[0,1,0],type->\"segment\",color->[0,1,0])\n・(0,0,0) を始点として、(0,0,1) を通る青の半直線\ndraw3d([0,0,0],[0,0,1],type->\"ray\",color->[0,0,1])\n・ (1,1,1) と (2,1,1) を通る黄色の直線\ndraw3d([1,1,1],[2,1,1],type->\"line\",color->[1,1,0])\n120", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 121", "content": "点を結ぶ：connect3d(<list>)\n<list>で与えられた各点を線分で結ぶ。\n修飾子 値 効果\nsize ＜real ＞ 線の太さを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\n多角形を描く：drawpoly3d(<list>)\n<list>で与えられた各点を線分で結んで多角形を描く。\n修飾子 値 効果\nsize ＜real ＞ 線の太さを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\n多角形の面を描く：fillpoly3d(<list>)\n<list>で与えられた各点を線分で結んで多角形の面を描く。\n修飾子 値 効果\nsize ＜real ＞ 面の大きさを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\nalpha ＜real ＞ 透明度を指定する\n121", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 122", "content": "法線ベクトルを指定して多角形の面を描く：fillpoly3d(<list1>,<list2>)\nユーザー定義の法線ベクトルによる多角形の面を描く。法線ベクトルは、光の当たり方を\n計算するものである。\n<list1>は多角形の頂点の座標，<list2> は多角形の各頂点の法線ベクトル。 <list1>\nと <list2> の長さは一致する必要がある。\n修飾子 値 効果\nsize ＜real ＞ 面の大きさを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\nalpha ＜real ＞ 透明度を指定する\n円盤を描く：fillcircle3d(<point>,<vec>,<real>)\n<point>を中心、<vec>を法線ベクトル、<real>を半径とする円盤を描く。\n修飾子 値 効果\nsize ＜real ＞ 面の大きさを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\nalpha ＜real ＞ 透明度を指定する\n【例】座標軸と円盤を描く。\nInitialization スロットに次のコードを書く。以後の例も同様。\nuse(\"Cindy3D\");\nbackground3d([0.9,0.9,1]);\nrenderhints3d(quality->4);\nlookat3d([4,4,4],[0,0,0],[-1,-1,0]);\ndrawスロットに次のコードを書く。\nrenderhints3d(quality->4);\nbegin3d();\ndraw3d([0,0,0],[3,0,0],color->[1,0,0],size->0.3); // 座標軸\n122", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 123", "content": "draw3d([0,0,0],[0,3,0],color->[0,1,0],size->0.3);\ndraw3d([0,0,0],[0,0,3],color->[0,0,1],size->0.3);\nfillcircle3d([sqrt(3)/6,sqrt(3)/6,sqrt(3)/6],[1,1,1],\nsqrt(3)/2,color->[1,0,0],alpha->0.3);\nend3d()\nrenderhints3d(quality->4) はレンダリングの品質を指定する関数。（後述）\n左が実行結果。右はマウスで画面上をドラッグし，回転したもの。\n球面を描く：drawsphere3d(<point>,<real>)\n<point>を中心、<real>を半径とする球面を描く。\n修飾子 値 効果\nsize ＜real ＞ 面の大きさを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\nalpha ＜real ＞ 透明度を指定する\n網目上の曲面を描く：mesh3d(<int1>,<int2>,<list>)\n曲面を、m行n列の格子点でできる網目状に区切る。（メッシュモデル）\n<int1> 格子点の行数 m\n<int2> 格子点の列数 n\n<list> 格子点のリスト\nリストは2次元の格子点のリストを平坦化したもので，リストの長さは m × n 。\n【例】図は、５行７列の格子点からなる放物線状の面。修飾子の効果を比較するため、かなり\n荒い網目にしてある。\n123", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 124", "content": "begin3d();\npt=apply(-2..2,s,\napply(-3..3,t,\ny = s/3;\nx = t/3;\nz = x^2+y^2;\n(x,y,z);\n);\n);\npt=flatten(pt,levels->1);\nmesh3d(5,7,pt);\nend3d()\napply 関数のネストにより作成した格子点のリストを、flattenn() により平坦化して引\n数に与えている。\n修飾子 値 効果\n法線のタイプを指定する。値は\nnomaltype ＜string ＞\n”perface” , ”pervertex”\ntopology を指定する。値は\ntopology ＜string ＞ ”open”, ”closerows”, ”closecolumns”,\n”closeboth” のいずれか\nsize ＜real ＞ 面の大きさを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\nalpha ＜real ＞ 透明度を指定する\n「normaltype」修飾子は，各面の法線の計算方法を指定する。指定がなければ「perface 」\nとして処理される。\n124", "tags": []}
{"title": "Page 125", "content": "nomaltype 説明\n各面の法線はその面上の三角形の法線。その結果、面の端で光の\nperface\n当たり方が不連続になり、格子構造が明らかになる。\n各面の法線はその面上の三角形の頂点の３本の法線をとり、その\npervertex 一次結合によって計算される。その結果、面の端での光の当たり\n方が連続的になり、格子構造が見えなくなる。\nperface pervertex\ntopology 修飾子は面の端の状態を指定する。指定がなければ、open として処理される。\ntopology 説明\n端点もしくは面の端の点までが面になる。その結果、(m-1) ×\nopen\n(n-1) 個の矩形ができる。 面は両サイドと１つの境界を持つ。\n各行の最初と最後の頂点が結合されて対応する面ができる。その\ncloserows 結果、(m-1) × n 個の矩形ができる。面は両サイドと２つの境界\nを持つ。\n各列の最初と最後の頂点が結合されて対応する面ができる。その\nclosecolumns 結果、m × (n-1) 個の矩形ができる。面は両サイドと２つの境界\nを持つ。\n各行の最初と最後および各列の最初と最後の頂点が結合されて対\ncloseboth 応する面ができる。その結果、m×n 個の矩形ができる。面は両\nサイドを持ち境界はない。\n125", "tags": []}
{"title": "Page 126", "content": "closerows closecolumns\n法線ベクトルを指定して網目を描く：mesh3d(<int1>,<int2>,<list1>,<list2>)\nユーザー定義による法線ベクトルによって網目を描く。\n<int1> 格子点の行数： m <int2>：格子点の列数 n <list>：格子点のリスト\n<list2> 各格子点での法線ベクトルのリスト。\nリストの長さはいずれも m × n 。\n修飾子 値 効果\ntopology を指定する。\ntopology ＜string ＞ 値は open, closerows, closecolumns,\ncloseboth のいずれか\nsize ＜real ＞ 面の大きさを指定する\ncolor [＜real ＞,＜real ＞,＜real ＞] 色をRGBで指定する\nshininess ＜real ＞ 光沢を指定する\nalpha ＜real ＞ 透明度を指定する\n23.3 光の当て方と表現\n背景の色を設定する：background3d(<colorvec>)\n背景の色 <colorvec> をRGB値で設定する。\nカメラの位置：lookat3d(<point1>,<point2>,<vec>)\n３Ｄグラフィクスの表示は、空間に置いたカメラで物体を写していると考える。この関数\nは、カメラの位置と向きを設定する。カメラにはレンズがついていて、レンズの向き（視線\nの方向）で物を見ていると考える。\n<point1>：カメラの位置 <point2>：回転の中心 <vec>：視線の方向\n126", "tags": []}
{"title": "Page 127", "content": "画角の設定 ：fieldofview3d(<real>)\nカメラの画角を設定する。実際のカメラの画角と同じ。画角が小さいと望遠（被写体が大\nきく写る）、大きいと広角（小さく写る）になる。初期設定は45°。\nカメラ深度の設定：depthrange3d(<real1>,<real2>)\nカメラの最小・最大深度を設定する。カメラの深度とは、カメラ面（カメラを通り、視線\n方向に垂直な面）と点の距離。カメラ深度に入らないものは表示されない。第 1 引数が最小\n値、第2引数が最大値。\nレンダリングのヒントを設定する：renderhints3d()\nレンダリングの過程における様々な比率のヒントを設定する。\n修飾子 値 効果\nquality ＜int ＞ 品質レベルを選ぶ。値は 0 以上 8 以下\nレンダリングモードを指定する。\nrenderMode ＜string ＞\n値は ”sinple” か ”raycated”\nsampleRate ＜int ＞ ピクセルごとのサンプル数を設定。1以上の整数。\nピクセルにおける最大の screen space error を\nscreenError ＜real ＞\n設定する。値は 0より大きな実数\n”quality” 修飾子は規定の品質レベルのいずれかを選ぶ。レベル 0 は最低の品質だが、最\n小のリソースですむ。最大の品質は 8 で、非常によい品質だが多くのリソースを必要とする。\nあらかじめ品質レベルが設定されているのは、個々のレンダリングヒントを操作することな\nく、全体の品質を簡単に管理できるようにするため。要請された品質レベルがサポートされ\nない（例えばハードウェアの制限やリソースの制約のため）とき、Cindy3D は下位のレベル\nに移行するかもしれない。\nquality->1 quality->4\n127", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 128", "content": "”renderMode” 修飾子は、オブジェクトのレンダリングについて指定する。”simple”の場\n合は、すべてのオブジェクトは三角形の網目としてレンダリングされる。このモードでは\nシェーディングは頂点ごとに行われ、上図左のように粗削りになる。 ”raycasted”の場合は、\n点・直線・球面はレイ・キャスティングを用いた連続面としてレンダリングされる。また、\nシェーディングは点ごとに行われる。上図右のようになる。 ”raycasted” モードでは高品質\nが得られるがハードウェアの条件によっては時間がかかる。\n”screenError” 修飾子は、スクリーン・スペース・エラーをデティール・アルゴリズムの\nレベルに設定する。 ”simple” モードでは、 点・直線・球面は三角形の網目で近似される。\n最適化のために、小さい、あるいは遠いオブジェクトはレンダリング時間を節約するために\n少しの三角形網目にする。これを ”level of detail”と呼ぶ。 Cindy3D は、それぞれのプリ\nミティブに対して、異なる三角形網目ごとに決められた定数を用いている。あるプリミティ\nブに対しどの定数を用いるかは、各網目をスクリーン上に仮想的に投影し、ピクセルごと\nに最大の三角形の大きさを計測して決定される。それから、最大と予測される三角形サイ\nズが「screenError」の下にある最も小さな網目が、プリミティブを生成するために使われ\nる。これは、「screenError」の低い値がより高い品質となることを意味する。この修飾子は\n”raycasted”レンダリングモードのもとでは無効になる。\n”samplingRate” 修飾子は、オブジェクトのシルエットの滑らかさに影響する。サンプリン\nグ・レートは、出力イメージの各々のピクセルに対するサンプルの数を定める。最終的なピク\nセルの色はそれらのサンプルの平均値。サンプリングレートが高いほど、記憶領域と時間を\n消費するがオブジェクトシルエットはより滑らかになる。要請されたサンプリング・レート\nをサポートできないとき（例えばハードウェアの制限やリソースの制約のための）、Cindy3D\nは低いサンプリング・レートに移行するかもしれない。\n※訳者の実験では、品質は quality の例で示した 2 通りくらいで、数値を変えてもあまり\n変化はなかった。（ハードウェアの制限などによるかもしれない）renderMode の ”simple”\n, ”raycasted” の違いも同様。あとの２つの修飾子の効果については翻訳時点では不明\nだった。デフォルトでは quality->1 なので、 renderhints3d(quality->4) もしくは\nrenderhints3d(renderMode->\"raycasted\") で運用するのがよさそうだ。\n点光源の設定：pointlight3d(<int>)\n<int> は，光源の番号で0以上７以下の整数。\n点光源を発生または修正する。指定された光源がすでに存在するならば修飾子によって指\n定された状態に修正し、利用可能にする。そうでなければ、指定された点光源を作る。修飾\n子がなければ初期値が使われる。点光源は８つまで作ることができ、それぞれに番号を振る。\n128", "tags": []}
{"title": "Page 129", "content": "修飾子 値 効果\n周囲の色をRGB 値で指定された色にする\nambient [R,G,B]\n(初期値は [0,0,0])\n拡散する光の色を RGB 値で指定された色にする\ndiffuse [R,G,B]\n(初期値は [1,1,1])\n反射光の色を RGB 値で指定された色にする\nspecular [R,G,B]\n(初期値は [1,1,1])\nposition ＜point ＞ 点の位置 (初期値は [0,0,0])\n位置がカメラフレームに依存するか、絶対位置\nframe ＜string ＞ かを指定する。値は”camera” か ”world” で、\n初期値は ”camera”\n点光源の指定なし 点光源１ diffuse->[1,1,0]\n点光源2 position->[8,0,0],diffuse->[0,0,1]) 点光源１と２\n方向光源の設定：directionallight3d(<int>)\n<int>は，方向光源の番号で0以上７以下の整数。\n方向光源を発生または修正する。 指定された方向光源がすでに存在するならば修飾子に\n129", "tags": []}
{"title": "Page 130", "content": "よって指定された状態に修正し、利用可能にする。そうでなければ、指定された方向光源を\n作る。修飾子がなければ初期値が使われる。\n修飾子 値 効果\n周囲の色をRGB 値で指定された色にする\nambient [R,G,B]\n(初期値は [0,0,0])\n拡散する光の色を RGB 値で指定された色にする\ndiffuse [R,G,B]\n(初期値は [1,1,1])\n反射光の色を RGB 値で指定された色にする\nspecular [R,G,B]\n(初期値は [1,1,1])\ndirection ＜vec＞ 光の方向 (初期値は [0,-1,0])\n方向がカメラフレームに依存するか、絶対的か\nframe ＜string ＞ を指定する。値は”camera” か ”world” で、初\n期値は ”camera”\n方向光源の指定なし 方向光源１ diffuse->[1,1,0]\n方向光源2 direction->[8,0,0],diffuse->[0,0,1]) 方向光源１と２\n130", "tags": []}
{"title": "Page 131", "content": "スポットライトの設定：spotlight3d(<int>)\n<int>は，光源の番号で0以上７以下の整数。\nスポットライトを発生または修正する。 指定された光源がすでに存在するならば修飾子に\nよって指定された状態に修正し、利用可能にする。そうでなければ、指定された光源を作る。\n修飾子がなければ初期値が使われる。\n修飾子 値 効果\n周囲の色をRGB 値で指定された色にする\nambient [R,G,B]\n(初期値は [0,0,0])\n拡散する光の色を RGB 値で指定された色にする\ndiffuse [R,G,B]\n(初期値は [1,1,1])\n反射光の色を RGB 値で指定された色にする\nspecular [R,G,B]\n(初期値は [1,1,1])\nposition ＜point ＞ 点の位置 (初期値は [0,0,0])\ndirection ＜vec＞ 光の方向 (初期値は [0,-1,0])\nスポットコーンのカットオフ角。ラジアンで指\ncutoffAngle ＜real ＞ π π\n定。 0 から 初期値は\n2 4\nexponent ＜real ＞ 減衰指数。値は 0以上128未満。初期値は０\n方向がカメラフレームに依存するか、絶対位置\nframe ＜string ＞ かを指定する。値は”camera” か ”world” で、\n初期値は ”camera”\n光源を無効にする：disablelight3d(<int>)\n<int>は，光源の番号で0以上７以下の整数。\n与えられた番号の光源を無効にする。\n131", "tags": []}
{"title": "Page 132", "content": "24 CindyJS\nCindyJS コンテンツを作成するには、Cinderella でコンテンツを作成してファイルメ\nニューから「HTML に書き出す」か，直接 HTML ファイルをテキストエディタなどで編集\nする。ただし，Cinderella とは完全互換ではないので，Cinderella で作ったものがそのまま\nHTMLで動くとは限らない。また，その逆もある。\n24.1 CindyJS の HTML 基本構造\nHTMLファイルをテキストエディタなどで編集する場合の最小構造は次の通りである。\n<!DOCTYPE html>\n<html>\n<head>\n<script type=\"text/javascript\"\nsrc=\"https://cindyjs.org/dist/latest/Cindy.js\"></script>\n<title>タイトル</title>\n<script id=\"csinit\" type=\"text/x-cindyscript\">\n初期設定\n</script>\n<script id=\"csdraw\" type=\"text/x-cindyscript\">\nメインコード\n</script>\n<script type=\"text/javascript\">\nCindyJS({\nscripts: \"cs*\",\nautoplay: true,\ngeometry: [\n幾何要素\n],\nports: [{\nid: \"CSCanvas\",\nwidth: 500,\nheight: 500,\ntransform: [{\nvisibleRect: [0, 1, 1, 0]\n}]\n132", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "外部連携", "構文", "関数"]}
{"title": "Page 133", "content": "}]\n});\n</script>\n</head>\n<body>\n<div id=\"CSCanvas\"></div>\n</body>\n</html>\n以下に，この内容について解説する。\n24.1.1 CindyJS ランタイムのロード\n<script type=・・・/latest/Cindy.js\"></script>で CindyJS のサイトから最新の\nランタイムをロードする。Cinderella から書き出した場合は，CSS をロードする次の行が\n入る。\n<link rel=\"stylesheet\" href=\"https://cindyjs.org/dist/v0.8/CindyJS.css\">\nCindyJS のサイトから Cindy.js と CindyJS.css をダウンロードして置いた場合は，同\nじディレクトリであれば\n<link rel=\"stylesheet\" href=\"CindyJS.css\">\n<script type=\"text/javascript\" src=\"Cindy.js\"></script>\nと書けばよい。\nヘッダには，この他，スタイルシートの内容などの事項を書くことができる。\nまた，CindyGL などを使う場合も同様に記述する。\n24.1.2 スクリプトの記述\n<script id=\"csinit\" type=\"text/x-cindyscript\">\nには，CindyScript の初期設定を書く。Cinderella で Initialization スロットに書く内容\nだ。内部時計を取得する seconds() を使う場合は，ここに resetclock(); を書く。\n<script id=\"csdraw\" type=\"text/x-cindyscript\">\nには，drawスロットに書く内容を記述する。\nこの他次の id が使える。CindyScript の各スロットに応じている。\n133", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 134", "content": "csmove いくつかの要素が移動したとき呼び出される\ncsmousedown マウスボタンが押された後に呼び出される\ncsmousemove マウスが動かされたときに呼び出される\ncsmousedrag マウスがドラッグされたときに呼び出される\ncsmouseup マウスボタンが離されたら呼び出される\ncsmouseclick マウスボタンをクリックすると呼び出されます\ncskeydown キーが押されたときに呼び出される\ncstick 時間をとったアニメーションを実行する\ncsmultidown マルチタッチで指が下がった後に呼び出される\ncsmultidrag マルチタッチでドラッグしたときに呼び出される\ncsmultiup マルチタッチで指が離された場合に呼び出される\n24.1.3 CindyJS の初期化\nCindyJS() はCindyJS の初期化関数。以下のパラメータを持つ。\nscripts\nscripts: \"cs*\" は、前述の cs で始まるすべてのスクリプトがアプレットに使用される\nことをいう。\"csinit\" などだ。\nアニメーションautoplay:true は、新しいフレームがレンダリングされたときに常に Draw\nスクリプトを実行する必要があると述べている。このオプションがなければ、構造に何かが\n変わった場合にのみ、画像は再描画される。\nこの他，次のオプションがある。\n・controls は、アニメーション制御ボタン (再生、一時停止、停止) を表示するかどうかを\n制御するブール値。\n・speed はアニメーション速度。デフォルトは1。\n幾何要素\ngeometry ブロックは幾何要素についての記述で，作図ツールでとる点や線分などの情報\nが入る。たとえば，\n{name:\"A\", kind:\"P\", type:\"Free\", pos:[-4,4]}\nは，自由点A を座標 [-4,4] に取ることを表す。\nports\nports ブロックは出力ポートを指定する。次の項目からなる。\n134", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 135", "content": "id 描画キャンバスの要素id\nelement 描画キャンバスのDOM 要素\nwidth, height キャンバスの寸法\nbackground キャンバスに使用するCSS の背景色。初期値は透明。\ntransform 座標系変換を指定する。オプションについては後述。省略可。\nfill ”window”ウィンドウのinnerWidth とinnerHeight と\n一致するようにキャンバスのサイズを調整する。\ngrid ユーザー単位でグリッドサイズを指定する。\n欠落またはゼロの値は、グリッドが描画されない。\nsnap ブール値でスナップモードの指定。デフォルトはfalse。\naxes 座標軸を描画するかどうかを示すブール値。デフォルトはfalse。\nports の transform のオプション\n・{scale :<number>]}\nスケール量\n・{translate:[<number>,<number>]}\n平行移動量\n・{scaleAndOrigin:[<number>,<number>,<number>]}\n事前状態を参照せずに変換を指定する。最初の数字はスケーリング係数で、他の 2 つは原\n点の位置\n・{visibleRect:[<number>,<number>,<number>,<number>] }\nウィジェットのサイズを変更するとうまく相互作用する方法で、以前の状態を参照せずに\n変換を指定する。指定された座標は、ユーザー座標で指定された目に見える長方形の左、上、\n右、下の座標。座標系は、この長方形が完全に見え、ウィジェット内の中央に配置されるよ\nうに選択される。\nこの他に，defaultAppearance などのパラメータがある。Cinderella で簡単なスクリプ\nトを書いて，HTML文書に書き出してみるとよい。\nここまでがHTMLのヘッダで，そのあとに<body> を書く。\n<body> には，<div id=\"CSCanvas\"></div> の他に，説明文など通常の HTML の文書\nを書くことができる。\n24.2 CindyJS の HTML 文書の実例\n次の例は，マンデルブロ集合を描くための，CindyJS のHTML文書である。\n135", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 136", "content": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>mandelbloat set</title>\n<script type=\"text/javascript\"\nsrc=\"https://cindyjs.org/dist/latest/Cindy.js\"></script>\n<script id=\"csdraw\" type=\"text/x-cindyscript\">\nN = 30;\nf(x):=(\nc = complex(x); //-0.75; //center -0.75+0*i\nz = 0;\nn = 0;\nrepeat(N, k,\nif(|z| <= 2,\nz=z*z+c;\nn = k;\n);\n);\nhue(n/N)\n);\ncolorplot(f(#));\n</script>\n<script type=\"text/javascript\">\nCindyJS({\nscripts: \"cs*\",\nautoplay: true,\nports: [{\nid: \"CSCanvas\",\nwidth: 500,\nheight: 500,\ntransform: [{\nvisibleRect: [-2, 2, 2, -2]\n}]\n}]\n136", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 137", "content": "});\n</script>\n</head>\n<body>\n<div id=\"CSCanvas\"></div>\n</body>\n</html>\nCinderella で，２点 A(-2,-2) , B(2,2) を作図し，CIndyScript のDrawスロットに次\nのコードを書いて実行し，HTMLに書き出したものと比較すると，Cinderella からの書き出\nしでどのような情報が追加されているかがわかるだろう。\nN = 30;\nf(x):=(\nc = complex(x);\nz = 0;\nn = 0;\nrepeat(N, k,\nif(|z| <= 2,\nz=z*z+c;\nn = k;\n);\n);\nhue(n/N);\n);\ncolorplot(f(#),A,B,pxlres->1);\n137", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 138", "content": "25 索引\n制御\nif もし〜ならば〜\ntrigger 条件を満たせば実行\nwhile While 繰り返し\nrepeat 繰り返し\nforall すべての要素に対して繰り返し\neval 式の強制的な評価\n変数の管理\nclear 変数をクリア\nkeys オブジェクトまたは変数に関連したローカルキーのリストを返す\ncreatevar 局所変数の作成\nremovevar 局所変数の削除\nregional l局所変数を作る。引数の数は任意\n出力\nprint 値を印字する\nprintln 印字して改行する\nclearconsole コンソールをクリア\nerr デバッグ用の印字\nassert エラーチェックの印字\nformat 数を整形する\nmessage ステータス行にメッセージを表示する\n算術関数\nsqrt 平方根\nexp 指数関数\nlog 自然対数\nsin 正弦\ncos 余弦\ntan 正接\narcsin 正弦の逆関数\narccos 余弦の逆関数\narctan 正接の逆関数\narctan2 ベクトル(x,y) のなす角\nadd 和\nsub 差\n138", "tags": []}
{"title": "Page 139", "content": "mult 積\ndiv 商\nmod 剰余\npow べき乗\nabs 絶対値\nround 四捨五入\nfloor その数以下の最大の整数\nceil その数以上の最小の整数\nre 複素数の実部\nim 複素数の虚部\nconjugate 共役複素数\nrandom 一様乱数\nrandominteger 整数の一様乱数\nrandombool ブール値の乱数true またはfalse\nrandomnormal 正規乱数\nseedrandom 乱数の種(seed) の設定\nブール関数\nnot 論理否定\nand 論理積\nor 論理和\nxor 排他的論理和\n型の判定\nisinteger 整数か\nisreal 実数か\niscomplex 複素数か\niseven 偶数か\nisodd 奇数か\nislist リストか\nismatrix 行列か\nisnumbervector 数ベクトルか\nisnumbermatrix 数行列か\nisstring 文字列か\nisgeometric 幾何学要素か\nisselected 選択されているか\nispoint 幾何の点か\nisline 直線か\niscircle 円か\n139", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 140", "content": "isconic 円錐曲線か\nismass 質点か\nissun 恒星か\nisspring バネか\nisundefined 未定義要素か\n文字関数\ntext 文字列への変換\nparse CindyScript の式として文字列を解析\nsubstring 文字列の抜きだし\nreplace 文字列の置換\ntokenize 文字列の分解\nindexof 文字列の検索\nlength 文字列の長さ\nformat 数を整形する\nguess 文字列の解析\nsort リストの並べ替え\nfontfamilies 使用可能なフォントのリストを得る\nunicode ユニコードを文字列に変換する\ncandisplay 文字列が現在のシステムフォントで表示できるかどうかテストする\n微積分\nd 関数の微分\ntangent 接線を計算する\nguess 浮動小数点数から記号的意味を推測する\nroots ｎ次方程式の解を与える\n基本的なリスト処理\ntake リストの要素へのアクセス\nlength リストの長さ\ncontains 内容のテスト\nappend 要素の後方追加\nprepend 要素の前方追加\nconcat リストの連結\ncommon リストの共通部分\nremove リストからの要素の削除\nリストの要素の走査\nforall 全要素を走査する\napply 全要素に式を適用する\nselect 条件を満たす要素を選び出す\n140", "tags": ["KeTCindy", "初心者向け", "基本操作", "構文"]}
{"title": "Page 141", "content": "高度なリスト処理\npairs リストの要素のすべてのペアを作る\ntriples リストの要素のすべての3つの組を作る\ndirectproduct 2つのリストの直積\nconsecutive リストの連続する要素のペアからなるチェーンを作る\ncycle 連続する２つずつの要素のペアで輪を作る\nreverse リストの要素を逆順にする\nset リストの要素を単一化した集合を作る\nsort リストの要素を並べ替える\nflatten ネストされたリストの平坦化\n幾何学要素のリスト\nallelements すべての要素のリストを作る\nallpoints すべての点のリストを作る\nalllines すべての直線のリストを作る\nallsegments すべての線分のリストを作る\nallcircles すべての円のリストを作る\nallconics すべての円錐曲線のリストを作る\nallmasses すべての質点のリストを作る\nallsprings すべてのバネのリストを作る\nリストの算術演算\nsum 要素の総和を求める\nproduct 要素をすべて掛け合わせる\nmin 要素の最小値を求める\nmax 要素の最大値を求める\nベクトルと行列の操作\nzerovector 零ベクトルを生成する\nzeromatrix 零行列を作る\nrowmatrix 行ベクトルから行列への変換\ncolumnmatrix 列ベクトルから行列への変換\nmatrixrowcolumn 行と列の数を2つの数の要素からなるリストとして返す\nrow 行をベクトルとして返す\ncolumn 列をベクトルとして返す\nsubmatrix 小行列を作る\ntranspose 転置行列を返す\ndist ベクトルの距離を返す\ndet 正方行列の行列式を返す\nhermiteanproduct ２つのベクトルのエルミート内積を返す\n141", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 142", "content": "inverse 正方行列の逆行列を返す\nadj 正方行列の余因子行列を返す\neigenvalues 正方行列の固有値を返す\neigenvectors 正方行列の固有ベクトルを返す\nlinearsolve 一次方程式の解を返す\nconvexhull3d ３次元の凸多面体を作る。\n描画関数\ndraw 点，線分を描く\ndrawpoly 多角形を描く\nfillpoly 中を塗った多角形を描く\ndrawcircle 中心と半径を与えて円を描く\nfillcircle 中を塗った円を描く\ndrawall リストのすべての要素を描画する\nconnect リストの点をつなぐ\ndrawtext 文字列を表示する\ndrawtable 表を描く\nrepaint 画面の再描画\n描画の外観を設定する\npointsize 点の大きさ\nlinesize 線の太さ\ntextsize 文字の大きさ\npointcolor 点の色\nlinecolor 線の色\ntextcolor 文字の色\ncolor すべての色\nalpha すべての不透明度のアルファ値\ngsave 色，アルファ値，幅，変換をスタックに入れる\ngrestore 色，アルファ値，幅，変換をスタックから出す\ngreset 色，アルファ値，幅，変換のスタックを空にする\n色の関数\nred 赤のRGBベクトルを返す\ngreen 緑のRGBベクトルを返す\nblue 青のRGBベクトルを返す\ngrey 灰色のRGBベクトルを返す\nhue 色相のRGBベクトルを返す\n関数プロット\nplot 関数をプロットする\n142", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 143", "content": "fillplot 積分のようにハイライトさせてプロットする\ncolorplot 関数の値によって色をプロットする\ndrawfield ベクトル場を描画する\ndrawfieldcomplex 複素ベクトル場を描画する\ndrawforces 力の場を表示する\ndrawcurves 物理のオシログラフを描く\n画像の操作\ndrawimage 画像を表示する\nmapimage 画像を変形する\nimagesize 画像の大きさを取得する\nimagergb 画素の色情報を取得する\ncreateimage カスタム画像を作る\nclearimage 画像の内容を消去する\nremoveimage 画像を削除する\ncanvas キャンバスに描く\nシェイプ\ncircle 円形のシェイプを作る\npolygon 多角形シェイプを作る\nhalfplane 半平面シェイプを作る\nscreen スクリーンのシェイプを作る\nfill シェイプを塗りつぶす\ndraw シェイプの輪郭線を描く\nclip シェイプのクリップパスの設定\n幾何変換\ntranslate 座標系全体を平行移動\nrotate 座標系全体を回転\nscale 座標系全体を拡大・縮小\nsetbasis 座標系全体の基底を変換\n幾何関数\nmoveto 点の位置を変える\nmeet 直線の交点を求める\njoin ２点を結ぶ\nperp 垂直な２次元ベクトルを返す\nperp 点を通り直線に垂直な直線を求める\nperpendicular 点を通り直線に垂直な直線を求める\npara 点を通り直線に平行な直線を求める\nparallel 点を通り直線に平行な直線を求める\n143", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 144", "content": "cross ２つの３次元ベクトルの外積を返す\ndist ２点間の距離を返す\narea ３点で与えられた三角形の面積を返す\ndet 3×3行列の行列式を計算する\ncrossratio ４点の複比を計算する\ncomplex xy 座標を複素数に変換する\ngauss 複素数を点の座標に変換する\npoint 数ベクトルを点として位置づける\nline 数ベクトルを直線として位置づける\ngeotype ベクトルの幾何学的意味を返す\nmap 幾何変換を表す行列を返す\npointreflect 点に関する対称点を求める行列を返す\nlinereflect 直線に関して対称な点をを求める行列を返す\nincidences 幾何要素にインシデントである要素のリストを返す\nlocusdata 軌跡上の点の座標のリストを返す\nインスペクタ\ninspect 利用できる属性のリストを作る\ninspect 属性を読み出す・設定する\n要素の作成と消去\ncreatepoint 位置とラベルを指定して点を加える\ncreate 幾何要素を作成する\nremoveelement 幾何の要素をそれに従属する点とともに消去する\nalgorithm 幾何要素の作図手順を得る\ninputs 幾何要素を定義するために必要な要素のリストを得る\nelement 引数の名前の幾何要素へのハンドルを得る\nMIDI\nplaytone MIDI の単音を鳴らす\nstoptone 音を止める\nplayfrequency 特定の周波数で鳴らす\nplaymelody メロディを鳴らす\nmidiaddtrack シーケンサにトラックを追加する\nmidistart シーケンサの開始\nmidistop シーケンサの停止\nmidispeed シーケンサの速度設定\nmidispeed シーケンサの速度を問い合わせる\nmidiposition シーケンサの位置を設定する\nmidiposition シーケンサの開始位置を得る\n144", "tags": []}
{"title": "Page 145", "content": "instrument 楽器を選ぶ\ninstrumentnames 利用できる楽器のリストを得る\nmidichannel チャンネルを設定する\nmidivolume チャンネルの音量を設定する\nmidicontrol チャンネルのコントローラを設定する\nサンプルーオーディオ\nplaysin 特定の周波数の音を鳴らす\nplayfunction 数式で定義した音を鳴らす\nplaywave オーディオデータのリストを再生する\nstopsound すべての音の再生を停止する\nマウスとキーボードからの入力\nmover 最後に動かされた点を返す\nmouse マウスボタンが押されたときのマウスの位置を返す\nelementsatmouse マウスカーソルの近くにある要素のリストを返す\nkey キーボードで打たれた文字列を返す\niskeydown あるキーが押されたかどうか問い合わせる\nkeydownlist 押されたキーのリストを返す\namsdata 重力センサからデータを得る\ncalibratedamsdata 調整されたAMS データを取得する\n時間\nresetclock 内部時計のリセット\nseconds リセット後の経過時間\ntime 現在の時刻\ndate 現在の日付\nwait ミリ秒単位で指定された時間，実行を止めて待つ\nファイル入出力\nsetdirectory ファイルのディレクトリを設定する\nload データの読み込み\nimport プログラムコードの読み込み\nopenfile ファイルを開いてハンドルを返す\nclosefile ファイルを閉じる\nprint ファイルに書く\nprintln ファイルに書いて改行する\nネットワーク\nopenurl Web ページをブラウザで開く\n物理シミュレーション\nsimulation シミュレーションへのハンドル提供\n145", "tags": ["LaTeX", "中級者向け", "外部連携", "数式描画"]}
{"title": "Page 146", "content": "force 力の探索粒子を設定する\naddforce 力を存在する質点に適用する\nsetforce 力を存在する質点に設定する\nアニメーション\nplayanimation アニメーションを開始する\npauseanimation アニメーションをいったん停止する\nstopanimation アニメーションを終わる\nCindy3D\ngsave3d 現在の描画設定の保存\ngrestore3d 描画設定の復帰\ndraw3d 点，線を描く\nconnect3d 点を結ぶ\ndrawpoly3d 多角形を描く\nfillpoly3d 多角形の面を描く\nfillcircle3d 円盤を描く\ndrawsphere3d 球面を描く\nmesh3d 網目状の曲面を描く\nbackground3d 背景の色を設定する\nlookat3d カメラの位置\nfieldofview3d 画角の設定\ndepthrange3d カメラ深度の設定\nrenderhints3d レンダリングのヒントを設定\npointlight3d 点光源の設定\ndirectionallight3d 方向光源の設定\nspotlight3d スポットライトの設定\ndisablelight3d 光源を無効にする\n146", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 1", "content": "K TCindy 関数リファレンス\nE\nK TCindy Project Team\nE\n2019年12月4日\n- 第3.2版 -\n目次\n1 平面の図形とグラフ 2\n1.1 設定・定義 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n1.1.1 環境設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n1.1.2 描画設定・定義 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n1.2 描画 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n1.2.1 書式とオプション . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n1.2.2 点・線分・直線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n1.2.3 曲線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n1.2.4 関数のグラフ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n1.2.5 文字 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n1.2.6 マーキング . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n1.3 プロットデータの操作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n1.4 計算 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n1.5 値の取得と入出力 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n1.6 作表 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n1.7 その他 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\n2 他の数式処理ソフトなどとの連携 91\n2.1 Rとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n2.2 Maximaとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n2.3 Risa/Asirとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n2.4 FriCAS(Axiom)との連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n2.5 MeshLabとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\n2.6 表計算ソフトとの連携 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n1", "tags": ["LaTeX", "インストール", "中級者向け", "初心者向け", "基本操作", "数式描画", "環境構築"]}
{"title": "Page 2", "content": "3 アニメーションPDF 118\n3.1 概要 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n3.2 関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n3.3 制作例 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\n4 KeTスライド 123\n4.1 概要と制作手順 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n4.2 コンテンツファイル . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124\n4.3 関数 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n5 KETCindy3D 133\n5.1 概要 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n5.2 設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n5.3 描画 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\n5.3.1 点・線 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\n5.3.2 多面体 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n5.3.3 曲面 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146\n5.4 プロットデータの操作 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n5.5 その他 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164\n6 KeTJS 173\n6.1 CindyJSとKeTJS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n6.2 KeTJSの動作環境 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n6.3 KeTJSの設定 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175\n6.4 KeTJSのコマンド . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176\n7 付録 178\n7.1 用語解説 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178\n7.2 Cinderellaの作図ツール . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178\n7.3 他のテキストエディタの使用 . . . . . . . . . . . . . . . . . . . . . . . . . . 179\n7.4 色名とカラーコード一覧 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\n7.5 点の作図についての比較表 . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\n8 関数一覧 182\n2", "tags": ["KeTCindy", "アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "基本操作", "外部連携", "構文", "環境構築"]}
{"title": "Page 3", "content": "1 平面の図形とグラフ\n1.1 設定・定義\n1.1.1 環境設定\n関数 Ketinit(options)\n機能 KETCindy を初期化する。平面図形では Draw スロットに，空間図形では Initializa-\ntion スロットの冒頭に記述する必要がある。\n説明 option 作業サブフォルダ\n通常は不要で，Ketinit() だけでよい。\n関数 Initglist(), Setglist(), Addglist()\n機能 ketlibスロットで作られる描画データを描画リストに追加する。\n説明 Implicitplot,Hatchdata など実行時間のかかるコマンドを (cid:12)gures スロットにおくと，\nその都度実行されてしまう。それを避けるためketlibスロットにおいたときに用いる。\nInitglist(); // ketlibスロットで\nImplicitplot((cid:13)(cid:13)1(cid:13)(cid:13),fun,rng);\nSetglist();\nKetinit(); // figuresスロットで\nAddglist();\n関数 Set(cid:12)les((cid:12)lename）\n機能 出力するファイル名の設定\n説明 出力するTexのファイル名を指定する。\n出力するファイル名は 初期設定では，作図しているCinderellaのファイル名。\nたとえば，triangle.cdy で作図して出力すると，triangle.tex ができる。\nこれに対し，triangle.cdy で作図しているときに，grav.tex で出力したい場合は\nSetfiles(\"grav\");\nとすると，grav.tex ができる。\n関数 Setparent((cid:12)lename）\n機能 Parent ボタンで出力するファイル名の設定\n説明 Figpdf() を使ってParent ボタンで出力するTexのファイル名を指定する。\nParent ボタンで出力するファイル名は 初期設定がないので，指定する必要がある。\nたとえば，triangle.cdy で作図しているときに，図サイズの grav.pdf を作る場合，\n3", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "図形描画", "外部連携", "構文", "環境構築", "関数"]}
{"title": "Page 4", "content": "Setparent(\"grav\");\nとすると，図のTeXファイルtriangle.tex と PDFを作る grav.tex ができ，ここから\ngrav.pdf ができる。\n関数 Changework(パス名）\n機能 作業ディレクトリを指定（変更）する\n説明 作業ディレクトリは，初期設定では，現在作図しているファイルのあるフォルダ（ディ\nレクトリ）の (cid:12)g フォルダである。これを変更する。\n関数 Addpackage(パッケージ名)\n機能 TeXのパッケージを追加する\n説明 プレビュー用のTeXソースにパッケージを追加する。\n【例】emathパッケージを追加する。\nAddpackage(\"emath\");\nまたは\nAddpackage([\"emath\"]);\nにより，プレビュー用のTeXのプリアンブルに\n\\usepackage{emath}\nが追加されて，emath のコマンドが利用できる。\n注）初期設定では，次のパッケージを利用している。\nketpic, ketlayer, amsmath, amssymb, graphicx, color\n関数 Usegraphics(\"pict2e\")\n機能 TeXのグラフィクスパッケージを\"pict2e\" に変更する\n説明 デフォルトのパッケージは \"tpic\" であるが，これを\"pict2e\" に変更する。\n)関数一覧\n4", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 5", "content": "1.1.2 描画設定・定義\n関数 Addax(0または1)\n機能 座標軸の表示\n説明 引数が 1 のとき座標軸を描き，0 のとき描かない。初期設定は 1 で，座標軸を描かな\nい場合のみ Addax(0) とすればよい。\n【例】三角形を描く\n左図が 初期設定（座標軸表示） Addax(0) をつけると右図になる。\nListplot([B,A,C]);\nLetter([A,\"ne\",\"A\",B,\"se\",\"B\",C,\"se\",\"C\"]);\ny\nA A\nx\nO B C B C\n関数 Setax()\n機能 座標軸の書式を設定する。\n説明 Cinderellaの描画面には反映されない。（座標軸は描かれない）\n引数はリストで与え，要素は順番に\n1. 軸の形状（直線は \"l\" ，矢印は \"a\"） 初期設定は直線\n矢印の大きさの倍率を指定するときは，\"a0.5\"のようにする。\nまた，矢印のスタイルは Setarrowで指定する。\n2. 横軸名 初期設定は \"x\"\n3. 横軸名の位置 初期設定は \"e\"\n4. 縦軸名 初期設定は \"y\"\n5. 縦軸名の位置 初期設定は \"n\"\n6. 原点名 初期設定は \"O\"（文字として書かれる）\n7. 原点名の位置 初期設定は \"sw\"\n8. 線種\n9. 線の色\n10. ラベルの色\nそれぞれダブルクォートでくくる。色は，色名が使える。\"red\" など。\n5", "tags": []}
{"title": "Page 6", "content": "10の引数のうちn番目だけを指定する場合は，[n,\"内容\"]で指定できる。\nまた，後方は省略できる。\n【例】座標軸の先端を矢印にし，原点の北西にOを書く。\nSetax([\"a\",\"\",\"\",\"\",\"\",\"\",\"nw\"]);\n【例】原点の北西にOを書く。\nSetax([7,\"nw\"]);\n【例】軸を赤の点線にする。\nSetax([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"do\",\"red\"]);\n【例】先端を矢印にし，横軸を(cid:18)，縦軸をxにして矢じりの左側に書く。\nSetax([\"a\",\"\\theta\",\"\",\"x\",\"w\"]);\nx\n(cid:18)\nO\n関数 Drwxy(), Drwxy(options)\n機能 指定する手順で座標軸を描く\n説明 座標軸は 初期設定では最後に描かれるが，座標軸上に白抜きの点を表示するなど，先\nに描くことが必要な場合に用いる。描画面には座標軸は表示されない。\noptions は次のリストである。\n[\"Origin=\", \"Xrng=\", \"Yrng=\"]\n【例】点((cid:0)(cid:25); 0)と((cid:25); 0)を白抜きの点で表示する。\ny\nSetax([7,\"se\"]);\nSetpt(5);\nx\nPointdata(\"1\",[[-pi,0]],[\"Inside=0\"]); O\nDrwxy();\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"dr\",\"Num=200\"]);\nPointdata(\"2\",[[pi,0]],[\"Inside=0\"]);\nこのスクリプトでは， Pointdata(\"1\",[[-pi,0]],[\"Inside=0\"]); を実行したの\nち座標軸を描き，次に，y = sinx のグラフを描いてから，再び [\"Inside=0\"]);に\nして実行するので，点((cid:0)(cid:25),0) の上を座標軸が通り，点((cid:25),0)は座標軸とグラフの上を\n通るので白抜きになる。\n)関数一覧\n6", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 7", "content": "関数 De(cid:12)necolor(色名 , 定義のリスト)\n機能 色名を定義する\n説明 ユーザー命名の色名を定義する。定義リストは RGBまたはCMYKのリスト\n各色０〜１の範囲で指定する。定義した色名は，Setcolor(color,options) で使うこと\nができる。\nなお，KETCindy では，68 色を色名で使うことができる。色の名称はカラーコード一\n覧 参照。\n【例】暗い紫色を darkmaz の名称で定義して使う。\nDefinecolor(\"darkmaz\",[0.8,0,0.8]);\nSetcolor(\"darkmaz\");\n関数 Setcolor(color,options）\n機能 描画色の設定\n説明 引数colorはカラーコードまたは色の名称。\nカラーコードはRGBまたはCMYKをリストで与える。各色０〜１。\n色の名称はカラーコード一覧 の68色が指定できる。\n【例】Cを大きさがBと一致するようにとり，Anglemarkと矢印を描く\nC.xy=|B.xy|/|C.xy|*C.xy;\nListplot([B,A,C]);\nSetcolor(\"red\");\nAnglemark(\"1\",[B,A,C],[3]); //size=3\nArrowhead(1,\"ag1\",[2]); //position=1,size=2\n座標軸を描く場合は，このあと Setcolor(\"black\") で黒に戻しておかないと，座標\n軸が赤で表示されてしまうので要注意。\ny\nx\nO\n)関数一覧\n7", "tags": ["KeTCindy", "構文"]}
{"title": "Page 8", "content": "関数 Deffun(関数名 , 定義のリスト)\n機能 関数を定義する\n説明 関数定義は，CindyScript の関数定義 f(x):=式 でもできるが，Deffun()を使うことに\nより，Rでこの関数を利用することができる。目的に応じて使い分けるとよい。\n式のリストには if文を用いた場合分けの関数式を記述することもできる。\n1\n【例】f(x) = を定義し，グラフを描く。\nx2 +1\nDeffun(\"f(x)\",[\"regional(y)\",\"y=1/(x^2+1)\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\");\ny\nx\nO\n{\n1 (x (cid:21) 0)\n【例】f(x) = を定義してグラフを描く。\n(cid:0)1 (x < 0)\nDeffun(\"f(x)\",[\"regional(y)\",\"if(x>=0,y=1,y=-1)\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Dis=1\",\"Num=100\"];\ny\nx\nO\nif 文はネストすることができる。\nDeffun(\"f(x)\",[\"regional y\",\"if(x>1,y=1,if(x>-1,y=x,y=-1))\",\"y\"]);\ny\nx\nO\n8", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 9", "content": "関数 Defvar(文字列)\n機能 変数を定義する\n説明 変数の定義をRと共有する。\n【例】Defvar(\"const=3\");\n複数の変数を定義するときはリストにする。\n【例】Defvar([“ a” ,3,” b” ,1]);\n関数 Fontsize(記号)\n機能 フォントサイズを設定する\n説明 次に Fontsize() を実行するまで有効\n記号は，\"t\" , \"ss\" , \"f\", \"s\" , \"n\" , \"la\",\"La\", \"LA\", \"h\" , \"H\"\n【例】作図ツールの「点を加える」で，A〜G の点をとっておく。小さい方からいくつ\nか表示する。\nPointdata(\"1\",[A,B,C,D,E,F,G],[\"Size=2\"]);\nFontsize(\"t\"); Letter([A,\"s2\",\"A\"]);\nFontsize(\"ss\"); Letter([B,\"s2\",\"B\"]);\nFontsize(\"s\"); Letter([C,\"s2\",\"C\"]);\nFontsize(\"la\"); Letter([D,\"s2\",\"D\"]);\nFontsize(\"La\"); Letter([E,\"s2\",\"E\"]);\nFontsize(\"h\"); Letter([F,\"s2\",\"F\"]);\nFontsize(\"H\"); Letter([G,\"s2\",\"G\"]);\nA B C D E F G\n関数 Ptsize(n) , Setpt(n)\n機能 表示する点の大きさを設定する。\n説明 Ptsize() と Setpt() は同じである。 初期設定は１\n全体の点の大きさを設定する。点の大きさを個々に変えたい場合は，size オプション\nを用いる。\n【例】１から4までの点の大きさ\nあらかじめ，Cinderellaの作図ツールで点A,B,C,Dを作図しておく。\nPointdata(\"1\",A,[\"Size=1\"]);\nPointdata(\"2\",B,[\"Size=2\"]);\nPointsize 1 2 3 4\nPointdata(\"3\",C,[\"Size=3\"]);\nPointdata(\"4\",D,[\"Size=4\"]);\n)関数一覧\n9", "tags": []}
{"title": "Page 10", "content": "関数 Setmarklen(数)\n機能 座標軸の目盛の長さを設定する\n説明 Htickmark() , Vtickmark() で座標軸に目盛を入れるとき，その長さを設定する。\n関数 Setorigin(座標）\n機能 描画する座標軸の原点を設定（移動）する。座標系は変化しない。\n説明 描画する座標軸の原点を引数の座標とする。座標は点の識別名でもよい。\n【例】原点を (3,2) として座標軸を描く。\nSetorigin([3,2]);\n原点を点Aの位置にして座標軸を描く。\nSetorigin(A);\n【例】原点は(3,2)に移動するが，スクリプトではもとの座標系を使う。\nSetorigin([3,2]);\nListplot([A,B,C,A]);\nPointdata(\"1\",[1,1],[\"Size=3\"]);\nLetter([[1,1],\"s2\",\"P\"]);\n左が実行時のCinderellaの画面，右がTEXの結果。\ny\nx\nO\nP\n関数 Setpen(数）\n機能 線の太さの初期値を設定する\nListplot() などの描画関数のオプション dr で，個々の太さは指定できる。\n関数 Setscaling(倍率)\n機能 縦方向の倍率を設定する。倍率は実数またはリスト。実数の場合は縦方向，リストの\n場合は[横方向，縦方向]の指定となる。\n説明 2次関数の応用問題などでは，グラフが縦に大きくなる場合があり，y 軸方向のスケー\nリングを変えたいことがよくある。次のスクリプトは，f(x) = (cid:0)x2+10x のグラフを\n10", "tags": []}
{"title": "Page 11", "content": "縦軸方向を半分にして描くものである。\ny\nSetscaling(0.5); 25\nA.xy=[0,25/4]; 2\nB.xy=[5/2,25/4];\nC.xy=[5/2,0];\nListplot([A,B],[\"do\"]);\nListplot([C,B],[\"do\"]);\nPlotdata(\"1\",\"-2*x^2+10*x\",\"x\");\nLetter([[5,0],\"s2w\",\"5\",[0,25/2],\"w2\",\n\"$\\frac{25}{2}$\",C,\"s4\",\"$\\frac{5}{2}$\"]);\nx\nO 5 5\n2\nここで，点A,Bの座標が\nA.xy=[0,25/4];\nB.xy=[5/2,25/4];\nとなっていることに注意されたい。y 座標をあらかじめ半分にしている。すなわ\nち，Cinderella で作図した幾何要素に対しては Setscaling は無効である。これは，\nPutpoint関数を用いて点の位置を決めても同じである。\nたとえば，次のスクリプトでは，Cinderella の画面上では 2 本の線分が点 B でつなが\nるが，書き出されたTEXの図では離れてしまう。\nSetscaling(0.5);\nPutpoint(\"A\",[0,2]);\nPutpoint(\"B\",[2,2]);\nListplot([A,B]);\nListplot(\"1\",[[0,0],[2,2]]);\n関数 Setunitlen(文字列)\n機能 単位長を設定する。 初期設定は 1cm。\nこの関数は，スクリプトの初めの方に書くのがよい。\n【例】Setunitlen(\"8mm\")\n関数 Setwindow(xの範囲, yの範囲)\n機能 出力する描画領域を設定する。\n説明 出力する描画領域は，通常は2点SWとNEを対角とする矩形領域である。\nこの2点をドラッグすることによりビジュアルに描画領域を決められる。\nしかし，これとは別に出力範囲を設定したい場合にこの関数を用いる。\nまた，表を作成したときは，表の範囲が出力範囲として優先される（Tabledata()を実\n行したとき）ので，表外に図を描いた場合は，最後にこの関数で出力範囲を指定して\n書き出す。\n11", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 12", "content": "【例】Setwindow([-5,5],[-1,3]);\n)関数一覧\n1.2 描画\n1.2.1 書式とオプション\n描画関数は曲線などを作図する関数である。\n基本的な書式は次の通り。\n関数名(name , 点リストなど , options);\nnameは，プロットデータの名称で，関数ごとに決められた頭部のあとに付けられる。たと\nえば，線分を描く Listplot() でできるプロットデータは，頭部が\"sg\"であり，nameを\"1\"と\nすれば，\"sg1\" という名称のプロットデータができる。name指定は不要の場合もあり，その\n場合は KETCindy が自動的に名称を作成する。なお，name に演算記号は使えないので，番\n号として負の数は使えない。\n点リストなどには，点の座標，点の識別名，複数の点のリスト，複数の点を示す文字列な\nどがあり，関数によって異なる。点はCinderellaで作図した幾何要素の点を利用できる。\noptionsは，線種・表示する文字列・解像度・出力の有無などを指定するオプション群。\n線種はつぎの4通り。 初期設定は実線。\n\"dr, n\" 太さnの実線で描く。\n\"da,m,n\" 破線を描く。\nmは破線の長さ，nは破線の間隔(m,nは省略可)\nm,n オプションはCinderellaの描画面には反映されない。\n\"id,m,n\" ギャップからはじまる破線を描く。\n\"do,m,n\" 点線で描く。\nmは点の間隔，nは太さ(m,nは省略可)\n描画色指定は，RGBまたはCMYKのリストで指定するか，色名を用いる。\n【例】\"Color=[0,0.7,0]\" で暗い緑になる。\n出力の有無は\n12", "tags": ["KeTCindy", "アニメーション", "上級者向け", "初心者向け", "基本操作", "構文"]}
{"title": "Page 13", "content": "\"notex\" Cinderella画面上の図形を出力しない\n\"nodisp\" Cinderella画面上にも出力しない\n\"nodisp\"は画面上にも，Ｒへのデータにも出力されないが，プロットデータは作成される\nので，プロットデータだけを利用したい場合に有効である。\n【例】pdata=Circledata([A,B],[\"nodisp\"]);\nとして，後にプロットデータ pdata を利用する。\nその他，次のようなオプションがある。\n\"Size=n\" 点の大きさ，線の太さの指定\n\"Num=n\"曲線の場合の分割数（プロットデータの個数+1）\n1.2.2 点・線分・直線\n関数 Pointdata(name , 点リスト , options)\n機能 点のデータを作成する。\n説明 与えられた座標の点データを作成する。オプションは\"Size=\",\"Color=\",\"Inside=\"。\nInside オプションは，点の内部についての指定。\n0 : 白抜き\n0から１まで : 濃度\n-1 : 塗らない\nカラーコードまたは色名 : その色で塗る\n【例】\n(1) 座標指定で2つの点データを作る。\nPointdata(\"1\",[[1,2],[-2,3]]);\n(2) 作図した点A,Bについて，点データを作る。\nPointdata(\"1\",[A,B]);\nA,Bが作図されていない場合は作成されない。\nCinderellaの描画面上では既存の点A,Bに黒の点が重なって表示される。\n(3) Aの位置に大きさ4で点を作る。\nPointdata(\"1\",A,[\"size=4\"]);\n(4) 点データを作り，TeXにオプション0（白抜き）で描く\nPointdata(\"1\",[A,B],[\"Inside=0\"]);\n(5) 点データを作るが，TeXには出力しない\nPointdata(\"1\",[[3,4],[5,6]],[\"notex\"]);\n13", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 14", "content": "(6)点データを作るが，TeXには出力せず画面上にも表示しない。\nPointdata(\"1\",[[3,4],[5,6]],[\"nodisp\"]);\n(7) 節点を明示した木を描く\nPtsize(3);\nPointdata(\"1\",[[1,2],[3,4],[5,2]]);\nListplot(\"1\",[[0,0],[1,2],[3,4],[5,2],[4,0]]);\nListplot(\"2\",[[1,2],[2,0]]);\nListplot(\"3\",[[5,2],[6,0]]);\n注) 幾何点の有無など，付録の「点の作図についての比較表」を参照のこと。\n関数 Putpoint(点名 , 座標１ ,座標2 )\n機能 点を作る\n説明 識別名が点名の点を，既存でなければ座標１に作る。既存ならば座標 2 に移動する。\nTexには出力されない。\n【例】点Aを作る。\n(1,1) に固定点Aを作る。 この点は動かすことができない。\nPutpoint(\"A\",[1,1]);\n(1,1)に自由点を作るには次のようにする。\nPutpoint(\"A\",[1,1],[A.x,A.y]);\nこの点は座標2の効果により，自由点となり，ドラッグして動かすことができる。\n注）点名は半角アルファベットとする。数字や漢字でもCinderellaでは点ができるが，\nRでエラーとなる。\n関数 Putintersect(点名 , PD1 , PD2 , [No] )\n機能 2曲線の交点を作る\n説明 PD1,PD2は2曲線のプロットデータ名。作成される点は幾何点。\n描画範囲に交点が１つだけのとき，第4引数がなくても交点が作られる。\n描画範囲に 2 つ以上の交点がある場合，第 4 引数を省略するとコンソールに交点の座\n標のリストと，「Choose point number 」というガイドが表示される。そこで，引数の\nNoとして，その番号を指定すると，その点が作られる。この関数で作成されるのは幾\n何点だけなので，TEXの図に点として明示するためにはPointdata()で書き出す。\n次の例は，3次曲線と直線の交点を3つとも取ったものである。\ny\nPlotdata(\"1\",\"x^3-4*x\",\"x\",[\"Num=200\"]);\nPlotdata(\"2\",\"1/2*x+1\",\"x\");\nPutintersect(\"P\",\"gr1\",\"gr2\",1);\nx\nO\n14", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 15", "content": "Putintersect(\"Q\",\"gr1\",\"gr2\",2);\nPutintersect(\"R\",\"gr1\",\"gr2\",3);\nPointdata(\"1\",[P,Q,R],[\"size=4\"]);\n交点が存在しない場合は，「No intersect point」がコンソールに表示される。\n関数 Putoncurve(点の名前, プロットデータ, options)\n機能 曲線上に点を乗せる。\n説明 点が存在しない場合は新たに作る。すでにその点が存在する場合は，その点の x 座標\nを使う。初期値のx座標の 初期設定は 0。\noptionsは，x座標の範囲をリストで与える。\n【例】アステロイド上の動点P をとる。\nParamplot(\"1\",\"[2*cos(t)^3,2*sin(t)^3]\",\"t=[0,2*pi]\");\nPutoncurve(\"P\",\"gp1\",[-1,1]);\n点Pがアステロイド上にでき，この点はドラッグするとアステロイド上を (cid:0)1 (cid:20) x (cid:20) 1\nの範囲で動かすことができる。ただし，-1,1 の付近は y 座標の判断の関係でぴったり\nはいかない。\ny\nP\nx\nO\n)関数一覧\n関数 Putonline(点名 , 座標１ ,座標2 )\n機能 直線上に点を作る\n説明 座標１，座標 2 を通る直線上に点名の点を作る。できた点は直線に対してインシデン\nトとなる。\n【例】点A, Bを通る直線上に点Pをとる。\n15", "tags": []}
{"title": "Page 16", "content": "Putonline(\"P\",A,B);\n関数 Putonseg(点名 , 座標１ ,座標2 )\n機能 線分上に点を作る\n説明 座標１，座標 2 を端点とする線分上に点名の点を作る。できた点は線分に対してイン\nシデントとなる。指定した点がすでに存在する場合は動かさない。\n【例】\n線分AB上に点Cをとる。\nPutonseg(\"C\",A,B);\n点(-1,0),(2,2)を通る線分上に点Cをとる。\nPutonseg(\"C\",[[-1,0],[2,2]]);\n関数 Re(cid:13)ectpoint(点，対称点または対称軸)\n機能 点の鏡映の座標を返す。\n説明 点を指定された点または軸に関して対称移動した点の座標を返す。対称軸は [ 点 1, 点\n2 ]で指定\n【例】点A〜Fを作図しておき，C〜FをAの鏡映の位置に配置する。\nＣはBに関してAと対称な点\ny\nＤは点(2,3)に関してAと対称な点\nEは点(1,0) に関して (-1,1) と対称な点\nD\nFは直線CEに関してAと対称な点\n(2,3)\nC\nC.xy=Reflectpoint(A,B);\nD.xy=Reflectpoint(A,[[2,3]]); (-1,1) B\nE.xy=Reflectpoint([-1,1],[[1,0]]);\nA\nF.xy=Reflectpoint(A,[C,E]); x\nLineplot([C,E],[\"do\"]); O (1,0)\nE\nF\n注）鏡映は Cinderella の作図ツールでも作成することができる。場合によっては\nCinderellaで作図する方が簡明である。\n関数 Rotatepoint(点 ，角度 , 中心)\n機能 点の位置を回転する\n説明 点を，中心で示された点の周りに回転した座標を返す。角度は弧度法で与える\n【例】点A〜Eは作図しておき，C〜Eをそれぞれの位置に配置する。\ny\n16\nD\nB C\n(5,2)\nA\nx\nO (3,0)\nE", "tags": []}
{"title": "Page 17", "content": "2\n点CはAを，Ｂに関して (cid:25) だけ回転した点\n3\n(cid:25)\n点Dは点(5,2)を，Ｂに関して だけ回転した点\n3\n(cid:25)\n点Eは点(3,0)をAに関して (cid:0) だけ回転した点\n4\nC.xy=Rotatepoint(A,2*pi/3,B);\nD.xy=Rotatepoint((5,2),pi/3,B);\nE.xy=Rotatepoint([3,0],-pi/4,A);\n注）図の点線は位置関係を示すためのもの。\n点名や座標は，実際にはLetter()関数で記述する。\n関数 Scalepoint(点，比率ベクトル，中心)\n機能 点の位置の拡大・縮小を行う\n説明 点を，指定された中心を原点とする座標系で，比率ベクトルの分だけ拡大・縮小した\n位置の座標を返す。\n【例】点A〜Fは作図ツールで適当な位置にとっておく。\n点Dを，点Aを原点を中心に横に3倍，縦に2倍した位置に置く。\n点Eを，点Aを点Bを中心に横に3倍，縦に2倍した位置に置く。\n(cid:0)(cid:0)!\n点Fを，点Aを原点を中心にベクトルOC で示された比率の位置に置く。\nD.xy=Scalepoint(A,[3,2],[0,0]);\nE.xy=Scalepoint(A,[3,2],B);\nF.xy=Scalepoint(A,C.xy,[0,0]);\nArrowdata(\"1\",[[0,0],C]);\nPointdata(\"1\",[A,B,C,D,E,F],[\"size=2\"]);\nLetter([A,\"e2\",\"A(\"+A.x+\",\"+A.y+\")\"]);\nLetter([B,\"e2\",\"B(\"+B.x+\",\"+B.y+\")\"]);\nLetter([C,\"e2\",\"C(\"+C.x+\",\"+C.y+\")\"]);\nLetter([D,\"e2\",\"D(\"+D.x+\",\"+D.y+\")\"]);\nLetter([E,\"e2\",\"E(\"+E.x+\",\"+E.y+\")\"]);\nLetter([F,\"e2\",\"F(\"+F.x+\",\"+F.y+\")\"]);\n17", "tags": []}
{"title": "Page 18", "content": "y\nE(5,5)\nD(9,4)\nA(3,2) F(12,2)\nC(4,1)\nx\nO\nB(2,-1)\n点A,B,Cをドラッグすると，インタラクティブにD,E,F の位置が変わる。\n関数 Translatepoint(点 , 移動ベクトル)\n機能 点を平行移動する\n説明 点を移動ベクトルで示された分だけ平行移動した点の座標を返す\n【例】点A〜Dは作図しておく。\n点Cを点Aをx軸方向に2 , y 軸方向に3だけ平行移動した点にする。\n(cid:0)(cid:0)!\n点Dを点AをベクトルOB だけ平行移動した点にする。\nC.xy=Translatepoint(A,[2,3]);\nD.xy=Translatepoint(A,B.xy);\ny\n5 C\n4\n3 D\n2 A\n1 B\nx\nO 1 2 3 4 5\n)関数一覧\n関数 Setarrow([arrowsize,angle,position,cut])\n機能 Arrowdata,Arrowheadで描く矢印のスタイルを設定する。\n説明 arrowsize,angle,position,cut,linestyleは，順に大きさ(1)，開き角(18)，位置(1)，切\nり込み(0.2)である。（カッコ内はデフォルト値）\n18", "tags": []}
{"title": "Page 19", "content": "関数 Arrowdata(name,[始点 , 終点] , options)\n機能 2点間を結ぶ矢線を描く。\n説明 name はなくてもよい（自動的に通し番号をつける）。\noptionsは矢じりの形状などの指定（リストで与える）。\n数値は， 大きさ, 開き角, 位置,切り込み\n\"Line=n(y)\"（矢印は線だけ），\"Cutend=\"（トリミング），\"Color=\"\n開き角は60分法で与える。2.5未満の時は18°の倍数指定とする。\n矢じり位置は，線分の長さを１とした始点からの距離。\n切り込みのデフォルトは0.2\nトリミング :\"Cutend=m\" または \"Cutend=[m,n]\" で，右辺が数のときは両端を m\nだけカットする。リストのときは始点を m, 終点を n だけカットする。m が負のとき\nは延長する。\n【例】オプションの設定とその結果を示す。\nArrowdata(\"1\",[A,B]);\nArrowdata(\"2\",[[1,0],[2,3]],[2]);\nArrowdata(\"3\",[[2,0],[3,3]],[3,45]);\nArrowdata(\"4\",[[3,0],[4,3]],[3,1,0.5]);\nArrowdata(\"5\",[[4,0],[5,3]],[3,1,1,0]);\nArrowdata(\"6\",[[5,0],[6,3]],[3,\"Line=y\"]);\nArrowdata(\"7\",[[6,0],[7,3]],[3,\"dr,2\"]);\nArrowdata(\"8\",[[7,0],[8,3]],[3,1,1,0.5,\"Color=red\"]);\ny\nx\nO\n【例】２つの円を矢線で結ぶ。\nCircledata(\"1\",[A,A.xy+[0.5,0]]);\nB\nCircledata(\"2\",[B,B.xy+[0.7,0]]);\nArrowdata([A,B],[\"Cutend=[0.5,0.7]\"]);\nLetter([A,\"c\",\"A\",B,\"c\",\"B\"]);\nA\nCinderellaの作図ツールで２点ABをとっておく。\n円A,Bの半径が同じ（たとえば0.5）であれば，Arrowdata([A,B],[\"Cutend=0.5\"]);\nでよい。\n19", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 20", "content": "関数 （１）Arrowhead(点 , 方向 , options)\n（２）Arrowhead(点または位置比 , プロットデータ, options)\n機能 点に矢じりだけを描く（optionはSetarrowと同じ）\n説明 （１）指定された位置に，指定された方向を向いた矢じりだけを描く。\n点は座標または幾何要素名。方向は原点から見て座標[a,b]の方向。\n（２）プロットデータ（曲線）を指定したときは，曲線上の点に矢じりをつける。\n曲線には向きがあり，それによって矢じりの向きが決まる。\n\"Invert(曲線名)\" とすると反対向きの矢じりになる。\n曲線の向きとは，曲線を描くときの順序で，プロットデータの順序でもある。\n位置比は曲線上の位置を表す比率（0から1）。\n例えば，分割数が50で位置比が0.3のとき 1+50*0.3=2.5\n2番目と3番目の点の中点\n【例】 A が右図の位置のとき\ny\n(ア) Arrowhead(A,[-1,1]); A\n1\n(イ) Arrowhead([1,1],[-1,1],[2,60]);\n(ウ) Arrowhead(A,[-1,1],[2,30,0.5]]);\nx\nO 1\n(エ) Arrowhead([1,1],[-1,1],[2,20,0.5,\"Line=y\"]);\n(ア) (イ) (ウ) (エ)\ny y y y\n1 1 1 1\nx x x x\nO 1 O 1 O 1 O 1\n曲線 cr1 上の点 A の位置比が0.6のとき\nA\n(オ) Arrowhead(A,\"cr1\");\n(カ) Arrowhead(0.6,\"cr1\",[2,1,0.5,\"Color=red\"]);\n(キ) Arrowhead(1,\"cr1\");\n(ク) Arrowhead(1,\"Invert(cr1)\",[\"Line=y\"]);\nオ) (カ) (キ) (ク)\n20", "tags": []}
{"title": "Page 21", "content": "関数 Lineplot（name , 2点のリスト , options)\n機能 2点のリストで示された点を結ぶ直線を描く。\n説明 2点のリストは座標または幾何要素の名前で与える。\noptions は次の通り。\n線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\n\"+\"半直線を描く。\n\"dr\" , \"da\" , \"do\" と \"+\" はリストにして両方指定することができる。\n点のリストが，座標ではなく幾何要素名のリストの場合は，nameは省略できる。\nいくつか例を示す。\n各座標を結ぶ直線を引く\nLineplot(\"1\",[[0,0],[1,2]])\nCinderellaの描画ツールで2点A,Bをとっておき，直線ABを引く\nLineplot([A,B]);\noptionの働きの例\nLineplot([A,B],[\"dr,0.5\",\"+\"]); Aを端点とする半直線を引く\nLineplot([C,D],[\"dr,2\"]); 直線CDを太さ2で描く\nLineplot([E,F],[\"da\"]); 直線EFを破線で描く\nLineplot([G,H],[\"do\"]); 直線GHを点線で描く\n結果は，次図左上から。\ny\nA\nx\nO\n)関数一覧\n関数 Listplot（name , 点のリスト , options)\n機能 点のリストで示された点を結ぶ。\n説明 点のリストは座標または幾何要素名のリストで与える。点が，座標ではなく幾何要素\n名の場合は，nameは省略可\nプロットデータの名前は，\"sg\" に引数の name を付加したものとなる。\noptions は次の通り。\n線種 \"dr, n\", \"da,m,n\" , \"do,m,n\"\n21", "tags": []}
{"title": "Page 22", "content": "トリミング :\"Cutend=m\" または \"Cutend=[m,n]\"\n数のときは両端を m だけカットする。リストのときは始点を m, 終点を n だけカット\nする。mが負のときは延長する。\noptionsの使用例\nListplot([A,B]); 線分ABを描く。太さは 初期設定。\nListplot([C,D],[\"dr,2\"]); 線分CDを描く。太さ2\nListplot([E,F],[\"da\"]); 線分EFを破線で描く\nListplot([G,H],[\"da,3,1\"]); 線分GHを破線で描く。線を長く\nListplot([K,L],[\"da,1,3\"]); 線分KLを破線で描く。間隔を空ける\nListplot([M,N],[\"do\"]); 線分MNを点線で描く。\nListplot([O,P],[\"do,3\"]); 線分OPを点線で描く。間隔を空ける\nListplot([Q,R],[\"do,3,3\"]); 線分QRを点線で描く。間隔を空けて太く\n結果は次図左から。\n【例】三角形を描く。\nCinderellaの作図ツールで三角形ABCを描いておく。あるいは，単に3点A,B,Cを\nとるだけでもよい。\nAddax(0);\nListplot([A,B,C,A]);\n点の位置は座標で指定してもよい。\nその場合は name が必要。\nListplot(\"1\",[[0,0],[2,0],[1,2],[0,0]]);\n【例】２つの円を線分で結ぶ。\nCircledata(\"1\",[A,A.xy+[0.5,0]]);\nB\nCircledata(\"2\",[B,B.xy+[0.7,0]]);\nListplot([A,B],[\"Cutend=[0.5,0.7]\"]);\nLetter([A,\"c\",\"A\",B,\"c\",\"B\"]);\nA\n22", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 23", "content": "Cinderellaの作図ツールで２点ABをとっておく。\n円A,Bの半径が同じであれば，Listplot([A,B],[\"Cutend=0.5\"]); でよい。\nプロットデータは点の座標のリストである。したがって，プロットデータを自作して\nListplot()で表示することができる。\n【例】有限フーリエ級数展開\n(cid:25) ∑30 1(cid:0)((cid:0)1)n\n+ sinnx\n2 n\nn=0\n次のようにCindyscriptで関数を定義し，プロットデータpd を作って引数に渡す。\nf(x):=(\ns=pi/2;\nrepeat(30,n,s=s+(1-(-1)|^n)/n*sin(n*x));\n);\npd=apply(0..200,t,\nx=-2*pi+t*4*pi/200;\n[x,f(x)];\n);\nListplot(\"1\",pd);\nExpr([[-2*pi,-0.5],\"s\",\"-2\\pi\",[-pi,-0.5],\"s\",\"-\\pi\",[pi,-0.5],\"s\",\n\"\\pi\",[2*pi,-0.5],\"s\",\"2\\pi\",[0,pi],\"w2\",\"\\pi\"]);\ny\n(cid:25)\nx\nO\n(cid:0)2(cid:25) (cid:0)(cid:25) (cid:25) 2(cid:25)\nリストの長さには制限がある。たとえば，タートルグラフィクスを用いたシェルピン\nスキーのギャスケットでは200くらいずつのリストに分割する。\n23", "tags": ["KeTCindy", "構文"]}
{"title": "Page 24", "content": ")関数一覧\n関数 Mksegments()\n機能 すべての幾何線分のPD を作成\n説明 Cinderella の「線分を加える」ツールで描いたすべての線分をそのままプロットデー\nタとする。たとえば，線分 AB を作ると，プロットデータ sgAB が作成される。その\n後，インスペクタで点Bの識別名を変更（たとえばQに）すると，プロットデータ名\nも変更される。線分はすでに描かれていてもよい。\n【例】等比数列の例題\n三角形の各辺の中点を結んでできる三角形を次々に作っていく，等比数列の図を描く。\nまず「線分を加える」ツールで三角形ABCを描く。\n「中点を加える」ツールで各辺の中点を取り，「線分を加える」ツールで中点を結ぶ。\nこれを繰り返す。Mksegments() を書いておけば，Listplot([A,B,C] などを書かな\nくても，作図ができた時点で，図のデータができる。\n関数 Framedata(name , リスト,options)\n機能 矩形を描く\n説明 リストの形は2通り。\nその1：[中心 ,横 , 縦] で，矩形を描く。横，縦は中心からの距離。\nその2：2点のリスト。点が座標でなく名称のときはnameは省略できる。\n点の座標は点の名前でもよい。点を座標で与える場合はnameは省略できない。\nリストを省略した場合は，描画範囲と同一の矩形を描く。\nその2のタイプでは，option として，\"center\" または \"corner\" がある。\"center\" の\nときは，中心と対角点（ 初期設定），\"corner\" のときは2点を対角点として解釈する。\n以下にいくつか例を示す\nFramedata(\"1\"); 描画範囲(SW,NE)と同一の矩形を描く\n24", "tags": []}
{"title": "Page 25", "content": "Framedata(\"2\",[[0,0],2,2]); 原点を中心とする縦横幅4の正方形を描く\nFramedata(\"3\",[A,1.5,1.2]); 点Aを中心とする横3，縦2.4の矩形を描く。(図左)\nFramedata([B,C]); 点Bを中心,点Cを頂点とする矩形を描く。(図中央)\nFramedata([D,E],[\"corner\"]); 点D,Eを対角点とする矩形を描く。(図右)\nC E\n1:2\nA 1:5 B\nD\n矩形の角を丸めたい場合は，Framedata()ではなく，Ovaldata()を使うとよい。\n関数 Polygonplot(name , 点リスト , 整数,options)\n機能 2点を半径とする円に内接する正多角形を描く。\n説明 点リストを [A,B] とすると，A を中心とする半径 AB の円周上に点をとって正多角形\nを描く。ただし円は描かない。A,B は座標でもよい。\n点リストが座標ではなく作図してある点の名称のとき，オプションに\"Geo=y\" をつけ\nると，頂点の幾何点を作る。幾何点の名称は B に番号を付けたものとなる。整数でな\nい数を指定した場合は，きちんと閉じない折れ線が描かれる。\n【例】点リストとoptionの違いによる作図と，TeXの図を示す。\nAddax(0);\nPolygonplot(\"1\",[[-4,1],[-4,3]],7);\nPolygonplot(\"2\",[A,B],7);\nPolygonplot(\"3\",[C,D],7,[\"Geo=y\"]);\n25\n1", "tags": []}
{"title": "Page 26", "content": "円に内接する形でなく，与えられた線分 AB を１辺とする正多角形を描くには次のよ\nうにする。\n線分 AB は，Cinderella の作図ツールなどで描かれているものとする。ただし，線分\nでなく，両端の点が与えられているだけでもよい。Cindyscript で点 A,B が複素平面\n上にあるものとして，多角形の頂点の位置を計算する。\n【例】ABを1辺とする正五角形を描く。\nn=5;\npti=[complex(A),complex(B)];\nth=2*pi/n;\nrepeat(n-2,s,\nz1=pti_s;\nz2=pti_(s+1);\nz=z2+(z2-z1)*(cos(th)+i*sin(th));\npti=append(pti,z);\n);\npt=apply(pti,gauss(#));\npt=append(pt,A.xy);\nListplot(\"1\",pt);\nptiは，各頂点に対応する複素数のリスト，ptが各頂点の座標のリストである。\n)関数一覧\n1.2.3 曲線\n関数 Bezier(名前，節点リスト，制御点リスト，[オプション] )\n機能 ベジェ曲線を描く\n説明 制御点は，各区間に対して，3次の場合2個，2次の場合1個のリストで与える。\nオプションは\n\"Num=n\": 節点間の分割数（分点数 (cid:0)1）を指定できる。 ベジェ曲線とスプライト曲\n線の関数は節点間が短い場合が多いので初期設定は 10 になっている。Plotdata() な\nどと違い，大きい数（200など）を指定すると，全体の分割数が増大して描画時間がか\nかるようになってしまうので注意。\n26", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 27", "content": "【例】\nC\n2次ベジェ曲線\nBezier(\"1\",[A,B],[C]);\nA\nB\nD\nC\n3次ベジェ曲線\nBezier(\"2\",[A,B],[C,D]);\nA\nB\n節点を増やす。2次と3次。 D E F\nBezier(\"3\",[A,B,C],[[D],[E,F]]);\nA B\nC\n全て同じ次数の場合，次のようにしてもよい。\n27", "tags": []}
{"title": "Page 28", "content": "Bezier(\"4\",[A,B,C,D],[E,F,G,H,K,L] );\nH\nK\nG\nE F L\nB C D\nA\nオプションの例\nBezier(\"5\",[A,B,C],[[D],[E,F]],[\"Num=3\"]);\nD\nC\nA\nB\nE F\nBezier(\"6\",[A,B,C],[[D],[E,F]],[\"Num=40\",\"da\"]);\nD\nC\nA\nB\nE F\nNumを（ベクトルとして）区間ごとに与えることもできる。\nBezier(\"1\",[A,B,C,D],[E,F,G,H,K,L],[\"Num=[2,3,4]\"]);\nH\nK\nG\nE F L\nB C D\nA\n関数 Beziersmooth(名前，節点リスト，[オプション] )\n機能 節点間を3次ベジェ曲線でスムーズに結んだ曲線を描く\n説明 節点をはさむ制御点は１直線上にとる（したがって，１つは半自由点で，直線上しか\n動けない）。制御点は自動的に配置される。その後，節点や制御点を動かして，描きた\n28", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 29", "content": "いものにする。\n【例】\nBeziersmooth(\"1\",[A,B,C,D]);\nB C2p\nC1q D\nC3q\nC1p\nC2q\nA C C3p\nbz1\nその後，節点や制御点を動かして，描きたいものにする。ただし，C2p は C1q と B\nを通る直線上しか動けない。C3p は C2q と C を通る直線上しか動けない。\nC2p\nC1q B\nD\nC1p C3q\nA bz1 C2q C\nC3p\n関数 Beziersym(名前，節点リスト，[オプション] )\n機能 節点間を3次ベジェ曲線でスムーズに結んだ曲線を描く\n説明 節点をはさむ制御点は節点に関し対称（片方は表示されず，動かせない）。制御点は自\n動的に配置される。その後，節点や制御点を動かして描きたいものにする。\n【例】\nBeziersym(\"1\",[A,B,C,D]); B C2p\nC1q D\nC2p と C3p は表示されない\nC3q\nC1p\nC2q\nA C\nbz1 C3p\nその後，節点や制御点を動かして，描きたいものにする。\nC2p と C3p は表示されず，動かせない。\n29", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 30", "content": "C1q\nB D\nC2p\nC1p\nC3q\nA C2q\nC\nC3p\n)関数一覧\n関数 Mkbeziercrv(名前, [節点リスト,制御点リスト] のリスト,options )\n機能 複数のベジェ曲線を描く\n説明 [節点リスト,制御点リスト] が１つの場合は，Bezier()と同じ。\n【例】ベジェ曲線を2つ描く。\nMkbeziercrv(\"5\",[[[A,B,C],[[D],[E,F]]],[[G,H,K,L],[[M],[N,O],[P]]]]);\nM N O P\nD E F\nH\nK\nL\nA B G\nC\n関数 Mkbezierptcrv(節点リストptlist，[オプション] )\n機能 ベジェ曲線を描く\n説明 制御点は，自動的に配置される。\n複数の場合は[ ptlist1, ptlist2.... ]\n名前は，A から順に自動的につける。\nオプション\n\"Deg=...\" 次数指定ができる。（初期設定は3次）\n\"Num=...\" 各区間の区間数（分点数(cid:0)1）を指定できる。（初期設定は10）\n【例】\nMkbezierptcrv([A,B,C]); B\nAq1 Ap2\nAp1 Aq2\nA C\nbzA\n30", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 31", "content": "その後，節点や制御点を動かして，\nAq1\n描きたいものにする。\nAp1\nB\nA C\nAp2 Aq2\nbzA\nMkbezierptcrv([A,B,C],[\"Deg=2\"]);\nB\nDeg=2 とすると2次になる。\nAp1 Ap2\n制御点は各区間に１個ずつできる。\nA C\nbzA\n複数の場合は[ ptlist1, ptlist2.... ]\nMkbezierptcrv([[A,B,C],[D,E,F,G]]);\nG\nB E\nAq1\nAp2 Bq1 Bp2\nAp1\nAq2 Bp1 Bq2 Bq3\nBp3\nA\nC\nD F\nbzA bzB\n関数 Bspline(名前，制御点リスト，[オプション] )\n機能 2次B-spline曲線を描く\n説明 節点は自動的に計算され，表示されない\n【例】Bspline(\"1\",[A,B,C,D,E])\nこれは， Bezier(\"1\",[A,(B+C)/2,(C+D)/2,E],[B,C,D]) と同じ。曲線の名前が\nbz1 ではなくbzb1 となる。\n通常のB-spline曲線の端の制御点の代わりに，端点を動かせるようにしている。\n31", "tags": ["アニメーション", "上級者向け"]}
{"title": "Page 32", "content": "D\nB\nA\nC E\n【例】Bspline(\"1\",[A,B,C,D,A]);\nリストの最初と最後が同じ場合は閉曲線になる。\nBezier(\"1\",[(D+A)/2,(A+B)/2,(B+C)/2,(C+D)/2,(D+A)/2],[A,B,C,D]);\nと同じ。\nB C\nD\nA\n参照：Ospline：大島のスプラインを描く\n関数 CRspline(名前，節点リスト，[オプション] )\n機能 単独のCatmull-Rom スプライン曲線を描く\n説明 自由点は，節点のみで，制御点は節点から作られ移動はできない。\nオプションに，通常のオプションのほか，次が使える。\nsize ->n:画面上での線の太さを指定する。\n【例】CRspline(\"1\",[A,B,C,D]);\nD\nB\nA C\n関数 Ospline(名前，制御点リスト，[オプション] )\n機能 大島のspline曲線を描く\n説明 制御点を通るスプライン曲線を描く\nリストの最初と最後が同じ場合は閉曲線になる。\n【例】Ospline(\"1\",[A,B,C,D,E]);Ospline(\"1\",[A,B,C,D,A]);\n32", "tags": []}
{"title": "Page 33", "content": "D\nC\nA B\nスプライン曲線については次も参照されたい：Bspline：Ｂスプラインを描く\n関数 Circledata(name,リスト,options)\n機能 円または多角形を描く。\n説明 中心の点と，円周上の1点（か半径），または3点をリストで与えて円を描く。\n中心と円周上の点を，座標ではなく幾何要素名で指定する場合は name は省略可。\noptionsは以下のものをリストで与える。省略した場合は実線で円が描かれる。\n\"Rng=[(cid:18) ;(cid:18) ]\" 角(cid:18) から(cid:18) の範囲の弧を描く。角は弧度法で与える。\n1 2 1 2\n\"Num=分割数\" 円を描くときの分割数。値が小さい場合は多角形になる。\n線種 \"dr, n\", \"da,m,n\" , \"do,m,n\"\n【例】いろいろな円を描く。\n原点中心，半径2の円 Circledata(\"1\",[[0,0],[2,0]]);\n（[[0,0],2]でもよい）\nA中心，半径ABの円 Circledata([A,B]);\nA中心，半径2の円 Circledata(\"1\",[A,A+[2,0]]);\n（[A,2]でもよい）\n3点A,B,Cを通る円 Circledata([A,B,C]);\n下図左より，オプションに \"dr,2\" , \"da\" , \"do\" をつけた場合。\nCircledata([A,B,C]); で，3 点 A,B,C を通る円を描いたとき，できた円の中心は\nPointdata(\"1\",[crABCcenter]); で作図できる。\n【例】A中心，半径AB，中心角60°の弧を描く。\n33", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 34", "content": "Circledata([A,B],[\"Rng=[0,pi/3]\"]);\n【例】A中心，半径AB，中心角60°の扇型を描く。点 A,B,Cを適当に取っておく。\nth=arctan2(B-A);\nC.xy=Rotatepoint(B,pi/3,A);\nCircledata([A,B],[Assign(\"Rng=[th,th+pi/3]\",\"th\",th)]);\nListplot([B,A,C]);\nLetter([A,\"s\",\"A\",B,\"e\",\"B\",C,\"nw\",\"C\"]);\nC\nB\nA\n\"\"\n１行目は，ABがx軸となす角を arctan2 関数 によって求めている。\n【例】弧を太く描く\nCircledata([C,D],[\"dr,3\",\"Rng=[0,pi/3]\"]);\n円はNが大きな値の正N多角形として描いている。optionの [\"Num=数値\"] によっ\nてその細かさを指定できる。Nの値が小さければ正多角形が描けることになる。\n【例】A中心，半径ABの円と，その円に内接する正六角形\nCircledata(\"1\",[A,B]);\nCircledata(\"2\",[A,B],[\"Num=6\"]);\nここで，同じ[A,B]を使うため，nameを付与して区別する必要がある。(下図左)\nまた，頂点の位置を変えるのであれば，Rng= オプションを使う。（下図右）\nCircledata(\"2\",[A,B],[\"Num=6\",\"Rng=[pi/6,13/6*pi]\"]);\nA A\nB B\n34", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 35", "content": "関数 Mkcircles()\n機能 すべての幾何円のPD を作成\n説明 Cinderellaの「円を加える」ツール（3種類いずれでも）で描いたすべての円をそのま\nまプロットデータとする。たとえば，中心 A，円周上の点を B とした円を作ると，プ\nロットデータ crAB が作成される。その後，インスペクタで点 B の識別名を変更（た\nとえば Q に）すると，プロットデータ名も変更される。円はすでに描かれていても\nよい。\n)関数一覧\n関数 Ellipseplot(name,点リスト ,定義域, options)\n機能 焦点と通る点を与えて楕円を描く。\n説明 点リストで2つの焦点と通る点を与える。点はCinderellaの幾何点が使える。\nまた，通る点のかわりに，焦点からの距離の和を実数で与えることもできる。\n実際には，媒介変数表示 x = acos(cid:18);y = bsin(cid:18) を，回転・平行移動して描いている。\n定義域はこのときのtの定義域で，省略も可能。省略したときの初期値は[-5,5]\n【例】点A,Bを焦点とする楕円を描く。\nEllipseplot(\"1\",[A,B,C]); 点Cを通る楕円を描く。\nEllipseplot(\"1\",[A,B,4]); 焦点からの距離の和が4である楕円を描く。\nEllipseplot(\"1\",[A,B,C],\"[0,pi]\"); 楕円の半分を描く。\n【例】Cinderellaの作図ツールを使う\n作図ツールに，焦点と通る点で楕円を描くもの，点の極線を描くツールがある。（モー\nドメニュー / 直線 / 点の極線）これを利用すると，楕円上にとった点をインシデント\nにできるので，インタラクティブに図を変更することができる。この Cinderella の作\n図機能と合わせて，一方の焦点から出た光が楕円上で反射して他方の焦点に至る，と\nいう図を次のようにして描くことができる。\nまず，3つの点，焦点A,Bと通る点Cを適当な位置に作図する。次に「焦点と通る点\nで決まる楕円」ツールを選び，点A,B,Cを順に指定すると，楕円が描かれる。\nモードメニューの「直線」から「点の極線」を選び，点 C と楕円を順に指定すると接\n線が引かれる。\n「垂線を加える」ツールを用いて，点Cで垂線，すなわち法線を引く。（下図）\n「点を加える」ツールを用いて，接線，法線上に適当に点を取る。(D,Eとなったとする)\n次のスクリプトを書いて実行すると，楕円に関して入射角と反射角が等しくなるよう\nに光が反射する様子を図にすることができる。\n35", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 36", "content": "Ellipseplot(\"1\",[A,B,C]);\nLineplot([C,D]);\nLineplot([C,E]);\nArrowdata([A,C]);\nArrowdata([C,B]);\nAnglemark([A,C,B]);\nExpr([A,\"s2\",\"F_1\",B,\"s2\",\"F_2\"]);\ny\nx\nF O F\n1 2\nまた，接線，法線を描かず，この楕円上に点 D,E,・・をとり（個数は任意）次のスク\nリプトを書けば，何本かの光線が一方の焦点を出て他方の焦点に集まる様子を描くこ\nとができる。\nEllipseplot(\"1\",[A,B,C]);\nListplot([A,C,B]);\nListplot([A,D,B]);\nListplot([A,E,B]);\nExpr([A,\"s2\",\"F_1\",B,\"s2\",\"F_2\"]);\ny\nx\nF O F\n1 2\n関数 Hyperbolaplot(name,点リスト ,定義域, options)\n機能 焦点と通る点を与えて双曲線を描く。\n説明 点リストで2つの焦点と通る点を与える。点はCinderellaの幾何点が使える。\nまた，通る点のかわりに，焦点からの距離の差を実数で与えることもできる。\n36", "tags": []}
{"title": "Page 37", "content": "実際には，ハイパボリック関数を用いた媒介変数表示 x = cosht;y = sinht を回転・\n平行移動している。\noption として，\"Asy=線種\"を与えると，漸近線を指定した線種で表示する。 初期設\n定では漸近線は非表示。\n【例】点A,Bを焦点とする双曲線を描く。\nHyperbolaplot(\"1\",[A,B,C]); 点Cを通る双曲線を描く。\nHyperbolaplot(\"1\",[A,B,2]);焦点からの距離の差が2の双曲線を描く。\nHyperbolaplot(\"1\",[A,B,C],[\"Asy=do\"]); 漸近線を点線で描く。\ny\nC\nx\nA O B\n)関数一覧\n関数 Parabolaplot(name，点リスト ,定義域, options)\n機能 点リスト[A,B,C]で示された焦点，準線で決まる放物線を描く。\n説明 焦点Aと準線BCで決定する放物線を描く。\n実際には，2 次関数 y = x2 のグラフを回転・平行移動して描いており，定義域は，\ny = x2 での定義域と考えてよい。定義域は省略することもできる。省略したときの初\n期値は[-5,5]\n【例】点Aを焦点，直線BCを準線とする放物線を描く\nParabolaplot(\"1\",[A,B,C]);\n定義域を (cid:0)4 (cid:20) x (cid:20) 4 とする。\nParabolaplot(\"1\",[A,B,C],\"[-4,4]\");\n点(0,1)を焦点，直線y = (cid:0)1を準線とする放物線を描く\nParabolaplot(\"1\",[[0,1],[-1,-1],[1,-1]]);\n【例】放物線上の2点で引かれた接線と放物線で囲まれた領域を斜線で描く。\nCinderella の作図ツールに，焦点と準線で放物線を描くものがある。また，点の極線\nを描くツールがある。（モードメニュー / 直線 / 点の極線）これを利用すると，放物\n37", "tags": []}
{"title": "Page 38", "content": "線上にとった点をインシデントにできるので，インタラクティブに図を変更すること\nができる。このCinderellaの作図機能と合わせて，次の手順で図を描く。\nまず，焦点 A(0,1) と準線 y = (cid:0)1：BC を作図する。次に「焦点と準線で決まる放物\n線」ツールを選び，点 A と直線 BC を指定すると，放物線が描かれる。方程式では\n1\ny = x2 の放物線である。\n4\n次に，放物線上に点D,Eをとる。Cinderellaの作図機能を用いているので，この2点\nは放物線上だけを動かすことができる。（インシデント）\nモードメニューの「直線」から「点の極線」を選び，点Dと放物線，点Eと放物線を\n順に指定すると接線が引かれる。その交点に点を取る。\n以上で作図ができたので，次のスクリプトを書いて実行する。\nParabolaplot(\"1\",[A,B,C]);\nLineplot([D,F]);\nLineplot([E,F]);\nHatchdata(\"1\",[\"iii\"],[[\"gr1para\",\"s\"],[\"lnEF\",\"n\"],[\"lnDF\",\"n\"]]);\nこれで，次図ができる。このあと，文字などは適当に追加する。\ny\nx\nO\n38", "tags": []}
{"title": "Page 39", "content": "なお，Cinderellaの作図ツールで放物線を描かず，焦点Aと準線上の点B,Cだけを用\n意して，次のスクリプトで描くこともできる。\nParabolaplot(\"1\",[A,B,C]);\nPutoncurve(\"D\",\"gr1para\");\nPutoncurve(\"E\",\"gr1para\");\nTangentplot(\"1\",\"gr1para\",\"x=\"+D.x);\nTangentplot(\"2\",\"gr1para\",\"x=\"+E.x);\nHatchdata(\"1\",[\"iii\"],[[\"gr1para\",\"s\"],[\"lntn1\",\"n\"],[\"lntn2\",\"n\"]]);\n関数 Ovaldata(name, 点リスト,options)\n機能 角を丸くした矩形を描く\n説明 中心と対角の１点を指定し，角を丸くした矩形を描く\noptionsは，角の落とし具合と線種など。 初期設定は0.2\n【例】いくつかの例を示す。\nOvaldata(\"1\", [A,B]);\nOvaldata(\"2\", [C,D],[0]);\nOvaldata(\"3\", [E,F],[1,\"dr,3\"]);\nOvaldata(\"4\", [G,H],[1.5,\"da\"]);\nB F\nH\nA C E G\nD\n1.2.4 関数のグラフ\n関数 Plotdata(name , 式 , 変数と定義域 , options)\n機能 関数のグラフを描く。プロットデータの名前は，gr\n説明 式で表された関数のグラフを，指定された定義域で描く。\n式，定義域は \" \" でくくって文字列とする。定義域はx=に続いてリストで指定。\noptions は次の通り。\n線種 \"dr, n\", \"da,m,n\" , \"do,m,n\"\n\"Num=数値\" 描画時の分割数\n\"Dis=数値\" 値が指定数値以上ジャンプする場合は不連続点とみなす。\n\"Exc=数値リスト リストで示された点は除外する。\n\"Exc=関数\" 関数の零点は除外する。\n\"Color=RGB\" 色指定。RGBはCMYKでもよい。\n39", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 40", "content": "【例】2次関数 f(x) = x2 (cid:0)2x のグラフを定義域指定なしで描く。\nPlotdata(\"1\",\"x^2-2*x\",\"x\");\ny\nx\nO\nPlotdata(\"1\",\"x^2-2*x\",\"x\",[\"Color=[1,0,0]\"]);\nとすると赤で描かれる。\n( )\n(cid:25)\n【例】三角関数 2sin 2x(cid:0) のグラフを，定義域 0 (cid:20) x (cid:20) 2(cid:25) で描く。\n4\nPlotdata(\"3\",\"2*sin(2*x-pi/4)\",\"x=[0,2*pi]\");\ny\nx\nO\nCindyScript では，plot( 式 , 定義域 ); で描くが， KETCindy を用いるときは，\nCindyScript のplot 関数のかわりに，このPlotdata を使えばよい。\n軸に数字を入れるのであれば，Letter() を用いる。\noptionsの使用例\nPlotdata(\"1\",\"sin(x)+3\",\"x\"); 初期設定\nPlotdata(\"2\",\"sin(x)+2\",\"x\",[\"dr,2\"]); 同じく，太さ2で描く\nPlotdata(\"3\",\"sin(x)+1\",\"x\",[\"da\"]); 同じく，破線で描く\nPlotdata(\"4\",\"sin(x)\",\"x\",[\"do\"]); 同じく，点線で描く\n結果は次図上から。\n40", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 41", "content": "y\nx\nO\nNum=分割数の指定\nグラフの描画は，区間を分割して関数値をとり，各点を結ぶという通常の方法によって\nいる。N の指定はこの分割数の指定である。 初期設定は 50。思うような結果が得ら\nれない場合はこの値を大きく指定するとよい。下図左は 初期設定，右は Num=200。\ny\nx\nO\n不連続点の指定\nDis オプションにより，値がジャンプする不連続点を線で結ばないようにする。Num\nオプションと合わせて使うと効果が上がる。\n【例】f(x) =tanx のグラフは，そのままではあたかも漸近線が描かれたようになるが，\nこれは，不連続点の前後をそのまま結んでいるためである。（下図左）\nPlotdata(\"1\",\"tan(x)\",\"x\",[\"Num=200\",\"Dis=50\"]);\nのように，\"Dis\" オプションを使えば余分な線が描かれなくなる。（下図右）\ny y\nx x\nO O\n41", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 42", "content": "【例】ガウス記号 [x] で表される関数（床関数 : (cid:13)oor()）のグラフ。\nPlotdata(\"1\",\"floor(x)\",\"x\",[\"Num=100\",\"Dis=0.9\"]);\nDrwxy();\nrepeat(7,s,start -> -2,\nPointdata(text(s+3),[s+1,s],[\"Inside=0\",\"Size=3\"]);\n);\ny\nx\nO\nなお，ここで，Pointdata() のname を text(s+3) としているのは，s が (cid:0)2 から始\nまるので，負の数が使えない name を 1 から始まるようにするためである。\n関数に文字係数がついており，文字係数の値を変化させながらグラフを描くには，\nAssign を使うか，Defvar で変数を定義する。\n【例】直線 y = bx(cid:0)b2 の係数bを変化させて描き，包絡線をうかびあがらせる。\ny\nrepeat(50,t,\ncb=t/5-5;\nPlotdata(text(t),Assign(\"b*x-b^2\",\"b\",cb),\"x\");\n);\nまたは\nx\nO\nDefvar(\"b\");\nrepeat(50,t,\nb=t/5-5;\nPlotdata(text(t),\"b*x-b^2\",\"x\");\n);\n関数 Implicitplot(name,式,xの定義域,yの定義域, options)\n機能 陰関数のグラフを描く。\n説明 陰関数の式を与えてグラフを描く。式，定義域とも文字列。\noptions は，\"r\",\"m\",\"Wait=n\" が指定できる。Wait の初期値は10。\n\"r\",\"m\"に関しては，オプションなしのとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n42", "tags": ["LaTeX", "中級者向け", "図形描画", "外部連携", "数式描画", "関数"]}
{"title": "Page 43", "content": "\"m\"のとき，強制的にデータファイルを作り直す。\n\"r\" のとき，すでにあるデータファイルを読み込む。\n【例】楕円を描く。\nImplicitplot(\"1\",\"x^2-x*y+2*y^2=4\",\"x=[-3,3]\",\"y=[-2,2]\");\ny\nx\nO\n関数 Deqplot(name,式，変数名，初期値，options)\n機能 微分方程式の解曲線を描く\n説明 微分方程式と初期値を与えて解曲線を描く。\n【例】y ′′ = (cid:0)y で，初期値がx = 0のときy = 1;y ′ = 0 の解曲線\nDeqplot(\"1\",\"y(cid:13)(cid:13)=-y\",\"x\",0, [1,0]);\n注） 微分記号のプライムは，シングルクォートまたはバッククォート。\ny\nx\nO\n【例】y ′ = y (cid:3)(1(cid:0)y)で，x = 0のとき，y = 0:5の解曲線\nDeqplot(\"2\",\"y(cid:13)=y*(1-y)\",\"x\",0, 0.5,[\"Num=100\"]);\ny\nx\nO\n【例】[x;y] ′ = [x(1(cid:0)y);0:3y(x(cid:0)1)]で，変数はt，t = 0（区間の左端）のときのx;y\n43", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 44", "content": "の値が1と0.5 であるときの解曲線\nDeqplot(\"3\",\"[x,y](cid:13)=[x*(1-y),0.3*y*(x-1)]\",\"t=[0,20]\",\n[1,0.5],[\"Num=200\"]);\ny\nx\nO\n関数 Paramplot(name , 式 , 変数と定義域,options)\n機能 媒介変数表示の曲線を描く。\n説明 式は\"\"でくくった媒介変数表示のリストで与える。\n定義域も \" \" でくくって文字列とし，t=に続いてリストで指定する。\noptions は線種が有効\n【例】サイクロイド曲線を描く。\nParamplot(\"1\",\"[t-sin(t),1-cos(t)]\",\"t=[0,2*pi]\");\ny\nx\nO\n【例】optionsの使用例。左から， 初期設定，太線，破線，点線の楕円\nParamplot(\"1\",\"[2*cos(t)-5,sin(t)]\",\"t=[0,2*pi]\");\nParamplot(\"2\",\"[2*cos(t),sin(t)]\",\"t=[0,2*pi]\",[\"dr,2\"]);\nParamplot(\"3\",\"[2*cos(t)+5,sin(t)]\",\"t=[0,2*pi]\",[\"da\"]);\nParamplot(\"4\",\"[2*cos(t)+10,sin(t)]\",\"t=[0,2*pi]\",[\"do\"]);\n関数 Polarplot(name , 式 , 変数と定義域,options)\n機能 極座標表示r = f((cid:18))の曲線を描く。\n【例】カージオイド曲線を描く。\n44", "tags": []}
{"title": "Page 45", "content": "Polarplot(\"1\",\"2*(1+cos(t))\",\"t=[0,2*pi]\",[\"Num=200\"]);\ny\nx\nO\n関数 Periodfun(定義式,周期,options)\n機能 周期関数のグラフを描く。戻り値はMaxima形式の式とperiodのリスト。\n説明 周期関数の式を定義してグラフを描く。定義式は，関数式（文字列），区間，分割数の\nリスト。\nこの関数固有のオプションは \"Con=\" で，不連続点を線で結ぶか否かと，その時の\n色。初期設定は破線。結ばない場合は \"Con=n\"，色指定は線種に続いてコンマで区\n切って指定する。たとえば，\"Con=do,Color=red\"。\n周期（描画回数）は，数またはリストで指定する。周期がmのとき，2m+1周期分描\nかれる。\n注意）関数は左右対称な定義域 [-a,a] で定義すること。\n【例】矩形関数のグラフ\ndefL=[\"0\",[-1,0],1,\"1\",[0,1],1];\nPeriodfun(defL, 2,[\"dr,2\"]);\nmemori=apply(-5..5,x,[x,text(x)]);\nmemori=flatten(remove(memori,[[0,\"0\"]]));\nHtickmark(memori);\nVtickmark([1,\"1\"]);\ny\n1\nx\n(cid:0)5 (cid:0)4 (cid:0)3 (cid:0)2 (cid:0)1 O 1 2 3 4 5\n一方を放物線にした場合\n45", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 46", "content": "defL=[\"0\",[-1,0],1,\"x^2\",[0,1],50];\nPeriodfun(defL, 2, [\"Con=n\",\"dr,2\"]);\nmemori=apply(-5..5,x,[x,text(x)]);\nmemori=flatten(remove(memori,[[0,\"0\"]]));\nHtickmark(memori);\nVtickmark([1,\"1\"]);\ny\n1\nx\n(cid:0)5 (cid:0)4 (cid:0)3 (cid:0)2 (cid:0)1 O 1 2 3 4 5\n関数 Fourierseries(name,係数,周期,項数)\n機能 フーリエ級数のグラフを描く。\n∑1\n説明 a + (a cosnx+b sinnx) を描く。係数は a ;a ;b のリストで，それぞれの要\n0 n n 0 n n\nn=1\n素は文字列とする。\nこの関数固有のオプションは \"Con=y/n\" で，不連続点を破線で結ぶか否か。 初期設\n定は y。\n矩形波のフーリエ近似のような場合は，オプションとして，[\"Num=200\"]（100 以上\nの値を指定）をつけるとよい。\n【例】矩形波のフーリエ近似\nFourierseries(\"1\",[\"1/2\",\"0\",\"(1-(-1)^n)/(pi*n)\"],2,6,[\"Num=200\"]);\ny\nx\nO\n関数 Tangentplot(name , PD , 位置 , options)\n機能 接線を描く。プロットデータの名前は，lntn\n説明 曲線PDの指定した位置での接線を描く。位置は \"x=n\" で指定する。\n使用例はParabolaplotの例を参照。\n)関数一覧\n46", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 47", "content": "1.2.5 文字\n関数 Expr([座標 , 位置 , 文字列],option)\n機能 TEX記法の文字列を与えて数式を書く。\n説明 Letterで文字列の前後に$ $をおくのと同じ。\n導関数の記号は，′（シングルクォート）を用いる。\n複数の箇所に文字を書く場合は，Letter() と同様，引数をリストにして与える。\noptionは フォントサイズで，[\"size=32\"] のように指定する。\n1 1\n【例】f(x) = x2 とその導関数 f ′ (x) = x の式，軸上に必要な数を入れる。\n4 2\nExpr([[-3,3],\"e\",\"f(x)=\\frac{1}{4} x^2\",[3,1.5],\"s2e2\",\n\"f‘ (x)=\\frac{1}{2}x\",[2,0],\"s\",\"2\",[0,1],\"w\",\"1\"]);\ny\nf(x) = 1x2\n4\n1 f ′ (x) = 1x\n2\nx\nO 2\n【例】対数関数の定積分の記号および積分値を図に書き込む。\nExpr([Q+[0.2,0],\"ne\",\"\\displaystyle \\int_a^b \\log x\\,dx=\"+\ntext(L.x*(log(L.x)-1)-G.x*(log(G.x)-1)) ]);\nL.x*(log(L.x)-1)-G.x*(log(G.x)-1) は，点L,G(図のa;b)をドラッグして\n積分範囲を決めるようにしているので，そこから計算した値。\n矢線は Arrowdata(Q,P); で表示している。矢線の始点がQ\n∫\nb\ny\nlogxdx = 3:55\na\n(a = 0:46; b = 4:8)\n1\na\nx\nO 1 e b\n47", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 48", "content": "関数 Exprrot(座標 , 向き , 方向，文字列,option)\n機能 TEX記法の文字列を与えて傾いた数式を書く。\n説明 「座標」の位置に，指定された向きで数式を書く。\n向きはベクトルで与える。\n方向は t (ベクトルと同じ向き) と n（ベクトルと垂直な向き） の両方を数字つきで与\nえる。ただし，方向はオプション。\n座標，向きとも，Cinderellaで作図した幾何点を用いることができる。\noptionは フォントサイズで，[\"size=32\"] のように指定する。\nExprrot([3,2],[2,-1],\"t0n1\",\"\\sqrt{3}\");\nExprrot(C,B-A,\"\\frac{2}{3}\");\ny\np\n2\n3 3\nx\nO\n)関数一覧\n関数 Letter([位置, 方向, 文字列],option)\n機能 文字列を表示する\n説明 「位置（座標）」と方向で指定された場所に文字を書き込む。\n位置（座標）は点の名前で指定することもできる。\n場所は上下左右を東西南北で表し， n/s/w/e/c の方向で表す。cは中央。\n指定位置からの距離を，数値で与えることもでき，e2, e3 は e より少し離して置く。\n複数の文字列をリストの形にして渡すことができる。\n注）導関数の記号′ は，数式モード（$ ではさむ）で′（シングルクォート）を用いる。\noptionは フォントサイズで，[\"size=32\"] のように指定する。\n文字列が一つのときは，\nLetter(位置, 方向, 文字列,option)\nにできる。\n【例】\n座標 (2,1) の南東にＰを表示\nLetter([[2,1] ,\"se\",\"P\"]);\n点Ｃを中央としてＣを表示\n48", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 49", "content": "Letter([C ,\"c\", \"C\"]);\n点Aの南西にA，Eの南に数式を表示\nLetter([A,\"sw\",\"A\",E,\"s\",\"$ f(x)=\\frac{1}{4} x^2 $\"]);\n関数 Letterrot(座標, 方向ベクトル,移動量, 文字列,option)\n機能 文字列を回転して表示する\n説明 座標で示された位置に，方向ベクトルで指定された向きに回転して文字を書き込む。\n第3引数は微小移動量で，略すこともできる。\noptionは フォントサイズで，[\"size=32\"] のように指定する。\nLetterrot(C,B-A,\"t2n5\",\"AB\");\n移動量を略して\nLetterrot(C,B-A,\"AB\");\nとすることもできる。この場合は，微小な移動はされない。\n)関数一覧\n1.2.6 マーキング\n関数 Anglemark(name,点リスト , options)\n機能 点リストで示された角に弧の形状の角の印をつける。\n説明 Listplot() などと同様，点リストが点名の場合は name は省略できる。弧を描かず文\n字だけを入れる場合は options に \"nodisp\" を指定する。\noptionsは次の通り。\n数値角の印の大きさ。 初期設定は１\n線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\n\"Expr=文字\" または \"Letter=文字\" : 文字を入れる\n\"Expr=位置 , 文字\": 位置を指定して文字を入れる。位置は頂点からの距離。\n【例】三角形の内角に印をいれ，文字を書き込む。（下図左）\nListplot([A,B,C,A]);\nLetter([A,\"n1\",\"A\",B,\"w1\",\"B\",C,\"e1\",\"C\"]);\nAnglemark([B,A,C]);\nAnglemark([C,B,A],[\"Expr=\\theta\"]);\nAnglemark([A,C,B],[2,\"dr,3\",\"Expr=2,\\alpha\"]);\n【例】三角形の内角に弧を描かず，◦ だけ書き込む。（下図右）\nListplot([A,B,C,A]);\nLetter([A,\"n1\",\"A\",B,\"w1\",\"B\",C,\"e1\",\"C\"]);\n49", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 50", "content": "Anglemark([C,B,A],[\"Expr=\\circ\",\"nodisp\"]);\nA\nA\n(cid:11)\n(cid:18)\n◦\nB C\nB C\n※角の印には平行四辺形の形状のものもある。Paramark()を参照のこと。\n関数 Paramark(name,点リスト , options)\n機能 点リストで示された角に平行四辺形の形状の角の印をつける。\n説明 Listplot() などと同様，点リストが点名の場合はnameは省略できる。\noptionsは次の通り。\n数値角の印の大きさ。 初期設定は1\n線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\n\"Expr=文字\": 文字を入れる\n\"Expr=位置 , 文字\": 位置を指定して文字を入れる。位置は頂点からの距離。\nA\n【例】三角形の内角に印をいれ，文字を書き込む。\nListplot([A,B,C,A]);\nParamark([A,B,C]); (cid:11)\nParamark([C,A,B],[3,\"Expr=\\alpha\"]);\nParamark([B,C,A],[\"dr,2\",\"Expr=2,\\theta\"]);\n(cid:18)\nC\nB\n※角の印には弧の形状のものもある。Anglemark() を参照のこと。\n関数 Bowdata(name,点リスト , options)\n機能 弓形を描く\n説明 点リストで与えられた 2 点を結ぶ弓形を描く。Listplot() などと同様，点リストが点\n名の場合はnameは省略できる。\n2点を反時計回りに回る方向に弓形を描く。\noptionsは，[曲がり , 空白サイズ, 文字, 線種]\n50", "tags": []}
{"title": "Page 51", "content": "曲がりは弧の曲がり具合の指定。 初期設定は1\n空白サイズは中央にあける空白の大きさ\n文字は，\"Expr=文字\"\nまた，\"Expr=微小移動 , 文字\"で位置を指定して文字を入れる。\n微小移動は tn\nt は線分方向の微小移動。移動量は数字をつける。正負が可。\nn は線分と垂直方向の微小移動\n【例】三角形ABCの各辺に弓形マークをつけ記号を入れる。\nA\nListplot([A,B,C,A]);\nLetter([A,\"n1\",\"A\",B,\"w1\",\"B\",C,\"e1\",\"C\"]);\n10\nBowdata([A,B]);\nBowdata([B,C],[1,\"Expr=t0n3,a\"]);\nBowdata([C,A],[2,1.2,\"Expr=10\",\"da\"]);\nB C\na\nこれに加え，文字を回転して表示する方法がある。ただし，Cinderella の画面には反\n映されない。文字をを回転するには次のように書く。\n\"Exprrot=微小移動 , 文字\"\n微小移動の最後にr をつけると，上下反転する。\n以下にいくつか例を示す。\nBowdata([B,A],[1,1,\"Exprrot=a\"]);\nBowdata([D,C],[1,1,\"Exprrot=t3n0,a\"]);\nBowdata([F,E],[1,1,\"Exprrot=t-3n0,a\"]);\nBowdata([H,G],[1,1,\"Exprrot=t0n3,a\"]);\nBowdata([L,K],[1,1,\"Exprrot=t0n0r,a\"]);\nBowdata([N,M],[1,1,\"Exprrot=t3n0r,a\"]);\na a a a a a\nno t3n0 t-3n0 t0n3 t0n0r t3n0r\noption\n関数 Drawsegmark(name,リスト,options）または Segmark(name,リスト,options）\n機能 線分に印をつける\n説明 リストで与えられた2点を端点とする線分に印をつける。印には4種類がある。\noptionsは\nType=n ：印の種類 n=1〜4\n51", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 52", "content": "Width ：二本線のときの線の幅\n【例】四角形ABCDを描き線分に印をつける。\nA\nD\nListplot([A,B,C,D,A]);\nSegmark(\"1\",[A,B],[\"Type=1\"]);\nSegmark(\"2\",[B,C],[\"Type=2\",\"Width=1.5\"]);\nSegmark(\"3\",[C,D],[\"Type=3\"]);\nSegmark(\"4\",[D,A],[\"Type=4\"]); B C\n関数 Htickmark([横座標 , 方向 , 文字])\n機能 横軸に目盛と文字を書く。\n説明 引数は位置（横座標），方向，文字。複数点の情報を [ ] 内にまとめて記入できる。方\n向を省略すると \"s1\"になる。微調整は描画面には反映されないので，PDF にして確\n認する。目盛の長さは Setmarklen() で設定できる。\n【例】 方向指定の例：Htickmark([1,\"1\",2,\"n1\",\"2\",3,\"se\",\"3\",4,\"4\"]);\ny\n2\nx\nO 1 3 4\n【例】-5から5までの目盛を打つ。Cindyscriptのリスト処理を使って，次のように引\n数のリストを作って渡す。\nmemori=apply(-5..5,x,[x,text(x)]);\nmemori=flatten(remove(memori,[[0,\"0\"]]));\nHtickmark(memori);\n１行目，apply のカッコ内の -5..5 でリスト[-5,-4,-3,-2,-1,0,1,2,3,4,5] ができる。それ\nを用いて，applyで[数, 数の文字] からなるリストができる。text(x) はxを文字にす\nる関数。2 行目で，このリストから，[0,\"0\"] を除き，リストを平滑化する。 結果は次\nのようになる。\ny\nx\n(cid:0)5 (cid:0)4 (cid:0)3 (cid:0)2 (cid:0)1 O 1 2 3 4 5\n関数 Vtickmark([横座標 , 方向 , 文字])\n機能 縦軸に目盛と文字を書く。\n説明 Htickmarkと同様。縦軸に目盛を書く。方向を省略すると \"w1\"になる。\n【例】点(0; 1); (0; 2)の西側に1; 2を表示する。\n52", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 53", "content": "Vtickmark([1,\"1\",2,\"2\"]);\n関数 Rulerscale(始点 ，横軸目盛 , 縦軸目盛)\n機能 目盛を打つ\n説明 始点の位置を縦横の起点として目盛りを打つ。目盛はリストで与える。[\"r\",a,b,c,d]\nの形式では，aからbまでc間隔で，倍率dの目盛を打つ。[\"f\",n1,\"str\",n2,\"str\",・・]\nの形式では，nと\"str\"がセットで，nの位置に\"str\"を書く。ただし，位置はCinderella\nの描画面の原点を0とする。\nListplot() とともに用いると，座標軸とは異なる線分に目盛を打つことができる。\nFramedata() とともに用いると矩形に目盛を打つことができる。\n【例】x軸上の (2,1) から (9,1) まで線分を引き，1目盛を10として目盛を打つ。\nListplot(\"1\",[[2,1],[9,1]]);\nRulerscale([2,1],[\"r\",2,9,1,10],[]);\ny\n20 30 40 50 60 70 80 90\nx\nO\n【例】Aを原点に置いた矩形枠を描き，横に0,1,2,3,4,5，縦に d1，d2 の目盛を打つ。\nFramedata(\"1\",[A,B],[\"corner\"]);\nRulerscale(A,[\"r\",0,5,1],[\"f\",1,\"d1\",3,\"d2\"]);\nd2\nd1\n0 1 2 3 4 5\n)関数一覧\n1.3 プロットデータの操作\n関数 Draw(cid:12)gures(or Drw(cid:12)gs)(name ,データリスト,オプションリスト)\n機能 複数のプロットデータのスタイル（オプション）をリストで与えて描画する\n53", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 54", "content": "説明 複数のプロットデータをまとめて扱う。たとえば，円と，円周上の点の 2 つのプロッ\nトデータをまとめて扱えば，平行移動や回転で，それらのプロットデータをまとめて\n平行移動や回転ができる。\n【例】サイクロイドの図を描く。\nopcr=[\"dr\"];\noppt=[\"Size=2\",\"Color=red\"];\nCircledata(\"1\",[[0,1],[0,0]],opcr);\nPointdata(\"1\",[0,0],oppt);\nad1=[\"cr1\",\"pt1\"];\ndt=2*pi/32;\nopcr=[\"dr,0.3\"];\nnn=32;\nforall(1..nn,\nt=dt*#;\nRotatedata(2,ad1,-t,[[0,1],\"nodisp\"]);\nTranslatedata(2,\"rt2\",[t,0],[\"nodisp\"]);\nDrawfigures(text(#),[\"tr2_1\",\"tr2_2\"],[opcr,oppt]);\n);\ny\nx\nO\n最初に，まとめて平行移動や回転をするデータをリスト化しておく。また，各データ\nのオプションをリストとして与えていることに注意。こうすることで，サイズや色な\nどのスタイルを元のスタイルに合わせることができる。\n)関数一覧\n関数 Changestyle(PDリスト, options)\n機能 描画オプションを変更する\n説明 複数の図形の描画オプションを一括して変更する。\n【例】線分AB，円ABの線を破線にしてTEXに書き出さないようにする。\nChangestyle([\"sgAB\",\"crAB\"],[\"da\",\"notex\"]);\n54", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 55", "content": "関数 Invert(PD)\n機能 プロットデータを逆順にする\n関数 Joincrvs(name, プロットデータのリスト, options)\n機能 隣接する曲線プロットデータ のリストを繋いで1本の曲線を作る。\n説明 曲線のリストは隣接する順番で指定する。\noptionsは線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\np p\n【例】線分y = x ((cid:0) 2 (cid:20) x (cid:20) 2)と半円で得られる閉曲線を描いて黄色で塗る。\n点Aは原点に，点Bは適当なところに作図しておく。\ny\nPlotdata(\"1\",\"x\",\"x=[-sqrt(2),sqrt(2)]\");\nB.xy=[sqrt(2),sqrt(2)];\nCircledata(\"2\",[A,B],[\"Rng=[pi/4,pi/4*5]\"]);\nJoincrvs(\"1\",[\"gr1\",\"cr2\"]);\nShade([\"join1\"],[\"Color=yellow\"]);\nx\nO\n関数 Partcrv(name, A, B, プロットデータ, options)\n機能 曲線プロットデータ上の点A, B の間の部分曲線を描く。\n説明 2 点 A, B の順序は曲線の向きと同一であること。曲線の向きは，y = f(x) のグラフ\nではx座標が増加する向き。\noptionsは線種\"dr, n\", \"da,m,n\" , \"do,m,n\"\n【例】放物線を点線で描き，一部を実線で描く。\nPlotdata(\"1\", \"x^2\", \"x\", [\"do\"]);（プロットデータの名前はgr1となる）\nPartcrv(\"1\", [0,0], [1,1], \"gr1\");\ny\nx\nO\n【例】円の一部を実線で描く。円のプロットデータは指定した円周上の点から反時計回\nりの順にできる。点Aは円の中心，Bは円周上の点とする。点P,Qは適当な位置に作\n図しておく。\nCircledata([A,B], [\"do\"]);\nPlotdata(\"1\", \"x^2\", \"x\", [\"do\"]);\n55", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 56", "content": "tmp=Intersectcrvs(\"crAB\",\"gr1\");\nP.xy=tmp_1;\nQ.xy=tmp_2;\nPartcrv(\"1\", P, Q, \"crAB\");\nPartcrv(\"2\", Q, P, \"crAB\");\ny y\nP P\nQ Q\nx x\nO O\npart1 の図 part2 の図\n【例】放物線y = x2 が円で切り取られる部分を実線で描く。 y\nCircledata(\"1\",[[0,2],[0,0]],[\"da\"]);\nPlotdata(\"1\",\"x^2\",\"x\",[\"do\"]);\ntmp=Intersectcrvs(\"cr1\",\"gr1\");\nPartcrv(\"2\",tmp_2,tmp_1,\"gr1\",[\"dr,2\"]);\nx\nO\n関数 Enclosing(name , PDリスト , [開始位置, 交点計算の許容限界1, 2])\n機能 複数の曲線から閉曲線を作る。\n説明 開始位置は，最初と最後の曲線の交点が複数あるときに指定する。\n開始点は近くに取ればよい。許容限界は，通常は指定しなくてよい。\n【例】放物線と直線で囲まれる領域に色を塗るために Shade() を使う。\nPlotdata(\"1\",\"x^2\",\"x\");\nLineplot(\"1\",[[0,0],[1,0]]);// axis x\nLineplot(\"2\",[[2,0],[2,1]]);\nEnclosing(\"1\",[\"Invert(gr1)\",\"ln1\",\"ln2\"],[\"nodisp\"]);\nShade([\"en1\"],[\"Color=red\"]);\n56", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 57", "content": "y\nx\nO\n注）閉曲線のとりかたでは，出発点を原点にした反時計回りまたは時計回りにすると\n反時計回りでEnclosing(\"1\",[\"ln1\",\"ln2\",\"Invert(gr1)\"]);\n時計回りでEnclosing(\"1\",[\"gr1\",\"Invert(ln2)\",\"Invert(ln1)\"]);\n)関数一覧\n関数 Hatchdata(name , 方向リスト , プロットデータ , options)\n機能 閉曲線の内部に斜線を引く。\n説明 引数は，曲線名，内部外部のパターンを与える\"i\"，\"o\" の文字列，閉曲線を与える曲\n線と領域の内部を定める方向のリストとオプション。\nオプション（カッコ内はデフォルト値）\n角度(45)，間隔(1)，\"Max=(20)\" 斜線の最大本数，\n\"No=点リスト\" 点リストの点が選ばれているときは実行しない\n\"File=y/m/n (n)\" データファイルを作るか\n\"Check=点リスト\" 点リストの点が変更されていたら，ファイルを作り直す\n【例】円の内部。(次図左)\nCircledata([A,B],[\"dr\"]);\nHatchdata(\"1\",[\"i\"],[[\"crAB\"]],[\"dr,0.7\"]);\n【例】3つの閉曲線の内側・外側のパターンが同一である領域（次図右）\nCircledata([A,B],[\"dr\"]);\nParamplot(\"1\",\"[4*cos(t),2*sin(t)]\",\"t=[0,2*pi]\");\nParamplot(\"2\",\"[2*cos(t),4*sin(t)]\",\"t=[0,2*pi]\");\nHatchdata(\"1\",[\"ioi\"],[[\"crAB\"],[\"gp1\"],[\"gp2\"]],[\"dr,0.7\"]);\nHatchdata(\"2\",[\"iio\"],[[\"crAB\"],[\"gp1\"],[\"gp2\"]],[\"dr,0.7\"]);\n57", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 58", "content": "y y\nx x\nO O\n【例】複数の領域。\nPlotdata(\"1\",\"2*sin(x)\",\"x=[-pi,3*pi]\",[\"Num=100\"]);\nListplot([A,B]);\nListplot([A,C]);\nHatchdata(\"1\",[\"ii\"],[[\"sgAB\",\"n\"],[\"gr1\",\"s\"]],[\"dr,0.7\"]);\nHatchdata(\"2\",[\"ii\"],[[\"sgAC\",\"s\"],[\"gr1\",\"n\"]],[\"dr,0.7\"]);\ny\n2\nx\nO\n(cid:0)2\n【例】複数の領域その2。\nPlotdata(\"1\",\"2*sin(x)\",\"x=[-pi,3*pi]\",[\"Num=100\"]);\nListplot([A,B]);\nListplot([A,C]);\nHatchdata(\"1\",[\"iio\"],[[\"sgAB\",\"s\"],[\"sgAC\",\"n\"],[\"gr1\",\"n\"]]);\ny\n2\nx\nO\n(cid:0)2\n58", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 59", "content": "【例】3次曲線と接線で囲まれた領域\n点Aを原点付近に作図しておく。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-2*x\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Num=100\"]);\nPutoncurve(\"A\",\"gr1\");\ncoef=Derivative(\"f(x)\",\"x\",A.x);\nDefvar([\"coef\",coef]);\nDeffun(\"g(x)\",[\"regional(y)\",\"y=coef*(x-A.x)+A.y\",\"y\"]);\nPlotdata(\"2\",\"g(x)\",\"x\",[\"Num=1\"]);\nif(!Isptselected(A),\nEnclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[A,\"nodisp\"]);\nHatchdata(\"1\",[\"i\"],[[\"en1\"]]);\n);\ny\n点Aをドラッグして曲線上を動かすと，\nif(!Isptselected(A),・・・の効果により，\nその間は領域の斜線は引かれない。\n点A以外の画面上の適当な位置をクリックして，\n点Aが選択状態でなくなると斜線が引かれる。\nx\n引かれる斜線の向きや間隔を変えることもできる。 O\n間隔は実数で指定できる。\n【例】円の内部または円と直線で区切られた図形\nCircledata([A,B]);のプロットデータ crAB を用いて，下図左から\nHatchdata(\"1\",[\"i\"],[[\"crAB\"]]); 円内に傾き45 ◦ の斜線を引く\nHatchdata(\"2\",[\"i\"],[[\"crAB\"]],[-40,2]); 傾き(cid:0)40 ◦，間隔を2倍に\nHatchdata(\"3\",[\"i\"],[[\"crAB\"]],[\"dr,0.5\"]);線の太さを0.3倍に\nHatchdata(\"4\",[\"i\"],[[\"crAB\"]],[-45,2,\"dr,0.3\"]);\n円のオプションに \"notex\"をつけた場合と，破線で描いた場合。\nCircledata([A,B],[\"notex\"]);\nCircledata([A,B],[\"da\"]);\n59", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 60", "content": "直線で分けられた領域を作り，対角の上下にハッチをかける。線を描き分ける。\nCircledata([A,B]);\nLineplot(\"1\",[A,B]);\nLineplot(\"2\",[A,C]);\nHatchdata(\"1\",[\"iii\"],[[\"crAB\"],[\"ln1\",\"n\"],[\"ln2\",\"n\"]]);\nHatchdata(\"2\",[\"iii\"],[[\"crAB\"],[\"ln1\",\"s\"],[\"ln2\",\"s\"]],[90,0.5]);\n)関数一覧\n関数 Dot(cid:12)lldata(name , 方向リスト , プロットデータ , options)\n機能 領域を点で敷き詰める。\n説明 Rとデータの授受をおこなって描画する。書式はHatchdata()と同様。\nオプションは，ドットの密度で 0.1〜0.8 程度。 初期設定は0.3。\n【例】円グラフ\nPartcrv() と Enclosing() で閉曲線を作って点を敷き詰める。\nr=3;\np0=r*[cos(pi/2),sin(pi/2)];\np1=r*[cos(-pi/6),sin(-pi/6)];\np2=r*[cos(-3*pi/4),sin(-3*pi/4)];\nCircledata(\"1\",[[0,0],[r,0]]);\nListplot(\"1\",[[0,0],p0]);\nListplot(\"2\",[[0,0],p1]);\nListplot(\"3\",[[0,0],p2]);\nPartcrv(\"1\",p1,p0,\"cr1\");\nEnclosing(\"1\",[\"sg2\",\"part1\",\"Invert(sg1)\"],[[0,0]]);\nPartcrv(\"2\",p2,p1,\"cr1\");\nEnclosing(\"2\",[\"sg3\",\"part2\",\"Invert(sg2)\"],[[0,0]]);\n60", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 61", "content": "Dotfilldata(\"1\",[\"i\"],[[\"en1\"]]);\nDotfilldata(\"2\",[\"i\"],[[\"en2\"]],[0.1]);\n関数 Shade((\"名前\"), プロットデータのリスト , options)\n機能 閉曲線で囲まれた領域を塗りつぶす。\n説明 第１引数には，閉曲線を与える曲線分のプロットデータ名を並べる。\nデフォルトでは，Joincrvs を使って閉曲線を作っている。ただし，プロットデータの\nリストに\"Invert()\"が入っていれば，Enclosingを使う。\noptionの Color は，Cinderellaの画面上での描画色をリストで与える。濃さを指定し\nたい場合は色名やRGBではなくCMYKにする。\noptionsには，他に，次のものがある。\n・Enclosingを使うかどうか：\"Enc=y/n\"（初期値は n）\n\"Enc=y\"のとき，複数のShadeを使うときは，名前をつける。\n・Enclosingのときの開始点，描画色\n・描画領域のトリミング：\"Trim=y/n\" （初期値は n ）\n・TeXへの書き出しで，先頭に配置するか：\"First=y/n\" （初期値は n ）\n\"First=n\" のときは，使われているGdataの書き出しの直前におく．\n【例】y = 2sinxのグラフと直線y = 1 とで囲まれた部分に黒0.2の濃さで色を塗る。\nSetax([7,\"nw\"]);\nPlotdata(\"1\",\"2*sin(x)\",\"x\",[\"Num=100\"]);\nLineplot(\"1\",[[0,1],[1,1]]);\nEnclosing(\"1\",[\"ln1\",\"Invert(gr1)\"],[[2,1],\"nodisp\"]);\nShade([\"en1\"],[\"Color=[0,0,0,0.2]\"]);\ny\nO\nx\n正弦曲線と直線の交点は簡単に計算できるので，次のように Partcrv() で部分曲線を\n求め，Enclosingで閉曲線を求めずにShadeを使ってもよい。\nPlotdata(\"1\",\"2*sin(x)\",\"x\",[\"Num=100\"]);\nLineplot(\"1\",[[0,1],[1,1]]);\nPartcrv(\"1\",[5*pi/6,1],[13*pi/6,1],\"gr1\");\nShade([\"ln1\",\"Invert(part1)\"],[[2.5,1],\"Color=0.2*[1,0,0,1]\"]);\n61", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 62", "content": "【例】2つの放物線で囲まれた部分を赤で塗る。\nPlotdata(\"1\",\"x^2-1\",\"x=[-3,3]\");\nPlotdata(\"2\",\"x^2/2\",\"x=[-3,3]\");\nShade([\"gr2\",\"Invert(gr1)\"],[[-1.5,1],\"Color=[1,0,0]\",\"alpha->0.4\"]);\nここで，alpha->0.4 は画面上の色濃度指定。\ny\nx\nO\n【例】描画領域（NE,SWの矩形領域）からはみ出した部分は表示しないようにする。\nPlotdata(\"1\",\"x^2\",\"x\");\nPartcrv(\"1\",[-1,1],[3,9],\"gr1\");\nListplot(\"1\",[[3,9],[-1,1]]);\nJoincrvs(\"1\",[\"sg1\",\"part1\"]);\nShade([\"join1\"],[\"Color=[0,0,0.2,0]\",\"Trim=y\"]);\nSW,NE を動かしてみると，白枠内だけが色塗りされる。\n【例】同心円をリング状に塗る。\n下図右のように，同心円をリング状に塗るが，円 2 つだけでは閉曲線はできない。そ\nこで，左図のように，円の描き始めを線分で結んで閉曲線を作る。このとき，向きを\n考えて，Joincrvs で結ぶように，\"Enc=n\" をつける。線分は非表示にしたいので，\n\"nodisp\"オプションをつけておく。なお，点Aを適当な位置に作図しておく。\nr1=2;\nr2=1.5;\nCircledata(\"1\",[A,A+[r1,0]]);\nCircledata(\"2\",[A,A+[r2,0]]);\nListplot(\"1\",[A+[r1,0],A+[r2,0]],[\"nodisp\"]);\nShade([\"cr1\",\"sg1\",\"Invert(cr2)\",\"Invert(sg1)\"],[\"Enc=n\",\"Color=green\"]);\n62", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 63", "content": "cr1\ncr2\nA\nsg1\nその他，Joincrvs() の例も参照のこと\n関数 Re(cid:13)ectdata(name , プロットデータ , 対称点または対称軸,options)\n機能 プロットデータの鏡映を作成\n説明 プロットデータを指定された点または軸に関して対称移動する。\n対称点は座標または，点の識別名。ただし，対称点を座標で示すときは要素がひとつ\nのリストにする。\n対称軸はリスト[ 点1, 点2 ]で指定。\n【例】中心A , 半径ABの円を描き，そのプロットデータを用いて鏡映を描く。\n点Cに関して対称な円を実線\n点(-1,2)に関して対称な円を太い実線\n直線DEに関して対称な円を破線\nCircledata([A,B]);\nReflectdata(\"1\",\"crAB\",[C]);\nReflectdata(\"2\",\"crAB\",[[-1,2]],[\"dr,2\"]);\nReflectdata(\"3\",\"crAB\",[D,E],[\"da\"]);\ny\n(-1,2) C D\nB\nA\nx\nO\nE\n63", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 64", "content": "関数 Rotatedata(name , プロットデータ ，角度 , [中心 , options])\n機能 プロットデータの位置を回転する\n説明 図形を，中心で示された点の周りに回転する。角度は弧度法で与える\n中心とoptionsはまとめてリストで与える。\n【例】中心A , 半径ABの円を描き，次のように回転して線種を変えて描く。\n(cid:25) (cid:25) (cid:25)\n点Cを中心に ，点(1,5)を中心に ， 点Dを中心に (cid:0)\n2 3 3\nCircledata([A,B]);\nRotatedata(\"1\",\"crAB\",pi/2,[C]);\nRotatedata(\"2\",\"crAB\",pi/3,[[1,5],\"dr,2\"]);\nRotatedata(\"3\",\"crAB\",-pi/3,[D,\"da\"]);\ny\nD (1,5)\nB C\nA\nx\nO\n)関数一覧\n関数 Scaledata(name , プロットデータ，x方向比率 , y方向比率 , [中心 , options])\n機能 図形の位置を拡大・縮小する\n説明 図形の位置をプロットデータを用いて指定された比率で拡大・縮小する\n比率は [x方向比率 , y方向比率] のリストで与えてもよい。\n中心とoptionsはまとめてリストで与える。optionsは線種\n【例】点A(2,1)，B(1,1)，C(-1,-1)，D(3,-1) を作図しておく。\nAを中心とする半径ABの円のプロットデータを作り，\n原点中心にx軸方向に3，y 軸方向に2拡大する。\nＣを中心にx軸方向に3，y 軸方向に2拡大し，実線で太く描く。\n(cid:0)!\n原点中心にベクトルODだけ拡大し，破線で描く。\n64", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 65", "content": "Circledata([A,B]);\nScaledata(\"1\",\"crAB\",3,2,[[0,0]]);\nScaledata(\"2\",\"crAB\",3,2,[C,\"dr,2\"]);\nScaledata(\"3\",\"crAB\",[D.x,D.y],[[0,0],\"da\"]);\ny\nB A\nx\nO\nC D\n関数 Translatedata(name , プロットデータ , 移動ベクトル , options)\n機能 プロットデータを平行移動する\n説明 プロットデータを移動ベクトルで示された分だけ平行移動する。\n【例】点A,B,C,Dを作図ツールでとっておく。\nCircledata([A,B]); でできる円（crAB）をx軸方向に2，y 軸方向に3だけ平行移\n動して実線で描く。\n(cid:0)!\nベクトルOCだけ平行移動し，実線で太く描く。\n(cid:0)!\nベクトルODだけ平行移動し，破線で描く。\nCircledata([A,B]);\nTranslatedata(\"1\",\"crAB\",[2,3]);\nTranslatedata(\"2\",\"crAB\",C,[\"dr,2\"]);\nTranslatedata(\"3\",\"crAB\",D,[\"da\"]);\ny\nD (2,3)\nB A\nx\nO\nC\n65", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 66", "content": "関数 Intersectcrvs(プロットデータ1, プロットデータ2)\n機能 2曲線の交点リストを取得する。\n説明 オプションとして，共有点があるかどうかを判断するための限界値があるが，通常は\n使わない。\ny\n【例】円と曲線の交点をP,Qとする。\nPlotdata(\"1\", \"sin(x)\", \"x\", [\"Num=100\"]); Q\nCircledata([A, B]);\ntmp=Intersectcrvs(\"gr1\",\"crAB\"); x\nO\nP.xy=tmp_1; P\nQ.xy=tmp_2;\nこの関数は，交点のデータのリストを返すので，tmp＝[ [ -0.37, -0.36 ], [ 2.13, 0.85 ]\n] のように値が返ってくる。交点の順序は PD1, PD2 の順序と曲線の向きによって決\nまる。曲線の向きは，y = f(x) のグラフでは x 座標が増加する向きで，パラメーター\n表示曲線ではパラメータの増加する向き。また，PD1 上から探し始めて PD2 との交\n点を拾っていく。\n交点がひとつの場合も tmp ＝ [ [ 2.45, 0.63 ] ] と 2 重のリストに入っているので，点\nとして取出すには P.xy=tmp_1; とする。\n注）交点の算出は，数式処理によるのではなく，プロットデータからの数値探索のア\nルゴリズムによっている。\n関数 IntersectcrvsPp(プロットデータ1, プロットデータ2)\n機能 2曲線の交点のパラメータリストを取得する。\n説明 2曲線の交点の座標とパラメータのリストを返す。\nIntersectcrvs() との違いは，パラメータがあるかどうかである。\n【例】放物線と直線の交点のパラメータを求める。\n2点A(-1,1),B(2.4) を作図しておく。\nPlotdata(\"1\",\"x^2\",\"x\");\nLineplot([A,B]);\np1=Intersectcrvs(\"gr1\",\"lnAB\");\np2=IntersectcrvsPp(\"gr1\",\"lnAB\");\nprintln(\"p1=\"+p1);\nprintln(\"p2=\"+p2);\nとすると，コンソールには\n66", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 67", "content": "p1=[[-1,1],[2,4]]\np2=[[[-1,1],17.68,1],[[2,4],42.66,1]]\nと表示される。\n関数 Nearestpt(PD1，PD2)\n機能 2曲線に対し，最も近い点とそのパラメータ，距離のリストを返す\n説明 戻り値は，それぞれの曲線上の点の座標とプロットデータ中の位置，その距離からな\nるリスト。\ny\n【例】2つの放物線上の点の最短距離とその位置を求める。\n点A,Bを作図ツールでとっておく。\nA\nPlotdata(\"1\", \"x^2+2\", \"x=[-2,2]\");\n1.78\nPlotdata(\"2\", \"-(x-2)^2+1\",\"x=[0,4]\");\nplist=Nearestpt(\"gr1\",\"gr2\");\nA.xy=plist_1; B\nx\nB.xy=plist_3;\nO\nListplot([A,B],[\"do\"]);\nPointdata(\"1\",[A,B],[\"Size=2\"]);\nLetter([A,\"n2w\",\"A\",B,\"s2e\",\"B\",(A+B)/2,\"e\",text(plist_5)]);\nここで plistに代入されたリストは次のようになっている。\n[[0.4,2.16],31,[1.58,0.82],20.73,1.78]\nなお，距離 1.78 は小数点以下第3位を四捨五入して表示されている。\n関数 Nearestptcrv(座標, プロットデータ)\n機能 点に最も近いプロットデータの点を求める\n説明 第１引数の座標に最も近い曲線プロットデータ上の点の座標を返す。\n【例】点(3,0)に最も近い y = x2 上の点を求める。\n点 A は (3,0) に，点 B は適当な位置に作図しておき，次のスクリプトを実行すると点\ny\nBが求める点となる。\nPlotdata(\"1\", \"x^2\", \"x\");\nB.xy=Nearestptcrv(A.xy,\"gr1\");\nListplot([A,B],[\"do\"]);\nPtsize(2);\nPointdata(\"1\",[A,B]); B\nLetter([A,\"ne\",\"A\",B,\"nw\",\"B\"]);\nA\nx\nO\n67", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 68", "content": "注）第１引数は座標なので，A ではなく A.xy としなければならない。\n)関数一覧\n関数 Numptcrv (プロットデータ)\n機能 プロットデータの個数を返す\n説明 Cindyscript で length(PD)とするのと同じ\n【例】 Implicit() と Paramplot() でそれぞれ楕円を描いたときのプロットデータの順\n序を比較する。ただし，TeXには書き出さない。\nSlider(\"A-C-B\",[0,-2],[6,-2]);\nImplicitplot(\"1\",\"x^2+4*y^2=4\",\"x=[-2,2]\",\"y=[-2,2]\",[\"do\"]);\nParamplot(\"1\",\"[2*cos(t)+5,sin(t)]\",\"t=[0,2*pi]\",[\"do\",\"Num=140\"]);\nprintln([Numptcrv(imp1),Numptcrv(gp1)]);\nn=floor(C.x*2);\nrepeat(n,s,start->0,\nt=s*10+1;\ndraw(imp1_t,color->hue(s/10));\ndraw(gp1_t,color->hue(s/10));\n);\n4行目で，２つのプロットデータの個数が同じであることを確かめている。\nスライダを動かすと，10個おきのプロットデータに対応する点が描かれる。\n関数 Paramoncrv(点の座標, 曲線の名前)\n機能 曲線上の点のパラメータ値を返す。\n説明 曲線は折れ線として描かれ，曲線上の各点はこの折れ線の節点を基準としたパラメー\nタ値を持つ。パラメータ値は整数部分が節点の番号，小数部分が節間の位置を表す。\n【例】図のような点 P から Q に至る円周上の 5 等分点を節点とする折れ線 cr1 におい\nて，n番目の線分上の点はn (cid:20) t (cid:20) n+1の範囲のパラメータ値を持つ。\nたとえば，図の点Aは2番目の線分上にあり，この値は\nprintln(Paramoncrv(A.xy,\"cr1\"));\n68", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 69", "content": "によってコンソールに表示される。（たとえば2.45）。\n点Aの位置を動かすとパラメータ値は変わる。\ny\nA\nx\nQ O P\n)関数一覧\n関数 Pointoncrv(点のパラメータ値, PD)\n機能 曲線上のパラメータ値を持つ点の座標を返す。\n説明 曲線（折れ線）上の節点を基準としたパラメータ値により点の位置が定まる。\n【例】図のような点 P から Q に至る半円周上の 5 等分点を節点とする折れ線 cr1 にお\nいて，パラメータ値4:5を持つ点Aは4番目の線分の中点である。したがって\nCircledata(\"0\",[[0,0],[2,0]],[\"do\"]);\nCircledata(\"1\",[[0,0],[2,0]],[\"Num=5\",\"Rng=[0,pi]\"]);\ntmp=Pointoncurve(4.5,\"cr1\");\nPointdata(\"1\",tmp,[\"Size=3\"]);\nLetter([tmp,\"nw\",\"A\",[2,0],\"se\",\"P\",[-2,0],\"sw\",\"Q\"]);\nによって，点Aを中点に置くことができる。\ny\nA\nx\nQ O P\n関数 Ptcrv(n,プロットデータ)\n機能 曲線プロットデータのn 番目の節点を返す\n説明 Cindyscript の PD n と同じ\n69", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 70", "content": "【例】楕円上の点で分割する。あからじめ必要な点を作図しておく。\ny\nCircledata([O,P],[\"do\",\"Num=100\",\"notex\"]);\nScaledata(\"1\",\"crOP\",4/3,1);\nB\nF.xy=[-sqrt(7),0];\nA=Ptcrv(9,sc1); A\nB=Ptcrv(16,sc1);\nListplot(\"1\",[A,F,B],[\"da\"]);\nx\nPartcrv(\"1\",A,B,\"sc1\",[\"dr,3\"]);\nO\nF\nShade([\"part1\",\"sg1\"],0.1);\nArrowhead(B,\"sc1\",[1.5]);\nLetter([A,\"ne\",\"A\",B,\"ne\",\"B\",F,\"s2\",\"F\"]);\n関数 Ptstart(プロットデータ) , Ptend(プロットデータ)\n機能 プロットデータの最初の点，最後の点を取得する。\n説明 プロットデータの最初の点，最後の点の座標を返す。\n【例】定義域を限定したグラフの両端の点を取得し線分ABを引く。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^2\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"do\"]);\nPlotdata(\"2\",\"f(x)\",\"x=[-1,2]\");\nLineplot(\"1\",[Ptstart(gr2),Ptend(gr2)],[\"do\"]);\nListplot(\"1\",[Ptstart(gr2),Ptend(gr2)]);\nLetter([A,\"w2\",\"A\",B,\"e2\",\"B\"]);\ny\nB\nA\nx\nO\n関数 ReadOutData(ファイル名）\n機能 外部データをプロットデータとして読み込む\n説明 CやRなどで作成したKeTCindy形式のデータファイルを読み込む。\n引数を省略した場合は，Fhead で定義したファイル名のテキストファイルから読み\n込む。\n70", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 71", "content": "ファイル名にはコンマで区切ってパスを与えることができる。たとえば，\nReadOutData(\"/datafolder\",\"file.txt\");\nKeTCindy形式のデータとは\n変数名//\nstart//（リストの始まり）\n[ , , ], …. // （個々のデータ２か３次元）\n…\nend// （リストの終わり）\nstart// （次のリストの始まり）\n…\nend//\n変数名//\nstart//\n…\nend//\nの形式のテキストファイル。\n関数 Readcsv(path,(cid:12)lename,option)\n機能 csvファイルを読む。\n説明 csvファイルを読みこむ。戻り値は読み込んだデータのリスト。\n第１引数の path は，ファイルを作業フォルダ（ 初期設定は (cid:12)g ）に置いた場\n合は省略することができる。そうでない場合は，フルパスで指定する。たとえ\nば，\"/Users/Hoge/Desktop\"\noption は，\"Flat=\" で，\"Flat=y\" の場合は，読み込んだデータをリスト化したとき\nに平滑化（１次元のリスト）にする。 初期設定は \"Flat=n\"\n【例】次のようなCSVファイル sample.csvを読み込むとする。\n12,14,15,18,13\n9,13,17,21\nつまり，２行分のデータである。\ndata=Readcsv(\"sample.csv\");\nとすると，\ndata=[[12,14,15,18,13],[9,13,17,21]]\nとなる。\nしたがって，１行目のデータだけ取り出したい場合は\n71", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 72", "content": "dt1=data_1;\nとする。\n)関数一覧\n関数 Readlines(path,(cid:12)lename,option)\n機能 テキストファイルを1行ずつ読む。\n説明 テキストファイルを1行ずつ読みこむ。戻り値は読み込んだ文字列のリスト。\n第１引数の path は，ファイルを作業フォルダ（ 初期設定は (cid:12)g ）に置いた場\n合は省略することができる。そうでない場合は，フルパスで指定する。たとえ\nば，\"/Users/Hoge/Desktop\"\n関数 WriteOutData(ファイル名,PDリスト）\n機能 外部データに書き出す\n説明 プロットデータを KeTCindy 形式のデータファイルに書き出す。出力先の 初期設定\nは作業フォルダ。\n【例】 放物線と円のプロットデータを書き出す。\nPlotdata(\"1\", \"x^2\",\"x\");\nCircledata(\"1\",[[0,0],[1,0]]);\nWriteOutData(\"figdata.txt\",[\"gr1\",gr1,\"cr1\",cr1]);\n書き出されたファイルの中身は次のようになっている。\ngr1//\nstart//\n[[-2.68843,7.22765],[-2.51807,6.34067],・・,[-2.00698,4.02798]]//\n[[-1.83662,3.37318],[-1.66626,2.77642],・・,[-1.15518,1.33443]]//\n以下，同様にプロットデータが続く\n[[5.82965,33.98479]]//\nend//\ncr1//\nstart//\n[[1,0],[0.99211,0.12533],[0.96858,0.24869],・・,[0.80902,0.58779]]//\n以下，同様にプロットデータが続く\n[[0.87631,-0.48175],[0.92978,-0.36812],・・,[1,0]]//\nend////\n関数 Extractdata(データ名,属性）\n機能 ReadOutData() で読み込んだデータに属性をつける。\n説明 ReadOutData() で読み込んだデータには，線種などの属性がついていないので，その\nままでは表示されない。そこで，この関数により属性をつけて表示する。\n72", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 73", "content": "ReadOutData(\"figdata.txt\");\nExtractdata(\"gr1\",[\"da\"]);\n)関数一覧\n1.4 計算\n関数 Derivative(関数式 , 変数 , 値)\n機能 関数の微分係数を求める\n説明 関数式で与えられた関数の，「変数＝値」における微分係数を求める。\n値は，点の座標を用いることができる。点Aのx座標であれば， A.x とする。\n【例】3次曲線上の点Aで接線を引く。点A,Bは作図ツールで適当にとっておく。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-4*x\",\"y\"]);\ncoef=Derivative(\"f(x)\",\"x\",A.x);\nA.y=f(A.x);\nB.y=coef*(B.x-A.x)+A.y;\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Num=200\"]);\nLineplot([A,B]);\nLetter([A,\"ne\",\"A\"]);\ny\nA\nx\nO\nなお，曲線のプロットデータを用いて，微分係数を求めることもできる。\n書式は，Derivative(PD ,値) で，次のように使う。（上の例と同じ図ができる）\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-4*x\",\"y\"]);\nPlotdata(\"1\",\"f(x)\",\"x\",[\"Num=200\"]);\ncoef=Derivative(\"gr1\",\"x=\"+A.x);\nA.y=f(A.x);\nB.y=coef*(B.x-A.x)+A.y;\nLineplot([A,B]);\nLetter([A,\"ne\",\"A\"]);\nまた，曲線の接線については，Tangentplotも参照されたい。\n)関数一覧\n73", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 74", "content": "関数 integrate(関数式 , 変数=範囲 , options)\n関数 integrate(PD , 範囲 , options)\n機能 関数式またはプロットデータで与えられた関数（データ）の数値積分の値を求める。\n説明 optionsは次の通り。\n\"Rule=s\"：シンプソン法による。 初期設定は大島ベジェ公式。\n\"Num=数値\"：分割数の指定。初期値は 100\n【例】f(x) = x3 (cid:0)2x2 +2 について，0から3までの定積分の値を求める。\nf(x):=x^3-2*x^2+2;\nval=Integrate(\"f(x)\",\"x=[0,3]\");\nprintln(val);//8.25が表示される\n【例】上の例と同じ関数をプロットデータで指定する。\nplotdata(\"1\",\"x^3-2*x^2+2\",\"x\");\nprintln(Integrate(\"gr1\",[0,3]));\n数値積分ではなく，数式処理として定積分の値を求める場合は，Maxima を利用する。\nCalcbyM を参照。\n関数 Inversefun(関数 , 範囲 , 値)\n機能 関数の逆関数値を求める\n説明 関数は文字列で，関数式もしくは定義された関数名とする。\n指定された範囲の中で逆関数値を求める。存在しない場合は一方の端点を戻り値とし，\nコンソールに「not found」と表示される。\n数式処理ではなく数値探索のアルゴリズムを使っているので，単調関数でない場合は\n範囲をできるだけ狭くとるとよい。値が複数ある場合は，小さいほうが返される。\n【例】x=Inversefun(\"sin(x)\",\"x=[0,pi/2]\",0.5);\n実行すると x = 0:5236 となる。\n)関数一覧\n1.5 値の取得と入出力\n計算値やプロットデータの値を取得したり，R用とのデータのやりとりをする。\n関数 Asin(実数）,Acos(実数)\n機能 逆三角関数の値を求める。\n74", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 75", "content": "説明 CindyScript の組み込み関数に，arcsin(x),arccos(x) があるが，x の絶対値が１より\n大きい場合は虚数を返す。このことがＲではエラーになるので，計算誤差により１よ\nりわずかに大きくなる場合のために用意した関数。\n関数 Sqr(実数）\n機能 平方根を求める。\n説明 CindyScript の組み込み関数に，sqrt(x) があるが，x が負の場合は虚数を返す。これ\nに対し，x が負の場合は０を返すようにした関数。計算誤差により１よりわずかに大\nきくなる場合のために用意した。\n関数 BBdata(ファイル名,option）\n機能 画像ファイルのサイズを求める\n説明 TeX 文書において，inputgraphics コマンドで画像を貼り込むときの BB サイズを\n求める。TeX 処理系の extractbb を用いて画像ファイルから BB データを作り，テ\nキストファイルとして作業ディレクトリに書き出す。これを読んで，コンソールに\ningludegarphics のコマンドを書き出す。これをそのままコピーすればよい。 なお，\nbbの値は整数値ではなく，高精細の値を小数点以下2桁に四捨五入して示される。画\n像ファイルは，PDFに限らず，PNG，JPGなどでもよい。\noptionは，幅または高さの指定。\n\"w=40mm\" でwidth=40mm が，\"h=40mm\"で height=40mm が付加される。\n【例】\n)関数一覧\n関数 Cindyname()\n機能 作図中のファイル名を取得する。\n説明 たとえば，現在作図しているファイル名が「polygon.cdy」のとき，\"polygon\" を返す。\n関数 Crossprod(リスト，リスト)\n機能 2つのベクトルの外積を求める。\n説明 Cindyscriptの組み込み関数 cross(リスト，リスト)と同じ。\n75", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 76", "content": "【例】Crossprod([1,0,0],[1,1,1]);\n結果は[0,-1,1]\n関数 Dotprod(リスト，リスト)\n機能 2つのベクトルの内積を求める。\n説明 Cindyscriptでは，積の演算で内積が求められる。\n【例】Dotprod([1,2,3],[1,-1,1]);\n結果は2\n[1,2,3]*[1,-1,1] でも同じ結果を得る。\n関数 Findarea(プロットデータ)\n機能 プロットデータで囲まれる部分の面積を求める。\n説明 閉曲線をなすプロットデータで囲まれる部分の面積を求める。大島のベジェ公式を用\nいている。\n【例】楕円の面積を求めて表示する。\nParamplot(\"1\",\"[3*cos(t),2*sin(t)]\",\"t=[0,2*pi]\");\narea=Findarea(\"gp1\");\nprintln(Sprintf(area,6));\nコンソールに面積 18.849536 が表示される。\n関数 Findlength(プロットデータ)\n機能 プロットデータの曲線の長さを求める。\n説明 プロットデータが描く曲線の長さを求める。大島のベジェ公式を用いている。\n【例】円周の長さを求めて表示する。\nCircledata(\"1\",[[0,0],[2,0]]);\nlen=Findlength(\"cr1\");\nprintln(Sprintf(len,6));\nコンソールに 12.558097 が表示される。\n)関数一覧\n76", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 77", "content": "1.6 作表\n関数 Tabledata(横データ，縦データ, 除外線 , options)\n機能 表の枠を作成し，表のデータlist を返す\n説明 Cinderellaの描画面上に左下を原点とする表を作成する。\n除外線がない場合は空リストを指定する。（必須）\noptionsのうち，Tabledataに特有なものは\nラベルのスキップ幅，\"Setwindow=n\"，\"Geo=n\"，\"Move=[0,0]\"\nである。\n\"Setwindow=n\" をつけると，NE,SWによる出力領域指定が有効になり，NE,SWを\nドラッグして出力領域を変更できる。（初期状態は，表の右上と左下）つけない場合\nは，表の部分だけが出力される。\n縦横データは，次のように，間隔の幅で与える。ただし，幅は Cinderella の描画面の\n0.1を単位とする。\nYoko=[20,20,20,20];\nTate=[10,10,10,10,10];\nTabledata(Yoko,Tate,[]);\n\"Geo=y\"とすると，作成された表には，行，列の制御点がつく。画面上では，横罫線の\n番号 r0,r1,・・・縦罫線の番号 c0,c1,・・・と見ることもできる。また，縦幅，横幅が\n数字で示される。ただし，これらはTEXには出力されない。また，作表はCinderella\nの描画面上では座標平面上に置かれるが，TEX への出力は座標平面上には置かないこ\nとが多いので，座標軸は非表示としている。\n描画面 TeX\n\"Geo=y\"の場合は，表のサイズ・行幅・列幅は，作成後にそれぞれの制御点をドラッ\nグすることにより任意に変えることができる。\n除外線は，除外するセルの罫線を，rとc で位置指定する。\n横罫線の場合，横罫線の番号，範囲（から，まで）\n77", "tags": []}
{"title": "Page 78", "content": "縦罫線の場合，縦罫線の番号，範囲（から，まで）\nとする。\nラベルのスキップ値は，いくつおきにラベルをつけるかの設定である。0 とするとラ\nベルが表示されない。ただし，ラベルはCinderellaの画面上だけの問題。\n\"Move=点の座標\"とすると，指定された点が左下になるように平行移動される。\n【例】4つの罫線を非表示にする\nRmv=[\"r1c0c1\",\"c3r0r1\",\"c3r3r5\",\"r4c2c4\"];\nYoko=[20,20,20,20];\nTate=[10,10,10,10,10];\nTabledata(Yoko,Tate,Rmv);\nで，次の表ができる。\n＜補足＞\n\"Geo=y\"の場合，制御点r0,r1,・・・,c0,c1,・・・がなければ新しく作り，すでに存在\nする場合はそのままとする。したがって，一度表を作成したのち，行数・列数を修正\nして作り直す場合は，一度既存の点を消去する必要がある。そのためには，「すべての\n点を選択する」ツールをクリックして点を消去するのがよい。クリックすると，消去\n後すぐに新規作成される。(誤って「すべての要素を選択する」を選ばないこと)\n他の点が描画されている場合は，表の部分だけドラッグで選択するか，表示メニュー\nの「式による表示」で一覧表を出して，制御点を選択して消去する。\n\"Geo=n\"（デフォルト）の場合，幾何点を生成しない。幾何点を作成しないメリット\nは，スクリプトだけで全体の縦横幅を変更できること。デメリットはインタラクティ\nブな微調整ができないこと。\n【例】１つおきにスキップして，r1,r3,c1,c2 を非表示とする。\n78", "tags": []}
{"title": "Page 79", "content": "Yoko=[20,20,20,20];\nTate=[10,10,10,10,10];\nTabledatalight(Yoko,Tate,[],[2]);\n関数 Changetablestyle(罫線リスト, 変更オプション)\n機能 Table の罫線の描画オプションを変更\n説明 罫線の部分的に指定して描画オプションを変更できる。\n【例】\nTabledatalight([10,20,10,20],[10,10,10],[]);\nChangetablestyle([\"r1c0c4\"],[\"da\"]);\nChangetablestyle([\"r2c0c2\",\"c1r0r3\"],[\"nodisp\"]);\n複数の表を描くこともできる。\n)関数一覧\n関数 Findcell(列番号, 行番号)\n機能 セルの情報list（中心，横幅／2，縦幅／2）を返す\n説明 列番号，行番号は左上のセルを１列１行として数える。\n【例】Tabledata(Tate,Yoko,[]);\nprintln(Findcell(2,1));\nとすると，2列１行のセルの中心の座標と横幅の半分，縦幅の半分の値がリストとして\nコンソールに表示される。\n関数 Putcell (列番号, 行番号, 位置, 文字データ)\n機能 セルに文字列を入れる\n説明 複数のセルにまたぐ位置指定の場合，列番号，行番号は，セル左上と右下の制御点の\n名称で指定する。\n位置はc, r, l, t, b （中央center , 右right , 左left , 上top , 下bottom ）\n79", "tags": []}
{"title": "Page 80", "content": "位置の例を以下に示す。\nyoko=[20,20,20,20,20];\ntate=[20,20];\nTabledata(yoko,tate,[\"c1r1r2\",\"c4r1r2\"]);\nPutcell(1,1,\"c\",\"A\");\nPutcell(2,1,\"r\",\"B\");\nPutcell(3,1,\"l\",\"C\");\nPutcell(4,1,\"t\",\"D\");\nPutcell(5,1,\"b\",\"E\");\nPutcell(\"c0r1\",\"c2r2\",\"c\",\"F\");\nPutcell(\"c2r1\",\"c3r2\",\"lb\",\"G\");\nPutcell(\"c3r1\",\"c5r2\",\"rt\",\"H\");\nc0 c1 c2 c3 c4 c5\nr0\nD\nA B C\nE\nr1\nH\nF\nG\nr2\n※数式の場合は，Putcellexpr を用いる。\n)関数一覧\n関数 Putcol (列番号, 文字位置，文字列リスト)\n機能 １列に順に文字を書き入れる\n説明 列番号で指定した列に，第１行から順に文字列リストの文字を書き入れる\n数の場合はダブルクォートでくくらなくてもよい。\nセルを飛ばす場合は，ヌル文字列 \"\" を書く。\n関数 Putcolexpr (列番号, 文字位置，文字列リスト)\n機能 １列に順に文字を書き入れる\n説明 文字列にTEX書式を使うことができる\n関数 Putrow (行番号, 文字位置，文字列リスト)\n機能 １行に順に文字を書き入れる\n説明 行番号で指定した行に，第１列から順に文字列リストの文字を書き入れる。\n関数 Putrowexpr (行番号, 文字位置，文字列リスト)\n機能 １行に順に文字を書き入れる\n80", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 81", "content": "説明 文字列にTEX書式を使うことができる\n文字を入れる例を示す。\nTate=[20,20,20,20,20];\nYoko=[15,15,15];\nTabledata(Tate,Yoko,[\"c1r1r2\",\"r1c2c3\",\"r2c2c3\"]);\nPutcol(3,\"c\",[\"A\",\"B\",\"C\"]);\nPutcolexpr(4,\"l\",[\"x^2\",\"y=\\sqrt{x^3}\"]);\nPutrow(1,\"c\",[1,\"二\"]);\nPutrowexpr(3,\"c\",[\"\",\"\\frac{\\pi}{2}\",\"\",\"\",\"\\sum{x^2}\"]);\nc0 c1 c2 c3 c4 c5\nr0\n1 二 A x2\nr1\np\nB y = x3\nr2\n∑\n(cid:25) C x2\n2\nr3\n※ r0,c0,・・は画面に表示される番号。\nグラフや文を入れた表の作成例\nPutcolexpr(),Putrowexpr() では，数式だけでなく，一般のTEXの文を入れることが\nできる。また，グラフの位置を適当に合わせて描画することにより，表のセルの中に\nグラフを入れることができる。\n【例】2次関数のグラフと2次方程式の判別式の関係\nセルの中にグラフを描く例。実際には，セルの位置にグラフを描く。\nx軸を描くための点A〜Fは作図ツールでとっておく。\nスクリプトを実行して表ができたら，制御点をドラッグしてサイズを調整し，点 A〜\nＦもドラッグして軸と放物線の共有状況を示すようにする。\nTate=[40,40,40];\nYoko=[20,20,20];\nTabledata(Tate,Yoko,[],[\"dr,2\"]);\nChangetablestyle([\"r1c0c3\"],[\"dr\"]);\nChangetablestyle([\"r2c0c3\"],[\"da\"]);\nPlotdata(\"1\",\"(x-2)^2+0.5\",\"x=[0.5,3.5]\");\nPlotdata(\"2\",\"(x-6)^2+1\",\"x=[4.5,7.5]\");\nPlotdata(\"3\",\"(x-10)^2+1.5\",\"x=[8.5,11.5]\");\nListplot([A,B]);\nListplot([C,D]);\nListplot([E,F]);\nPutrowexpr(1,\"c\",[\"D>0\",\"D=0\",\"D<0\"]);\n81", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 82", "content": "Putrow(2,\"c\",[\"2点で交わる\",\"接する\",\"共有点なし\"]);\nD >0 D =0 D <0\n2点で交わる 接する 共有点なし\n【例】増減表とグラフ\n関数の増減表とグラフを１つの表の中に入れた例。\nTate=[6,6,10,6,10,6,40];\nYoko=[30,6,6,6];\nRmv=[\"c1r0r1\",\"c2r0r1\",\"c3r0r1\",\"c4r0r1\",\"c5r0r1\", \"r1c6c7\",\n\"r2c6c7\",\"r3c6c7\"];\nTabledata(Tate,Yoko,Rmv,[\"dr\"])\nTlistplot(\"23d\",[\"c1r2\",\"c2r3\"]);\nTlistplot(\"23u\",[\"c1r3\",\"c2r2\"]);\nPutrowexpr(2,\"c\",[\"x\",0,\"\\cdots\",\"\\tfrac{1}{4}\",\"\\cdots\",4]);\nPutrowexpr(3,\"c\",[\"y(cid:18)\",\"\",\"-\",0,\"+\"]);\nPutrowexpr(4,\"c\",[\"y\",0,\"\\searrow\",\"-\\tfrac{1}{4}\",\"\\nearrow\",2]);\nPutcell(1,1,\"l2t2\",\"{\\small\\begin{minipage}{44mm}$y=x-\\sqrt{x}$\\\\$y(cid:18)=\n\\dfrac{2\\sqrt{x}-1}{2\\sqrt{x}}=0$|より\\vspace{1mm}\\\\\\hspace*{2zw}$x=\n\\dfrac{1}{4}$\\vspace{1mm}\\\\増減表は次のようになる\\end{minipage}}\" );\nPlotdata(\"1\",\"x-sqrt(x)\",\"x=[0,3]\",[\"do\",\"notex\"]);\nListplot(\"2\",[[0,0],[3,0]],[\"do\",\"notex\"]);\nListplot(\"3\",[[0,-0.5],[0,3]],[\"do\",\"notex\"]);\nTranslatedata(\"1\",\"gr1\",[4.9,1],[\"dr\"]);\nTranslatedata(\"2\",\"sg2\",[4.9,1],[\"dr\"]);\nTranslatedata(\"3\",\"sg3\",[4.9,1],[\"dr\"]);\nLetter(Ptend(tr2),\"e1\",\"\\small{$x$}\");\nLetter(Ptend(tr3),\"n1\",\"\\small{$y$}\");\nLetter(Ptstart(tr2),\"w1\",\"\\small O\");\nExpr(Ptend(tr1),\"nw-2\",\"y=x-\\sqrt{x}\");\n82", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 83", "content": "p\ny = x(cid:0) p x\ny ′ = 2 x p (cid:0)1 = 0より y\n2 x\n1\nx =\n4\np\n増減表は次のようになる． y = x(cid:0) x\nx 0 (cid:1)(cid:1)(cid:1) 1 (cid:1)(cid:1)(cid:1) 4\n4\ny ′ (cid:0) 0 + O x\ny 0 ↘ (cid:0)1 ↗ 2\n4\n【例】凹凸を含めた増減表\nTate=apply(1..8,20);\nYoko=[apply(1..4,10);\nTabledata(Tate,Yoko,[]);\nPutrowexpr(1,c,[\"x\",\"\\cdots\",\"-1\",\"\\cdots\",\"0\",\"\\cdots\",\"1\",\"\\cdots\"]);\nPutrowexpr(2,c,[\"y(cid:18)\",\"+\",\"+\",\"+\",\"0\",\"-\",\"-\",\"-\"]);\nPutrowexpr(3,c,[\"y(cid:18)(cid:18)\",\"+\",\"0\",\"-\",\"-\",\"-\",\"0\",\"+\"]);\nPutrowexpr(4,c,[\"y\",\"\\nelarrow\",\"\\frac{1}{\\sqrt{e}}\",\"\\nerarrow\",\n\"1\",\"\\serarrow\",\"\\frac{1}{\\sqrt{e}}\",\"\\selarrow\"]);\nx (cid:1)(cid:1)(cid:1) (cid:0)1 (cid:1)(cid:1)(cid:1) 0 (cid:1)(cid:1)(cid:1) 1 (cid:1)(cid:1)(cid:1)\ny ′ + + + 0 (cid:0) (cid:0) (cid:0)\ny ′′ + 0 (cid:0) (cid:0) (cid:0) 0 +\ny p1 1 p1\ne e\nここで，凹凸を示す矢印は，ketpic.sty で定義されているものである。\nnelarrow,nerarrow,selarrow,serarrow,NELarrow,NERarrow,SELarrow,SERrarrow\nがある。先頭の ne,se で北東・南東（右上・右下）次の r,l は回転の向き（r：right：\n反時計回り，l：left：時計回り）の矢印 (arrow) と覚えるとよい。直線系の矢印は\nNEarrow,SEarrrow。 少しずつ違うので試されたい。\nなお，これらの矢印は CindyTeX にはないので，Cinderella の描画面には表示され\nない。\n関数 Tgrid(セルラベル)\n機能 表のセルの座標を返す\n83", "tags": []}
{"title": "Page 84", "content": "説明 指定されたセルの左上の座標を返す。実際には，セルラベルは罫線を示しているので，\n指定した罫線の交点（格子点）ということもできる。\n関数 Tlistplot(セルラベル1,セルラベル2)\n機能 指定された2つの格子点を線分で結ぶ\n説明 セルに斜線を引くのに用いる。\n【例】Tlistplot([\"c0r1\",\"c1r2\"]);\n)関数一覧\n1.7 その他\n関数 Assign(文字列，文字，文字）\n機能 文字列の中のある文字を他の文字で置き換える\n説明 第１引数の文字列中の第2引数の文字を，第3引数の文字で置き換える。\n第3引数が数値の場合，文字列に変換される。\n第2引数と，第3引数をリストにして，複数の置き換えをすることができる。\n【例】a*x を1.3*x とした文字列を返す。次のいずれも同じ結果になる。\nAssign(\"x^2+a*x\",\"a\",\"1.3\");\nAssign(\"x^2+a*x\",\"a\",1.3);\n【例】直線 y = bx(cid:0)b2 の係数bを変化させて描き，包絡線をうかびあがらせる。\nrepeat(50,t,\ncb=t/5-5;\nPlotdata(text(t),Assign(\"b*x-b^2\",\"b\",cb),\"x\");\n);\ny\nx\nO\n84", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 85", "content": "【例】文字で表された x と y の係数をまとめて数値で置き換える。\nAssign(\"a*x^2+b*x\",[\"a\",1,\"b\",2]);\n)関数一覧\n関数 Colorcode(種別1,種別2, カラーコード)\n機能 種別1から種別2へカラーコードを変換する。戻り値は変換されたコード。\n説明 種別は，\"rgb\",\"cmyk\",\"hsv\"のいずれか。\n【例】変換例をいくつか示す。\nRGBの[1,0,0]をCMYKに変換したコードをコンソールに表示する。\ncol=Colorcode(\"rgb\",\"cmyk\",[1,0,0]);\nprintln(col);\nCMYKの[0,1,1,0]をRGBに変換したコードをコンソールに表示する。\ncol=Colorcode(\"cmyk\",\"rgb\",[0,1,1,0]);\nprintln(col);\nRGBの[1,0,0]をHSVに変換したコードをコンソールに表示する。\ncol=Colorcode(\"rgb\",\"hsv\",[1,0,0]);\nprintln(col);\n関数 Dqq(文字列)\n機能 文字列の前後に\"をつける。\nstr=\"abc\";\nstr2=Dqq(str);\nprintln([str,str2]);\n関数 Factorial(n)\n機能 正の整数nの階乗を計算する。\n関数 Norm(ベクトル), Norm(ベクトル1, ベクトル2)\n機能 ベクトル（2つのベクトルの場合は差の大きさ）の大きさを計算する。\n関数 Figpdf(option）\n機能 出力枠サイズのPDFを作る。\n説明 KETCindy では，通常，出力された (cid:12)g.tex ファイルを閲覧する PDF を A4 サイズで\n85", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 86", "content": "作成する。これに対し，Figpdf() を実行すると，出力サイズの PDF を作成する。閲\n覧用だけではなくワープロなどにに貼り込むときにそのまま使用できる。ただし，そ\nのための親子プロセスを生成して実行するため，次の手続き(1)(2)が必要となる。\n(1) Setparent((cid:12)lename)で，出力するPDF用のファイル名を設定する。\n(2) 出力は，「Parent」のボタンを押す。\nたとえば，(cid:12)g.cdy で作図しているとき，\nSetparent(\"pic\");\nとすると，(cid:12)g.tex を表示した pic.pdf が作成される。pic.pdf が目的のPDF。\nこのファイル名は 作図しているCinderellaのファイル名，または Set(cid:12)les() で指定し\nたファイル名とは異なるものにする。\noptionは，マージン（余白）と平行移動量。指定しない場合は 初期設定値。\n余白は，左右上下の順に4つの数をコンマで区切る。\n平行移動量は，右方向，下方向をリストで与える。\n余白指定と平行移動指定は同時に行うことができる。\n【例】余白の設定\nFigpdf([5,5,10,10]); 左右に5mm，上下10mmの余白\nFigpdf([[5,10]]); 右に5mm，下に10mm平行移動して表示\nFigpdf([5,8,10,10,[5,-5]]); 左5mm，右8mm，上下10mmの余白，\n右に5mm，上に5mm平行移動して表示\nなお，座標軸を表示する場合，右側は最低3mmの余白を設定しないと軸の文字が入ら\nない。\n)関数一覧\n関数 Help(文字列）\n機能 関数の使用例を取得する\n説明 文字列で始まる関数の使用例をコンソールに表示する。\nprintln(Help(\"L\"));\nのようにすると，コンソールに，次のように「L」で始まる関数の使用例が表示される。\nLetter([C,\"c\",\"Graph of $f(x)$\"]);\nLetter([C,\"c\",\"xy\"],[\"size->30\"]);\n文字を書き込む\n86", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 87", "content": "Letterrot(C,B-A,\"AB\");\nLetterrot(C,B-A,\"t0n5\",\"AB\");\nLetterrot(C,B-A,0,5,\"AB\");\n傾いた文字を書き込む\n・・・・\n関数 Helpkey(文字列）\n機能 関数の使用例をキーワードで検索する\n説明 文字列に与えたキーワードで関数の使用例を検索し，コンソールに表示する。\n【例】Helpkey(\"直線\");とすると，コンソールに次のように表示される。\nIntersectsgpL(\"\",[p1,p2],[p3,p4,p5],\"draw\");\nIntersectsgpL(\"R\",\"P-Q\",\"A-B-C\");\nIntersectsgpL(\"R\",\"P-Q\",\"A-B-C\",\"put\");\n空間の直線と平面の交点\nLineplot(\"1\",[[2,1],[3,3]]);\n・・・・\n関数 Indexall(str1,str2);\n機能 文字列 str1 から str2 を検索しその位置をすべて返す\n説明 Cindyscript の indexof() の拡張版。indexof() が最初に見つかった位置を返すのに対\nし，Indexall()は存在する位置をすべてリストにして返す。\n【例】str=\"abcabcabc\" から \"b\"を検索する。\nindexof(str,\"b\") では，2 が返る。\nIndexall(str,\"b\") では，[2,5,8]が返る。\n関数 Isptselected(点名）または Ptselected(点名)\n機能 点が選択されていれば true,そうでなければ false を返す。\n説明 点名はリストで与える。引数はなしにすることも可能で，その場合はすべての点が\n対象。\nKeTCindy の関数の中には処理に時間がかかるものがある。その場合，点をドラッグ\nするなど，画面上で操作をするとその都度再計算されるために，動きが非常に遅くな\nる。そこで，ドラッグする点をこの関数で指定すれば，ドラッグしている間は処理さ\nれないようにすることができる。\n【例】点Aを原点近くにとっておき，次のスクリプトを実行する。\nDeffun(\"f(x)\",[\"regional(y)\",\"y=x^3-2*x\",\"y\"]);\n87", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 88", "content": "Plotdata(\"1\",\"f(x)\",\"x\",[\"Num=100\"]);\nPutoncurve(\"A\",\"gr1\");\ncoef=Derivative(\"f(x)\",\"x\",A.x);\nDefvar([\"coef\",coef]);\nDeffun(\"g(x)\",[\"regional(y)\",\"y=coef*(x-A.x)+A.y\",\"y\"]);\nPlotdata(\"2\",\"g(x)\",\"x\",[\"Num=1\"]);\nif(!Ptselected(A),\nEnclosing(\"1\",[\"gr2\",\"Invert(gr1)\"],[A,\"nodisp\"]);\nHatchdata(\"1\",[\"i\"],[[\"en1\"]]);\n);\n点Aをドラッグ中（選択状態） 点A以外をクリックして選択状態を解除\n関数 Reparse(文字列か文字列のリスト)\n機能 評価(parse)してから実部をとる(re)。\n説明 CindyJSでは，実数の演算でも虚数の項が出ることがあり，その対応である。\n【例】str=\"(0-1)^2\"; Reparse(str);\n注）CindyJSでformat(parse(str),0)を実行すると1-i*0になる。\n関数 Slider(名称，位置1,位置2)\n機能 スライダを作成する\n説明 名称は \"A-C-B\" の形で，端点をA,B，スライダ点をCとしたスライダを作る。\n端点 A,B の位置を，位置 1，位置 2 で指定する。単に\"C\"としたときは端点をとらな\nい。スライダにより取得したい値は，点Cの座標（たとえば C.x）を利用する。\n点A,B,Cはあらかじめ作図しておく必要はない。既にある場合はその点を使う。\n【例】2つのスライダを用意し，y = asin(x(cid:0)b) のa,b を変化させる。\nSlider(\"A-C-B\",[-5,-2],[5,-2]); // C is movable.\nSlider(\"D-F-E\",[-6,-2],[-6,2]); // F is movable.\nPlotdata(\"1\",Assign(\"y=a*sin(x-b)\",[\"a\",F.y,\"b\",C.x]),\"x\");\n88", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 89", "content": "関数 Sprintf(実数,長さ)\n機能 小数点以下の長さを固定した文字列に変換\n説明 実数を，小数点n位までの数とした文字列に変換する\n【例】円周率\nSprintf(pi,2) は 3.14 を返す\nSprintf(pi,7) は 3.1415927 を返す\n注）pi は Cindyscriptの予約変数で，円周率を表す。\n関数 Textformat(数，桁数)\n機能 小数点以下の桁数を指定して数を文字列化する。\n説明 第１引数は数のリストでもよい。数のリストの場合は，戻り値は，対応する数値を指\n定係数にした後，リストを文字列化する。Cindyscriptの組み込み関数にも，format()\nという同様の関数があるが，format() は文字列のリストを返す。\n【例】円周率を小数点以下5位までで文字列化する。\nTextformat(pi,5); format(pi,5);\n戻り値は，いずれも \"3.14159\"\n【例】第１引数がリストのときの，format() との戻り値の違い。\ndt=[1/6,0.5];\nTextformat(dt,4); // 戻り値は \"[ 0.1667 , 0.5 ]\"\nformat(dt,4); // 戻り値は [ \"0.1667\" , \"0.5\" ]\n関数 Texcom(TEXコード）\n機能 TEXのコードを書き出す\n説明 任意のTEXのコードを書き出す\n89", "tags": ["KeTCindy", "構文"]}
{"title": "Page 90", "content": "関数 Windispg()またはWindisp(データのリスト）\n機能 定義されているプロットデータをCinderella画面に黒線で描く\n説明 Windispg()は，スクリプトの最後に置くことで，出力される部分だけが黒で描かれる\nので，出力図を確認することができる。ただし，Letter() 関数で表示した点の名称な\nどが Cinderella で作図したラベルと重なって表示されて見にくくなることもある。こ\nの関数を実行しなくても出力には影響しない。\nWindisp(データのリスト）は，R から KETCindy 用に出力されたファイルを Read-\nOutData() 関数で読み込んだときに，必要なプロットデータ列だけを表示するのに用\nいる。\nReadOutData(\"(cid:12)lename.txt\") でデータを読み込むと，そのデータに含まれるプロッ\nトデータ列が，コンソールに\nOutdata of (cid:12)lename.txt : [Gfn,Gdfn,Gh]\nのように表示される。\nこのうち，GfnとGhだけを表示するのであれば\nWindispg([Gfn,Gh]);\nとする。引数なしで\nWindispg();\nとすればすべてのプロットデータ列が表示される。\nなお，いずれの場合も，作図したプロットデータも同時に表示される。\n作図した図を全てではなく選択して表示する場合は，それらのプロットデータ名をリ\nストにして引数とする。\nたとえば，sg1, gr1, crABが定義されているとき，\nWindispg([\"sg1\",\"gr1\"]);\nとすれば，sg1,gr1のみが表示される。\n関数 Viewtex()\n機能 TEXのソースファイルを書き出す。引数なし。\n説明 グローバル変数 Fhead で定義したファイル名に \"main\" を付加した TEX のソース\nファイルとバッチファイル（Macの場合はシェルファイル）を作成する。\n関数 Workprocess(）\n機能 作図の経過を取得する\n説明 作図ツールを用いた作図の経過を取得する。\nprintln(Workproccess());\nとすると，コンソールに作図手順が表示される。\n関数 Op(n,list or str)\n90", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 91", "content": "機能 リストまたは文字列から要素を抜き出す\n説明 第2引数のリストまたは文字列のn番目の要素（文字）を返す。\nCindyscriptの アンダーバーの演算子 (list n , str n) と同様。\n関数 Strsplit(文字列 , 文字)\n機能 文字列を分解する。\n説明 第１引数の文字列を第2引数の文字の位置で分解したリストを返す。\n【例】文字aで区切って分解する。\nstr=\"abcadeaf\";\nstrL=Strsplit(str,\"a\"); //[” ” ,” bc” ,” de” ,” f” ] を返す。\n同様の関数に，Cindyscriptの tokenize(文字列,文字列)がある。tokenize() の第２引\n数は文字列や，文字のリストでもよい。\n)関数一覧\n関数 Fracform(数 , 分母のリストまたは最大値 [, 許容誤差の桁数(5)])\n機能 分母リストの1つを分母とする近似分数と誤差を返す。\n説明 戻り値は，簡易TeX-like書式の文字列，誤差，分子，分母。\n【例】Fracform(0.33,[2,3]); => [fr(1,3),(cid:13)(cid:13)err=0.0033(cid:13)(cid:13),1,3]\n)関数一覧\n関数 Totexform(簡易TeX-like書式)\n機能 TeX書式の文字列を返す。\n【例】Totexform(fr(1,3)); => frac{1}{3}\n)関数一覧\n関数 Tocindyform(簡易TeX-like書式)\n機能 Cindy書式の文字列を返す。\n)関数一覧\n91", "tags": ["KeTCindy", "構文"]}
{"title": "Page 92", "content": "2 他の数式処理ソフトなどとの連携\n2.1 R との連携\nR は主に統計解析のためのソフトウェアで，binorm（二項分布），pois（ポアソン），unif\n（一様分布），chisq（カイ2乗），f（F分布），t（t分布）など，多くの確率分布をサポートし\nている。\nKETCindyでは，kc.bat/shによってコマンドをRに渡し，結果をテキストファイルで受け\n取る。このとき，Rとのやりとりで，次のようなファイルが作業ディレクトリに作成される。\n拡張子 r ：r用のファイル\n拡張子 dat，拡張子 txt：データファイル\nこのデータのやり取りに関する次のオプションがある。\nオプションなしまたは，”” のとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n\"m\"のとき，強制的にデータファイルを作り直す。\n\"r\" のとき，すでにあるデータファイルを読み込む。\n関数 Boxplot(名前,データ,垂直位置,箱の高さ,option)\n機能 箱ひげ図を描く\n説明 データは，リストで渡す場合とファイル名を渡してファイルから読み込む場合がある。\nデータファイルは csv 形式とする。\n【例】乱数で作成した5未満の実数のデータを箱ひげ図にする。\ndt1=apply(1..100,5*random());\nBoxplot(\"1\",dt1,1,1/2);\ny\nx\nO\n【例】外部ファイルとして用意したデータを読み込んで箱ひげ図にする。\nBoxplot(\"2\",\"datafile.csv\",3,1/2);\n92", "tags": ["KeTCindy", "LaTeX", "中級者向け", "外部連携", "数式描画", "構文"]}
{"title": "Page 93", "content": "複数列から成る csv ファイルを読み込むには，Readcsv を使う。csv ファイルは，作\n業フォルダ（ 初期設定は (cid:12)g ）に入れておく。戻り値は読み込んだファイル。\nデータの値を画面に入るように調節するには，dt1/20 のようにしてリサイズする。\nまた，Framedata()，Rulerscale() を併用することで目盛を入れることができる。\nFramedata() のために，表示領域の対角点 A,B を Cinderella の作図ツールで作図し\nておく。\ndata=Readcsv(\"datafile.csv\");\ndt1=apply(data,#_1);\ndt2=apply(data,#_2);\nBoxplot(\"1\",dt1/20,1,1/2);\nBoxplot(\"2\",dt2/20,3,1/2);\nFramedata(\"1\",[A,B],[\"corner\"]);\nRulerscale(A,[\"r\",0,6,1],[\"f\",1,\"\\mbox{dt1}\",3,\"\\mbox{dt2}\"]);\ndt2\ndt1\n0 1 2 3 4 5 6\n注）一度実行した後，データを書き直すと，図が更新されないので，\"m\" オプション\nをつけて Boxplot(\"1\",dt1/20,1,1/2,[\"m\"]); とすると，図が更新される。データを書\nき出すときは，もう一度 \"m\" オプションをはずして実行してから Figure ボタンを押\nす。これは，データの作成タイミングの関係。\n)関数一覧\n関数 Rfun(name,コマンド, 引数, option)\n機能 Rの1つのコマンドを実行して結果を返す\n説明 バッチファイル kc.bat / シェルファイル kc.sh を利用して R とデータをやり取りし，\n計算結果を取得する。結果は，変数 R+name に入り，コンソールにも表示される。\n【例】R を用いて標準正規分布から 10 個の乱数を発生し，戻り値から平均値と標準偏\n差を求めてコンソールに表示する。\n93", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 94", "content": "Rfun(\"1\",\"rnorm\",[10]);\nnx=length(R1);\nmx=sum(R1)/nx;\nsx=sqrt(R1*R1/nx-mx^2);\nprintln(\"平均：\"+format(mx,4)+\"標準偏差：\"+format(sx,4));\n関数 CalcbyR(変数名,コマンド列，option)\n機能 Rのコマンドを実行して結果を返す\n説明 バッチファイル kc.bat / シェルファイル kc.sh を利用して R とデータをやり取りし，\n計算結果を取得する。\nコマンド列は，\"戻り値=コマンド\"，[引数] の2つをセットとして並べる。\n最後の行の結果が戻り値として第１引数の変数名に代入される。\"戻り値 1::戻り値\n2・・\",[]の形（戻り値1，戻り値2・・は各コマンドの戻り値）でコマンドを書くと，戻\nり値 1,・・のリストとなる。戻り値が一つの場合は実数。\"=値\",[] の形の場合，「値」\nがそのまま戻り値となる。\n【例】R を用いて N(50,52) から 10 個の乱数を発生し，平均と不偏分散も R で計算し\nてその結果をコンソールに表示する。\ncmdL=[\n\"tmp1=rnorm\",[10,50,5],\n\"tmp2=mean\",[\"tmp1\"],\n\"tmp3=var\",[\"tmp1\"],\n\"tmp1::tmp2::tmp3\",[]\n];\nCalcbyR(\"rd\",cmdL);\ndt=rd_1;\nmx=rd_2;\nvx=rd_3;\nprintln(\"データ：\"+dt);\nprintln(\"平均：\"+format(mx,4)+\"不偏分散：\"+format(vx,4));\nCalcbyR()によって，データと平均，不偏分散からなるリストが作成されるので，mx\nに平均，vxに不偏分散を代入している。rd_(-1) は，リスト rd の末尾の要素。\n【例】Ｒでポアソン分布から200個の乱数をとり，標本平均の分布の様子＝分散が小さ\nくなって，正規分布に近づいている様子＝をヒストグラムで見る。分散はＲで求めた\n不偏分散に (n-1)/n をかけて再計算してコンソールに表示する。\ncmdL=[\n\"tmp1=rpois\",[200,5],\n\"tmp2=mean\",[\"tmp1\"],\n\"tmp3=var\",[\"tmp1\"],\n\"=c(tmp2,tmp3,tmp1)\",[]\n];\n94", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 95", "content": "CalcbyR(\"rd\",cmdL);\ndt=rd_(3..length(rd));\nn=length(dt);\nmx=rd_1;\nvx=rd_2*(n-1)/n;\nsx=sqrt(vx);\nprintln(dt);\nprintln([\"m=\"+format(mx,4),\"v=\"+format(vx,4)]);\nSetscaling(1/5);\nHistplot(\"1\",dt,[\"Breaks=seq(0,14,1)\",\"dr,0.5\"]);\ny\nx\nO\n【例】ポアソン分布で乱数を2000個発生させ，10個ずつの平均をＲで計算し，ヒスト\nグラムを作る。\ncmdL=[\n\"tmp1=rpois\",[2000,5],\n\"tmp2=c()\",[],\n\"for(k in 1:200){\",[],\n\"tmp=tmp1[(10*(k-1)+1):(10*k)]\",[],\n\"tmp2=c(tmp2,mean(tmp))\",[],\n\"}\",[],\n\"=tmp2\",[]\n];\nCalcbyR(\"rd2\",cmdL);\nSetscaling(1/10);\nHistplot(\"2\",rd2);\n)関数一覧\n関数 Histplot(name,data,option)\n機能 Rを利用してヒストグラムを描く\n説明 data はリストにして作成するか，外部ファイルから Readcsv() で読み込む。戻り値\nは，階級境界値と，対応する度数のリスト。\n95", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 96", "content": "階級境界値（ブレークポイント）は，自動的に設定される（スタージェスの公式によ\nる）が，オプションで，\n\"breaks=[0,10,20,30,40,50,60,70,80,90,100]\"\nなどと指定することもできる。\nこの他のオプションは\n\"Den=yes/no\"：密度の指定（初期値は no）\n\"Rel=yes/no\"：相対度数にする/しない（初期値は no）\n【例】csv ファイル（data(cid:12)le.csv）を読み込み，ヒストグラムを作る。Framedata()\nと Rulerscale() を併用して，目盛付きの枠の中に表示する。表示枠の対角点 A,B は\nCinderellaの作図ツールで作図しておく。\nAddax(0);\nSetscaling(5);\nSetunitlen(\"0.6mm\");\ndata=Readcsv(\"datafile.csv\");\nHistplot(\"1\",data,[\"\"]);\nFramedata(\"1\",[A,B],[\"corner\"]);\nRulerscale(A,[\"r\",0,100,10],[\"r\",0,15,5]);\n15\n10\n5\n0\n0 10 20 30 40 50 60 70 80 90 100\n2 行目と 3 行目は，データに合わせて縦方向を 5 倍にし，TeX の単位長を 0.6mm に\nしている。\nDen,Rel オプションをyes にしたときは，Setscaling(100)くらいにするのがよい。\ncsvファイルが複数のデータからなる場合は，\ndt1=data_1; として，リストの第１要素を取得する。第2要素のヒストグラムであれ\nばdata_2 とする。\n)関数一覧\n96", "tags": ["アニメーション", "上級者向け", "中級者向け", "外部連携"]}
{"title": "Page 97", "content": "関数 PlotdataR(name,式,変数)\n機能 Rの関数のグラフを描く\n説明 Cindyscriptの組み込み関数にはない関数のグラフをRを利用して描く。\n【例】平均5, 標準偏差2の正規分布の密度関数と分布関数のグラフを描く。\nPlotdataR(“ 1” , “ dnorm(x,5,2)” , ” x=[0,10]” );\nPlotdataR(“ 2” , ” pnorm(x,5,2)” , ” x=[0,10]” );\ny\nx\nO\n【例】標準正規分布のグラフ上の点とx軸を結んだ線分を描く。\n点 A,B は Cinderella の作図ツールで作図しておき，点 A をグラフ上のおよその位置\nに置いてから実行する。\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\");\nPutoncurve(\"A\",\"grR1\",[-3,3]);\nPutpoint(\"B\",[A.x,0]);\nListplot(\"1\",[A,B]);\n2行目の最後の引数の[-3,3]は，その範囲を動かすことを意味する。\nA はグラフ上を動かすことができて，B はそれに伴って動く。ただし，少し動かす度\nに バッチ/シェル ファイルを実行するので，煩雑な場合は，Plotdata() の行をコメン\nト化してから点Aを動かしたあと再実行するとよい。\n【例】上と同様で，x軸上の点を自由点Aとし，曲線上にBを置く。\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\");\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\");\nA.xy=[A.x,0];\nLineplot(\"1\",[A,A+[0,1]],[\"nodisp\"]);\nPutintersect(\"B\",\"grR1\",\"ln1\");\nListplot(\"1\",[A,B]);\n【例】前の例のグラフで，AB の左側に Shade をかけ，Shade の部分の面積を求める。\nPの値を表示する位置に，Cinderellaの作図ツールで点Cをとっておく。\nPlotdataR(\"1\",\"dnorm(x)\",\"x=[-5,5]\",[\"Num=100\"]);\nPutpoint(\"A\",[0,0],[A.x,0]);\nLineplot(\"1\",[A,A+[0,1]],[\"nodisp\"]);\n97", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 98", "content": "Putintersect(\"B\",\"grR1\",\"ln1\");\nListplot(\"1\",[A,B]);\nListplot(\"2\",[[-5,0],[5,0]],\"nodisp\");\nEnclosing(\"1\",[\"Invert(grR1)\",\"sg2\",\"sg1\"],[B,\"notex\"]);\nShade([\"en1\"],[\"Color=[0.2,0,0,0]\"]);\ntmp=0.5+Integrate(\"grR1\",[0,A.x]);\nExpr([A,\"s\",text(A.x),C,\"e\",\"P=\"+text(tmp)]);\ny\nP = 0:65\nx\nO 0:37\n)関数一覧\n関数 PlotdiscR(name,式,変数)\n機能 Rを利用して離散型のグラフを描く\n説明 dbinom （二項分布），dpois（ポアソン分布），dgeom（幾何分布）など離散型確率分\n布のグラフを描く。\n【例】二項分布のグラフと正規分布のグラフを比較する。\nSetscaling(20);\nPlotdiscR(\"1\",\"dbinom(k,10,0.4)\",\"k=[0,10]\");\nPlotdataR(\"1\",\"dnorm(x,10*0.4,sqrt(10*0.4*0.6))\",\"x=[0,10]\",[\"do\"]);\ny\nx\nO\n【例】ポアソン分布および幾何分布のグラフ。\n98", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 99", "content": "PlotdiscR(\"2\",\"dpois(k,4)\",\"k=[0,10]\");\nPlotdiscR(\"3\",\"dgeom(k,0.3)\",\"k=[0,10]\");\n)関数一覧\n関数 Scatterplot(name,(cid:12)lename/datalist,option1,option2)\n機能 2次元データを読み込み，散布図を描く\n説明 外部ファイル (cid:12)lename（csv形式）を読み，散布図を描く。\n外部ファイルの２次元データとは，次の形のcsvファイル。（行末はLFまたはCR）\n2.3, 4.5 (LF)\n3.2, 7 (LF)\n2.0, 6.8 (LF)\ndatalistの場合は，次の形。\ndata=[[2.3,4.5],[3.2,7],[2.0,6.8], ・・・ ];\n第１オプションは，回帰直線を描くかどうかと点のスタイル。\n\"Reg=no\" : 回帰直線を描くかどうか（yes/no) 初期値は yes\n第２オプションは，相関係数と回帰直線の式を表示する位置と，回帰直線のスタイル。\n位置は，幾何点の名称でもよい。\n【例】data.csv を読んで散布図を描き，回帰直線を引く。\nScatterplot(\"1\",\"data.csv\");\nだけで描ける。オプションをつけた例は次。\n点Aを相関係数と回帰直線の式を表示する点としてCinderellaの作図ツールで取る。\n点を青で大きさ2とし，回帰直線を緑で表示する。\nScatterplot(\"1\",\"data.csv\",[\"Size=4\",\"Color=blue\"],[A,\"Color=green\"]);\nListplot(\"1\",[[0,7],[0,0],[7,0]]);\nRulerscale([0,0],[\"r\",0,7,1],[\"r\",1,7,1]);\n99", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 100", "content": "7\nr = 0:535; y = 1:009x(cid:0)0:545\n6\n5\n4\n3\n2\n1\n0 1 2 3 4 5 6 7\n)関数一覧\n2.2 Maxima との連携\nMaxima は数式処理ソフトで，KETCindy においては微積分の計算など，Cindyscript で\nは不十分な点を補うことができる。\nKETCindy では，kc.bat/sh によってコマンドを Maxima に渡し，結果をテキストファイ\nルで受け取る。このとき，Maxima とのやりとりで，次のようなファイルが作業ディレクト\nリに作成される。\n拡張子 max ：Maximaに渡すコマンドを記述したファイル\n拡張子 txt：Maximaが出力したデータファイル\nこのデータのやり取りに関する次のオプションがある。\nオプションなしまたは，”” のとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n\"m\"のとき，強制的にデータファイルを作り直す。\n\"r\" のとき，すでにあるデータファイルを読み込む。\nこのとき，ファイルの読み書きで不具合があると，数秒の後「==> (cid:12)le.txt not generated\n(5 s ) 」のようなエラーメッセージがコンソールに表示される。このような場合は作業ディ\nレクトリの設定などを確認していただきたい。この待ち時間については，Waitオプションで\n設定することもできる。\n100", "tags": ["KeTCindy", "LaTeX", "中級者向け", "外部連携", "数式描画", "構文"]}
{"title": "Page 101", "content": "関数 CalcbyM(name，コマンド，option)\n機能 Maximaのスクリプトを実行する\n説明 第2引数はMaximaで実行するコマンドを記述したスクリプト。\nコマンドと引数リストの繰り返しからなるスクリプトをリストとして作り，一度に実\n行する。\n戻り値はない（未定義値）。実行結果は，コマンドリストの最後に記述した変数（引数\nは空リスト）の値が，name で指定された変数に代入される。複数の結果を戻すとき\nは，:: で区切って記述するとリストにしてnameに代入される。\n【例】sinx とその導関数を表示する。\ncmdL=[\n\"f:sin(x)\", [],\n\"df:diff\",[\"sin(x)\",\"x\"],\n\"f::df\",[]\n];\nCalcbyM(\"fdf\",cmdL);\nprintln(fdf);\n実行すると，結果の f と df のリストが変数 fdf に代入され，コンソールに，\n[sin(x),cos(x)] と表示される。\n【例】2次方程式 x2 (cid:0)x(cid:0)4 = 0の解を求める。\ncmdL=[\n\"ans:solve\",[\"x^2-x-4\",\"x\"],\n\"ans\",[]\n];\nCalcbyM(\"ans\",cmdL);\nprintln(\"ans=\"+ans);\nコンソールには\nans=[x = -(sqrt(17)-1)/2,x = (sqrt(17)+1)/2]\nが表示される。\n応用例１：曲線の接線を引く\nex +e (cid:0)x\nf(x) = の，x = aにおける接線の方程式を作る。\n2\nfx=\"(exp(x)+exp(-x))/2\";\ncmdL=[\n\"df:diff\",[fx,\"x\"],\n101", "tags": []}
{"title": "Page 102", "content": "\"c:ev\",[\"df\",\"x=a\"],\n\"b:ev\",[fx,\"x=a\"],\n\"eq:c*(x-a)+b\",[],\n\"eq\",[]\n];\nCalcbyM(\"tn1\",cmdL);\nprintln(tn1);\nコンソールには\n(%e^a-%e^-a)*(x-a))/2+(%e^a+%e^-a)/2\nが表示される。\nこの，CalcbyM の戻り値 tn1 を用いて，曲線上の１点 A における接線のグラフを描\nく。以下のスクリプトを追加する。なお，点AをCinderellaの作図ツールで適当なと\nころにとっておく。\ntn1=Assign(tn1,[\"%e^a\",\"exp(a)\",\"%e^-a\",\"exp(-a)\"]);\nPlotdata(\"1\",fx,\"x\");\nPutoncurve(\"A\",\"gr1\");\ntmp=Assign(tn1,[\"a\",A.x]);\nplotdata(\"2\",tmp,\"x\",[\"Num=2\"]);\n１行目ではMaximaで作成した式を，Cindyscriptでプロットできる式にしている。\ny\nA\nx\nO\nなお，接線の方程式を求めるだけであれば，Mxfun() を使うこともできる。Mxfun()\nの解説を参照のこと。\n応用例2：パラメトリックの場合の接線\n媒介変数の値を決めるために，点AをCinderellaの描画面のx軸上にとっておき，そ\nのx座標を媒介変数tの値とする。スライダを作ってもよい。\n102", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 103", "content": "fn=\"3*cos(t)^2*[cos(t),sin(t)]\"; y\ncmdL=[\n\"f:\",[fn],\n\"df:diff\",[\"f\",\"t\"],\n\"df:trigsimp\",[\"df\"],\nx\n\"tn:f+s*df\",[],\nO\n\"tn\",[]\n];\nCalcbyM(\"tn2\",cmdL);\nParamplot(\"1\",fn,\"t=[0,2*pi]\",[\"Num=100\"]);\ngn=Assign(tn2,[\"t\",A.x]);\nParamplot(\"2\",gn,\"s=[-3,3]\");\ncmdLで定義しているMaximaのコマンド（trigsimp など）については，Maximaの\n解説書などを参照されたい。\n【例】定積分の値を求める。\n∫\n2\n((cid:0)x3+3x+2)dx の値を求める。結果は val で受け取り，Mxtex() に渡して，TeX\n(cid:0)1\n書式にして表示する。\ncmdL=[\n\"val:integrate\",[\"-x^3+3*x+2,x,-1,2\"],\n\"val\",[]\n];\nCalcbyM(\"val\",cmdL);\nMxtex(\"1\",val);\nExpr([[2,2],\"e\",\"S=\"+tx1]);\n関数 Mxbatch(ファイル名)\n機能 Maximaのライブラリを使うバッチファイルを作成\n説明 ketcindy/ketlib/maximaL にあるライブラリを用いるコマンドでバッチファイルを作\n成する。\nketcindy/ketlib/maximaLには，fourier sec.max,matoperation.max,poincare.mac\nの 3 つのファイルがあり，関数を定義したライブラリが入っている。それぞれ次のよ\nうな内容である。各ファイルをテキストエディタで開いて参照されたい。\nfourier sec.max ：フーリエ級数の計算を行う。\nmatoperation.max ： 行列の計算を行う。\npoincare ： ハミルトニアンシステムに関する計算を行う。\n【例】cmd=Mxbatch(\"fourier_sec\")\n103", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 104", "content": "を実行すると，cmdに，たとえば\n[batch,[\"/Applications/ketcindy/ketlib/maximaL/fourier_sec.max\"]]\nが代入される。（Mac/Windows および KeTCindyの設定によって異なる）\nそこで，次のように利用する。\nSetax([\"a\"]);\nSlider(\"A-C-B\",[-5.5,-1.5],[4.5,-1.5]);\ndefL=[\"1\",[-3,-2],1,\"0\",[-2,-1],1,\"-x\",[-1,1],1,\"0\",[1,2],1,\"-1\",[2,3],1];\nDrwxy();\ntmp=Periodfun(defL,1,[\"dr,2\",\"Color=red\"]);\nfun=tmp_1;\nper=tmp_2;\nHtickmark([1,\"n\",\"1\",2,\"n\",\"2\",3,\"nw\",\"3\"]);\nHtickmark([-1,\"-1\",-2,\"-2\",-3,\"-3\"]);\ncmdL=Concat(Mxbatch(\"fourier_sec\"),[\n\"Ffun(x):=\"+fun,[],\n\"c:fourier_sec_coeff\",[\"Ffun(x)\",\"x\"],\n\"c[1]::c[2]::c[3]\",[]\n]);\nCalcbyM(\"ans\",cmdL,[]);\nnterm=round(4*(C.x-A.x));\nFourierseries(\"1\",ans,per,nterm,[\"Num=400\"]);\nMxtex(\"2\",ans_3);\nExpr([[-5,-2],\"e\",\"s_n=\"+tx2,[4,-2],\"e\",\"n=\"+text(nterm)]);\ny\n1 2 3\nx\n(cid:0)3 (cid:0)2 (cid:0)1 O\ns =\n(cid:0)2((cid:25)n cos(2(cid:25)\n3\nn)+3 sin((cid:25)\n3\nn)(cid:0)(cid:25)n cos((cid:25)\n3\nn)(cid:0)(cid:25)n((cid:0)1)n)\nn = 15\nn (cid:25)2n2\n関数 Mxfun(name，式，リスト，option)\n機能 Maximaの関数を実行する\n説明 第2引数の「式」はMaximaの関数名。第3引数のリストは関数に渡す引数のリスト。\n戻り値は，第１引数の式に１つでも文字があると文字列となる。すべて数字（+,-, . を\n含む）の場合は16桁以下であれば数，それ以上の場合は文字列となる。また，戻り値\nは，変数 mx+name にも代入される。\nオプションに \"Disp=no\" をつけると，結果をコンソールに表示しない。\n【例】10!を求める。\nMxfun(\"1\",\"10!\",[]);\n104", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 105", "content": "を実行すると，コンソールにmx1 is 3628800 と表示される。この値は変数 mx1 に代\n入されているので，\nLetter([[0,1],\"e\",mx1]);\nとすればCinderellaの描画面上に表示される。mx1ではなく，戻り値を変数に代入し\nて使うこともできる。\nfact10=Mxfun(\"1\",\"10!\",[]);\nLetter([[0,1],\"e\",fact10]);\n【例】文字列の連結\n文字列を引数とする場合，例えば，Maximaの文字列を連結するコマンドconcatでは，\nconcat(\"a\",\"b\")\nとするが，中にダブルクォートが入っているため，全体を文字列にすることができ\nない。\nこのような場合は，第2引数を使って\nMxfun(\"1\",\"concat\",[\"a\",\"b\"])\nとすればよい。\n＜参考＞ CindyScript の unicode(code) 関数を用いてダブルクォートを表し，次のよ\nうにすることもできる。\ndq=unicode(\"22\");\ncomm=\"concat(\"+dq+\"a\"+dq+\",\"+dq+\"b\"+dq+\")\";\nMxfun(\"1\",comm,[]);\n【例】f(x) = sinx を微分する\nMxfun(\"1\", \"diff\",[\"sin(x)\",\"x\"])\nとすると\ndiff(sin(x),x)\nというコマンドをMaximaに渡して，戻り値をCindyの変数mx1に代入する。\nMxfun(\"1\", \"diff(sin(x),x)\",[]])\nと，第１引数にまとめても同じ結果になる。ただし，この場合，第 2 引数は空リスト\nとする。\n＜参考＞Cindyscriptの微分との違い\nCindyscriptでも微分はできる。たとえば，\nf(x):=sin(x);\ng(x):=d(f(#),x);\n105", "tags": ["KeTCindy", "構文"]}
{"title": "Page 106", "content": "plot(g(#));\nとすると，cos(x)のグラフが描かれる。\nしかし，Cindyscriptの微分が，微分の定義による数値計算であるのに対し，Maxima\nでは数式処理として微分ができる。\nその意味の違いは，次のスクリプトで確かめられる。\nf(x):=sin(x);\ng(x):=d(f(#),x);\nprintln(g(x));\nでは，コンソールに表示されるのは未定義値（ ） である。\n一方，\nMxfun(\"1\", \"diff\",[\"sin(x)\",\"x\"]);\nprintln(mx1);\nでは，コンソールに cos(x) と表示される。\nmx1は文字列であるので，Plotdata(\"1\",mx1,\"x\") でグラフが描ける。\nまた，Cindyscriptの微分では，3階か4階までの導関数が計算上の限度であるのに対\nし，Maximaなら何階でも微分ができるので，テイラー展開などで有利である。\n【例】sinx の テイラー展開による近似のグラフを表示する。\nMxfun(\"1\",\"taylor\",[\"sin(x)\",\"x\",0,7],[\"\"]);\nPlotdata(\"1\",\"sin(x)\",\"x\",[\"da\"]);\nPlotdata(\"2\",mx1,\"x\");\ny\nx\nO\nなお，Mxtex() を用いれば，Mxfun()の結果の mx1をTeX書式にして表示できる。\nExpr([[1,2],\"e\",Mxtex(\"1\",mx1)]);\nを追加すれば[1,2]の位置に式が表示される。\n106", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 107", "content": "【例】接線の方程式を作る\nex +e (cid:0)x\nf(x) = の，x = aにおける接線の方程式を作る。\n2\n関数式を文字列にしておき，Assign() を用いて変数xをaに変えれば，f(a)の式を作\nることができる。導関数についても同様にする。\nfx=\"(exp(x)+exp(-x))/2\";\ngx=Mxfun(\"1\",\"diff\",[fx,\"x\"]);\nfa=Assign(fx,[\"x\",\"a\"]);\nga=Assign(gx,[\"x\",\"a\"]);\ntf=ga+\"*(x-a)+(\"+fa+\")\";\nprintln(tf);\nコンソールには\n(%e^a-%e^-a)/2*(x-a)+((exp(a)+exp(-a))/2)\nが表示される。\n同様の例を CalcbyM() で例示しているので参照されたい。\n関数 Mxtex(name,式)\n機能 式をTeX書式にする\n説明 第2引数の式は，直接書いた式もしくはMxfunの戻り値。これをTeXの書式にする。\n戻り値は，変数 txname にも代入される。\n【例】部分分数への分解\nx3\n部分分数 の分解を Maxima で行い，その結果を TeX 書式にして画面\n(x+1)(x+2)\nに表示する。画面に表示された結果はそのままKETCindyで出力できる。\nMxfun(\"1\",\"partfrac\",[\"x^3/((x+1)*(x+2))\",\"x\"]);\nMxtex(\"1\",mx1);\nExpr([0,1],\"e\",tx1);\nここで，mx1，tx1 はそれぞれ Mxfun(\"1\",・・) , Mxtex\"1\",・・) の結果（戻り値）\nである。mx1，tx1 はコンソールにも表示され，tx1は次のようになっている。\n\\frac{8}{x+2}-\\frac{1}{x+1}+x-3\nCindyscript は TeX 書式をサポートしているのでこれで描画面に分数式が表示される\nが，Texの文書では，\\frac{}{} ではなく，\\dfrac{}{}を使うことが多い。そこで，\n107", "tags": ["KeTCindy", "LaTeX", "中級者向け", "数式描画", "構文"]}
{"title": "Page 108", "content": "Assign()を用いて，\"frac\" を \"dfrac\" に変えれば，そのままTex文書で使える。ただ\nし，Cindyscript は \\dfrac{}{} をサポートしていないので，画面上では分数表記に\nならない。そのあたりの事情を次のスクリプトで示す。\nfx=\"x^3/((x+1)*(x+2))\";\npfx=Mxfun(\"1\",\"partfrac\",[fx,\"x\"]);\nform=Mxtex(\"1\",fx)+\"=\"+Mxtex(\"2\",pfx);\ndform=Assign(form,[\"frac\",\"dfrac\"]);\nLetter([0,5],\"e\",\"部分分数への分解$\"+form+\"$\");\nLetter([0,3],\"e\",\"部分分数への分解$\"+dform+\"$\");\nCinderellaの描画面では次のように表示される。\n出力したTeX挿入図では次のようになる。\nDecomposition into partial fractions\nx3 8 1\n= (cid:0) +x(cid:0)3\n(x+1) (x+2) x+2 x+1\nなお，文字列を置換するのに，Assign(form,[\"frac\",\"dfrac\"]) ではなく，\nCindyscriptの文字列の関数 replace を用いて，\ndform=replace(form,\"frac\",\"dfrac\");\nとしてもよい。\n【例】2次関数のグラフを表示し，x軸との交点のx座標を表示する。\ny\nfx=\"x^2-x-3\";\ncmdL=[\n\"ans:solve\",[fx,\"x\"],\n\"ans\",[]\nx\n]; p O p\n1(cid:0) 13 13+1\nCalcbyM(\"ans\",cmdL); 2 2\np1=indexof(ans,\"[\");\np2=indexof(ans,\",\");\np3=indexof(ans,\"]\");\ns1=substring(ans,p1,p2-1);\n108", "tags": ["KeTCindy", "構文"]}
{"title": "Page 109", "content": "s2=substring(ans,p2,p3-1);\ns1=replace(s1,\"x =\",\"\");\ns2=replace(s2,\"x =\",\"\");\nMxtex(\"1\",s1);\nMxtex(\"2\",s2);\nPlotdata(\"1\",fx,\"x\");\nExpr([-2,-0.5],\"e\",tx1);\nExpr([2,-0.5],\"e\",tx2);\nここで，CalcbyM(\"ans\",cmdL); で得られるansは，次のような文字列である。\n\"[x = -(sqrt(13)-1)/2,x = (sqrt(13)+1)/2] \"\nそこで，ここから2つの式だけを抽出する作業を行ったのち，Mxtex() でTeXの式を\n得ている。\nさらに応用として，点AをCinderellaの作図ツールで作図し，\nif(A.y<0,\nfx=\"(x-\"+text(A.x)+\")^2\"+guess(A.y),\nfx=\"(x-\"+text(A.x)+\")^2+\"+guess(A.y);\n);\nとすると，点 A を頂点とする放物線と軸との交点の座標が描かれる。Maxima との\nデータのやり取りをするためのタイムラグがあるが，インタラクティブに放物線の位\n置を変えることができる。\n＜参考＞\n2次関数のような簡単な関数であれば，Cindyscriptの roots() 関数を用いて2次方程\n式が解けるので，次のスクリプトでほぼ同じ動作をするものを作ることができる。「ほ\nぼ」というのは点 A の位置によっては，guess() で解釈しきれないことがあるためで\nある。Maxima を使えば数式処理で解を求めるので，A がどこにあってもきれいに表\n示できる。\nfx=\"x^2-2*A.x*x+A.x^2+A.y\";\ncf=[A.x^2+A.y,-2*A.x,1];\nsol=roots(cf);\ns1=guess(sol_2);\ns2=guess(sol_1);\nMxtex(\"1\",s1);\nMxtex(\"2\",s2);\nPlotdata(\"1\",fx,\"x\");\nExpr([-2,-0.5],\"e\",tx1);\nExpr([2,-0.5],\"e\",tx2);\n)関数一覧\n109", "tags": ["KeTCindy", "LaTeX", "中級者向け", "図形描画", "数式描画", "構文", "関数"]}
{"title": "Page 110", "content": "2.3 Risa/Asir との連携\n関数 CalcbyA(name，コマンド，option)\n機能 Risa/Asirのスクリプトを実行する\n説明 第2引数はRisa/Asirで実行するコマンド。\nコマンドと引数リストの繰り返しからなるリスト（例えばcmdL）を作って，一度に実\n行する。\n戻り値はない。（未定義値）結果は，コマンドリストの最後に記述した変数（引数は空\nリスト）の値が name で指定された変数に代入される。複数の結果を戻すときは，::\nで区切って記述するとリストにして代入される。\n関数 Asirfun(name，式，リスト，option)\n機能 Risa/Asirの関数を実行する\n説明 第 2 引数の「式」は Risa/Asir の関数名。第 3 引数のリストは関数に渡す引数のリ\nスト。\n戻り値は，第１引数の式に１つでも文字があると文字列となる。すべて数字（+,-, . を\n含む）の場合は16桁以下であれば数，それ以上の場合は文字列となる。また，戻り値\nは，変数 asname にも代入される。\nオプションに \"Disp=no\" をつけると，結果をコンソールに表示しない。\n)関数一覧\n2.4 FriCAS(Axiom) との連携\n関数 CalcbyF(name，コマンド，option)\n機能 FriCASのスクリプトを実行する\n説明 第2引数はFriCASで実行するコマンド。\nコマンドと引数リストの繰り返しからなるリスト（例えばcmdL）を作って，一度に実\n行する。\n戻り値はない。（未定義値）結果は，コマンドリストの最後に記述した変数（引数は空\nリスト）の値が name で指定された変数に代入される。複数の結果を戻すときは，::\nで区切って記述するとリストにして代入される。\n関数 Frfun(name，式，リスト，option)\n機能 FriCASの関数を実行する\n説明 第2引数の「式」はFriCASの関数名。第3引数のリストは関数に渡す引数のリスト。\n戻り値は，第１引数の式に１つでも文字があると文字列となる。すべて数字（+,-, . を\n110", "tags": []}
{"title": "Page 111", "content": "含む）の場合は16桁以下であれば数，それ以上の場合は文字列となる。また，戻り値\nは，変数 friname にも代入される。\nオプションに \"Disp=no\" をつけると，結果をコンソールに表示しない。\n)関数一覧\n2.5 MeshLab との連携\nMeshLab は，3D データ（obj データなど）を読み込んでレイトレーシングで表示・編集\nするソフトウェアである。レイトレーシングで 3D グラフィクスを描くには，Cinderella と\n親和性の高い Cindy3D を利用するのがよいが，MeshLab を使うメリットは 3D プリンタ用\nのSTLファイルを出力できることである。また，KETCindyで描いた3Dの図がレイトレー\nシングでどのようになるのかを見ることも比較的簡単にできる。\nMeshLab との連携は，KETCindy から Obj 形式のデータを書き出すことで行う。\nMkobj**() 関数でデータを作り，Mkviewobj() 関数でMeshLabを呼び出して表示を行う。\nなお，Mkviewobj() 関数でMeshLabを呼び出して表示を行う場合，これをDrawスロット\nに書くと頻繁に呼び出しが行われるため非効率となる。そこで，if(1==0,・・・)で・・・の部分\nにMeshLabの呼び出し関係のスクリプトを書いて，実際に呼び出すときに if(1==1,・・・)\nとする方法と，呼び出し関係のスクリプトを関数化してボタンに割り当てる方法がある。\nketcindyパッケージに含まれる sample にボタンをつけたものがある。\nなお，3Dであるので，Initialization スロットに\nKetinit(); Ketinit3d(); を記述しておく。\n関数 Mkobjcmd(name，式，option)\n機能 厚みを持たない曲面のobjファイルのためのコマンドを作成する\n説明 オプションは [分割数1，分割数2，表側の方向の指定]\n表側の方向は，変数に対して，右手系の方向が\"+\"\n作成されるデータは\"oc\"+name のファイル名の obj データである。この名称は，\nMkviewobj() で用いる。（以下，Mkobj**()関数では同様）\n【例】：サドル面\nfd=[ \"z=x^2-y^2\", \"x=[-1,1]\",\"y=[-1,1]\",\" \"];\nSf3data(\"1\",fd);\nWindispg();\nMkobjcmd(\"1\",fd,[40,40,\"-\"]);\nMeshlab():=(\nMkviewobj(\"saddle\",oc1, [\"m\",\"v\"]);\n);\n111", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 112", "content": "このうち，Sf3data(\"1\",fd); は Cinderella の画面に表示するためであって，なく\nてもよい。\n次図で，左が option + の場合，右が - の場合である。\n)関数一覧\n関数 Mkobjcrvcmd(name，PD，option)\n機能 空間曲線（直線）のobjファイルのためのコマンドを作成\n説明 オプションは [太さ，断面の形状（正多角形）の辺の数，断面の正面]\n曲線は紐のようなもので表す。その断面は正多角形で， 初期設定は正 6 角形である。\n断面の正面は\"xy\",\"yz\",\"zx\"のいずれかで指定する。太くなった時に形状の差が現\nれる。\n例太さ0.03で螺旋を描く\nSpacecurve(\"1\",\"[(6*pi-t)/(6*pi)*cos(t),(6*pi-t)/(6*pi)*sin(t),0.1*t]\",\n\"t=[0,6*pi]\",[\"Num=200\"]);\nWindispg();\nMkobjcrvcmd(\"1\",\"sc3d1\",[0.03]);\nMeshlab():=(\nMkviewobj(\"spiral\",oc1,[\"m\",\"v\"]);\n);\nMkobjcrvcmd(\"1\",\"sc3d1\",[0.1,8,\"yz\"]); としたのが下図右。\n112", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 113", "content": ")関数一覧\n関数 Mkobjnrm(name，式)\n機能 法線ベクトルのデータを作成\n説明 式は曲面を表す式。これに対し，法線ベクトルを表す式を求める。\n関数 Mkobjplatecmd(name，面データ，options)\n機能 面を描く\n説明 面データを渡して面を描く。\noptions は，面の厚みの指定。厚みは中心線に対し，両側につけることができる。\nたとえば，[0.05] はプラス側に 0.05 の厚み，[0.05,-0.04] はマイナス側にも 0.04 の厚\nみをつける。\n【例】三角形のプレートを描く\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\np1=[2,0,0];\np2=[0,2,0];\np3=[0,0,2];\nplane=[[p1,p2,p3],[[1,2,3]]];\nMkobjplatecmd(\"1\",plane,[0.05]);\nMkobjcrvcmd(\"2\",\"ax3d\");\nMkviewobj(\"plane\",Concatcmd([oc1,oc2]),[\"m\",\"v\"]);\n113", "tags": []}
{"title": "Page 114", "content": "関数 Mkobjpolycmd(name，PD，options)\n機能 多面体を描く\n説明 VertexEdgeFace() の戻り値を PDとして渡して多面体を描く。\n関数 Mkobjsymbcmd(PD, 実数，実数，ベクトル, ベクトル)\n機能 文字等のobjデータのためのコマンドを作成\n説明 引数の PD を描く。第 2 引数は大きさ，第 3 引数は回転角，第 4 引数は正面方向のベ\nクトル，第5引数はPDの中心の位置。\nPD は，平面の描画コマンドによるプロットデータが使える。また，PD に半角アル\nファベットを文字として与えることができる。この場合，文字は n,p,q,r,t,x,y,z で，該\n当するフォントが data フォルダの fontF フォルダに用意されている。この中にない\nフォントは使えない。\n関数 Mkobjthickcmd(name，式)\n機能 厚みを持つ曲面のobjファイルのためのコマンドを作成\n説明 オプションは [分割数 1，分割数 2，厚み，表側の方向の指定，条件] 表側の方向\nは，変数に対して，右手系の方向が\"+\"。厚みを持つため，nsew のそれぞれについ\nて，\"+n+s-e-w\" のように指定する。\n条件として，\"Assume(R>0)\" をつけると，R が 0 以下になるための不具合を回避で\nきる。\nまた，\"ratsimp\" をつけると有理関数について，\"trigsimp\"をつけると三角関数につ\nいて，処理を速くすることができる。\nなお，この関数はMaximaを使うので，Maximaをインストールしていることが前提。\n【例】回転放物線\n0\nfd=[\n10\n\"z=(x^2+y^2)\",\n\"x=R*cos(T)\",\"y=R*sin(T)\",\n\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"\n20\n0 ];10 20 30 40 50 60 70 80 90 100 110 120 130 140 150\nMkobjthickcmd(\"1\",fd,[40,40,0.2,\"+n+s-e-w+\",\"assume(R>0)\"]);\nMkviewobj(\"pala\",oc1,[\"m\",\"v\",\"Wait=5\"]);\n114", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 115", "content": "関数 Mkviewobj(name，PD, options)\n機能 objファイルを作成。optionにより MeshLab を立ち上げて表示する。\n説明 第2引数に複数のプロットデータを与えるときは，Concatcmd() により１つにまとめ\nる。オプションは\n\"m\"または\"make\" データを作る（指定しない場合もデータがなければ作る）\n\"v\"または\"view\" MeshLabを立ち上げて表示する\n\"W=n\" 作成するための待ち時間。ｎ秒。これを過ぎると終了する\n\"Unit=mm\" Setunitlen()と連動して3Ｄプリンタの数値の単位をmmで指定する\n3Dプリンターがインチで認識する場合は \"Unit=in\" とする。\n)関数一覧\n2.6 表計算ソフトとの連携\n表計算ソフトでは，複数のセルを選択してコピー（Windows では Crtl+ C ，Mac では\nCommand+C）すると，セルの内容はtab区切りのテキストデータとしてクリップボードに\nコピーされる。これを Cindyscript エディタにペーストすることで表計算ソフトのデータを\nKETCindy で利用できる。逆に，Cindyscript のコンソールへの出力を表計算ソフトのシー\nトにコピーすることもできる。\nまた，表計算ソフトから書き出した CSV ファイルについても同様にして CSV 形式のデー\nタを扱うことができる。\n関数 Tab2list(str，option)\n機能 str の内容をリストに変換する\n説明 tabやコンマ区切りになっている文字列 str をリストに変換する。\noptionは，次の通り。\nBlank=a：NULLのセルをaに置き換える。\nSep=b：セパレータ（区切り文字）を b とする。 初期設定は tabコード\n次のような手順で表計算ソフトや CSV ファイルからデータを KETCindy に移すこと\nができる。\n(1) Cindyscriptエディタで，適当な文字変数を用意する。\nたとえば，data=\"\";\n115", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 116", "content": "(2) 表計算ソフトで，適当な範囲を指定しクリップボードにコピーする。\nWindowsなら Ctrl+C，Macなら Command+C\n(3) data=\"\"; のダブルクォートの間にペーストする。\n最後の行は右図のように，\" の前で改行されていてもよい。\n(4) この文字変数 data に対し，Tab2list(data) を実行すると，行列を表すリストが返\nされる。\nこれを適当な変数に代入し，作表コマンドで表にするなど，目的に応じて利用する。\n数値だけなら行列として計算もできる。\n116", "tags": []}
{"title": "Page 117", "content": "空文字のセル(NULL)が含まれる場合， 初期設定ではそのまま空文字になるが，アン\nケート処理などで無回答を０にしたいような場合は\ndlist=Tab2list(data,[\"Blank=0\"];\nとする。\nCSVファイルからCSV形式（コンマ区切り）のデータをコピーした場合は\ndlist=Tab2list(data,[\"Sep=,\"];\nとする。\nなお，文字列をセパレータで区切ってリスト化する Cindyscript の関数に tokenize()\nがある。上の例で，\ndlist=tokenize(data,[unicode(\"000a\"),unicode(\"0009\")]);\nとすると，改行コード (000a) と tab コード (0009) で切り分けてリスト化する。この\nとき，リストの各要素はつぎのようになる。\n文字列→文字列\n数値形式の文字→実数【例】 14 → 整数1412.3 → 実数12.3\n計算式の形→文字列【例】 437-0023 →437-0023 (文字列)\nこれに対し，Tab2list() では，計算式の形の文字列は数値と見なして計算結果を取得\nする。\n【例】 437-0023 →414 (数値)\nしたがって，郵便番号や日付 (28/12/5) のようなものは計算されてしまうので，\ntokenize() を用いるのがよい。なお，tokenize() の場合，空行は空リストになるので，\n最後の行でダブルクォートの前で改行されていると空リストが入る。\n関数 Dispmat(list)\n機能 リストを行列の形でtab区切りにしてコンソールに表示する。\n説明 行列を表すリスト （たとえば dlist) を引数として Dispmat(dlist) を実行すると，コ\nンソールに行列型で内容が表示される。\n実際にはTAB区切りの文字列。（println としなくても直接コンソールに表示される）\nこれを表計算ソフトのシートにコピーする。\n117", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 118", "content": "関数 Writecsv(namelist, data, (cid:12)lename, option)\n機能 data の内容をCSVファイルに出力する\n説明 ベクトルまたは行列となっている data を、(cid:12)lenameのファイル名としてCSVファイ\nルに書き出す。\noptionは，次の通り。（省略できる）\nCol=nn：自然数nnで指定した列数のCSVファイルとして書き出す。\nnamelist は，CSV ファイルの 1 行目に追加される項目名。省略すると\"C1,C2,...\"と\nいう項目名が付く。\nなお，列数の指定を省略すると data が行列の場合は、その列数を data がベクトルの\n場合はnamelistの項目数を利用する。\n)関数一覧\n118", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 119", "content": "3 アニメーション PDF\n3.1 概要\nアニメーションのできるPDFを作る。\nCinderellaの作図機能とCindyscriptを用いてアニメーションができるが，PDFにするこ\nとで Cinderella がなくても PDF ビュアーがあればアニメーションを実行できるので，プレ\nゼンテーションや教材の受け渡しなどに便利である。\n次の画面は，samplesフォルダにある「s06animation」の「s0601cycloid」のものである。\nこれをひな形として使うのがよい。すでにあるスライダなどが邪魔であれば，消去ボタンで\n消去するか，template2allbuttons.cdy をひな形として用いる。\n画面上方のボタンには，次のようなスクリプトが割り当てられている。\nFigure ： Viewtex(); 現在の画面のPDFデータを作る\nParent ：複数のスクリプト Figpdf() を使うときに使用する。\nParaF ： Parafolder(); アニメーションのフレームデータを作る\nAnime ： Mkanimation(); アニメーションPDFを作る\nFlip ： Mk(cid:13)ipanime(); パラパラ動画PDFを作る\nアニメーション PDF を作るには，フレームを定義する関数を記述し，「ParaF」ボタンで\nフレームデータを作り，「Anime」または「Flip」ボタンでPDFを作成する。\nAnime ボタンを押すと，\\usepackage[dvipdfmx]{animate} でパッケージを読み込み，\nanimateinline 環境のアニメーションを作る。\nFlip ボタンを押すと，animateinline 環境ではなく，フレームに分割した PDF が生成さ\nれる。\n119", "tags": ["KeTCindy", "アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "外部連携", "構文", "環境構築"]}
{"title": "Page 120", "content": "なお，アニメーション PDF でアニメーションを行うには Adobe Acrobat Reader など，\nアニメーションに対応した PDF リーダーが必要である。Windows の SumatraPDF，Mac\nの プレビューではアニメーションができない。\n3.2 関数\n関数 Setpara(fname,funcstr,range,options1,options2)\n機能 アニメーションの設定をする\n説明 fname は出力するファイル名，funcstrは定義した動画関数名，rangeは範囲\n「Anime」ボタンを押すと，animate+fname.pdf が作られる。再生はコントローラか，\n画面クリックで行う。\n「Flip」ボタンを押すと，(cid:13)ipanime+(cid:12)lename.pdf が作られる。再生（コマ送り）は，\nAcrobat Reader のページ送りボタンで行う。\noptions1 はアニメーションのデータを作るための設定。\nm/r データの作成 / 既存データがある場合の読み込み（ 初期設定は r ）\nDiv=n フレーム数。初期値は25。\noptions2 はアニメーションについての設定で，次の通り。\nFrate=n １秒間のフレーム数。初期値は20。\nTitle=str タイトル。指定しない場合は fname と同じ。\nScale=n 図の大きさの拡大率\nopA=[option] animateinline 環境のためのオプション\n初期設定は[loop,controls,buttonsize=3mm]。\nloop：繰り返し再生する。\ncontrols：コントローラを表示する\nbuttonsize：コントローラのサイズ\npalindrome：反転して繰り返し再生する\nstep：コマ送りモードにする。コントローラもコマ送り仕様。\n\"OpA=[controls,buttonsize=5mm]\" のように記述する。\n+をつけると初期設定のものに追加することができる。\nたとえば \"OpA=+step\" で\n\"OpA=[loop,controls,buttonsize=3mm,step]\" となる。\n\"OpA=[]\" とすると，オプションなしとなり，\n画面をクリックすると繰り返しなしで再生される。\n記述例\nSetpara(\"cycloid\",\"mf(t)\",\"t=[0,60]\",[\"Div=60\"],\n[\"Frate=30\",\"Title=\"サイクロイド\",\"Scale=1.5\",\"OpA=[controls]\"]);\n120", "tags": ["アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 121", "content": "関数 Parafolder(funcstr,fname,range,options)\n機能 アニメーションのフレームデータを作成する\n説明 funcstrは動画関数名，fname は出力するフォルダ名，rangeは範囲\n作業フォルダ ((cid:12)g) 内に，フレームデータを格納した fname フォルダを作る。ひな形\n（s0601cycloid）にある ParaF ボタンに割り当てられており，通常はそのまま使えば\nよい。\n関数 Mkanimation(path,folder)\n機能 アニメーションのPDFを作る\n説明 作業フォルダ ((cid:12)g) 内に，フレームデータを格納した fname フォルダを作り，ここか\nらアニメーションの PDF を作る。Setpara() で設定したファイル名を fname とする\nと，生成する TeX ファイルは，animatefname.tex （PDF作成のTeXファイル）と\nanimfname.tex （動画データ）で，PDFの名称は，animatefname.pdf となる。\nひな形（s0601cycloid）にある Anime ボタンに割り当てられており，通常はあらため\nて設定せずそのまま使えばよい。\n関数 Mk(cid:13)ipanime(path,folder)\n機能 パラパラ動画のPDFを作る\n説明 作業フォルダ ((cid:12)g) 内に，フレームデータを格納した fname フォルダを作り，ここか\nらパラパラ動画のPDFを作る。Setpara() で設定したファイル名を fname とすると，\n生成する TeX ファイルは，(cid:13)ipanimefname.tex （PDF 作成の TeX ファイル）で，\nPDFの名称は，(cid:13)ipanimefname.pdf となる。\nひな形にある Flip ボタンに割り当てられており，通常はあらためて設定せずそのまま\n使えばよい。\n)関数一覧\n3.3 制作例\n【例】定円上を動く点Pと，定点Aを結ぶ線分の中点をQとして動きを見る。\nアニメーション（フレーム）を定義する関数は，時刻を t として， t における図を定義す\nると考える。時刻は単なる媒介変数であるので，t でなく s などでもよい。関数名は，たと\nえば mf(movie frame) とする。\n121", "tags": ["アニメーション", "上級者向け", "中級者向け", "外部連携"]}
{"title": "Page 122", "content": "Setax([\"\",\"\",\"sw\",\"\",\"sw\"]);\nSlider(\"A-C-B\",[0,YMIN-1],[2*pi,YMIN-1]);\nCircledata(\"1\",[[0,0],[0,2]]);\nmf(t):=(\npt=2*[cos(t),sin(t)];\nmp=(pt+[4,0])/2;\nListplot(\"1\",[[4,0],pt]);\nPointdata(\"1\",[mp,pt],[\"Size=2\"]);\nif(t==0,\nptlist=[mp];\n,\nptlist=append(ptlist,mp);\n);\nLetter([[4,0],\"s\",\"A\",pt,\"en\",\"P\",mp,\"ne\",\"Q\"]);\nPointdata(\"2\",ptlist,[\"Size=2\",\"Color=red\"]);\n);\nmf(C.x);\nSetpara(\"middle\",\"mf(t)\",\"t=[0,4*pi]\");\nこの例の場合，mf(C.x) を実行するとスライダを動かすことでインタラクティブに軌跡を\n表示できる。アニメーションを作る上では mf(C.x) やスライダはなくてもよい。\nCinderellaの画面は次のようになる。\nアニメーションを作成するときは //mf(C.x) とコメントアウトしてから 「ParaF」\n「Anime」 ボタンをクリックする。次の図は，でき上がった animatemiddle.pdf の始めの画\n面である。\n122", "tags": ["アニメーション", "上級者向け", "中級者向け", "図形描画", "関数"]}
{"title": "Page 123", "content": "また，次のようにオプションを指定すると，5秒間のアニメーションとなる。\nSetpara(\"middle\",\"mf(t)\",\"t=[0,4*pi]\",[\"Div=30\"],[\"Frate=6\"]);\n[\"Div=150\"],[\"Frate=30\"]とすると，やはり5秒間のアニメーションとなるが，1秒間\nのフレーム数が多いため，なめらかな動きとなる。これは標準的なビデオのフレームレート\nである。ただし，ファイルサイズは約5倍となる。\n)関数一覧\n123", "tags": ["アニメーション", "上級者向け", "中級者向け", "外部連携"]}
{"title": "Page 124", "content": "4 KeT スライド\n4.1 概要と制作手順\nKETCindy で作成した図とテキストを統合してプレゼンテーション用のスライド PDF を\n作成する。必要なファイルは，スライドの内容を記述したテキストファイル（ここではコンテ\nンツファイルと呼ぶ）と，タイトルや図を作成し，コンテンツファイルと統合する KETCindy\nのファイルである。この2つのファイルは，拡張子が txt と cdy で，ファイル名は同一とす\nる。たとえば，コンテンツファイルを makeslide.txt ，KETCindyファイルを makeslide.cdy\nとしたときの，制作イメージを次の図に示す。\nmakeslide.txt\nTitle\nText1\n(cid:12)g1\nText2\n:::\n(cid:12)g1.tex\n(cid:12)g2.tex\nmakeslide.cdy Slide.pdf\nmovie.tex\nmakeslide.cdy\nひな形として，サンプルとして提供されている samples フォルダの中の s0701basic.cdy\n124", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 125", "content": "をコピーし，適当にリネームして使うのがよいだろう。必要なボタンと，最低限のスクリプ\nトが記述されている。\n以下では，KETCindyのファイルを makeslide.cdy , コンテンツファイルを makeslide.txt\nとして説明を進める。制作手順は次の通り。\n(1) makeslide.cdy に Settitle コマンドでタイトルを書き，「Titile」ボタンで書き出す。\nタイトルスライドが作業フォルダに，makeslide.txt が makeslide.cdy と同じフォルダに\n作成される。makeslide.txt がすでにある場合には上書きはされず，タイトルスライドだけが\n上書きされる。\n(2) makeslide.txt に，スライドの各ベージごとの内容を記述する。\n(3) 必要な図やアニメーションのコードを書き，ボタンをクリックしてファイルを作る。\nFigure : 図を挿入するとき\nParaF : アニメーションやパラパラスライドを挿入するとき\n(4) Slide ボタンでスライドPDFを作成する。\nPDFと，関連する中間ファイルは，作業フォルダではなく，makeslide.cdyのあるフォルダ\nに作成される。また，スライドPDFはアニメーションと同様，Windows，MacではAdobe\nReader で開く必要がある。Linux(Ubuntu)では Evince でプレゼンテーションができる。\n4.2 コンテンツファイル\nコンテンツファイルは次のような構成にする。\ntitle::slide0// タイトルスライド。title はコマンド。\nmain::三角比と三角関数// セクション1のタイトル。main はコマンド。\n直角三角形と三角比// 1ページ目の表示内容。\n・・・・//\nnew::角の概念の拡張// 新しいページとタイトル。new はコマンド。\nenumerate::[(1)]// 2ページ目の表示内容。enumerate はコマンド。\n・・・・//\nnew::負の角// 新しいページとタイトル。\n・・・・//\nmain::三角関数のグラフ// セクション2のタイトル。\nf(x) = sinx// 以下同様\nnew::振幅と周期//\n・・・・//\n・すべての行の末尾には必ず // をつける。\n注）urlの指定で // を用いるときは，jjjj とすれば // に変換される。\n125", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "外部連携", "構文"]}
{"title": "Page 126", "content": "・ページの内容は，コマンドでレイアウトなどを指定し，表示する文をテキストで書く。\nコマンド\nコマンドにおいて，各ブロックの引数の区切りは :: とし，各行の終わりには必ず//をつ\nける。\n【タイトルと壁紙】\nタイトルスライドをつけるときは，\ntitle::slide0//\nを１行目に置く。タイトルスライドは makeslide.cdy で作る。slide0 は 初期設定のタ\nイトルスライドのファイル名。このファイル名を変更 (たとえば \"start\") したときは，\nmakeslide.cdy で，Settile() のオプションに \"Title=start\" をつけて，ファイル名が一致す\nるようにしておく。\nタイトルスライドをつけないときはスライド名をつけないでおく。\ntitle:://\n注）title コマンドは必須で，これを１行目に書かないとスライドは作成されない。\n壁紙（背景）を表示するときは，タイトルコマンドに続けて壁紙ファイル名を書く。\ntitle::slide0::wallpaper//\nwallpaper は壁紙のファイル名。壁紙ファイルは TeX のファイルで，作業フォルダ（(cid:12)g）\nに入れておく。\n壁紙ファイルの一例\n{\\color[cmyk]{0.6,0.2,0.8,0}\\huge\\rm\\normalsize\n\\newpage\n\\begin{layer}{120}{0}\n\\lineseg{0}{2}{125}{0}\n\\lineseg{0}{88}{125}{0}\n\\putnotese{0}{90}{\\ketcindy}\n\\end{layer}\n}\n【セクションタイトル】\nmain::セクションタイトル名//\nセクションを分けないときはなくてもよい。\n【新しいページ】\nnew(::行下げ)::タイトル((::位置)::読み込みファイル)//\n例）new::[10]::はじめに::{50}{20}::figure//\n126", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 127", "content": "読み込みファイルの表示サイズを変更するときは\nnew::[10]::はじめに::{50}{20}::figure,0.8//\nのようにする。\n読み込みファイルがなければ，(cid:12)gure は省略。\n【箇条書き】\n番号つき箇条書きは\nenumerate//\nで，enumerate環境の始まりを示す。\n番号にかっこをつけるなど，番号の形式を変えるには，\nenumerate::[(1)]\nのように，::で区切って形式を示す。 初期設定は，かっこなしの番号。\n記号つき箇条書きは\nitemize//\nで itemize環境の始まりを示す。記号は中黒。\nenumerate，itemizeのいずれも\nitem::文//\nで itemを記述する。\n環境の終わりは，\nend//\nで示す。\n【項目の順表示】\n1枚のスライド内で，項目を段階的に表示するときは，new の次の行に\n%repeat=m(,para)//\nを書く。mは段階数で，たとえば，そのスライドの内容を3段階で表示したい場合は\n%repeat=3//\nとする。実際には３枚のスライドが作られる。\npara をつけると，右下にコントローラが表示され，前後に進めやすくなる。\n%repeat=3,para//\n段階的に表示したい行の先頭に，表示する順番を，2番目以降から\n%[2,-]::text//\n%[3,-]::text//\nのように書く。\n番号指定を [-, 3] とすると，3番目まで表示する。\n[1..3,5 ] とすると，1番目から３番目までと5番目に表示する。（4番目をスキップ）\n127", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 128", "content": "【薄文字】\n順表示したい項目の全体像を見せておいて，そのうちの現在までの項目を示すような場合\nに用いる。番号指定の前に thin をつけ，\n%thin[2,-]::text//\n%thin[3,-]::text//\nのように書くと，現段階の項目よりあとは薄文字で表示される。\n薄文字の濃さは，\n\\setthin{alpha}//\nで指定できる。alphaは0から1までの数で， 初期設定は0.1。\n\\setthin{0}// のとき，指定段階以降の項目は非表示になる。\n初期設定の薄文字の濃さは，makeslide.cdy の Setslidebody の第３引数で設定できる。た\nとえば，\nSetslidebody([\"\",\"\",0.2]);\nとする。\nitem とともに用いるときは，%thin[n,-] を先に書く。\n【例】項目の順表示\n図は，３番目のJavaまで進んだところである。右下にコントローラがある。\nnew::プログラミング言語 //\n%repeat=6,para//\n\\slidepage//\nitemize//\nitem::Python//\n%thin[2,-]::item::Ruby//\n%thin[3,-]::item::Java//\n%thin[4,-]::item::JavaScript//\n%thin[5,-]::item::CindyScript//\n%thin[6,-]::item::C//\nend//\n【図ファイルの順表示】\n作業フォルダ（(cid:12)g）の中にあるサブフォルダ（例えば sub(cid:12)g）の図ファイルすべてを順に\n表示する。\nパラパラ動画のときに用いる。パラパラ動画では，ParaF ボタンをクリックすると，作業\nフォルダ((cid:12)g)の中に，動画のフレームファイルが入ったフォルダが作られる。そのフォルダ\nのファイルをアルファベット順に表示する。もちろん，パラパラ動画以外のファイルの順表\n示に使ってもよい。\nnew の次に\n128", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 129", "content": "%repeat=//\n%para=subfig:{0}:s{60}{10}:input(:倍率)//\nを書く。TeXのソースには，\nlayer{120}{0}, \\putnotes{60}{10 初期設定put...}\nの形で書き入れられる。\nまた，２行に分けずに\n%repeat=,para=... と続けて書いてもよい。\n【レイヤー】\nketlayer の\\begin{layer}・・\\end{layer} として書き出す。本来の記述より簡素に\nなっている。\nlayer::{範囲}{0}//\nで layer環境の始まりを示す。layer環境の終わりは\nend//\nレイヤーの中に作業フォルダ（(cid:12)g）にある図を表示するには\nputnote::方向と位置::読み込みファイル//\nとする。\n例） (cid:12)gure.texを(30,10)の位置の南東（原点は左上）に表示する。\nputnote::se{30}{10}::figure//\n例） (cid:12)gの中の(cid:12)gure.texを0.8倍にして表示する。\nputnote::se{30}{10}::figure,0.8//\n例）includegraphics で (cid:12)gure.pdf を表示する。\nputnote::se{30}{10}::include[width=5cm]::figure.pdf//\n注）KeTpicStyle.pdfを参照。文字などは本来の書式を用いて次のように入れる。\n\\putnotee{30}{10}{文字}//\n【テキストと動画】\nコマンド以外のテキストはそのまま TEX に書き出される。行末には // をつける。\nテキストを途中で改行するには，TEX の 強制改行マーク nnをつける。\n動画の場合は，動画の設定をして（アニメーションの節を参照）ファイルを作る。\nパラパラ動画の場合は，ParaFボタンをクリックすると，(cid:12)gフォルダ内に動画のフレーム\nファイルが入ったフォルダ（たとえば sincurve）が作られる。これを，\n%repeat=//\n%para=sincurve:{0}:s{60}{10}:input(:倍率)//\nで表示する。\nアニメーションの場合は，スライドのために，makeslide.cdy のスクリプトに，\nAddpackage([\"[dvipdfmx]{animate}\"]); を追加しておく。\n129", "tags": ["アニメーション", "インストール", "上級者向け", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 130", "content": "Anime ボタンをクリックすると，パラパラアニメと同様に動画のフレームファイルが入っ\nたフォルダが作られ，動画用の TEX ファイルができる。Setpara() で設定したファイル名が\n\"sincurve\" のとき，動画用のTEX ファイルは \"animsincurve.tex\" となるので，%repeat で\nはなく \\input{fig/animsincurve}// で表示する。\n【コメント行】\nコマンドや文をコメントアウトするときは，%% とする。\n【空白行】\n空白行を入れたいときは，...// とする。\n【タブ】\n\\Ltab{長さ}{文１}文２\nとすると，文１が行頭から，文２が長さ分の字下げをした位置から表示される。長さは\n20mm のように指定。\n【ページ番号】\npage番号を表示するときは次のようにする。\nmainの場合は \\slidepage[m]//\nそれ以外の場合は %repeatの後に \\slidepage//\n注）総ページ数を取得するため，TeXを２度コンパイルすることが必要である。そのため，\nSlideボタンを２度クリックすると総ページ数が表示される。\nmp3/mp4ファイルの追加\nmakeslide.txtのタイトルコマンドの後に，以下を追加する。\ntitle::slide0(::wallpaper)\n::\\usepackage{ketmedia}\n::\\usepackage[dvipdfmx]{media9}//\nmp3ファイルを追加するときは，\\inputsoundまたは\\inputsoundclickを用いる。\n\\inputsountclik[90]{フォルダ/}{ファイル}\n\\inputsound は「自動再生」，\\inputsoundclick は「クリック再生」である。最初の引数\nは，ボタンの水平位置（単位mm）でデフォルトは90である．またフォルダには/をつける。\nmp4ファイルを追加するときは，\\inputmovieを用いる。\n\\inputsountclik[90]{1}{0.4}{フォルダ/}{ファイル}\n2番目と3番目の引数は，幅と高さの\\linewidthからの倍率である。\n130", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 131", "content": "【余白などの編集】\nスライドの上側余白として，初期状態で \\vspace*{18mm} が設定される。次のページに\nはみ出してしまうような場合は，出力された tex ファイルで調整すればよい。\nその他，適宜編集して，kc.command(bat/sh) を実行すれば，細かい部分を修正したPDF\nを作成することができる。\n4.3 関数\nmakeslide.cdy で使う，KETCindyの関数。\n関数 Setslidebody(bodycolor,bodystyle,density)\n機能 全体の文字スタイルと薄文字の濃さ(0-1)の設定\n説明 引数の意味は次の通り。\nbodycolor 文字色 :初期設定は \"blue\"\nbodystyle フォントタイプ :初期設定は \"\\Large\\bf\\boldmath\"\ndensity 薄文字の濃さ :初期設定は 0.1\n引数がない場合や（ Setslidebody()）この関数を書かない場合は初期値が使われる。\nある引数だけを指定したい場合は，それより前は空にする。\n【例】Setslidebody(,\"\\large\")\n関数 Setslidehyper(\"dvipdfmx\",options)\n機能 順表示でページ送りのコントローラを設定する。\n説明 順表示しないときもこの関数の記述は必須と考えてよい。\nパッケージ hyperref.styを読み込み，かつ，options の値を与える。\nSetslidehyper(); は無効。初期設定で使う場合は Setslidehyper(\"\"); とする。\n第１引数は hyperref.sty の第１パラメータ。初期設定は \"dvipdfmx\"\noptions は [\"cl=bool,lc=col,fc=col\",\"Pos=[x,y]\",\"Size=n\"]\ncl colorlinks : リンクに色をつけるかどうか。true / false で指定。 初期設定は true\nlc linkcolor : コントローラの色。色名で指定。 初期設定は blue\nfc (cid:12)lecolor リンクの色。色名で指定。 初期設定は blue\n以上３つは，セットで指定。一部初期値を使う場合はlc=, のように右辺を空にする。\nPos コントローラの位置。 初期設定は [125,73] （左上が原点）\nSize コントローラの大きさ。 初期設定は1\n関数 Setslidemain([letterc,boxc,boxd,framec,xpos,size])\n機能 メインスライド（セクション区切り）の設定\n131", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 132", "content": "説明 引数の一部を 初期設定値とする場合は [,,,,3] や [,\"red\"] などとする。\nletterc 文字の色。 初期設定は CMYKで [0.98,0.13,0,0.43]\nboxc ボックスの色。 初期設定は [0,0.32,0.52,0]\nframe フレームの色。 初期設定は [0,0.32,0.52,0]\nxpos タイトルの水平位置。 初期設定は 62\nsize タイトルの倍率。 初期設定は 2\n関数 Setslidepage([letterc,boxc,boxd,framec,shadowc,xpos,size])\n機能 ページの設定をする。\n説明 引数の一部を 初期設定値とする場合は [,,,,3] や [,\"red\"]などとする。\nletterc 文字の色。 初期設定は CMYKで [0.98,0.13,0,0.43]\nboxc ボックスの色。 初期設定は [0,0.32,0.52,0]\nframe フレームの色。 初期設定は [0,0.32,0.52,0]\nshadowc影の色。 初期設定は [0,0,0,0.5]\nxpos タイトルの水平位置。 初期設定は 6\nsize タイトルの倍率。 初期設定は 1.3\n関数 Setslidemargin([leftmarginchange,topmarginchange])\n機能 スライドの左上マージンをデフォルトから変更する場合の値。\n説明 Setslidemargin([+5,-10]);（横方向に+5mm，縦方向に(cid:0)10mm変更）\n関数 Settitle(タイトルリスト,options)\n機能 タイトルスライドを作る\n説明 タイトルリストはコンマ区切りで位置と文を文字列で与える。例を参照。「Title」ボ\nタンをクリックすると，コンテンツファイルがない場合は新たに作る。すでにある場\n合は上書きせずタイトルスライドのみを作る。\nSettitleのオプションは次をリストで与える。\n\"Title=\" タイトルスライドのファイル名。 初期設定は \"slide0\"。\n\"Layery=\" タイトルの縦位置。 初期設定は0。0でないときは方眼を表示。\n\"Color=\" 文字の色。 初期設定は blue。\n【例】タイトルの設定\nSettitle([\n132", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 133", "content": "\"s{60}{20}{メインタイトル}\",\n\"s{60}{50}{名前}\",\n\"s{60}{60}{所属}\",\n\"s{60}{70}{情報}\"\n] ,\n[\"Title=SlideA\",\"Color=[1,1,0,0]\"]);\n出力する TEX ファイルに，\\begin{layer} の設定をする。 s は，東西南北のs。\n例のように，タイトルリストは改行すると見やすい。\n)関数一覧\n133", "tags": ["中級者向け", "外部連携"]}
{"title": "Page 134", "content": "5 K TCindy3D\nE\n5.1 概要\nKETCindy3Dの画面は次のように構成される。\nCinderella の描画面に，白の矩形で囲んだ領域が 2 つできる。NE,SW を対角とする左側\nの領域を主画面，右側の領域を副画面という。\n主画面は平面の場合と同様，TeX に出力される範囲を示し，NE,SW の 2 点をドラッグする\nことにより変更できる。主画面の下方のスライダで視点が移動でき，主画面上では軸が回転\nする。副画面は，xy平面上に視点を置いたものと考えればよい。\n主画面上に Cinderella の作図ツールで点や線分を作図すると，副画面に対応する点が作図\nされる。主画面上の点をドラッグすると x,y 座標を変更でき，副画面上の点をドラッグする\nとz座標を変更できる。\nKeTCindy3Dでは，線や面についての陰線処理を行う。陰線処理はＣ言語との連携により\n処理を速めている。C 言語を使う環境整備が必要であるが，現在はこれを標準としている。\nC 言語が使えない場合は R で計算する関数を用いることになるが，その場合はかなり時間が\nかかる。（場合にもよるが2分程度）\n134", "tags": ["KeTCindy", "インストール", "初心者向け", "構文", "環境構築"]}
{"title": "Page 135", "content": "5.2 設定\n関数 Ketinit3d()\n機能 KeTCindy3Dの使用宣言\n説明 Cinderellaの画面を3Ｄモードにする。\nCinderella の描画面に，視点移動のための 2 つのスライダを作る。スライダは初期位\n置が左端になる。スライダTHで角THETAを，スライダFIで角PHIを内部変数と\nして定義する。\n引数に0を入れて Ketinit3d(0) とすると，副画面を表示しない。\n＜重要＞\nこの関数は Initialization スロットに置く。Ketinit() も，平面の場合と異なり Initial-\nization スロットに置く。KeTCindy3Dにおける変数の初期化などを行う，Start3d()\nはDrawスロットに書く。\n関数 Setangle(TH,FI)\n機能 回転角の指定\n説明 スライダで設定できる回転角（視点の位置）TH と FI を度数法で指定する。たとえ\nば，Setangle(70,40) とすると，TH,FI がその位置になる。スライダは固定される\nので，再度スライダを有効にしたい場合は，コメント化して再実行する。\n初期状態だけを決めたい場合は\nif(!Ptselected(),Setangle(70,40));\nまたは\nif(!Isangle(),Setangle(70,40));\nとすると，スライダは有効となり，スライダのいずれかの点を選択した状態であれば\nFigure ボタンも有効である。画面上のなにもないところをクリックして，点の選択状\n態を解除するともとに戻る。\n回転角の取得については，回転角の取得を参照のこと。\n関数 Start3d(option)\n機能 3Ｄの画面設定と空間点の認識\n説明 副画面を作り，幾何点を3Ｄの点として認識する。この関数は必須で，Drawスロット\nの先頭に書く。\nCinderellaの作図ツールで，点・線分を作図すると，内部関数の Ptseg3data() によっ\nてそれらを空間の点として認識し，副画面上に対応する点をとる。ただし，始めは z\n座標を０とする。点の名前が A であれば，副画面上の点は Az となる。点をポイント\nして選択すると副画面の上に座標が表示される。\n135", "tags": ["KeTCindy", "中級者向け", "図形描画", "構文", "関数"]}
{"title": "Page 136", "content": "作図した点の名称をインスペクタで変更した場合，新しい名称に対応する点を副画面\n上に作成するが，以前の点は消えないので要注意。たとえば，点 A を作図した後，主\n画面上の点 A をインスペクタで点 D に変えた場合，副画面上に新たに Dz ができる\nが，以前のAzも残る。残ったAzは，選択しておいて作図ツールの消去ボタン で\n消すことができる。\noptionに，除外点のリストを与えると，その点は空間点としない。（スライダで視点を\n移動しても位置は変わらない）\n関数 Startsurf(options)\n機能 曲面描画の初期化と定数の設定\n説明 options で定数を設定する。定数としては，分割数，C のサイズ，誤差の限界を設定\nする。\noptionsがないときは，以下の 初期設定を用いる。\n[50,50],[1500,500,200],[0.01,0.1]\n設定後に初期値にリセットするときは，文字列 \"reset\" を引数に与える。\nこれにより，陰線処理をともなう面の描画の手順は，次のようになる。\n(1)Startsurf(); で面描画の宣言をする。\n(2) 描画関数でプロットデータを作る。\n(3) ExeccmdC(); で，C言語を用いてまとめて描画する。\n)関数一覧\n関数 Xyzax3data(name，ｘの範囲，yの範囲，zの範囲,options)\n機能 座標軸を描く\n説明 描画面に座標軸を描き，プロットデータ ax3d を作成する。name は空文字列でよい。\noption は次の2つ。\n矢じり：\"an\"：nは数字で矢じりの大きさ。nはなくてもよい。\n原点 O：\"Onesw\"：nesw は微小位置。数字も付けられる。nesw をつけない場合の初\n期値はsw。\n【例】 初期設定の座標軸\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\n矢じりをつける\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",\"a\");\n矢じりを大きくする\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",[\"a2\"]);\n原点のOを表示する。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",[\"O\"]);\n136", "tags": []}
{"title": "Page 137", "content": "原点のOの位置を調整して右上に表示する。やじりもつける。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\",[\"a\",\"Oe2n2\"]);\n【注意】Putaxes3d() で点を取ると原点に点 O が作成される。この点名 O と表示が重\n複するのが煩わしい場合は，作図後にこのoptionをつけてから出力するとよい。\n5.3 描画\n5.3.1 点・線\n関数 Pointdata3d(名前,点リスト,options)\n機能 点の3Dデータと2Dデータを作成し，画面とTEXに出力する。\n説明 optionsはPointdata()と同様。\n【例】\nPointdata3d(\"1\",[[1,1,1],[0,1,0]],[\"Size=2\",\"Color=red\"]);\n関数 Putpoint3d(リスト,option)\n機能 空間に幾何点を作図する\n説明 点の名称と座標を与えて点を作図する。複数の点を一度に作図できる。\noptionは，\"(cid:12)x\"( 初期設定) または \"free\"。リスト [\"free\"] にしてもよい。\n\"(cid:12)x\" では，固定点（ドラッグで移動できない点）とする。同じ名称の点がすでに存在\nする場合は，指定した位置に移動して固定点とする。\n\"free\" では，自由点（ドラッグで移動できる）とする。同じ名称の点がすでに存在す\nる場合はなにもしない。\n【例】いくつか記述例を示す。\nPutpoint3d([\"A\",[2,1,3]]);\nPutpoint3d([\"A\",[1,1,1],\"C\",[1,0,1]],\"fix\");\nPutpoint3d([\"A\",[2,1,3]],\"free\");\nなお，この関数は幾何点を作るものであり，TeX には出力されない。TeX に点を出力\nするには，Pointdata() を併用する。\n空間における点の座標は，点名に\"3d\"を付加した名前の変数に代入される。たとえば，\n点Aの座標はA3dである。これにより，点の座標を取得できる。\n関数 Putaxes3d([x,y,z])\n機能 軸上に幾何点を作る。\n137", "tags": []}
{"title": "Page 138", "content": "説明 引数のリスト [x,y,z] に対し，点X(x,0,0) ,Y(0,y,0) , Z(0,0,z) および 原点Oを主画面\n上にとり，副画面上に対応する点Xz，Yz，Zz，Oz を作る。すでに同じ名称の点があ\nる場合は，指定された位置に移動する。\n引数は，実数にすることもでき，Putaxes3d(a) は，Putaxes3d([a,a,a]) と同じになる。\n【例】\nPutaxes3d(5);原点と，x(5;0;0);y(0;5;0);z(0;0;5) を作る。\nPutaxes3d([1,2,3]);原点と，x(1;0;0);y(0;2;0);z(0;0;3) を作る。\n関数 Putoncurve3d(点名，PD)\n機能 空間曲線上に点をとる\n説明 プロットデータPDの曲線上に，点名の点をとる。\nとった点は固定点ではなく，曲線上にインシデントとなる。したがって，ドラッグし\nて曲線上を動かすことができる。例は Partcrv3d() を参照のこと。\n関数 Putonseg3d(点名，点1，点2)\n機能 線分上に点を作る\n説明 点１と点 2 の中点に，指定された名前の点を取る。点１と点 2 が線分として結ばれ\nていなくてもよい。とった点は線分にインシデントとなる（線分が描かれていなくて\nも）。点１と点2はリストにすることもできる。指定した点がすでに存在する場合は動\nかさない。\n点1，点2は幾何点の名称または座標で指定する。\n【例】A(1,-1,0)とB(0,2,2) の中点に点Cをとる。つぎのいずれでもよい。\nPutonseg3d(\"C\",A,B);\nPutonseg3d(\"C\",[A,B]);\nPutonseg3d(\"C\",[[1,-1,0],[0,2,2]]);\n関数 Spaceline(name,list)\n機能 折れ線を描く\n説明 点の名称または座標のリストを与えて折れ線を描く。平面での Listplot() にあたる。\noptions は線種（dr,da,do）\n【例】いくつか示す。\n・Spaceline(\"1\",[[2,5,1],[4,2,3]]); 指定された2点を結んだ線分を描く。\n・Spaceline(\"2\",[A,B,C,A]);作図されている2点A,B,Cを結んだ三角形を描く。\n・節点を表示する場合は，Pointdata3d() で描画する。\n138", "tags": []}
{"title": "Page 139", "content": "pt=[[2,0,0],[2,0,2],[2,2,2],[0,2,2],[0,4,2],[0,4,4]];\nSpaceline(\"1\",pt);\nPointdata3d(\"1\",pt,[\"Size=3\"]);\n点の名前が必要であれば\npname=apply(1..6,\"P\"+text(#));\nのようにして，名前リストを作ることができる。\nz\nO\nx\ny\n関数 Spacecurve(name,式,定義域,options)\n機能 空間曲線を描く\n説明 媒介変数で表された曲線を描く。optionは解像度 Num\n【例】螺旋を描く\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=100\"]);\nz\nO\nx\ny\n関数 Bezier3d(name,リスト1,リスト2)\n機能 空間ベジェ曲線を描く\n説明 引数はリスト1が端点リスト，リスト2が制御点リスト\n１組の端点につき，2つの制御点を使う。\n【例】いくつかの点をベジェ曲線で結ぶ\n端点A,Bに対し，制御点をD,Eとする。\nBezier3d(\"1\",[\"A\",\"B\"],[\"D\",\"E\"]);\n139", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 140", "content": "端点A,Bに対し，制御点をD,Eとし，端点BCに対し制御点をE,Fとする。\nBezier3d(\"1\",[\"A\",\"B\",\"C\"],[\"D\",\"E\",\"E\",\"F\"]);\n端点A,Bに対し，制御点をD,Eとし，端点BCに対し制御点をF,Gとする。（図）\nBezier3d(\"1\",[\"A\",\"B\",\"C\"],[\"D\",\"E\",\"F\",\"G\"]);\nz\nC\nF\nD\nG\nO\nB\nA\nx\ny\nE\n)関数一覧\n関数 Mkbezierptcrv3d(点リスト)\n機能 制御点を自動的にとる空間ベジェ曲線\n説明 リストで与えた点に対し，制御点を自動的に生成してベジェ曲線を描く。\n制御点は，2つの点に対して，その点を端点とする線分上に2つ作られる。これを適宜\n移動して任意の曲線にすることができる。空間ベジェ曲線 Bezier3d() を参照のこと。\n【例】Mkbezierptcrv3d([\"A\",\"B\",\"C\",\"D\"]);\n線分 AB 上に 2 点 a1p,a2p，線分 BC 上に 2 点 a2p,a2q，線分 CD 上に 2 点 a3p,a3q\nができる。\n関数 Skeletonparadata(name,PDリスト,PDリスト,option)\n機能 陰線処理（スケルトン処理）をおこなう\n説明 描画されている線と軸について陰線処理をおこなう。\n第 2 引数の線（プロットデータ）が，第 3 引数の線（プロットデータ）によって隠さ\nれる部分を消去する。第2，第3引数を省略した場合は，すべての線について，互いの\n陰線処理をおこなう。optionで消去する部分の長さを指定できる。\n他のオプション\n\"No=点リスト\" 点リストの点が選ばれているときは実行しない\n\"File=y/m/n (n)\" データファイルを作るか\n\"Check=点リスト\" 点リストの点が変更されていたら，ファイルを作り直す\n140", "tags": ["アニメーション", "上級者向け", "中級者向け", "外部連携"]}
{"title": "Page 141", "content": "【例】螺旋と線分，座標軸の陰線処理\n次のように螺旋と線分，座標軸を描いておく。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,4]\",\"z=[-5,3]\");\nPutpoint3d([\"A\",[0,-2,-2]]);\nPutpoint3d([\"B\",[-1,1,3]]);\nSpaceline([A,B]);\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=100\"]);\n座標軸のプロットデータは ax3d，線分は AB3d，螺旋は sc3d1 である。これに対し，\nSkeletonparadata(\"1\");\n描画されている線と軸について陰線処理をおこなう。（図左）\nSkeletonparadata(\"1\",[2]);\n重なった部分の空きを2にする。（図中央）\nSkeletonparadata(\"1\",[\"AB3d\",\"ax3d\"],[\"sc3d1\"]);\n螺旋によって隠れる部分だけ消去する。（図右）\nz z z\nx x x\ny y y\nこのほか，次も可能。\nSkeletonparadata(\"1\",[\"AB3d\",\"ax3d\"],[\"sc3d1\"],[2]);\nSkeletonparadata(\"1\",[\"AB3d\"],[\"ax3d\",\"sc3d1\"]);\n)関数一覧\n5.3.2 多面体\n多面体の描画について，四面体の場合を例にして説明する。\n四面体は4つの面からなっている。 A\n頂点をA,B,C,Dとすると，4つの面は\n△ABC，△ABD，△ACD，△BCD\nである。\nD\n頂点のリスト[A,B,C,D] に対し，Aから順に番号を\nB\nつけると，各面の頂点の順番は\n[1,2,3],[1,2,4],[1,3,4],[2,3,4]\nC\nと表現できる。\n141", "tags": []}
{"title": "Page 142", "content": "頂点のリストと，この面リストを組にして [[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]] と\nしたものを「面データ」という。この面データを使って，多面体を描画するのが VertexEdge-\nFace() である。\n多面体の陰線処理は２通りある。ひとつは，多面体を線画と考えて，隠れる部分だけを処\n理する方法で，Skeletonparadata() を用いる。Concatobj() の例を参照のこと。\nもうひとつは，面と考えて，面に隠れる部分を点線で描いたり，非表示にしたりする方法\nで，Phparadata() を用いる。 Phparadata()の例を参照のこと。\n関数 Concatobj(リスト,option)\n機能 いくつかのobjデータを結合する\n説明 多面体の各面の頂点リストから面データ（頂点リストと面リスト）を作る。\nたとえば，Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]); とすると，面デー\nタ[[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]] が返される。\n【例】4点A,B,C,Dを幾何点として作り，これを頂点とする四面体を描く。\nPutpoint3d(\"A\",2*[0,0,sqrt(3)]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[-1,-1/sqrt(3),0]);\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nVertexEdgeFace(\"1\",phd);\nSkeletonparadata(\"1\");\nLetter3d([A3d,\"ne\",\"A\",B3d,\"sw\",\"B\",C3d,\"se\",\"C\",D3d,\"e\",\"D\"]);\nA\nD\nB\nC\n＜参考１＞\n幾何点を作らないで四面体を描くのであれば，\na=2*[-1,-1/sqrt(3),0];\nb=2*[1,-1/sqrt(3),0];\nc=2*[0,sqrt(3)-1/sqrt(3),0];\nd=2*[0,0,sqrt(3)];\nphd=Concatobj([[a,b,c],[a,b,d],[a,c,d],[b,c,d]]);\nとしてもよい。\n142", "tags": []}
{"title": "Page 143", "content": "＜参考２＞四面体のような凸型多角形の場合は，CindyScriptの convexhull3d() 関数\nを用いて次のようにすることができる。面リストではなく頂点リストを与えるだけな\nので手間を省くことができる。\na=2*[0,0,sqrt(3)];\nb=2*[1,-1/sqrt(3),0];\nc=2*[0,sqrt(3)-1/sqrt(3),0];\nd=2*[-1,-1/sqrt(3),0];\nphd=convexhull3d([a,b,c,d]);\n)関数一覧\n関数 VertexEdgeFace(name,面データ,options)\n機能 面データを用いて多面体を描く\n説明 面データは，たとえば四面体ABCDの場合は，[[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]]\nである。\n4点A,B,C,Dをとっておき，このリストを引数に与えると，四面体が描かれる。\n生成されるプロットデータは，\nphv3d：頂点のリスト\nphe3d：辺のリスト\nphf3d：面リスト\nなお，それぞれ末尾にnameが付加される。\n【例】4点A,B,C,Dを取り，正四面体ABCDを描く\nPutpoint3d(\"A\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[0,0,sqrt(3)]);\nphd=[[A,B,C,D],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]]];\nVertexEdgeFace(\"1\",phd);\n面リストは，Congatobj() を使って作ることができる。陰線処理して描く場合も含め，\nConcatobj() の例を参照のこと。\n143", "tags": ["KeTCindy", "構文"]}
{"title": "Page 144", "content": "関数 Phparadata(name,name2,options)\n機能 多面体を陰線処理して描く\n説明 多面体のプロットデータを VertexEdgeFace() で作る。このプロットデータに対し，\n隠れている面（辺）を陰線処理して表示する。第 1 引数は通常の name，第 2 引数の\nname2は，VertexEdgeFace() で与えたnameと同じものとする。\noptions は，全体の線種（\"dr,2\"など）と，陰線の線種を\"Hidden=線種\" で指定でき\nる。 初期設定では陰線は表示しない。\n【例】四面体を描く。\nPutpoint3d(\"A\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[0,0,sqrt(3)]);\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nVertexEdgeFace(\"1\",phd);\nPhparadata(\"1\",\"1\",[\"Hidden=do\"]);\nなお，VertexEdgeFace() で四面体が描かれるが，Phparadata() により非表示になる。\nFigure ボタンで描き出せば正しく出力されるので，Phparadata() を実行する前に画\n面上に表示して確認してからPhparadata() を実行するとよい。\n【例】切頂二十面体を描く。\n小林・鈴木・三谷による多面体データpolyhedrons_objを用いて，s06の切頂二十面\n体（サッカーボール型）を描く。 polyhedrons_obj は KeTCindy システムの data\nディレクトリにあるので，Setdirectory() でカレントディレクトリを作業ディレクト\nリと切替ながら出力する。\nSetdirectory( Dirhead+\"/data/polyhedrons_obj\");\nphd=Readobj(\"s06.obj\",[\"size=3\"]);\nSetdirectory(Dirwork);\nVertexEdgeFace(\"s06\",phd);\nPhparadata(\"1\",\"s06\");\nVertexEdgeFace()のnameは通常の\"1\"でもよい。その場合は，Phparadata(\"1\",\"1\");\nとするが，わかりにくいので上のようにした。\n実行すると，Cinderellaの描画面は次のように頂点だけが描かれる。\n144", "tags": ["KeTCindy", "構文"]}
{"title": "Page 145", "content": "全体の線種と，陰線の線種を\nPhparadata(\"1\",\"s06\",[\"dr,2\",\"Hidden=do\"]);\nで指定したのが下図右である。\n【注意】\npolyhedrons obj のデータを使って，続けて異なる多面体を描きたい場合は注意が必\n要である。Readobj() だけを変更して別のデータを読めばよさそうであるが，前の\nデータが残っていてうまくいかない。VertexEdgeFace() の name を（したがって，\nPhparadata() の第 2 引数も）書き換えるか，作業フォルダ ((cid:12)g) の中身を削除してか\nら実行する。たとえば，上のコードで切頂二十面体を描いた後，正八面体（r02）を描\nこうとするならば，\nSetdirectory( Dirhead+\"/data/polyhedrons_obj\");\nphd=Readobj(\"r02.obj\",[\"size=3\"]);\nSetdirectory(Dirwork);\nVertexEdgeFace(\"2\",phd);\nPhparadata(\"1\",\"2\");\nのようにする。\n)関数一覧\n関数 Nohiddenbyfaces(name,PD1,PD2,option1,option2)\n145", "tags": []}
{"title": "Page 146", "content": "機能 面に対し曲線を陰線処理する\n説明 PD2で与えられた面に対し，曲線PD1の面に隠れている部分を陰線処理する。\n引数 PD1 を省略するとすべての曲線が対象となる。陰線処理された線は初期設定で\nは点線で表される。この線種は option2 で変更できる。たとえば，[\"da\"] とすると破\n線になる。[\"nodsip\"] とすると，陰線は表示されない。option1 は曲線全体の option\nであるので，option2 だけを指定する場合は，option1 として空リスト [ ] が必要であ\nる。option2では，\"Eps=\" で，陰線処理時の許容限界を設定できる。陰線処理がうま\nくいかないときは，この値を Eps=10^(-4) のように変えてみるとよい。初期設定は\nEps=10^(-2)。\n【例】座標平面上に正四面体を描き，各軸と正四面体の辺を陰線処理する。（下図左）\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nPutpoint3d(\"A\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[0,0,2*sqrt(6)/3]);\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nVertexEdgeFace(\"1\",phd);\nNohiddenbyfaces(\"1\",\"phf3d1\");\nVertexEdgeFace(\"1\",phd); によって，辺，頂点，面のプロットデータが作られる。\nphf3d1 は，面のプロットデータである。\nここで，Nohiddenbyfaces(\"1\",\"phe3d1\",\"phf3d1\",[\"dr,2\"],[\"da\"]); とす\nると，座標軸は陰線処理されず，正四面体の辺（phe3d1）だけが陰線処理されて破線\nで描かれる。四面体は太く描かれる。（下図右）\nz z\nx y x y\n同様に，\nNohiddenbyfaces(\"1\",\"ax3d\",\"phf3d1\",[],[\"da\"]);\nとすれば，座標軸だけが陰線処理されて破線で描かれる。\n146", "tags": []}
{"title": "Page 147", "content": "5.3.3 曲面\n曲面の描画には，ワイヤーフレームモデルとサーフェスモデルがある。ワイヤーフレーム\nモデルは，曲面を編目で表すものであり，サーフェスモデルは編目のない面として，その輪\n郭線を描くものである。\nワイヤーフレームモデル サーフェスモデル\nKeTCindyでは，それぞれ次の関数を用いて描画する。\n陰線処理をしないワイヤーフレームモデル Sf3data(name,form,options)\nサーフェスモデル Sfbdparadata(name,form,options)\nサーフェスモデルにワイヤーを描く Wireparadata(name,PD,form,n1,n2,options)\nワイヤーフレームモデルで陰線処理をするためには，面のデータが必要なので，Sfbdpara-\ndata() で描画した後，Wireparadata()で描画する。\nまた，サーフェスモデルの描画では，陰線処理に時間がかかるため，Ｃ言語の使用を前提\nとしている。したがって，Ｃ言語を用いて描画を行う ExeccmdC() を併用する。\n引数の form は，方程式 と，変数の定義域を文字列のリストにしたものである。方程式の\nパターンは次の3通りがある。\n(1) z = f(x;y)\n【例】式：z = x2 (cid:0)y2\n定義域：x = ((cid:0)2;2);y = ((cid:0)2;2)\n(2) z = f(x;y);x = g(r;t);y = h(r;t)\n【例】式：z = 4(cid:0)(x2 +y2);x = rcost;y = rsint\n定義域：r = (0;2);t = (0;2(cid:25))\n(3) x = f(u;v);y = g(u;v);z = h(u;v);\n【例】式：x = 2sinucosv;y = 2sinusinv;z = 2cosu\n定義域：u = (0;(cid:25));v = (0;2(cid:25))\nここで，(2) と (3) は媒介変数型で，x;y;z それぞれの式と，媒介変数２つの定義域から\nなっている。そのままでは区別がつかないので，引数として与えるときは，(3) の型には，識\n別文字として \"p\" を先頭に付加する。\n147", "tags": ["KeTCindy", "構文"]}
{"title": "Page 148", "content": "また，定義域については，開区間でとる場合と閉区間でとる場合がある。その区別を境界\n指定として\"ewsn\"で表す（ともに閉区間）。\"ewsn\" の意味は次のように考える。\n変数が u;v のとき，u;v 平面において，a (cid:20) u (cid:20) b;c (cid:20) v (cid:20) d の矩形を考え，境界値を東\n西南北(ewsn)で示す。それぞれの文字が書かれたときは境界値を含む。\nv\nn\nd\nw e\nc\ns\nu\na b\nこの境界指定を最後に付加するが，省略することもでき，省略した場合は初期値の \"ewsn\"\n（閉区間）とする。ともに開区間とする場合は，\"\" とする。ただし，陰線処理をしない\nSf3data() では，境界にも線を引くので，この指定は無効となる。\n具体的な例を示そう。\n次は，円錐の form である。（formは form data を短縮した fd がよく使われる）\nfd=[\"p\",\"x=r*cos(t)\",\"y=r*sin(t)\",\"z=2*(2-r)\",\"r=[1,2]\",\"t=[0,2*pi]\",\"ew\"]\n\"ew\" は 1 (cid:20) r (cid:20) 2 であることを示す。したがって，円錐台の上面と底面が表示される。\nこれを \"e\" とすると 1 < r (cid:20) 2 となり，上面が表示されない。\nまた，これを \"w\" とすると 1 (cid:20) r < 2 となり，底面が表示されない。\nさらに，\"ewn\" あるいは \"ews\" としたり，指定を略して初期値の \"ewsn\" とすると，\nt = (0;2(cid:25)) の左右いずれかの値が含まれることになり，不要な境界線が現れる。\n\"ew\" \"e\" \"w\" \"ewn\"\n球面を描く場合はこの点で留意することがある。球面をサーフェスモデルで描くと単に円\nにしか見えないので，多くの場合はサーフェスモデルで描いた球面に Wireparadata() で陰\n線処理したワイヤーを入れることになるだろう。その場合，Wireparadata() では境界線には\n線を引かないので，境界指定を \"s\" として，境界線を引く必要がある。境界指定を \"\" とす\n148", "tags": []}
{"title": "Page 149", "content": "ると，経線が 1 本足りなくなるので注意されたい。具体例は，Wireparadata() に例示して\nある。\n関数 Sf3data(name,リスト,options)\n機能 陰線処理なしの曲面をワイヤーフレームモデルで描く\n説明 optionsは，メッシュの密度と解像度（各変数に対応する分割数）。\nメッシュ密度は，縦横で \"Wire=[a,b]\" で指定。初期値はa,bとも20。\n解像度は，\"Num=[a,b]\" で指定。初期値はa,bとも25。\n【例】 z = f(x;y) 型\nz\nz = x2 (cid:0)y2 を定義域x = [(cid:0)2;2];y = [(cid:0)2;2] で描画する。\nfd=[\"z=x^2-y^2\",\"x=[-2,2]\",\"y=[-2,2]\"];\nSf3data(\"1\",fd);\nメッシュの数を縦横とも10，解像度をx,yとも10にすると\nx\nメッシュ密度，解像度とも下げるので粗い描画となる。 y\nSf3data(\"1\",fd,[\"Num=[10,10]\",\"Wire=[10,10]\"]);\n【例】z = f(x;y);x = g(r;t);y = h(r;t)型\n次図左\nfd=[\"z=4-(x^2+y^2)\",\"x=r*cos(t)\",\"y=r*sin(t)\",\"r=[0,2]\",\"t=[0,2*pi]\"];\nSf3data(\"1\",fd);\n次図右\nfd=[\"z=sin(sqrt(abs(x^2+y^2)))\",\"x=r*cos(t)\",\"y=r*sin(t)\",\n\"r=[0,3]\",\"t=[0,2*pi]\"];\nSf3data(\"1\",fd);\nz z\nx x\ny y\n(3) x = f(u;v);y = g(u;v);z = h(u;v); 型\nこの場合，(2)と区別するために，\"p\" を先頭につけておく。\n149", "tags": []}
{"title": "Page 150", "content": "【例】球面\nfd=[\"p\",\"x=2*sin(u)*cos(v)\",\"y=2*sin(u)*sin(v)\",\"z=2*cos(u)\",\n\"u=[0,pi]\",\"v=[0,2*pi]\",\"\"]; Sf3data(\"1\",fd);\nz\nx\ny\n)関数一覧\n関数 Sfbdparadata(name,式,options)\n機能 サーフェスモデルの輪郭線を描く\n説明 この関数はデータを作るだけなので，表示するには ExeccmdC() を併用する。\noptionsは，\"Wait=n\",\"r\",\"m\",および線種。Wait の初期値は30。\n\"r\",\"m\"に関しては，\nオプションなしまたは，”” のとき\ni) データファイルがなければ，新しく作る\nii) データファイルが既にあればそれを読み込む\n\"m\"のとき，強制的にデータファイルを作り直す。\n\"r\" のとき，すでにあるデータファイルを読み込む。\nこの処理は時間がかかるため，この関数を実行した状態で画面上のスライダやその他\nの点を動かそうとすると反応が悪くなる。そこで，Isangle() または Isptselected() を\n用いて，スライダの点を選択しているときはワイヤフレームモデルを描画するように\nするとよい。\nなお，C 言語の環境がない場合は，ExeccmdC() が使えないので，Sfbdpara-\ndataR(name, 式,optons1,optons2) を使う。options2 には陰線の表示方法について\n\"nodisp\" または線種 を指定する。 初期設定は\"nodisp\" 。options2 のみ指定すると\nきは，options1に [\"\"] （空文字）を書いておく。\n作図例は 次の ExeccmdC を参照のこと。\n関数 ExeccmdC(name,options1,options2)\n機能 曲面を表示する。戻り値は，対象にしたプロットデータのリスト。\n説明 データが作成された曲面を表示する。\n150", "tags": ["インストール", "中級者向け", "初心者向け", "外部連携", "環境構築"]}
{"title": "Page 151", "content": "options1 には\"r\",\"m\", \"Wait=n\" と輪郭線の線種が指定できる。\noptions2 には 軸の陰線について \"nodisp\" または線種が指定できる。 初期設定は\n\"do\"。\noptions2だけを指定したい場合は，options1 を空リスト [ ] にする。\n【例】サドル面\n陰線を消去して表示\nfd=[\"z=x^2-y^2\",\"x=[-2,2]\",\"y=[-2,2]\"];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nExeccmdC(\"1\",[],[\"nodisp\"]);\n);\n全体を実線で太めにして，陰線は初期設定の\n点線で表示。\nExeccmdC() を変更する。\nExeccmdC(\"1\",[\"dr,2\"]);\n【例】放物面： 式を変更する。\nfd=[\"z=4-(x^2+y^2)\",\"x=R*cos(T)\",\"y=R*sin(T)\",\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"];\n陰線を消去（下図左）：ExeccmdC(\"1\",[],[\"nodisp\"]);\n陰線を破線で表示（下図右）：ExeccmdC(\"1\",[],[\"da\"]);\n【例】曲面を２つ表示するときは，Sfbdparadata() の name は \"1\" と \"2\" にするが，\nまとめて ExeccmdC(\"1\") で表示できる。\nfd=[\n\"p\",\n151", "tags": []}
{"title": "Page 152", "content": "\"x=r*cos(t)\",\"y=r*sin(t)\",\"z=2*(2-r)\",\n\"r=[1,2]\",\"t=[0,2*pi]\",\"ew\"\n];\nfd2=[\n\"p\",\n\"x=r*cos(t)-3\",\"y=r*sin(t)+3\",\"z=2*(2-r)\",\n\"r=[0,2]\",\"t=[0,2*pi]\",\"ew\"\n];\nif(!ptselected(),\nStartsurf();\nSfbdparadata(\"1\",fd);\nSfbdparadata(\"2\",fd2);\nExeccmdC(\"1\");\n);\nz\nx\ny\n【例】トーラスを描く：軸は非表示にしておく。\nfd=[\"p\",\"x=(2+cos(u))*cos(v)\",\n\"y=(2+cos(u))*sin(v)\",\"z=sin(u)\",\n\"u=[0,2*pi]\",\"v=[0,2*pi]\",\"s\"];\nif(Ptselected(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nWireparadata(\"1\",\"sfbd3d1\",fd,12,12,[],[\"nodisp\"]);\nExeccmdC(\"1\",[],[\"nodisp\"]);\n);\n)関数一覧\n関数 Wireparadata(name,PD,式,整数,整数,optons)\n機能 Sfbdparadataで作成した曲面について，陰線処理したワイヤーを描く\n説明 PDは，第3引数の式を用いてSfbdparadata()で描いたサーフェスモデルのプロット\nデータ名。第4，第5引数は分割線の数。\n152", "tags": []}
{"title": "Page 153", "content": "options には \"r\",\"m\",\"Wait=n\" が指定できる。\nSfbdparadata() とペアで使い，そのあとに ExeccmdC で描画する。\nC言語の環境がない場合は，ExeccmdC()が使えないので，WireparadataR(name,PD,\n式, 整数, 整数,optons1,optons2) を使う。options2 には陰線の表示方法について\n\"nodisp\" または線種 を指定する。 初期設定は\"nodisp\" 。options2 のみ指定する\nときは，options1に [\"\"] （空文字）を書いておく。\n【例】\nz\nサドル面\nfd=[\"z=x^2-y^2\",\"x=[-2,2]\",\"y=[-2,2]\"];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\ny\nSfbdparadata(\"1\",fd);\nx\nWireparadata(\"1\",\"sfbd3d1\",fd,4,5);\nExeccmdC(\"1\");\n);\nz\n回転放物面：次を変更\nfd=[\"z=4-(x^2+y^2)\",\"x=r*cos(t)\",\n\"y=r*sin(t)\",\"r=[0,2]\",\"t=[0,2*pi]\",\"e\"];\nWireparadata(\"1\",\"sfbd3d1\",fd,5,7);\ny\n球面 x\nfd=[\"p\",\"x=sin(u)*cos(v)\",\"y=sin(u)*sin(v)\",\"z=cos(u)\",\n\"u=[0,pi]\",\"v=[0,2*pi]\",\"s\"];\nif(Ptselected(), z\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nWireparadata(\"1\",\"sfbd3d1\",fd,12,12);\nExeccmdC(\"1\");\n);\nx\ny\n関数 Crvsfparadata(name,PD1,PD2,式)\n機能 曲面による曲線の陰線処理を行う。\n説明 曲線PD1と曲面PD2について，PD1はPD2による陰線処理を行う。\nCrvsfparadata() のあとに ExeccmdC() でまとめて描画する。\nC 言語が使えない場合は，CrvsfparadataR(name,PD1,PD2, 式,options1,options2)\n153", "tags": ["インストール", "初心者向け", "環境構築"]}
{"title": "Page 154", "content": "を使う。options1 は分割数と誤差限界， options2 は陰線の線種。\n【例】回転放物面と座標軸，線分を陰線処理したデータを作って表示する。線分の端点\nA,Bはあらかじめ作図しておく。\nExeccmdC()の 初期設定では陰線は点線で表示される。（下図左）\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,3]]);\nSpaceline([A,B]);\nfd=[\"z=4-(x^2+y^2)\",\"x=R*cos(T)\",\"y=R*sin(T)\",\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"];\nStartsurf();\nSfbdparadata(\"1\",fd);\nCrvsfparadata(\"1\",\"AB3d\",\"sfbd3d1\",fd);\nCrvsfparadata(\"2\",\"ax3d\",\"sfbd3d1\",fd);\nExeccmdC(\"1\");\nExeccmdC()の options2を [\"nodisp\"] にすると，陰線は非表示になる。（下図右）\nExeccmdC(\"1\",[],[\"nodisp\"]);\nz z\nx y x y\n戻り値を使うと，Changestyle3d() を使って陰線のスタイル（線種，色）を変えるこ\nとができる。戻り値の内容は，コンソールに「readoutdata from template3D1.txt :\n」として表示されるので，これをテキストエディタで開き，操作対象を決めればよい。\nたとえば，上の左図で，線分ABの陰線はリストの４番目の crvsfh3d1 なので，\nret=ExeccmdC(\"1\");\nChangestyle3d(ret_4,[\"da\",\"Color=red\"]);\nとすると，赤の破線にすることができる。\n【例】球面で座標軸を陰線処理し，球面の陰線は非表示で表す。\nz\nfd=[\"p\",\"x=2*sin(u)*cos(v)\",\n\"y=2*sin(u)*sin(v)\",\n\"z=2*cos(u)\",\n\"u=[0,pi]\",\"v=[0,2*pi]\",\"\"];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nx\ny\n154", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 155", "content": "Sfbdparadata(\"1\",fd);\nWireparadata(\"1\",\"sfbd3d1\",fd,12,12,[],[\"nodisp]);\nCrvsfparadata(\"1\",\"ax3d\",\"sfbd3d1\",fd);\nExeccmdC(\"1\");\n);\n)関数一覧\n5.4 プロットデータの操作\n関数 Datalist2d()\n機能 画面上のプロットデータのリストを取得する\n説明 画面に描かれているすべてのプロットデータのリストを返す。\n空間図形は，Cinderellaの画面上に射影し表示する。そのため，KeTCindy3Dは，空\n間におけるプロットデータと，画面上に表示するプロットデータの2つを作っている。\nDatalist2d()では，画面上に表示するプロットデータのリストを返す。\n【例】\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,3]]);\nSpaceline(\"1\",[A,B]);\nprintln(\"PD=\"+Datalist2d());\nとすると，コンソールに PD=[ax2d,AB2d] と表示される。ax2d は座標軸のプロット\nデータ ax3d に，AB2d は線分ABのプロットデータ AB3d に対応している。\n関数 Datalist3d()\n機能 空間のプロットデータのリストを取得する\n説明 空間に描かれているすべてのプロットデータのリストを返す\n【例】\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,5]\");\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,3]]);\nSpaceline(\"1\",[A,B]);\nprintln(\"PD=\"+Datalist3d());\nとすると，コンソールにPD=[ax3d,AB3d] と表示される。\n関数 Changestyle3d(リスト,リスト)\n155", "tags": ["KeTCindy", "初心者向け", "基本操作", "構文"]}
{"title": "Page 156", "content": "機能 3Dプロットデータの属性を変更\n説明 第１引数のプロットデータの属性を，第2引数に変更する。\nたとえば，補助線など，画面には描いても TeX に書き出さない線を描画するときは，\noption に [\"notex\"] をつけるが，これをあとから付加したい場合に利用する。プロッ\nトデータはリストにできるので，複数のプロットデータの属性をまとめて変更するこ\nとができて便利である。\n【例】4 つの点で四面体の辺を描き，まとめて notex にする。点 A,B,C,D はとってあ\nるものとする。\nSpaceline(\"1\",[A,B]);\nSpaceline(\"2\",[A,C]);\nSpaceline(\"3\",[B,C]);\nSpaceline(\"4\",[A,D]);\nSpaceline(\"5\",[B,D]);\nSpaceline(\"6\",[C,D]);\nedges=apply(1..6,\"sl3d\"+text(#));\nChangestyle3d(edges,[\"notex\"]);\n関数 Intersectcrvsf(name,PD，式)\n機能 曲線と曲面の交点の座標を求める\n説明 PDは曲線のプロットデータ。式は曲面の式。\n曲面は，Sfbdparadata()でデータを作成し，ExeccmdC()で表示しておく。交点の座\n標は，\"intercrvsf\"+name に代入される。コマンドの実行順序は次の例のようにする。\n【例】回転放物面と線分の交点の座標を表示する。\nPutpoint3d([\"A\",[0,-3,0],\"B\",[0,3,2]]);\nSpaceline(\"1\",[A,B]);\nfd=[\n\"z=4-(x^2+y^2)\",\"x=R*cos(T)\",\"y=R*sin(T)\",\n\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"\n];\nStartsurf();\nSfbdparadata(\"1\",fd);\nIntersectcrvsf(\"1\",\"sl3d1\",fd);\nExeccmdC(\"1\",[\"\"]);\nprintln(\"Intersect=\"+intercrvsf1);\nPointdata3d(\"1\",intercrvsf1);\n実行すると，コンソールに\nIntersect=[[0,1.57,1.52],[0,-1.91,0.36]]\nのように表示され，画面には交点が表示される。\n)関数一覧\n156", "tags": ["LaTeX", "中級者向け", "数式描画"]}
{"title": "Page 157", "content": "関数 IntersectsgpL(点名，線分，面，描画方法)\n機能 空間の線分（直線）と平面の交点を求める。\n説明 引数の線分は線分の端点を \"A-B\" の形もしくは空間座標のリストで与える。\n引数の面は，面内の3点を \"C-D-E\" の形もしくは空間座標のリストで与える。\n戻り値は，[pt,(cid:13)ag1,(cid:13)ag2,val1,val2]\npt：直線と平面の交点の座標。直線と平面が平行で交点が存在しない場合は空リスト\n[]\n(cid:13)ag1 ： 交点が線分内にあれば true ，なければ false\n(cid:13)ag2 ： 交点が面内にあれば true，なければ false\nval1,val2 ： 線分についてのパラメータ値，平面についてのパラメータ値\n描画方法は，\"put\" または \"i\" , \"e\" 。\nput ： 幾何点を作る\ni ： 線分内にあれば点を描く\ne :平面で交われば点を描く\n【例】交点の有無と戻り値\n次のスクリプトでp2 を変えたときの戻り値の flag1, flag2\np1=[1,-1,0];\np2=[0,0,1/2];\np3=[0,1,0];\np4=[-1,0,0];\np5=[0,0,1];\nSpaceline(\"1\",[p1,p2]);\nSpaceline(\"2\",[p3,p4,p5,p3]);\nret=IntersectsgpL(\"P\",[p1,p2],[p3,p4,p5],\"put\");\nprintln(\"flag1=\"+ret_2+\": flag2=\"+ret_3);\np2=[0,0,1/2]; p2=[-1,1,1];\nflag1=false : flag2=trueflag1=true : flag2=true\nz z\nx y x y\n157", "tags": []}
{"title": "Page 158", "content": "p2=[1,2,1]; p2=[1,0,1/2];\nflag1=true : flag2=false flag1=false : flag2=false\nz z\nx y x y\n【例】立方体を平面で切った図を描く。\nいろいろな手順が考えられるが，ここでは次の手順で描く。\n(1) 立方体の頂点をとる。１辺の長さをHnとし，軸上の点をPutaxes3d()でとる。\n(2) 切断面を決める点E,F,Gを辺上の自由点としてPutonseg3d()でとる。\n(3) E,F,Gを通る平面と，辺AC,DYとの交点をとり，M,Nとする。\n(4) 全体を多面体として面データを作って描画する。\nHn=3;\nPutaxes3d(Hn);\nPutpoint3d(\"A\",[Hn,Hn,0]);\nPutpoint3d(\"B\",[Hn,0,Hn]);\nPutpoint3d(\"C\",[Hn,Hn,Hn]);\nPutpoint3d(\"D\",[0,Hn,Hn]);\nPutonseg3d(\"E\",X,B);\nPutonseg3d(\"F\",Z,B);\nPutonseg3d(\"G\",Z,D);\nIntersectsgpL(\"M\",\"A-C\",\"E-F-G\",\"put\");\nIntersectsgpL(\"N\",\"D-Y\",\"E-F-G\",\"put\");\nphd=Concatobj([[O,X,A,Y],[X,A,M,E],[A,Y,N,M],[Y,N,G,Z,O],\n[O,Z,F,E,X],[Z,F,G],[E,M,N,G,F]]);\nVertexEdgeFace(\"1\",phd);\nNohiddenbyfaces(\"1\",\"phf3d1\");\nスクリプトを実行後，点E,F,Gをドラッグして適当な位置の断面にする。\n158", "tags": []}
{"title": "Page 159", "content": "できた図は下図左。これに，次のスクリプトを追加すれば，断面上方の立方体の各辺\nも点線で描かれる。（下図右）\nSpaceline(\"1\",[E,B,F],[\"do\"]);\nSpaceline(\"2\",[B,C,M],[\"do\"]);\nSpaceline(\"3\",[C,D,N],[\"do\"]);\nSpaceline(\"4\",[D,G],[\"do\"]);\n)関数一覧\n関数 Sfcutparadatacdy(name,面,曲面,options)\n機能 平面と曲面の交線を求める。\n説明 面の方程式はx,y,zの方程式，曲面は媒介変数表示で与える。\n【例】円錐を平面y +2z = 3で切った断面を表示する。\nfd=[\n\"p\",\n\"x=r*cos(t)\",\"y=r*sin(t)\",\"z=2*(2-r)\",\n\"r=[0,2]\",\"t=[0,2*pi]\",\"e\"\n];\nStartsurf();\nSfbdparadata(\"1\",fd);\nSfcutparadatacdy(\"1\",\"y+2*z=3\",fd);\nExeccmdC(\"1\");\n関数 Partcrv3d(name，始点，終点，PD)\n機能 部分曲線のプロットデータを作成する\n説明 曲線PDにおいて，始点から終点までのプロットデータを作成する。\n始点と終点は，プロットデータの番号もしくは曲線上にとった点の識別名で示す。\n159", "tags": []}
{"title": "Page 160", "content": "【例】螺旋を描き一部分を太くする。Putoncurve3d() で螺旋上に点 C,D ができるの\nで，ドラッグして適当な位置に移動する。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=100\"]);\nPutoncurve3d(\"C\",\"sc3d1\");\nPutoncurve3d(\"D\",\"sc3d1\");\nPartcrv3d(\"1\",C,D,\"sc3d1\",[\"dr,3\"]);\nLetter([C,\"n2\",\"C\",D,\"n2\",\"D\"]);\nここで，\"sc3d1\" は，螺旋，\"part3d1\" は，部分曲線のプロットデータである。\nz\nD\nC\ny\nx\n【例】稲妻状の螺旋を点線で描き，その一部を実線にする。位置はプロットデータの番\n号で示す。小数にすると曲線を分割している線分の途中の位置になる。\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"Num=10\",\"do\"]);\nPartcrv3d(\"1\",3.3,8.5,\"sc3d1\");\nz\ny\nx\n)関数一覧\n関数 Re(cid:13)ectdata3d(name , PDlist , list , options)\n機能 PDの鏡映を作る\n説明 第 3 引数のタイプにより，点に関する鏡映，直線に関する鏡映，面に関する鏡映を作\nる。戻り値は鏡映したプロットデータのリスト。\n160", "tags": []}
{"title": "Page 161", "content": "【例】点A,B,C,D,Eを空間にとり，三角形ABCの鏡映を作る。\nPutpoint3d([\"A\",[0,-2,0],\"B\",[2,-2,0],\"C\",[1,-2,2],\"D\",[1,0,1],\"E\",[1,0,0]]);\nSpaceline(\"1\",[A,B,C,A]);\nで点をとり，三角形を描いておく。\n点Dに関する鏡映\nReflectdata3d(\"1\",[\"sl3d1\"],[D3d],[\"Color=blue\",\"dr,2\"]);\nz\nC\nD\nA\nB y\nx\n直線DEに関する鏡映\nReflectdata3d(\"1\",[\"sl3d1\"],[D3d,E3d],[\"Color=blue\",\"dr,2\"]);\nz\nC\nD\nA\nB E y\nx\n平面BDEに関する鏡映\nReflectdata3d(\"1\",[\"sl3d1\"],[D3d,E3d,B3d],[\"Color=blue\",\"dr,2\"]);\nz\nC\nD\nA\nB E y\nx\n関数 Re(cid:13)ectpoint3d(座標,リスト)\n機能 点の鏡映点を求める\n説明 第 2 引数のタイプにより，点に関する鏡映，直線に関する鏡映，面に関する鏡映のそ\nれぞれの点の座標を返す。\n161", "tags": []}
{"title": "Page 162", "content": "【例】点A,B,C,Dを空間にとり，点Aの鏡映点の座標を求める。\n点Bに関する鏡映点Reflectpoint3d(A3d,[B3d]);\n直線BCに関する鏡映点 Reflectpoint3d(A3d,[B3d,C3d]);\n平面BCDに関する鏡映点 Reflectpoint3d(A3d,[B3d,C3d,D3d]);\n)関数一覧\n関数 Rotatedata3d(name,PDリスト,vec,角度,options)\n機能 プロットデータを回転\n説明 プロットデータを，原点を始点とするベクトル vec 周りに回転する。複数のプロット\nデータをまとめて回転することができる。戻り値は回転したプロットデータのリスト。\noptions として，中心点（vecの始点），線種を指定することができる。\n【例】コード例と結果を示す。\nXyzax3data(\"\",\"x=[-5,4]\",\"y=[-5,5]\",\"z=[-5,4]\",[\"a\",\"O\"]);\nPutpoint3d([\"A\",[0,-2,0],\"B\",[2,-2,0],\"C\",[1,-2,2],\"D\",[1,-2,3]]);\nSpaceline(\"1\",[A,B,C,A]);\nSpaceline([C,D]);\nRotatedata3d(\"1\",[\"sl3d1\",\"CD3d\"],[0,0,1],pi/2,[\"dr,2\"]);\nLetter([A,\"s\",\"A\",B,\"w\",\"B\",C,\"ne\",\"C\",D,\"ne\",\"D\"]);\nこれを\nRotatedata3d(\"1\",[\"sl3d1\",\"CD3d\"],[0,0,1],pi/2,[[1,0,0],\"dr,2\"]);\nとした場合が右図である。\nz z\nD D\nC C\nB A B A\nO O\nx x\ny y\n関数 Rotatepoint3d(座標, vec , 角度, [点] )\n機能 点の位置を回転する\n説明 点をvecの周りに回転する。角度は弧度法で与える。\n第4引数に点を与えた場合，vecの始点が第4引数の位置になる。デフォルトは原点\n点Aを，(0;(cid:0)1;0)に置いたときの記述例と戻り値\n162", "tags": []}
{"title": "Page 163", "content": "Putpoint3d(\"A\",[0,-1,0]);\nRotatepoint3d(A3d,[0,0,1],pi/2);// 戻り値は [1,0,0]\nRotatepoint3d(A3d,[0,0,1],pi/2,[1,1,0]); // 戻り値は [3,0,0]\n関数 Scaledata3d(name , PDリスト , vec , [中心,options])\n機能 PDを拡大/縮小する。\n説明 点は空間座標，vec は３次元ベクトルで倍率を表す。\n中心とoptionsはリストで与える。\n【例】三角形と円を拡大/縮小する。\nPutpoint3d([\"A\",[0,-2,0],\"B\",[2,-2,0],\"C\",[1,-2,2]]);\nSpaceline(\"1\",[A,B,C,A]);\nSpacecurve(\"1\",\"[cos(t)+1,sin(t)+1,1]\",\"t=[0,2*pi]\",[\"Num=100\"]);\nScaledata3d(\"1\",[\"sl3d1\",\"sc3d1\"],[2,2,2],[[0,0,0],\"dr,2\"]);\nz\ny\nx\n関数 Scalepoint3d(点,vec,中心)\n機能 点の位置を拡大/縮小する。\n説明 点は空間座標，vec は３次元ベクトルで与える。\n【例】コード例と結果を示す。\nPutpoint3d([\"A\",[2,-1,2]]);\npt=Scalepoint3d(A3d,[3,2,4],[1,1,1]);\nPutpoint3d([\"B\",pt]);\n\\vspace{\\baselineskip}\n点Bの位置は(4,-3,5)になる。\n関数 Translatedata3d(name,PD,平行移動量)\n機能 空間プロットデータを平行移動\n説明 PD で表される図形を，平行移動する。戻り値は平行移動したプロットデータのリ\n163", "tags": []}
{"title": "Page 164", "content": "スト。\n【例】曲線 sc3d1 をy軸方向に2だけ平行移動する。\nTranslatedata3d(\"1\",[\"sc3d1\"],[0,2,0]);\n結果として，もとの曲線と平行移動した曲線の2つが描かれる。\n【例】多面体の平行移動\nVertexEdgeFace() で描いた多角形はこの関数では平行移動できないので，面データを\n直接操作して平行移動を行う。\nたとえば，小林・鈴木・三谷による多面体データ polyhedrons obj を用いて正八面体\nを描く場合，次のようにする。y 軸方向に2だけ平行移動する場合である。\nSetdirectory( Dirhead+\"/data/polyhedrons_obj\");\nphd=Readobj(\"r02.obj\",[\"size=2\"]);\nSetdirectory(Dirwork);\ndn=length(phd_1);\nrepeat(dn,s,phd_1_s=phd_1_s+[0,2,0]);\nVertexEdgeFace(\"1\",phd);\nz\nx\ny\n関数 Translatepoint3d(座標，平行移動量)\n機能 空間点を平行移動\n説明 点を平行移動する。\n【例】点A(1,0,0) を(-1,1,1)だけ平行移動した点をBとする。点Aの空間座標は A3d\nで表される。\nPutpoint3d([\"A\",[1,0,0]]);\npt=Translatepoint3d(A3d,[-1,1,1]);\nPutpoint3d([\"B\",pt]);\n)関数一覧\n164", "tags": ["初心者向け", "基本操作"]}
{"title": "Page 165", "content": "5.5 その他\n関数 Perpplane(点名,点,ベクトル，option)\n機能 点を通り線分に垂直な平面上に基準点を2つとる\n説明 引数の点名は，作成する2点で \"A-B\" の形\n第2引数は通る点の名称または座標\n第3引数は法線ベクトル\noption は \"put\"で，2 つの幾何点を作図する。option がない場合は幾何点は作らず，\n無名の点のみを表示する。put 以外の文字列を書いたときは無効な命令とし，何も作\n成されない。\n記述例を示すと\nPerpplane(\"A-B\",\"P\",[1,1,1],\"put\");\n点Pを通り，法線ベクトル(1,1,1)に垂直な平面上に点A,Bをとる。\nPerpplane(\"A-B\",\"P\",P3d-O3d);\n点 P を通り，線分 OP に垂直な平面上に点 A,B をとる。これらにおいて，PA と PB\nは垂直で，PA=PB=1 となる。\n【例】ベクトル p⃗ = (1;1;1) に垂直で点(1;1;1)を通る平面ABCDを描く。\n点A,B,C,Dは作図ツールで適当に取っておく。正確な位置はスクリプトで決める。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nz\nPutpoint3d([\"O\",[0,0,0]]);\nPutpoint3d([\"P\",[1,1,1]]);\nD\nPerpplane(\"E-F\",\"P\",P3d-O3d,\"put\");\nA\nvec1=2*(E3d-P3d);\nvec2=2*(F3d-P3d);\nPutpoint3d([\"A\",P3d+vec1+vec2]);\nP\nPutpoint3d([\"B\",P3d+vec1-vec2]);\nx\nPutpoint3d([\"C\",P3d-vec1-vec2]);\nPutpoint3d([\"D\",P3d-vec1+vec2]); C\nB y\nSpaceline(\"1\",[A,B,C,D,A]);\nArrowdata([O,P],[\"dr,2\"]);\nLetter([P,\"w\",\"P\",A,\"ne\",\"A\",B,\"e\",\"B\",C,\"ws\",\"C\",D,\"nw\",\"D\",]);\nSkeletonparadata(\"1\");\n関数 Perppt(点名，点，点リスト,option)\n機能 平面に下ろした垂線の足を求める\n説明 第 2 引数の点から，第 3 引数の点リストで決まる平面に下した垂線の足を，第１引数\nの名前の点とする。\nオプションは次の通り。 初期設定は \"draw\"\n165", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 166", "content": "draw：点を打つ。幾何点は作らない\nput ：幾何点を作る\nnone：計算だけ行い，点は作図しない。\n【例】原点から点ABCを通る平面に下した垂線の足Hの座標を求める。\nPerppt(\"H\",\"O\",\"A-B-C\",\"none\"); 表示はされない。\nPerppt(\"H\",\"O\",\"A-B-C\"); Ｈの位置に緑色の点が表示される。\nPerppt(\"H\",\"O\",\"A-B-C\",\"put\"); 幾何点Hが作図される。\nいずれの場合も，Hの座標は変数H3d に代入される\n作図例\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-5,5]\",\"z=[-5,4]\");\nPutpoint3d(\"O\",[0,0,0]);\nPutpoint3d(\"A\",[3,0,0]);\nPutpoint3d(\"B\",[0,3,0]);\nPutpoint3d(\"C\",[0,0,3]);\nPerppt(\"H\",\"O\",\"A-B-C\",\"put\");\nSpaceline(\"1\",[A,B,C,A]);\nSpaceline(\"2\",[O,H]);\nLetter([A,\"nw\",\"A\",B,\"ne\",\"B\",C,\"ne\",\"C\",O,\"nw\",\"O\",H,\"ne\",\"H\"]);\nz\nC\nH\nO\nB\nA y\nx\n)関数一覧\n関数 Projcoordpara(座標)\n機能 投影座標を求める\n説明 空間座標を平面に投影した座標を求める。\n戻り値の第１，第 2 要素は Cinderella の描画面の x,y 座標。第 3 要素は xy 平面に垂\n直なzの座標で．投影面からの（符号付）距離を表す。\n【例】Projcoordpara([3,1,2]);\n戻り値は[-0.65,1.7,3.27] のようになる。（視点によって値は異なる）\n166", "tags": ["中級者向け", "図形描画", "関数"]}
{"title": "Page 167", "content": "関数 Readobj(ファイル名)\n機能 objファイルを読み込む。\n説明 小林・鈴木・三谷による整面凸多面体のデータは\nhttp://mitani.cs.tsukuba.ac.jp/polyhedron/\nからダウンロードできる。polyhedrons_obj を，例えば，ユーザホームの ketcindy\n作業フォルダに入れておく。\nSetdirectory(gethome()+\"/ketcindy/polyhedrons_obj\");\npolydt=Readobj(\"r02.obj\");\nSetdirectory(Dirwork);\nこれで，r02.obj データが，変数 polydt に代入される。\nオプションは \"size=n\"で，n倍したデータにする。負の数にすると上下が反転される。\nデータは KeTCindy の data フォルダの中にある。したがって，次のようなスクリプ\nトを書く。読み込むのは一度だけなので， Draw スロットではなく Initialization ス\nロットに置けばよいが，コードの可読性を高めるには Draw スロットでもよい。\nこの多面体データは，頂点リストと面リストからなっているが，頂点リストは座標の\nリストなので，読み込んで表示するときには，点の名称を v1,v2,・・・ とする。\n読み込んだあとの使い方を含めて例を示す。\n【例】polydtを用いて正八面体を描く\nVertexEdgeFace(\"1\",polydt);\nNohiddenbyfaces(\"1\",\"phf3d1\");\n主なデータは次の通り。\n番号 名称 番号 名称 番号 名称\nr01 正四面体 s02 二十・十二面体 s08 斜立方八面体\nr02 正八面体 s03 切頭四面体 s09 斜十二・二十面体\nr03 正六面体 s04 切頭八面体 s10 切頭立方八面体\nr04 正十二面体 s05 切頭立方体 s11 頭切二十・十二面体\nr05 正二十面体 s06 切頭二十面体 s12L/R 変形立方体\ns01 立方八面体 s07 切頭十二面体 s13L/R 変形十二面体\nこの他にn01〜n92まで整面凸多面体がある。\n167", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "外部連携", "構文", "関数"]}
{"title": "Page 168", "content": "関数 Xyzcoord(P.x,P.y,Pz.y)\n機能 主副画面で決まる点の座標\n説明 Cinderellaの描画面上の点が表す空間座標を求める\n点Ｐについて，主画面の点Ｐに対応するのが副画面の Pz である。点 P の 2 次元座標\nは P.x,P.y で，Pz の y 座標は Pz.y で表される。これを引数として与えると，点Ｐの\n空間座標が返される。\n【例】点Aをドラッグして動かしたとき，Aの座標を求める。\nprintln(Xyzcoord(A.x,A.y,Az.y));\nにより，コンソールに座標が表示される。\n関数 Isangle()\n機能 角度スライダ（視点スライダ）の選択判断\n説明 角度スライダを選択しているときは true ，そうでないときは false を返す。\n曲面の描画・陰線処理には時間がかかるため，角度スライダを動かすと反応が悪くな\nる。そこで，角度スライダを選択しているときは曲面の描画をしないようにすること\nで反応がよくなる。\n【例】放物面の描画\n次のようにすると，スライダの点を選んでいる間はワイヤフレームモデルが描かれ，\n画面上の他の部分をクリックして選択状態が解除されると陰線処理された放物面が描\nかれる。\nfd=[\n\"z=4-(x^2+y^2)\",\n\"x=R*cos(T)\",\"y=R*sin(T)\",\n\"R=[0,2]\",\"T=[0,2*pi]\",\"e\"\n];\nif(Isangle(),\nSf3data(\"1\",fd);\n,\nStartsurf();\nSfbdparadata(\"1\",fd);\nCrvsfparadata(\"1\",\"ax3d\",\"sfbd3d1\",fd);\nExeccmdC(\"1\");\n);\n関数 Dist3d(a1,a2)\n機能 空間の2点間の距離を返す\n説明 引数a1,a2 は作図点の名称，空間点の名称のいずれでもよい。\n次の3通りの記法は同じ結果を返す。混在も可\n168", "tags": []}
{"title": "Page 169", "content": "Dist3d(\"A\",\"B\");\nDist3d(A,B);\nDist3d(A3d,B3d);\n関数 Embed(name,PDリスト,式,変数リスト)\n機能 2Ｄ図形の空間内平面へ埋め込む\n説明 第 2 引数は 2 Ｄの図形のプロットデータのリスト，式と変数は平面を記述する式と変\n(cid:0)! (cid:0)! (cid:0)! (cid:0)!\n数。平面は原点voと2つの基本ベクトル vx，vy を用いて，vo+x(cid:1)vx+y(cid:1)vy の形で\n表すことができる。変数（基本ベクトルの係数）はx;y でなく，s;t でもよい。式，変\n数リストともに文字列にする。また，基本ベクトルは直交していなくてもよいし，長さ\nが異なってもよいが，縦横同じスケールの直交座標系にするのがわかりやすいだろう。\n【例】正三角形と外接円を空間内の平面に埋め込む\nXyzax3data(\"\",\"x=[-5,4]\",\"y=[-10,4]\",\"z=[-5,5]\",[\"a\",\"O\"]);\nSpaceline(\"1\",[[3,0,0],[3,6,0],[3,6,6],[3,0,6],[3,0,0]]);\nDefvar(\"vo=[3,3,3]\");\nDefvar(\"vx=[0,1,0]\");\nDefvar(\"vy=[0,0,1]\");\nPutpoint3d([\"A\",[3,3,3]],[\"fix\"]);\nCircledata(\"1\",[[0,0],[2,0]],[\"nodisp\"]);\nListplot(\"1\",[[0,2],[-sqrt(3),-1],[sqrt(3),-1],[0,2]],[\"nodisp\"]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"vo+x*vx+y*vy\",\"[x,y]\");\nPointdata(\"1\",[A],[\"Size=3\"]);\nz\nO\nx\ny\nここで，Embed() で引き渡す vo,vx,vy については，R での変数定義が必要なので\n（KETCindyでは行わない）Defvar() によって定義をしている。\n原点，基本ベクトルを，点を作図して次のようにすることもできる。この場合は\nDefvar() は不要。\n169", "tags": ["KeTCindy", "中級者向け", "初心者向け", "図形描画", "基本操作", "構文", "関数"]}
{"title": "Page 170", "content": "Putpoint3d([\"A\",[3,3,3],\"B\",[0,1,0],\"C\",[0,0,1]]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"A3d+x*B3d+y*C3d\",\"[x,y]\");\nこの場合，点B,Cの座標がそのまま基本ベクトルとなっているが，原点Aに対して描\n画平面上には B,C がないので図がわかりにくい。図をわかりやすくするならば次のよ\nうにする。\nPutpoint3d([\"A\",[3,3,3],\"B\",[3,4,3],\"C\",[3,3,4]]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"A3d+x*(B3d-A3d)+y*(C3d-A3d)\",\"[x,y]\");\nまた，平面を記述するのに，平面の原点と法線ベクトルを用いて Perpplane() を用い\nると，基本ベクトルが生成されるので、これを利用することができる。次のスクリプ\nトでは，Skeletonparadata() を用いて陰線処理もしている。\nXyzax3data(\"\",\"x=[-5,5]\",\"y=[-8,5]\",\"z=[-5,5]\");\nPutpoint3d([\"O\",[0,0,0],\"P\",[1,1,2]]);\nPerpplane(\"E-F\",\"P\",P3d-O3d,\"put\");\nvec1=3*(E3d-P3d);\nvec2=3*(F3d-P3d);\nPutpoint3d([\"A\",P3d+vec1+vec2]);\nPutpoint3d([\"B\",P3d+vec1-vec2]);\nPutpoint3d([\"C\",P3d-vec1-vec2]);\nPutpoint3d([\"D\",P3d-vec1+vec2]);\nSpaceline(\"1\",[A,B,C,D,A]);\nCircledata(\"1\",[[0,0],[2,0]],[\"nodisp\"]);\nListplot(\"1\",[[0,2],[-sqrt(3),-1],[sqrt(3),-1],[0,2]],[\"nodisp\"]);\nEmbed(\"1\",[\"cr1\",\"sg1\"],\"P3d+x*(E3d-P3d)+y*(F3d-P3d)\",\"[x,y]\");\nPointdata(\"1\",[P],[\"Size=3\"]);\nSkeletonparadata(\"1\");\n170", "tags": ["中級者向け", "初心者向け", "図形描画", "基本操作", "関数"]}
{"title": "Page 171", "content": "z\nx\ny\n)関数一覧\n関数 Parapt(座標)\n機能 点の投影面での座標\n説明 引数の空間座標に対応するCinderellaの描画面の座標を返す。\n【例】Parapt([2,1,5]); により，点(2,1,5) が表示されている描画面の座標，たとえ\nば [-0.52,3.27]が返される。\n関数 Invparapt(座標，PD)\n機能 描画面上の座標に対応する曲線上の点の座標を返す\n説明 Cinderellaの描画面上の座標を与えて，それに対応する曲線上の3次元座標を返す。\n空間内の曲線を作図すると，曲線の空間内のプロットデータとともに，描画面上に描\nくためのプロットデータも作られる。これを利用すると，描画面上の位置から曲線上\nの座標を求めることができる。\n【例】螺旋と線分を描いたとき，描画面上での交点（空間内の交点ではない）に対応す\nる螺旋上の点の座標を求め部分曲線を描く。\nSpaceline(\"1\",[[-1,-1,-1],[1,2,3]]);\nSpacecurve(\"1\",\"[2*cos(t),2*sin(t),0.2*t]\",\"t=[0,4*pi]\",[\"do\"]);\ntmp=Intersectcrvs(\"sl2d1\",\"sc2d1\");\np1=Invparapt(tmp_1,\"sc3d1\");\np2=Invparapt(tmp_2,\"sc3d1\");\nPartcrv3d(\"1\",p1,p2,\"sc3d1\");\n171", "tags": []}
{"title": "Page 172", "content": "z\nx\ny\nここで，sl2d1,sc2d1 は線分と螺旋の描画面上での（平面の）プロットデータであ\nる。Intersectcrvs() で平面上の交点の座標（複数あるのでリストが返る）を求め，\nInvparapt() で対応する螺旋上の点の座標を求めて部分曲線を描いている。実際に交\nわる点での部分曲線ではないことに注意。\n関数 Expr3d([位置, 方向, 文字列],option)\n機能 文字列を表示する\n説明 Expr() と同じ書式。「位置（座標）」だけ，空間座標にする。\n関数 Letter3d([位置, 方向, 文字列],option)\n機能 文字列を表示する\n説明 Letter() と同じ書式。「位置（座標）」だけ，空間座標にする。\n【例】三角錐ABCDを描いて，BCの中点に点Mを取ってA,Dと結ぶ。\nA\nPutpoint3d(\"A\",2*[0,0,2*sqrt(6)/3]);\nPutpoint3d(\"B\",2*[1,-1/sqrt(3),0]);\nPutpoint3d(\"C\",2*[0,sqrt(3)-1/sqrt(3),0]);\nPutpoint3d(\"D\",2*[-1,-1/sqrt(3),0]);\nPutpoint3d(\"M\",(B3d+C3d)/2); D\nB\nphd=Concatobj([[A,B,C],[A,B,D],[A,C,D],[B,C,D]]);\nM\nVertexEdgeFace(\"1\",phd); C\nSpaceline(\"1\",[A,M,D]);\nNohiddenbyfaces(\"1\",\"phf3d1\");\nLetter3d([A3d,\"ne\",\"A\",B3d,\"w\",\"B\",C3d,\"se\",\"C\",D3d,\"e\",\"D\"]);\nLetter3d(M3d,\"sw\",\"M\",[\"Color=blue\"]);\n)関数一覧\n関数 Getangle()\n機能 回転角の取得\n説明 スライダで設定できる回転角（視点の位置）TH と FI を取得する。これは，スライダ\n172", "tags": []}
{"title": "Page 173", "content": "の左側に表示されている値である。戻り値は，リスト [TH,FI] で，角は度数法で表さ\nれる。なお，内部変数は，THETAとPHIで，弧度法で表されている。\n回転角の設定については，回転角の設定を参照のこと。\n)関数一覧\n173", "tags": []}
{"title": "Page 174", "content": "6 KeTJS\n6.1 CindyJS と KeTJS\nCindyJS は，Cinderella の作品を HTML にして Web 上で動かせるようにしたものであ\nる。Cinderellaのファイルメニューには，「CindyJSに書き出す」があり，これにより，HTML\nファイルができる。できた HTML ファイルをそのままダブルクリックすると，JavaScript\nで記述されたプログラムが走る。\n現在のところは Cinderella と完全互換ではなく，Web 上では Mouse スロットなどが使え\nなかったり，線種が指定できなかったりする。それでも，自作のボタンは有効なので，これ\nでWeb上のアプリケーションを作ることができる。\nKeTJSでは，CindyScriptにはないKeTCindyの関数（コマンド）を使って，作図アプリ\nケーションを作ることができる。CindyJSの拡張版ともいえる。\nただし，CindyJSがCinderellaと完全互換でないように，KeTJSもKeTCindyと完全互\n換ではない。たとえば，いまのところ空間図形は描けない。それでも，KeTCindy のシステ\nムが入っていない環境でもWebブラウザで教材が使えることのメリットは大きいだろう。な\nお，HTMLなので，TeXのファイルへの書き出し機能はない。\nKeTJSでHTMLを作成するには，いったんCinderellaのファイルメニューから「CindyJS\nに書き出す」を選んで HTML を作成した後，「KeTJS」ボタンをクリックする。「CindyJS\nに書き出す」で書き出された HTML は，実行のための環境設定しか書かれていない。これ\nに，作図プログラムを追加するのが「KeTJS」「KeTJSoff」ボタンである。この２つのボタ\nンの違いについては，次節「動作環境」を参照のこと。\nまた，ひな形として，template2slide.cdy または samplesフォルダの s16 に入っているも\nのを使うとよい。「KeTJS」「KeTJSoff」ボタンが設定してある。\n6.2 KeTJS の動作環境\nCinderellaのファイルメニューから「CindyJSに書き出す」を選ぶと，CSSとランタイム\nへのリンク，および JavaScript のコードが書かれた HTML ファイルが書き出される。CSS\nとランタイムへのリンクは\n<link rel=\"stylesheet\" href=\"https://cindyjs.org/dist/v0.8/CindyJS.css\">\n<script type=\"text/javascript\" src=\"https://cindyjs.org/dist/v0.8/Cindy.js\">\n</script>\nとなっている。つまり，Web 上からランタイム Cindy.js をオンラインでダウンロードし\nて JavaScript を動かすことになる。そのため，ファイルをブラウザで開いたときに少し時間\nがかかる。また，インターネットに接続できないと実行できない。\n174", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "外部連携", "構文", "環境構築"]}
{"title": "Page 175", "content": "この CSS とランタイムは，自分のコンピュータに置くことができ，KeTCindy では，\nKeTCindyのライブラリとともに，ketcindyjsというフォルダ内に入っている。\nまた，JavaScript のコードの方は，これだけでは KeTCindy のコマンドでの作図はでき\nない。\nそこで，KeTJS ボタンをクリックすると，リンク先はそのままで，JavaScriptのコードを\n追加して，ファイル名に json を追加したHTMLファイルを作る。\nまた，KeTJSoff ボタン（オフラインで使う）をクリックすると，ランタイムをダウンロー\nドして，Cinderellaのファイルと同じフォルダに ketcindyjs フォルダを作る。リンク先は次\nのようにketcindyjsに変え，JavaScriptのコードを追加して，ファイル名に jsoffL を追加し\nたHTMLファイルを作る。\n<link rel=\"stylesheet\" href=\"ketcindyjs/CindyJS.css\">\n<script type=\"text/javascript\" src=\"ketcindyjs/Cindy.js\"></script>\nこのとき，関数 Setketcindyjs() で，オプションを \"Local=n\" とすると，ランタイム\nとして，kettex の中にある ketcindyjs を使う。このときはファイル名に jsoff を追加する。\nこのときのリンク先は，Windowsの場合は\n<link rel=\"stylesheet\" href=\"file:///C:/kettex/texlive/texmf-dist/\nscripts/ketcindy/ketcindyjs/CindyJS.css\">\n<script type=\"text/javascript\" src=\"file:///C:/kettex/texlive/\ntexmf-dist/scripts/ketcindy/ketcindyjs/Cindy.js\"></script>\nMacの場合は\n<link rel=\"stylesheet\" href=\"file:////Applications/kettex/texlive/\ntexmf-dist/scripts/ketcindy/ketcindyjs/CindyJS.css\">\n<script type=\"text/javascript\" src=\"file:////Applications/kettex/\ntexlive/texmf-dist/scripts/ketcindy/ketcindyjs/Cindy.js\"></script>\nである。\n注）MacOS 10.14 Mojave の場合，Applications へのパスが通らないことがある。（2019\n年2月16日現在）その場合は，Setketcindyjs() のオプションを \"Local=n\" としない。\nファイル名について\nCinderella のファイルメニューから「CindyJS に書き出す」ときのファイル名は，初期設\n定では作図中のファイル名と同じ。このファイル名は書き出すときに指定できる。\n「KeTJS」ボタンで書き出すときのファイル名は，Setfiles() でファイル名が指定されて\nいなければ，作図中のファイル名と同じ。これが「CindyJS に書き出す」で書き出したとき\nのファイル名で同じでないと，KeTJS の HTML は作成されない。したがって，次のいずれ\nかでファイル名を決める。\n(1) ファイル名は作図中のCinderellaのファイル名と同じにする。\n175", "tags": ["KeTCindy", "中級者向け", "外部連携", "構文"]}
{"title": "Page 176", "content": "このときは，Setfiles() を使わない。\n(2) 作図中のCinderellaのファイル名と別の名前にする。\nこのときは，Setfiles(\"filename\") を使い，CindyJSに書き出すときに\n\"filename\" で書き出す。\n6.3 KeTJS の設定\n関数 Setketcindyjs(options)\n機能 KeTJSの設定\n説明 オプションを設定しない場合（ Setketcindyjs() ）は，初期値が使われる。\nオプションは次の通り。\nLocal y/n 動作環境の設定。初期値は y\nScale 実数 拡大・縮小 初期値は 1\nGrid 実数 グリッドサイズ（mm）\nNolabel 点のリスト ラベルを表示しない点を指定する。\"No\"だけでも可。\n\"Nolabel=all\"とすると，すべての点のラベルが表示されない。\nColor 色名またはコード 背景色の指定。初期値はlightgray([0,0,0,0.17])\nFigure y 書き出す範囲をNE,SWの範囲にする。\nAxes false CindyJSが表示している座標軸を非表示にする。\n【例】すべて設定するとき，次のように記述する。\nSetketcindyjs([\"Local=n\",\"Scale=1.5\",\"No=[A,B]\",\"Color=lightgray\"])\n注１）Cinderella の画面に背景の方眼が描かれているとき，「CindyJS に書き出す」\nで，この方眼も表示される。方眼を消したい場合は，画面下の「グリッドを描く」ツー\nルで非表示にしておく。\n注２）HTML なので，画面に説明文などを表示したい場合は，HTML ファイルを開\nき，下の方の <body> と </body> の間，<div id=\"CSCanvas\"></div> の前後に書\nけば表示される。改行などは，HTMLのタグを用いる。\nコメント化 no ketjs\n機能 KeTJSへの書き出しの有無を指定\n説明 コマンドの末尾に // に続いて書くと，その行は KeTJS に出力しない。ブロック単\n位で非出力にするには，ブロックを //no ketjs on，//no ketjs off ではさむ。\n【例】次のスクリプトは，いずれも画面上では四角形 ABCD と対角線 AD,BC を描い\nている。\n176", "tags": ["KeTCindy", "インストール", "中級者向け", "初心者向け", "外部連携", "構文", "環境構築"]}
{"title": "Page 177", "content": "Listplot(\"1\",[A,B,C,D,A]);\nListplot(\"2\",[A,C]);\nListplot(\"3\",[B,D]);// no ketjs\nこの場合，HTMLでは対角線BDは描かれない。\nListplot(\"1\",[A,B,C,D,A]);\n// no ketjs on\nListplot(\"2\",[A,C]);\nListplot(\"3\",[B,D]);\n// no ketjs off\nこの場合，対角線は2本とも描かれない。\nKeTJSだけで有効 only ketjs\n機能 KeTJSだけに書き込む\n説明 コマンドの先頭に // につけて，行の最後に続けて書くと，その行は KeTJS だ\nけで有効となる。ブロック単位で有効化するには，ブロックを only ketjs on，\nonly ketjs off ではさむ。\n【例】KeTJSだけで入力窓を作る。\nstr=\"x^2\";\n//str=Textedit(50); only ketjs\nPlotdata(\"1\",str,\"x\");\n注）TexteditはKeTJSで入力窓からの入力を得るコマンド\n)関数一覧\n6.4 KeTJS のコマンド\n関数 Ptpos(幾何点)\n機能 幾何点の現在（直前）座標を返す。\n説明 幾何点を制御可能範囲外に移動した場合に保持されるもとの座標\n【例】Ptpos(A)\n関数 Ketcindyjsdata(変数名と値のリスト)\n機能 KeTJSファイルのscript \"csinit\"の最後にデータを書き込む\n説明 Maximaの返り値などKeTJSでは得られないデータを使えるようにする。\n【例】Mxfun(\"1\",\"integrate\",[\"x*sin(x)\",\"x\"]);// no ketjs\nKetcindyjsdata([\"mx1\",mx1]);\nPlotdata(\"1\",mx1,\"x\");\n177", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 178", "content": "関数 Ketcindyjsbody(prependlist,appendlist)\n機能 KeTJSファイルのbodyの最初と最後にスクリプトを追加する。\n【例】Ketcindyjsbody([\"<p,f10>_;_;Title\"],[]);\n=> <p><font size=\"10\">&emsp;&emsp;Title</font></p>\n関数 Animationparam(初期値，速度，範囲)\n機能 アニメーションボタンのパラメータ値を取得する。\n例 ss=Animationparam(0,1,[-60,60]);\n説明\n(cid:15) \"Play\" パラメータ値が初期値にセットされ，変化が始まる。\n(cid:15) \"Stop\" パラメータ値が初期値にセットされ，変化が終わる。\n(cid:15) 速度 パラメータ値の変化速度（秒速）\n(cid:15) 範囲 パラメータ値が端点に達したら停止する。\n関数 Textedit(識別番号)\n機能 KeTJSで入力窓に入れた文字列を取得する。\n説明 KeTJSでの入力窓の作り方\n(1) CindyScreenの\"f(x)\"を選び，適当な初期値を入れてEvaluateを押す。\n注）\"=\"だけを入れて，Setketcindyjsのオプションに\n\"Equal=\"\nを追加すると，KeTJSの入力窓は空欄になる。\n(2) \"要素を動かす\"に戻り，(1)を選んでインスペクタを開く。\n(3) 識別番号を確認（修正）して，フォントサイズを変える。\n【例】識別番号を0とする。\nstr=\"x^2\"; //no ketjs\n//str=Textedit(0); //only ketjs\nPlotdata(\"1\",str,\"x\");\n関数 Movetojs(識別番号または要素名,座標,フォントサイズ);\n機能 KeTJSでテキストボタンの位置とフォントサイズを指定\n例 Movetojs(0,[2,-4],15);\n関数 Setplaybuttons(座標,フォントサイズ [,スペース増加量]);\n機能 KeTJSでPlayなどのボタンの位置とフォントサイズを指定\n例 Setplaybuttons([-3,-4.5],15,[1]);\n注）Play,Pause,Rev,Stopの識別番号が71,72,73,74であることを確認しておく。\n注）スペース増加量の単位はmm，リストで個々に指定することもできる。\n)関数一覧\n178", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 179", "content": "7 付録\n7.1 用語解説\nCinderellaで使っている用語に次のものがある。\nインシデント 点が曲線（直線）上に乗っている状態を表す。\n曲線上に点をとるとインシデントになり，ドラッグしたとき曲線上だけを動く。\nインシデントの状態を変えるには，「点の取り付け/取り外し」ツールを使う。\n幾何要素 Cinderellaの作図ツールで作図した点や直線などの要素\nインスペクタ 幾何要素の大きさや色などの属性を管理するウィンドウ。\n幾何点 幾何要素としての点。マウスドラッグで動かすことができる。\nCindyscriptやKeTCindyのスクリプトで取った点は幾何要素にならないことがある。\n自由点 マウスドラッグで任意に動かすことのできる点。\n固定点 マウスドラッグで移動することのできない点\n2曲線の交点などではない単独の点の場合，インスペクタで点を固定できる。\nスナップ マウスポイントが格子点の近くに来ると格子点上にぴったり移動する。\nCinderellaの画面の下方ツールのうち，磁石アイコンによりこのモードになる。\n7.2 Cinderella の作図ツール\n動かすモードにする ：幾何要素を選択して動かす。これが標準状態\n点を加える ：クリックして点を作る\n直線を加える ：2点間をドラッグする\n線分を加える ：2点間をドラッグする\n中点を加える ：2点間をドラッグする\n交点を加える ：2曲線を順にクリック\n平行線を加える ：直線上から通る点へドラッグ\n垂線を加える ：直線上から通る点へドラッグ\n角の二等分線を加える ：2直線を順にクリック\n円を加える ：中心から半径分ドラッグ\n半径つき円を加える ：中心から半径分ドラッグ\n焦点と通る点で決まる楕円 ：焦点と通る点を順にクリック\n焦点と通る点で決まる双曲線 ：焦点と通る点を順にクリック\n179", "tags": ["KeTCindy", "構文"]}
{"title": "Page 180", "content": "焦点と準線で決まる放物線 ：焦点と準線を順にクリック\n多角形を加える ：多角形の頂点を順にクリック\n角に印をつける ：2直線を順にクリック\n角度を測る ：2直線を順にクリック\n選択した要素を消去する ：選択しておいてツールをクリック\n点をまとめて選択する ：点がすべて選択される\n線分をまとめて選択する ：線分がすべて選択される\n画面ツール（下のツールバー）\n原点を移動する ：画面上の任意の位置でドラッグする\n矩形領域を画面サイズに拡大 ：ドラッグしてできる矩形で領域を選択する\n画面を矩形領域サイズに縮小 ：ドラッグしてで切る矩形で領域を選択する\n格子点にスナップする ：軸と方眼を表示しスナップモードにする\nグリッドを粗く / 細かくする\n7.3 他のテキストエディタの使用\n例えば，cdyファイル名をtemplate.cdyとする．\n(1) template.txtを作成して，template.cdyと同じ場所におく．\n(2) template.cdyのFiguresスロットを以下を記述して実行する．\nKetinit();\nsetdirectory(Dircdy);\nimport(Cdyname()+(cid:13)(cid:13).txt(cid:13)(cid:13));\nsetdirectory(Dirwork);\nWindispg();\n(3) template.txtにスクリプトを書いて保存する．\n例）Putpoint(\"A\",[0,0],A.xy);\nPlotdata(\"1(cid:13)(cid:13),(cid:13)(cid:13)x^2(cid:13)(cid:13),(cid:13)(cid:13)x(cid:13)(cid:13));\n注）template.txtを変更した場合も，cdy画面をクリックすればよい．\n)関数一覧\n180", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 181", "content": "7.4 色名とカラーコード一覧\nname CMYK Color name CMYK Color\ngreenyellow [0.15,0,0.69,0] royalpurple [0.75,0.9,0,0]\nyellow [0,0,1,0] blueviolet [0.86,0.91,0,0.04]\ngoldenrod [0,0.1,0.84,0] periwinkle [0.57,0.55,0,0]\ndandelion [0,0.29,0.84,0] cadetblue [0.62,0.57,0.23,0]\napricot [0,0.32,0.52,0] corn(cid:13)owerblue [0.65,0.13,0,0]\npeach [0,0.5,0.7,0] midnightblue [0.98,0.13,0,0.43]\nmelon [0,0.46,0.5,0] navyblue [0.94,0.54,0,0]\nyelloworange [0,0.42,1,0] royalblue [1,0.5,0,0]\norange [0,0.61,0.87,0] blue [1,1,0,0]\nburntorange [0,0.51,1,0] cerulean [0.94,0.11,0,0]\nbittersweet [0,0.75,1,0.24] cyan [1,0,0,0]\nredorange [0,0.77,0.87,0] processblue [0.96,0,0,0]\nmahogany [0,0.85,0.87,0.35] skyblue [0.62,0,0.12,0]\nmaroon [0,0.87,0.68,0.32] turquoise [0.85,0,0.2,0]\nbrickred [0,0.89,0.94,0.28] tealblue [0.86,0,0.34,0.02]\nred [0,1,1,0] aquamarine [0.82,0,0.3,0]\norangered [0,1,0.5,0] bluegreen [0.85,0,0.33,0]\nrubinered [0,1,0.13,0] emerald [1,0,0.5,0]\nwildstrawberry [0,0.96,0.39,0] janglegreen [0.99,0,0.52,0]\nsalmon [0,0.53,0.38,0] seagreen [0.69,0,0.5,0]\ncarnationpink [0,0.63,0,0] green [1,0,1,0]\nmagenta [0,1,0,0] forestgreen [0.91,0,0.88,0.12]\nvioletred [0,0.81,0,0] pinegreen [0.92,0,0.59,0.25]\nrhodamine [0,0.82,0,0] limegreen [0.5,0,1,0]\nmulberry [0.34,0.9,0,0.02] yellowgreen [0.44,0,0.74,0]\nredviolet [0.07,0.9,0,0.34] springgreen [0.26,0,0.76,0]\nfuchsia [0.47,0.91,0,0.08] olivegreen [0.64,0,0.95,0.4]\nlavender [0,0.48,0,0] rawsienna [0,0.72,1,0.45]\nthistle [0.12,0.59,0,0] sepia [0,0.83,1,0.7]\norchid [0.32,0.64,0,0] brown [0,0.81,1,0.6]\ndarkorchid [0.4,0.8,0.2,0] tan [0.14,0.42,0.56,0]\npurple [0.45,0.86,0,0] gray [0,0,0,0.5]\nplum [0.5,1,0,0] black [0,0,0,1]\nviolet [0.79,0.88,0,0] white [0,0,0,0]\n注）lightgray [0,0,0,0.15], offwhite [0,0,0,0.3], cindycolor [0.66,0,69,0.71]を追加\n181", "tags": []}
{"title": "Page 182", "content": "7.5 点の作図についての比較表\n関数 戻り値を使う 描画する 幾何点を作る TeXに出力\nPointdata - ⃝ - ⃝\nPutpoint - - ⃝ -\nPutintersect - - ⃝ -\nPutonCurve - - ⃝ -\nPutonLine - - ⃝ -\nPutonSeg - - ⃝ -\nRe(cid:13)ectpoint ⃝ - - -\nRotatepoint ⃝ - - -\nScalepoint ⃝ - - -\nTranslatepoint ⃝ - - -\nPointdata3d - ⃝ - ⃝\nPutpoint3d - - ⃝ -\nIntersectcrvsf △ - ⃝ -\nIntersectsgpL - ⃝ ⃝ -\nInvparapt ⃝ - - -\nParapt ⃝ - - -\nPerpplane - ⃝ ⃝ -\nPerppt - ⃝ ⃝ -\nPointdata3d - ⃝ - ⃝\nPutonCurve3d - - ⃝ -\nPutonSeg3d - - ⃝ -\nRe(cid:13)ectpoint3d ⃝ - - -\nRotatepoint3d ⃝ - - -\nScalepoint3d ⃝ - - -\nTranslatepoint3d ⃝ - - -\n注) Intersectcrvsf は戻り値ではなく，プロットデータを使う。\n182", "tags": []}
{"title": "Page 183", "content": "8 関数一覧\n【目次】に戻る\n【設定・定義】\nAddax(0/1) 座標軸を描くかどうかを定める\nAddpackage(package) プレビュー用のパッケージを追加\nChangework(パス) 作業ディレクトリを変更する\nDeffun(関数名 , 定義list ) 関数を定義する\nDe(cid:12)necolor(色名 , 定義list ) ユーザー定義色の設定\nDefvar(文字列) 変数を定義する\nDrwxy() 座標軸を先に描く\nFontsize(記号) フォントサイズを設定する\nKetinit(options) KETCindyを初期化する\nInitglist ketlib スロットの描画データを追加する\nPtsize(数) 表示する点の大きさを設定する\nSetarrow(size,angle,pos,cut,style 矢線の形状を設定する\nSetax(list) 座標軸の書式を設定する\nSetcolor(color,options) Windispgでの描画色を設定する\nSet(cid:12)les((cid:12)lename) 出力するファイル名を設定する\nSetparent((cid:12)lename) Parentで出力するファイル名を設定する\nSetmarklen(数) 軸の目盛の長さを設定する\nSetorigin(座標) 表示する座標軸の原点の位置を設定する\nSetpen(数) 線の太さを設定する\nSetpt(数) 表示する点の大きさを設定する\nSetscaling(数) 縦方向の倍率を設定する\nSetunitlen(数) 単位長を設定する\nSetwindow() 描画領域を設定する\nUsegraphics() グラフィクスパッケージを\"pict2e\" に変更する\n【描画】\nDraw(cid:12)gures(name ,(cid:12)glist,optionlist) 複数のデータのスタイルをリストで与えて描画する\nAnglemark(点list, options) 角の印を入れる\nSetarrow(options) 矢線をスタイルを設定する\nArrowdata(name.[始点,終点],options) 2点間を結ぶ矢線を描く\nArrowhead(点,方向,options) 点に矢じりだけを描く\nBezier(name, list,list,options ) 単独のベジェ曲線を描く\n183", "tags": ["KeTCindy", "中級者向け", "図形描画", "外部連携", "構文", "関数"]}
{"title": "Page 184", "content": "Beziersmooth(name , list,options ) なめらかなベジェ曲線を描く。その１\nBeziersym(name , list,options ) なめらかなベジェ曲線を描く。その2\nBowdata(点list,options) 弓形を描く\nBspline(name，list，options ) 2次 Bスプライン曲線を描く\nChangestyle(PD list, options) 描画オプションを変更する\nCircledata(name,点list,options) 円または正多角形を描く\nCRspline(name，list，options ) 単独のCatmull-Rom スプライン曲線を描く\nDeqplot(name,式,変数名,初期値,options]) 微分方程式の解曲線を描く\nDot(cid:12)lldata(name , 方向, PD , options) 領域に点を敷き詰める\nDrawsegmark(name,list,options) 線分に印をつける\nEllipseplot(name,list,str,options) 楕円を描く\nEnclosing(name , [位置，方向，数式]) 複数の曲線から閉曲線を描く\nExpr([座標,位置,文字列],options) TEX数式を書く\nExprrot(位置，向き，文字列) 傾いたTEX数式を書く\nFourierseries(name,係数,周期,項数) フーリエ級数を描く\nFramedata(name , list) 矩形を描く\nHatchdata(name , 方向, PD , options) 領域に斜線を引く\nHtickmark([横座標 , 方向 , 文字]) 横軸に目盛りを描く\nHyperbolaplot(name,list,str,options) 双曲線を描く\nImplicitplot(name,str,,str,str,options) 陰関数のグラフを描く\nInvert(PD) プロットデータの点を逆順にする（reverseと同じ）\nJoincrvs（name, PDlist, options) 2つのプロットデータをつなげたデータを作る\nLetter([座標,位置,文字列],options) 文字列を表示する\nLetterrot(座標,方向,移動量,文字列) 文字列を回転して表示する\nLineplot(name,2点のlist,options) 2点を結ぶ直線を描く\nListplot(name,点のlist,options) 点を線分で結ぶ\nMkbeziercrv(name,list,options) 作図した点を使ってベジェ曲線を描く\nMkbezierptcrv(list，options ) 制御点を自動配置してベジェ曲線を描く\nMkcircles() 幾何円のすべてのPD を作成する\nMksegments() 幾何線分のすべてのPD を作成する\nOspline(list，list，options ) 大島のスプライン曲線を描く\nOvaldata(name, 点list,options) 角を丸くした矩形を描く\nParabolaplot(name,list,str,options) 放物線を描く\nParamark(点list,options) 角の印を入れる\nParamplot(name,式,変数と定義域,options) 媒介変数で表された曲線を描く\nPolarplot(name,式,変数と定義域,options) 極座標表示の曲線を描く\nPartcrv(name,点1,点2,PD) 部分曲線を描く\n184", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 185", "content": "Periodfun(定義式,周期,options) 周期関数のグラフを描く\nPlotdata(name,式,変数と定義域,options) 関数のグラフを描く\nPointdata(name,点list,options) 点データを作る\nPolygonplot(name,点list,整数,options) 正多角形を描く\nPutintersect(点名,PD1,PD2) 2曲線の交点を作る\nPutoncurve(name,PD,初期値) 曲線上に点を作る\nPutonline(点名,座標1,座標2) 直線上に点を作る\nPutonseg(点名,座標1,座標2) 線分上に点を作る\nPutpoint(点名,座標1,座標2) 点を作る\nRe(cid:13)ectdata(name,PD,点list,options) プロットデータの鏡映を作成\nRe(cid:13)ectpoint(点,対称点/対称軸) 点の鏡映を作成\nRotatedata(name,PD,角度,中心,options) プロットデータを回転する\nRotatepoint(点,角度,中心) 点の位置を回転する\nRulerscale(点,list,list) 目盛を打つ\nScaledata(name,PD,x,y,中心,options) 点を拡大・縮小する\nScalepoint(点,比率ベクトル,中心) 点の位置を拡大・縮小する\nSegmark(name,list,options) 線分に印をつける\nShade（PDlist , 数) 閉曲線の内部にシェードをかける\nTangentplot(name,PD, 位置) 曲線の接線を引く\nTranslatedata(name,PD,ベクトル,options) プロットデータを平行移動する\nTranslatepoint(点,ベクトル) 点を平行移動する\nVtickmark([横座標 , 方向 , 文字]) 縦軸に目盛りを描く\n【作表】\nChangetablestyle(罫線list, options) Table の罫線の描画オプションを変更する。\nFindcell(列番号, 行番号) セルの情報listを返す\nPutcell (列番号, 行番号, 位置, 文字) セルに文字列を入れる\nPutcellexpr (列番号, 行番号, 位置, 文字) セルに数式を入れる\nPutcol (列番号, 位置，文字列list) １列に順に文字を書き入れる\nPutcolexpr (列番号, 位置，文字列list) １列に順にTEX書式の文字を書き入れる\nPutrow (行番号, 位置，文字列list) １行に順に文字を書き入れる\nPutrowexpr (行番号, 位置，文字列list) １行に順にTEX書式の文字を書き入れる\nTabledata(\"\" , 縦横 ,除外 , options) 表の枠を作成する\nTabledatalight(\"\" , 縦横 ,除外 , options) 幾何点を持たない表の枠を作成する\nTgrid(セルラベル) セル（格子点）の座標を返す\nTlistplot(セルラベル1,セルラベル2) セルに斜線を引く\n【値の取得と入出力】\nAsin(real),Acos(real) 逆三角関数の値を返す\n185", "tags": ["LaTeX", "中級者向け", "図形描画", "数式描画", "関数"]}
{"title": "Page 186", "content": "Crossprod(list,list) ベクトルの外積を計算する\nDerivative(関数式,変数,値) 関数の微分係数を求める\nDotprod(list,list) ベクトルの内積を計算する\nExtractdata(データ名,属性) ReadOutDataで読み込んだデータに属性をつける。\nFindarea(PD) プロットデータで囲まれる部分の面積を求める\nFindlength(PD) プロットデータで描く曲線の長さを求める\nIntegrate(関数式,変数,範囲,options) 関数の定積分値を求める\nIntersectcrvs(PD1,PD2) プロットデータの交点の座標listを返す\nIntersectcrvsPp(PD1,PD2) プロットデータの交点のパラメータlistを返す\nInversefun(関数式,範囲,値) 逆関数値を求める\nNearestpt(PD,PD) 2曲線間の最も近い点を取得する\nNearestptcrv(点,PD) 点に一番近い曲線上の点を取得する\nNumptcrv(PD) 曲線PD の節点データの個数を取得する\nParamonCurve(PD,n,PtL) PD上にある点P のデータを取得する\nPointoncrv(数,PD) パラメータ値をもつプロットデータ上の点\nPtcrv(n,PD) 曲線PD のn 番目の節点を取得する\nPtstart(PD) プロットデータの始点・終点を取得する\nReadOutData(ファイル名) 外部データをPDとして読み込む\nReadcsv(name,(cid:12)lename,option) csvファイルを読む\nReadlines(name,(cid:12)lename,option) テキストファイルを1行ずつ読む\nSqr(real) 平方根を返す\nViewtex() TEXのソースファイルを書き出す。引数なし\nWorkprocess() 作図の経過を取得する\nWriteOutData() PDデータを書き出す\n【その他】\nAssign(文字列) 文字列中のある文字を値で置き換える\nBBdata(ファイル名) 画像のサイズを求める\nCindyname() 作図しているファイル名を取得する。\nColorcode(文字1，文字2,color) カラーコードの変換\nDqq(文字列) 文字列の前後に\"をつける。\nFactorial(n) nの階乗を計算する。\nNorm(ベクトル) ベクトルの大きさを計算する。\nFigpdf(option) 出力枠サイズのPDFを作る\nHelp(str) コマンドヘルプを表示する\nHelpkey(str) キーワードで関数を検索する\nIndexall(str1,str2) 文字列 str1 から str2 を検索しその位置をすべて返す\nOp(n,list) listまたは文字列から要素を抜き出す\n186", "tags": ["LaTeX", "中級者向け", "外部連携", "数式描画"]}
{"title": "Page 187", "content": "Isptselected(点名) 点が選択されていればtrueを返す\nPtselected(点名) 点が選択されていればtrueを返す\nReparse(文字列（リスト） 評価して実数化する\nSlider() スライダを作る\nSprintf(実数,長さ) 小数点以下の長さを固定した文字列に変換\nStrsplit(文字列,文字) 文字列を分解する。\nTexcom(コード) TEXのコードを書き出す\nTextformat(数,桁数) 小数点以下の桁数を指定して数値を文字列化する\nWindispg() 定義されたプロットデータを描画面に描く\nFracform(数,分母リスト) 簡易TeX-like書式の文字列を返す\nTotexform(TeX-like書式) TeX書式の文字列を返す\nTocindyform(TeX-like書式 Cindy書式の文字列を返す\n【Ｒとの連携】\nBoxplot(名前,データ,位置,高さ,option) 箱ひげ図を描く\nRfun(変数名,コマンド,引数, option) Rの1つコマンドを実行して結果を返す\nCalcbyR(変数名,コマンド列, option) Rのコマンド列を実行して結果を返す\nHistplot(name,data) ヒストグラムを描く\nPlotdataR(name,式,変数) Rの関数のグラフを描く\nPlotdiscR(name,式,変数) 離散型のグラフを描く\nScatterplot(name,(cid:12)lename,option) 2次元データを読み込み，散布図を描く\n【Maximaとの連携】\nCalcbyM(name,list,option) Maximaのスクリプトを実行する\nMxbatch(list) Maximaの外部スクリプト用コマンドを作る\nMxfun(name,式,list,option) Maximaの関数を実行する\nMxtex(num,式) 式をTeX書式にする\n【Risa/Asirとの連携】\nAsirfun(name,式,list,option) Risa/Asirの関数を実行する\nCalcbyA(name,list,option) Risa/Asirのスクリプトを実行する\n【FriCASとの連携】\nCalcbyF(name,list,option) FriCASのスクリプトを実行する\nFrfun(name,式,list,option) FriCASの関数を実行する\n【MeshLabとの連携】\nMkobjcmd(name,式,option) 厚みを持たない曲面のコマンドを作成\nMkobjcrvcmd(name,PD,option) 空間曲線のコマンドを作成\nMkobjnrm(name,式) 法線ベクトルのデータを作成\nMkobjplatecmd(name,面データ,options) 面を描く\nMkobjpolycmd(name,PD,options) 多面体を描く\n187", "tags": ["中級者向け", "図形描画", "外部連携", "関数"]}
{"title": "Page 188", "content": "Mkobjsymbcmd(PD, 実数,実数,vec,vec) 文字等のコマンドを作成\nMkobjthickcmd(name,式) 厚みを持つ曲面のコマンドを作成\nMkviewobj(name,PD, options) obj ファイルを作成\n【表計算ソフトとの連携】\nDispmat(list) listの内容を行列型にコンソールに表示する\nTab2list(str，option) str の内容をlistに変換する\nWritecsv(namelist,data,option) dataの内容をcsvファイルに書き出す\n【アニメーション】\nSetpata(str) パラパラ動画のタイトル指定\n【スライド】\nSettitle(タイトルlist,options) スライドのタイトル設定\n【KeTCindy3D設定・定義】\nKetinit3d() KeTCindy3Dの使用宣言\nIsangle 角度スライダが選択されているか\nStart3d() 3Dの開始\nSetangle 回転角の設定\nGetangle 回転角の取得\nStartsurf 曲面描画の初期化\n【KeTCindy3D描画】\nBezier3d(name, list, list) 空間ベジェ曲線を描く\nChangestyle3d(list, list) 3dプロットデータの属性を変更\nConcatobj(list,option) いくつかのobjデータを結合\nCrvsfparadata(name,PD,PD2,式,opt,opt) 曲線の曲面による陰線処理\nDatalist2d() 画面に描かれているすべてのプロットデータ\nDatalist3d() 画面に描かれているすべてのプロットデータ\nDist3d(点名,点名) 空間の2点の距離\nEmbed(name,PD,式) 埋め込みデータ作成\nExeccmdC(name,options1,options2) C言語で命令実行\nExpr3D([座標,位置,文字列],options) 文字列を表示する\nIntersectcrvsf(name,PD,式) 曲線と曲面の交点を求める\nIntersectsgpL(点名,線分,面,描画方法) 空間の直線と平面の交点\nInvparapt(座標,PD) 描画面座標に対応する曲線上の座標\nLetter3D([座標,位置,文字列],options) 文字列を表示する\nMkbezierptcrv3d(点list) 制御点を自動的にとる空間ベジェ曲線\nNohiddenbyfaces(name,PD,PD,opt1,opt2) 多面体と空間曲線を陰線処理\nParapt(座標) 点の投影面での座標\nPartcrv3d(name,始点,終点,PD) 曲線PDの部分曲線を作る\n188", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "外部連携", "構文"]}
{"title": "Page 189", "content": "Perpplane(点名, 点, ベクトル,option) 点を通り垂直な平面上の基準点\nPerppt(点名,点,点list,option) 平面に下ろした垂線の足\nPhparadata(name,name2,options) 多面体を陰線処理して描く\nPointdata3d(名前,点list,options) 空間点のデータを作成する\nPutaxes3d([x,y,z]) 軸上に幾何点をとる\nPutoncurve3d(点名,PD) 空間曲線上に点をとる\nPutonseg3d(点名,点1,点2) 線分上に点をとる\nPutpoint3d(list,option) 空間点をとる\nReadobj(ファイル名) objファイルを読み込む\nRe(cid:13)ectdata3d(点,PDlist,list,options) PDを鏡映\nRe(cid:13)ectpoint3d(点,list) 点を鏡映\nRotatedata3d(name,PD,vec,角度,点) プロットデータを回転\nRotatepoint(点 , vec , 角度 , 点) 点を回転\nScaledata3d(点, vec, 中心) プロットデータを拡大/縮小\nScalepoint3d(点, vec, 中心) 点の位置を拡大/縮小\nSf3data(name, list,options) 陰線処理なしの空間曲面を描く\nSfbdparadata(name, 式,options) 曲面を陰線処理して描く\nSfcutparadatacdy(name,面,曲面,options) 平面と曲面の交線を求める。\nSkeletonparadata(name,PD,PD,options) スケルトン処理のデータ作成\nSpacecurve(name, 式, 定義域,options) 空間曲線のデータ作成\nSpaceline(name,list) 空間の折線データ作成\nTranslatedata3d(name,PD, 平行移動量) 空間プロットデータを平行移動\nTranslatepoint3d(座標,平行移動量) 空間点を平行移動\nVertexEdgeFace(面データ,option) 頂点と面から辺を求め，辺を描く\nWireparadata(name,PD,式,int,int,opt,opt) 曲面のワイヤフレームを陰線処理\nXyzax3data(name,文字,文字,文字,options)座標軸の表示\nXyzcoord(P.x,P.y,Pz.y) 主副画面で決まる点の座標\n【KeTJS】\nPtpos(幾何点) 幾何点の現在（直前）座標\nSetketcindyjs(options) KeTJSの設定\nKetcindyjsdata(変数名と値のリスト) script \"csinit\"にデータを書き込む\nKetcindyjsbody(prependlist,appendlist) bodyの最初と最後にスクリプトを追加\nAnimationparam(初期値，速度，範囲) アニメーションボタンのパラメータ値を取得\nTextedit(識別番号) KeTJSで入力窓に入れた文字列を取得\nMovetojs(要素名,座標,フォントサイズ) Textボタンの位置とフォントサイズを設定\nSetplaybuttons(座標,サイズ [, スペース]) Playなどのボタンの位置とフォントサイズを設定\n189", "tags": ["KeTCindy", "アニメーション", "上級者向け", "中級者向け", "外部連携", "構文"]}
